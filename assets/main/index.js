System.register("chunks:///_virtual/HUDController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts', './gfJackpotInfo.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './DataStore1985.ts', './BetHandler1985.ts', './BonusController1985.ts', './Config1985.ts', './ShootController1985.ts', './InfoUserController1985.ts', './SideMenu1985.ts', './SkillUltimateController1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sys, Component, gfBaseEvents, registerEvent, removeEvents, GfJackpotInfo, EventsCode1985, ReferenceManager1985, DataStore1985, BetHandler1985, BonusController1985, Config1985, ShootController1985, InfoUserController1985, SideMenu1985, SkillUltimateController1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      GfJackpotInfo = module.GfJackpotInfo;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      BetHandler1985 = module.BetHandler1985;
    }, function (module) {
      BonusController1985 = module.BonusController1985;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      ShootController1985 = module.ShootController1985;
    }, function (module) {
      InfoUserController1985 = module.InfoUserController1985;
    }, function (module) {
      SideMenu1985 = module.SideMenu1985;
    }, function (module) {
      SkillUltimateController1985 = module.SkillUltimateController1985;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;

      cclegacy._RF.push({}, "0078f4zr7xGEa/WyRngFAtb", "HUDController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HUDController1985 = exports('HUDController1985', (_dec = ccclass('HUDController1985'), _dec2 = property(ShootController1985), _dec3 = property(GfJackpotInfo), _dec4 = property(BonusController1985), _dec5 = property(BetHandler1985), _dec6 = property(SideMenu1985), _dec7 = property(InfoUserController1985), _dec8 = property(SkillUltimateController1985), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HUDController1985, _Component);

        function HUDController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "ShootController", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "jackpotInfo", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bonusController", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "betHandler", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sideMenu", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "infoUSer", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "skillUltimateController", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = HUDController1985.prototype;

        _proto.onLoad = function onLoad() {
          ReferenceManager1985.instance.setData({
            HUDControllerLayer: this.node
          });
          this.node["getShootController"] = this.getShootController.bind(this);
          this.node["getJackpotInfo"] = this.getJackpotInfo.bind(this);
          this.node["getBonusController"] = this.getBonusController.bind(this);
          this.node["getBetHandler"] = this.getBetHandler.bind(this);
          this.node["getInfoUser"] = this.getInfoUser.bind(this);

          this._onUpdatePositionSwitchHUD(); //SHOOT CONTROL


          if (!sys.isNative && !sys.isMobile) {
            registerEvent(EventsCode1985.CONTROL.USER_MOUSE_DOWN, this._onUserMouseDown, this);
            registerEvent(EventsCode1985.CONTROL.USER_MOUSE_UP, this._onUserMouseUp, this);
          } else {
            registerEvent(EventsCode1985.CONTROL.USER_START_TOUCH, this._onUserStartTouchFire, this);
            registerEvent(EventsCode1985.CONTROL.USER_END_TOUCH, this._onUserEndTouchFire, this);
          }

          registerEvent(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE, this._onPauseAutoFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE, this._onResumeAutoFire, this);
          registerEvent(EventsCode1985.HOT_KEY_EVENT.AUTO_FIRE, this._onAutoFireMode, this);
          registerEvent(EventsCode1985.GAME_LAYER.AIRCRAFT_DIE, this._onAirCraftDie, this);
          registerEvent(EventsCode1985.GAME_LAYER.CATCH_FISH_BY_SKILL_ULTIMATE, this._onLockFeatureFire, this);
          registerEvent(EventsCode1985.GAME_LAYER.OPEN_FEATURE_FIRE, this._onFeatureFire, this);
          registerEvent(EventsCode1985.GAME_LAYER.LOCK_FIRE, this._onLockFeatureFire, this); //BET CONTROL

          registerEvent(EventsCode1985.HOT_KEY_EVENT.INCREASE_BET, this._onIncreaseBet, this);
          registerEvent(EventsCode1985.HOT_KEY_EVENT.DECREASE_BET, this._onDecreaseBet, this);
          registerEvent(EventsCode1985.HOT_KEY_EVENT.OPEN_MENU, this._onOpenMenu, this); //BONUS CONTROL

          registerEvent(EventsCode1985.HUD.UPDATE_STREAK_INFO, this._onUpdateStreakInfo, this);
          registerEvent(EventsCode1985.HUD.RESUME_STREAK_INFO, this._onResumeStreakInfo, this);
          registerEvent(EventsCode1985.EFFECT_LAYER.PLAY_BONUS_EFFECT, this._onPlayBonusEffect, this); //SIDE MENU CONTROL

          registerEvent(EventsCode1985.HUD.UPDATE_POSITION_HUD_SKILL, this._onUpdatePositionSwitchHUD, this); //INFO USER CONTROL

          registerEvent(EventsCode1985.GAME_LAYER.PLAYER_UPDATE_SHIELD, this._setEnergyShield, this);
          registerEvent(EventsCode1985.HUD.ADD_GOLD_REWARD, this._onAddGoldReward, this);
          registerEvent(EventsCode1985.HUD.ADD_TO_DISPLAY_WALLET, this._onAddToDisplayWallet, this);
          registerEvent(EventsCode1985.GAME_LAYER.AIRCRAFT_REVIVAL, this._onPlayAnimSpaceShipRevival, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this._onUpdateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.GAME_UPDATE_WALLET, this._onlPlayerUpdateWallet, this); //SKILL CONTROL

          registerEvent(EventsCode1985.HUD.HUD_ACTIVE_LASER, this._onActiveLaser, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, this.onReceiveLaser, this); //OTHER

          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this._onExitGameRoom, this);
        };

        _proto.getShootController = function getShootController() {
          return this.ShootController;
        };

        _proto.getJackpotInfo = function getJackpotInfo() {
          return this.jackpotInfo;
        };

        _proto.getBonusController = function getBonusController() {
          return this.bonusController;
        };

        _proto.getBetHandler = function getBetHandler() {
          return this.betHandler;
        };

        _proto.getInfoUser = function getInfoUser() {
          return this.infoUSer;
        };

        _proto._onUserMouseDown = function _onUserMouseDown() {
          this.ShootController.setIsHold(true);
          this.ShootController.onSendFire();
        };

        _proto._onUserMouseUp = function _onUserMouseUp() {
          var selfInfo = DataStore1985.instance.getSelfInfo();

          if (selfInfo.skillLock === Config1985.instance.SkillConfig.LASER && !selfInfo.isLockGun) {
            this.ShootController.playerSendFireSkill();
          } else {
            this.ShootController.setIsHold(false);
            this.ShootController.onStopSendFire();
          }
        };

        _proto._onUserStartTouchFire = function _onUserStartTouchFire(data) {
          this.ShootController.setIsHold(true);
          this.ShootController.onUserStartTouchFire(data);
        };

        _proto._onUserEndTouchFire = function _onUserEndTouchFire(data) {
          this.ShootController.setIsHold(false);
          this.ShootController.onUserEndTouchFire(data);
        };

        _proto._onAutoFireMode = function _onAutoFireMode() {
          this.ShootController.onAutoFireMode();
        };

        _proto._onPauseAutoFire = function _onPauseAutoFire() {
          this.ShootController.pauseAutoFire();
        };

        _proto._onResumeAutoFire = function _onResumeAutoFire() {
          this.ShootController.resumeAutoFire();
        };

        _proto._onIncreaseBet = function _onIncreaseBet() {
          this.betHandler.onIncreaseBet();
        };

        _proto._onDecreaseBet = function _onDecreaseBet() {
          this.betHandler.onDecreaseBet();
        };

        _proto._onOpenMenu = function _onOpenMenu() {
          this.sideMenu.hideSideBar();
        };

        _proto._onPlayBonusEffect = function _onPlayBonusEffect(data) {
          this.bonusController.showAnimation(data);
        };

        _proto._onResumeStreakInfo = function _onResumeStreakInfo(data) {
          this.bonusController.resumeStreak(data);
        };

        _proto._onAirCraftDie = function _onAirCraftDie(data) {
          // if(data.DeskStation == DataStore1985.instance.getSelfDeskStation()){
          //     this.bonusController.playAnimResetStreak();
          // }
          this.ShootController.lockFeatureFire(data);
        };

        _proto._onLockFeatureFire = function _onLockFeatureFire(data) {
          this.ShootController.lockFeatureFire(data);
        };

        _proto._onUpdateStreakInfo = function _onUpdateStreakInfo(data) {
          this.bonusController.showAnimation(data);
        };

        _proto._onUpdatePositionSwitchHUD = function _onUpdatePositionSwitchHUD() {
          this.ShootController.updatePositionButton();
          this.betHandler.onUpdatePositionBySetting();
          this.skillUltimateController.onUpdatePositionBySetting();
        };

        _proto._setEnergyShield = function _setEnergyShield(data) {
          this.infoUSer.setEnergyShield(data);
        };

        _proto._onUpdateListPlayer = function _onUpdateListPlayer(data) {
          this.infoUSer.updateListPlayer(data);
          this.betHandler.updateBetValue();
        };

        _proto._onlPlayerUpdateWallet = function _onlPlayerUpdateWallet(data) {
          this.infoUSer.playerUpdateWallet(data);
        };

        _proto._onFeatureFire = function _onFeatureFire(data) {
          this.ShootController.openFeatureFire(data);
        };

        _proto._onPlayAnimSpaceShipRevival = function _onPlayAnimSpaceShipRevival(data) {
          this.infoUSer.onSpaceShipRevival(data);
        };

        _proto._onAddGoldReward = function _onAddGoldReward(reward) {
          this.infoUSer.addGoldReward(reward);
        };

        _proto._onAddToDisplayWallet = function _onAddToDisplayWallet(wallet) {
          this.infoUSer.addToDisplayWallet(wallet);
        };

        _proto._onActiveLaser = function _onActiveLaser(data) {
          this.ShootController.activeLaser(data);
        };

        _proto.onReceiveLaser = function onReceiveLaser(isLock) {
          if (isLock === void 0) {
            isLock = false;
          }

          this.betHandler.lockBet(isLock);
        };

        _proto._onExitGameRoom = function _onExitGameRoom() {
          this.ShootController.reset();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return HUDController1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ShootController", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jackpotInfo", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bonusController", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betHandler", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sideMenu", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "infoUSer", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "skillUltimateController", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkParser.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfNetworkGameEvent.ts', './gfNetworkEvent.ts', './logger.ts', './gfNetworkKeyMap.ts', './gfNetworkSocket.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, gfNetworkGameEvent, gfNetworkEvent, logger, gfNetworkKeyMap, gfNetworkSocket;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfNetworkEvent = module.default;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      gfNetworkKeyMap = module.default;
    }, function (module) {
      gfNetworkSocket = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "009ce5Y0f9PDIyDMIJdXxSo", "gfNetworkParser", undefined);

      var gfNetworkParser = exports('default', /*#__PURE__*/function () {
        function gfNetworkParser() {
          _defineProperty(this, "logtag", void 0);

          _defineProperty(this, "_emitter", void 0);

          _defineProperty(this, "socket", void 0);

          _defineProperty(this, "deskInfo", void 0);

          gfNetworkParser.instance = this;
          this.logtag = "::gfNetworkParser::";
          this._emitter = new globalThis.EventEmitter();
          this.socket = new gfNetworkSocket({
            pingInterval: 2000,
            pingTimeout: 3000,
            reconnectionAttempts: 999999,
            reconnectionAttemptsWarning: 1,
            reconnectionAttemptsDie: 5,
            reconnectionDelay: 2000
          });

          this._handleSocketEvent();

          this.deskInfo = {
            DeskId: ''
          };
        }
        /* Common function. */


        var _proto = gfNetworkParser.prototype;

        _proto.executeCommand = function executeCommand(commandPayload) {
          if (this.socket == null) {
            return;
          }

          this.socket.send(commandPayload);
        }
        /* End Common function. */
        ;

        _proto.onEnterGame = function onEnterGame() {};

        _proto.onLeaveGame = function onLeaveGame() {
          this.deskInfo = {
            DeskId: ''
          };
        };

        _proto.onEnterDie = function onEnterDie(reason) {
          logger.debug(this.logtag, 'Fish onEnterDie: %s', reason);
          this.close(reason);
          this.cleanup();
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.removeEvent = function removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        };

        _proto.connectMaster = function connectMaster(ip, token) {
          var _this = this;

          this.socket.close('connectMaster', false, function () {
            _this.socket.init(ip, encodeURIComponent(token));
          });
        };

        _proto.connectGame = function connectGame(ip, token) {
          var _this2 = this;

          this.socket.close('connectGame', false, function () {
            _this2.socket.init(ip, token);
          });
        };

        _proto.close = function close(reason) {
          this.socket.close(reason);
        };

        _proto.cleanup = function cleanup() {
          if (!this._emitter || !this.socket) return;
          this.close('QUIT GAME!!!');
          this.socket.cleanUp();
          this.socket = null;

          this._emitter.removeAllListeners();

          this._emitter = null;
        };

        _proto.parseContent = function parseContent(content, requestId) {
          var _this3 = this;

          var tmpContent;

          if (content && Array.isArray(content)) {
            tmpContent = [];

            for (var i = 0; i < content.length; ++i) {
              tmpContent[i] = this.parseContent(content[i], requestId);
            }
          } else if (content && typeof content === 'object') {
            tmpContent = {};
            Object.keys(content).forEach(function (key) {
              // if (!KeyMap.hasOwnProperty(key)) {
              // console.warn("Couldn't find mapping key for:", key, "in request", requestId);
              // }
              var newKey = gfNetworkKeyMap[key] || key;
              var newValue = content[key];

              if (Array.isArray(newValue)) {
                for (var _i = 0; _i < newValue.length; ++_i) {
                  newValue[_i] = _this3.parseContent(newValue[_i], requestId);
                }
              } else if (typeof newValue === 'object') newValue = _this3.parseContent(newValue, requestId);

              tmpContent[newKey] = newValue;
            });
          } else tmpContent = content;

          return tmpContent;
        };

        _proto._handleSocketEvent = function _handleSocketEvent() {
          var _this4 = this;

          this.socket.registerEvent(gfNetworkEvent.EVENT_NEW_MESSAGE, function (_ref) {
            var requestId = _ref.requestId,
                content = _ref.content;
            content = _this4.parseContent(content, requestId);

            _this4._emitter.emit(requestId, content);
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_CONNECTED, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_CONNECT,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_POOR, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_POOR,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_DIE, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_DIE,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_RECONNECTED, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.NETWORK_RECONNECT,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_AUTHEN_FAIL, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.AUTHEN_FAIL,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NETWORK_PINGPONG, function (data) {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.PINGPONG,
              EventData: {
                data: data
              }
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_LOGIN_IN_OTHER_DEVICE, function () {
            _this4._emitter.emit(gfNetworkGameEvent.NETWORK_EVENT, {
              EventID: gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE,
              EventData: {}
            });
          });
          this.socket.registerEvent(gfNetworkEvent.EVENT_NO_ACTION_LONG_TIME, function () {
            _this4.socket.close("EVENT_NO_ACTION_LONG_TIME");

            _this4._emitter.emit(gfNetworkGameEvent.GAME_KICK);
          });
        };

        _proto.optimizeContent = function optimizeContent(content, requestId) {
          var _this5 = this;

          var tmpContent;

          if (content && Array.isArray(content)) {
            tmpContent = [];

            for (var i = 0; i < content.length; ++i) {
              tmpContent[i] = this.optimizeContent(content[i], requestId);
            }
          } else if (content && typeof content === 'object') {
            tmpContent = {};
            Object.keys(content).forEach(function (key) {
              var newKey;

              if (!Object.keys(gfNetworkKeyMap).find(function (mapkey) {
                return gfNetworkKeyMap[mapkey] === key;
              })) {
                // console.warn("Couldn't find mapping key for:", key, "in request", requestId);
                newKey = key;
              } else newKey = Object.keys(gfNetworkKeyMap).find(function (mapkey) {
                return gfNetworkKeyMap[mapkey] === key;
              });

              var newValue = content[key];

              if (Array.isArray(newValue)) {
                for (var _i2 = 0; _i2 < newValue.length; ++_i2) {
                  newValue[_i2] = _this5.optimizeContent(newValue[_i2], requestId);
                }
              } else if (typeof newValue === 'object') newValue = _this5.optimizeContent(newValue, requestId);

              tmpContent[newKey] = newValue;
            });
          } else tmpContent = content;

          return tmpContent;
        };

        _proto._buildMessage = function _buildMessage(requestId, data) {
          if (data === void 0) {
            data = undefined;
          }

          data = this.optimizeContent(data, requestId);
          return {
            requestId: requestId,
            content: data
          };
        };

        _proto.isAvailable = function isAvailable() {
          return this.socket.isAvailable();
        } // ***************** LOBBY *****************************
        ;

        _proto.sendGetInfoGameRoom = function sendGetInfoGameRoom(roomKind) {
          var data = {
            KindID: roomKind
          };

          var message = this._buildMessage(gfNetworkGameEvent.LOBBY_GET_ROOM_INFO, data);

          this.executeCommand(message);
        } /// ********  GAME *************
        ;

        _proto.sendJoinDesk = function sendJoinDesk(deskId) {
          var data = {
            DeskId: deskId
          };

          var message = this._buildMessage(gfNetworkGameEvent.GAME_JOIN_DESK, data);

          this.executeCommand(message);
        };

        _proto.sendGunFire = function sendGunFire(data) {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_USER_FIRE, data);

          this.executeCommand(message);
        };

        _proto.sendActiveFreezeGun = function sendActiveFreezeGun() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_ACTIVE_FREEZE_GUN);

          this.executeCommand(message);
        };

        _proto.sendCatchFishSkill = function sendCatchFishSkill(data) {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_CATCH_FISH_SKILL, data);

          this.executeCommand(message);
        };

        _proto.sendFireSkill = function sendFireSkill(Angle, Pos) {
          var data = {};
          data.Angle = Angle;
          data.x = Pos.x;
          data.y = Pos.y;

          var message = this._buildMessage(gfNetworkGameEvent.GAME_FIRE_SKILL, data);

          this.executeCommand(message);
        };

        _proto.sendCatchFish = function sendCatchFish(FishID, Multiple, BulletID, FireType) {
          if (FireType === void 0) {
            FireType = undefined;
          }

          var data = {};
          data.FishID = FishID;
          data.Multiple = Multiple;
          data.BulletID = BulletID;
          data.FireType = FireType;

          var message = this._buildMessage(gfNetworkGameEvent.GAME_CATCH_FISH, data);

          this.executeCommand(message);
        };

        _proto.sendExitGameServer = function sendExitGameServer() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_USER_EXIT, {});

          this.executeCommand(message);
        };

        _proto.sendRegisterExit = function sendRegisterExit() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_ON_CLOSE_TAB, {});

          this.executeCommand(message);
        };

        _proto.notifyShowGame = function notifyShowGame() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_LIST_FISH_ON_SHOW, {});

          this.executeCommand(message);
        };

        _proto.sendIdleMessage = function sendIdleMessage() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_IDLE_MESSAGE, {});

          this.executeCommand(message);
        };

        _proto.sendPlayerPositionMessage = function sendPlayerPositionMessage(PosX, PosY) {
          var data = {};
          data.x = PosX;
          data.y = PosY;

          var message = this._buildMessage(gfNetworkGameEvent.GAME_PLAYER_UPDATE_POSITION, data);

          this.executeCommand(message);
        };

        _proto.sendPlayerLowerShieldMessage = function sendPlayerLowerShieldMessage(data) {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_PLAYER_UPDATE_SHIELD, data);

          this.executeCommand(message);
        };

        _proto.sendPlayerPieceEnergy = function sendPlayerPieceEnergy(data) {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_PLAYER_SEND_PIECE_ENERGY, data);

          this.executeCommand(message);
        };

        _proto.getBotSetting = function getBotSetting(roomKind) {
          // cc.log('getBotSetting');
          var message = this._buildMessage(gfNetworkGameEvent.GAME_GET_BOT_SETTING, {
            RoomKind: roomKind
          });

          this.executeCommand(message);
        };

        _proto.setBotSetting = function setBotSetting(arrFkd, duration, roomKind) {
          // cc.log('setBotSetting');
          var data = {
            FishKind: arrFkd,
            timeToExpire: duration,
            RoomKind: roomKind
          };

          var message = this._buildMessage(gfNetworkGameEvent.GAME_SET_BOT_SETTING, data);

          this.executeCommand(message);
        };

        _proto.stopBot = function stopBot() {
          var message = this._buildMessage(gfNetworkGameEvent.GAME_STOP_BOT, {});

          this.executeCommand(message);
        };

        _proto.destroy = function destroy() {
          this.cleanup();
          gfNetworkParser.instance = null;
        };

        return gfNetworkParser;
      }()); // gfNetworkParser.instance = null;

      _defineProperty(gfNetworkParser, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ES6FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Sprite, v2, Color, tween, UITransform, v3, getRotation, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      v2 = module.v2;
      Color = module.Color;
      tween = module.tween;
      UITransform = module.UITransform;
      v3 = module.v3;
    }, function (module) {
      getRotation = module.getRotation;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "01a60Fgq6pH6pna1xhaVQJF", "ES6FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ES6FireBullet = exports('ES6FireBullet', (_dec = ccclass('ES6FireBullet'), _dec2 = property(Sprite), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(ES6FireBullet, _EnemyFireBullet);

        function ES6FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "FIRE_POS", [v2(-580, -1000), v2(300, -1000), v2(-300, -1000), v2(180, -1000), v2(480, -1000), v2(-180, -1000)]);

          _initializerDefineProperty(_assertThisInitialized(_this), "rays", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ES6FireBullet.prototype;

        _proto.onEnable = function onEnable() {
          this.rays.forEach(function (ray) {
            ray.color = new Color(255, 255, 255, 0);
          });
        };

        _proto.fire = function fire(timeLate) {
          var _this2 = this;

          if (timeLate === void 0) {
            timeLate = 0;
          }

          for (var i = 0; i < this.BulletCount && i < this.FIRE_POS.length; ++i) {
            tween(this.rays[i].color).delay(i * 0.1).to(0.5, {
              a: 150
            }).delay(1 - i * 0.1).to(0.1, {
              a: 0
            }).start();
            var srcPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[i % this.firePos.length].getWorldPosition());
            var destPos = v3(srcPos.x + this.FIRE_POS[i].x, srcPos.y + this.FIRE_POS[i].y, 0);
            this.rays[i % this.rays.length].node.angle = getRotation(destPos, srcPos) + 90;
          }

          this.scheduleOnce(function () {
            _this2.fireBullet();
          }, 1.5 - timeLate);
        };

        _proto.fireBullet = function fireBullet() {
          for (var i = 0; i < this.BulletCount; ++i) {
            var srcPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[i % this.firePos.length].getWorldPosition());
            var destPos = v3(srcPos.x + this.FIRE_POS[i].x, srcPos.y + this.FIRE_POS[i].y, 0);
            this.createBullet(BulletConfig.ES6, srcPos, destPos);
          }
        };

        return ES6FireBullet;
      }(EnemyFireBullet), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "rays", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScreen.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts', './gameCommonUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, ProgressBar, sys, assetManager, director, Prefab, instantiate, sp, Component, loadConfigAsync, gameCommonUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      sys = module.sys;
      assetManager = module.assetManager;
      director = module.director;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _temp;

      cclegacy._RF.push({}, "01f22w8LoVFq5YVtgEK6Ozg", "LoadingScreen", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingScreen = exports('LoadingScreen', (_dec = ccclass('LoadingScreen'), _dec2 = property({
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec3 = property({
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec4 = property({
        type: Node,
        visible: function visible() {
          return this.loadByBundle;
        }
      }), _dec5 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec6 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec7 = property({
        visible: function visible() {
          return !this.loadByBundle;
        }
      }), _dec8 = property(ProgressBar), _dec9 = property(Node), _dec10 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingScreen, _Component);

        function LoadingScreen() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "loadByBundle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bundlePath", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bundleMainScene", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gameHolder", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sceneName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sdSceneName", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sceneNameIframe", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sceneNameHistory", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "progressBar", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "homeBtn", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "barWidth", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "loadingGlow", _descriptor12, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "preloadGameScene", false);

          _defineProperty(_assertThisInitialized(_this), "preloadGamePrefab", false);

          _defineProperty(_assertThisInitialized(_this), "switchGameScene", false);

          _defineProperty(_assertThisInitialized(_this), "isBackToLobby", false);

          _defineProperty(_assertThisInitialized(_this), "isSlowLoading", false);

          _defineProperty(_assertThisInitialized(_this), "gameBundle", null);

          _defineProperty(_assertThisInitialized(_this), "currentPercent", 0);

          _defineProperty(_assertThisInitialized(_this), "gamePrefab", null);

          _defineProperty(_assertThisInitialized(_this), "gameNode", null);

          _defineProperty(_assertThisInitialized(_this), "_loadedPrefab", []);

          _defineProperty(_assertThisInitialized(_this), "totalPercent", 0);

          _defineProperty(_assertThisInitialized(_this), "eventId", null);

          _defineProperty(_assertThisInitialized(_this), "updatedScene", '');

          return _this;
        }

        var _proto = LoadingScreen.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          if (this.sceneName === '') return;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          this.updatedScene = this.sceneName;
          var loadHistory = false;

          if (LOGIN_IFRAME) {
            var queryString = window.location.search;
            var urlParams = new URLSearchParams(queryString);
            var history = urlParams.get('history');

            if (this.sceneNameHistory && history == 'true') {
              this.updatedScene = this.sceneNameHistory;
              loadHistory = true;
            } else if (this.sceneNameIframe) {
              this.updatedScene = this.sceneNameIframe;
            }
          }

          if (sys.isMobile && this.sdSceneName) {
            this.updatedScene = this.sdSceneName;
          }

          if (this.homeBtn) {
            this.homeBtn.active = false;

            if (!LOGIN_IFRAME) {
              this.scheduleOnce(function () {
                _this2.homeBtn.active = true;

                _this2.homeBtn.off('click');

                _this2.homeBtn.on('click', function () {
                  if (_this2.isBackToLobby) return; //TODO: implement KtekEventHandler
                  // let eventHandler = this.node.getComponent("KtekEventHandler");
                  // if( eventHandler ){
                  //     eventHandler.getInstance().sendToUs("clear_cache", {
                  //         scene: sceneName
                  //     });
                  // }

                  gameCommonUtils.handleCloseGameIframe();
                  _this2.isBackToLobby = true;
                });
              }, 10);
            }
          }

          this.node.active = true;
          this.node._uiProps.opacity = 1;

          if (this.loadByBundle && !loadHistory) {
            this.gameBundle = assetManager.getBundle(this.bundlePath);

            if (!this.gameBundle) {
              assetManager.loadBundle(this.bundlePath, function (err, bundle) {
                if (err) {
                  console.error("Error while loading bundle with path: BundleLobby");
                } else {
                  _this2.gameBundle = bundle;
                  _this2.preloadGamePrefab = true;

                  _this2.loadGamePrefab(bundle, _this2.bundleMainScene, _this2.eventId);
                }
              });
            } else {
              this.preloadGamePrefab = true;
              this.loadGamePrefab(this.gameBundle, this.bundleMainScene, this.eventId);
            }
          } else {
            this.preloadGameScene = true;
            director.preloadScene(this.updatedScene, function (completedCount, totalCount) {
              if (totalCount > 0) {
                _this2.totalPercent = completedCount / totalCount;
              }
            }, function (error, scene) {
              if (error) {
                gameCommonUtils.handleFlowOutGame();
              }
            });
          }
        };

        _proto.setProgressFull = function setProgressFull() {
          this.progressBar.progress = 1;
        };

        _proto.update = function update(dt) {
          if (this.preloadGameScene) {
            var percent = (this.totalPercent - this.progressBar.progress) / 20;

            if (percent > 0) {
              this.progressBar.progress += percent;

              if (this.loadingGlow && this.barWidth > 0) {
                var updatedPosX = Math.max(this.loadingGlow.position.x, this.barWidth * this.progressBar.progress);
                this.loadingGlow.setPosition(updatedPosX, this.loadingGlow.position.y);
              }
            }

            if (this.progressBar.progress > 0.99 && !this.switchGameScene) {
              this.switchGameScene = true;
              director.loadScene(this.updatedScene);
            }
          } else if (this.preloadGamePrefab) {
            var _percent = (this.totalPercent - this.progressBar.progress) / 20;

            if (_percent > 0) {
              this.progressBar.progress += _percent;

              if (this.loadingGlow && this.barWidth > 0) {
                var _updatedPosX = Math.max(this.loadingGlow.position.x, this.barWidth * this.progressBar.progress);

                this.loadingGlow.setPosition(_updatedPosX, this.loadingGlow.position.y);
              }
            }

            if (this.progressBar.progress > 0.99 && this.gameNode && !this.switchGameScene) {
              this.switchGameScene = true;
              this.loadGameNode();
            }
          }
        };

        _proto.loadGamePrefab = function loadGamePrefab(bundle, mainPrefabName, eventId) {
          var _this3 = this;

          if (eventId === void 0) {
            eventId = '';
          }

          this.eventId = eventId;
          bundle.loadDir('', Prefab, function (finish, total, item) {
            //if (!item.info) {

            /*let percent = Math.ceil(finish * 100 / total);
            if (percent < 100 && this.progressBar) {
                let nextProgress = Math.max(this.progressBar.progress, percent / 100);
                this.progressBar.progress = nextProgress;
            }*/
            //}
            _this3.totalPercent = finish / total;
          }, function (error, assets) {
            if (error) {
              return; //TODO handle fail loading
            }

            var mainPrefab = null;
            assets.forEach(function (prefab) {
              prefab.addRef();

              if (prefab.data.name == mainPrefabName) {
                mainPrefab = prefab;
              }
            });
            _this3._loadedPrefab = assets;

            if (mainPrefab) {
              _this3.gameNode = instantiate(mainPrefab);
            }
          });
        };

        _proto.loadGameNode = function loadGameNode() {
          if (this.gameNode && this.gameHolder) {
            var _director = this.gameNode.getComponent('Director');

            if (_director && _director.setEventId) _director.setEventId(this.eventId);
            this.gameNode.parent = this.gameHolder;
            if (this.homeBtn) this.homeBtn.active = false;
            this.node.active = false;
            this.unscheduleAllCallbacks();
          }
        };

        _proto.setEventId = function setEventId(id) {
          this.eventId = id;
        };

        _proto.setSlowLoading = function setSlowLoading(val) {
          this.isSlowLoading = val;
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();

          if (this.loadByBundle) {
            this.clearBundleResourceLoaded();
          }
        };

        _proto.clearBundleResourceLoaded = function clearBundleResourceLoaded() {
          if (this.gameNode) {
            this.gameNode = null;
          }

          for (var i = 0; i < this._loadedPrefab.length; i++) {
            var prefab = this._loadedPrefab[i];

            if (prefab) {
              var assets = [];
              var deps = assetManager.dependUtil.getDepsRecursively(prefab._uuid);

              for (var _i = 0; _i < deps.length; _i++) {
                var _uuid = deps[_i];
                var item = assetManager.assets.get(_uuid);

                if (item) {
                  item.addRef();
                  assets.push(item);
                }
              }

              console.log('>>>>> assets to release count: ' + assets.length);
              assets.forEach(function (item) {
                if (item) {
                  item.decRef(true);

                  if (item instanceof sp.SkeletonData) {
                    item.reset();
                  }
                }
              });
              prefab.decRef(true);
              assets = [];
            }
          }

          this._loadedPrefab = [];
          var bundle = assetManager.getBundle(this.bundlePath);

          if (bundle) {
            assetManager.removeBundle(bundle);
          }

          if (sys.isNative) {
            assetManager.releaseUnusedAssets();
            console.log('>>>>> GC Collect in Native');
            sys.garbageCollect();
          }
        };

        return LoadingScreen;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadByBundle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bundlePath", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bundleMainScene", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gameHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sceneName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sdSceneName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "sceneNameIframe", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "sceneNameHistory", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "progressBar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "homeBtn", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "barWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "loadingGlow", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSpineFish.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, Color, v3, gfBaseFish;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Color = module.Color;
      v3 = module.v3;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "047f1peYURI1KxycP6Q3Bb6", "gfSpineFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfSpineFish = exports('gfSpineFish', (_dec = ccclass('gfSpineFish'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(gfSpineFish, _gfBaseFish);

        function gfSpineFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "fishAnim", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "NORMAL_COLOR", new Color(255, 255, 255, 255));

          return _this;
        }

        var _proto = gfSpineFish.prototype;

        _proto.initAssets = function initAssets(config) {
          if (!this.fishAnim) {
            var fishAnim = this.node.getChildByName("mainSpine");
            this.fishAnim = fishAnim.getComponent(sp.Skeleton);
          }

          _gfBaseFish.prototype.initAssets.call(this, config);

          if (!this.fishAnim.skeletonData || this.fishAnim.skeletonData.name != config.asset.name) {
            this.fishAnim.skeletonData = config.asset;
          }

          this.initAnimationCacheMode(config.cacheMode);
          this.fishAnim.setAnimation(0, config.AnimationName ? config.AnimationName[0] : 'animation', true);

          if (this.fishAnim && config.customAnimProp) {
            Object.assign(this.fishAnim.node, config.customAnimProp);
          }
        };

        _proto.initAnimationCacheMode = function initAnimationCacheMode(cacheMode) {
          this.fishAnim.setAnimationCacheMode(cacheMode != undefined ? cacheMode : sp.Skeleton.AnimationCacheMode.SHARED_CACHE);
        };

        _proto.playEffectDie = function playEffectDie() {
          this.fishAnim.timeScale = 2;
        };

        _proto.resetColor = function resetColor() {
          this.setColor(this.NORMAL_COLOR);
        };

        _proto.setColor = function setColor(color) {
          this.fishAnim.color = color;
        };

        _proto.changeAnimationSpeed = function changeAnimationSpeed(multiple) {
          if (multiple === void 0) {
            multiple = 0.5;
          }

          this.fishAnim.timeScale *= multiple;
        };

        _proto.resetAnimationSpeed = function resetAnimationSpeed() {
          this.fishAnim.timeScale = 1;
        };

        _proto.unuse = function unuse() {
          _gfBaseFish.prototype.unuse.call(this);

          this.fishAnim.node.angle = 0;
          this.fishAnim.node.scale = v3(1, 1, 1);
        };

        return gfSpineFish;
      }(gfBaseFish), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ListOfTips1985.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "04995CbHlVB75xInUI64PaK", "ListOfTips1985", undefined);

      var Tips = exports('Tips', {
        0: "Chỉ những viên đạn bắn trúng kẻ địch mới bị trừ tiền cược",
        1: "Giữ và kéo nút bắn để bật chế độ tự động khai hỏa",
        2: "Khiên sẽ được hồi phục sau 10s không bị tấn công",
        3: "Bắn trúng kẻ địch sẽ tích nộ, dùng nộ để thì triển kỹ năng",
        4: "Liên tục hạ gục kẻ địch sẽ nhận được phần thưởng thêm"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupInfo1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './gfPopupInfo.ts', './SwipeComponent1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Animation, Vec3, tween, Button, setOpacity, fadeIn, gfEventEmitter, refreshButtonState, EventsCode1985, GfPopupInfo, SwipeComponent1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Vec3 = module.Vec3;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      fadeIn = module.fadeIn;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      refreshButtonState = module.refreshButtonState;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      GfPopupInfo = module.GfPopupInfo;
    }, function (module) {
      SwipeComponent1985 = module.SwipeComponent1985;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "04cb0xQnZlIUaQlLWbjwzKt", "PopupInfo1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupInfo1985 = exports('PopupInfo1985', (_dec = ccclass('PopupInfo1985'), _dec2 = property(SwipeComponent1985), _dec3 = property(Animation), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupInfo) {
        _inheritsLoose(PopupInfo1985, _GfPopupInfo);

        function PopupInfo1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupInfo.call.apply(_GfPopupInfo, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "swipeComp", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "showHideAnim", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "ANIM_NAME", {
            Show: "InfoShow",
            Hide: "InfoHide"
          });

          return _this;
        }

        var _proto = PopupInfo1985.prototype;

        _proto.show = function show() {
          _GfPopupInfo.prototype.show.call(this);

          this.swipeComp.reset();
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.SHOW_BUTTON_CLICK);
          this.showHideAnim.play(this.ANIM_NAME.Show);
        };

        _proto.showWithEffect = function showWithEffect() {
          setOpacity(this.contents, 0);
          this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
          tween(this.contents).then(fadeIn(0.1)).start();
        };

        _proto.onClose = function onClose(evt) {
          if (evt === void 0) {
            evt = null;
          }

          _GfPopupInfo.prototype.onClose.call(this);

          refreshButtonState(evt.target.getComponent(Button));
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
          this.showHideAnim.play(this.ANIM_NAME.Hide);
        };

        return PopupInfo1985;
      }(GfPopupInfo), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "swipeComp", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showHideAnim", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShootController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './DataStore1985.ts', './Config1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Label, v3, UITransform, Tween, tween, log, Component, gfBaseEvents, gfEventEmitter, removeEvents, EventsCode1985, ReferenceManager1985, DataStore1985, Config1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      v3 = module.v3;
      UITransform = module.UITransform;
      Tween = module.Tween;
      tween = module.tween;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "05d03eJ6eJEUquc+dnAuZNX", "ShootController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ShootController1985 = exports('ShootController1985', (_dec = ccclass('ShootController1985'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShootController1985, _Component);

        function ShootController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnAutoFire", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fxAutoFire", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fxBtnFireLaser", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "lblCountDownSkillLaser", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isHold", false);

          _defineProperty(_assertThisInitialized(_this), "_levelSkillUlti", void 0);

          _defineProperty(_assertThisInitialized(_this), "_isLockSkill", false);

          _defineProperty(_assertThisInitialized(_this), "_isAutoFire", false);

          _defineProperty(_assertThisInitialized(_this), "_scheduleHoldFire", null);

          _defineProperty(_assertThisInitialized(_this), "_isSwitchToLeft", false);

          return _this;
        }

        var _proto = ShootController1985.prototype;

        _proto.setIsHold = function setIsHold(isHold) {
          this._isHold = isHold;
        };

        _proto.updatePositionButton = function updatePositionButton() {
          this.node.children.forEach(function (child) {
            var _child$getPosition = child.getPosition(),
                x = _child$getPosition.x,
                y = _child$getPosition.y;

            if (DataStore1985.instance.isSwitchHUDSkillToLeft && x > 0 || !DataStore1985.instance.isSwitchHUDSkillToLeft && x < 0) {
              x = -x;
            }

            child.position = v3(x, y, 0);
          });
        };

        _proto.onLoad = function onLoad() {
          this._scheduleHoldFire = this.scheduleHoldFire.bind(this);
          this.resetCountDownSkill();
        };

        _proto.onSendFire = function onSendFire() {
          if (this._isLockSkill || this._isAutoFire) return;
          this.unschedule(this._scheduleHoldFire);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE);
          this.schedule(this._scheduleHoldFire, DataStore1985.instance.FireSpeed.TURBO);
        };

        _proto.scheduleHoldFire = function scheduleHoldFire() {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE);
        };

        _proto.onStopSendFire = function onStopSendFire() {
          if (!this._isLockSkill) {
            this.reset();
          }
        };

        _proto.onUserStartTouchFire = function onUserStartTouchFire(data) {
          var touchID = data.touchID;
          if (this._isLockSkill || this._isAutoFire || touchID !== DataStore1985.instance.shootIDTouch) return;
          this.reset();
          this.onSendFire();
          this.scheduleOnce(this.setTimeToShowAnim, 1);
        };

        _proto.onUserEndTouchFire = function onUserEndTouchFire(data) {
          var position = data.position,
              touchID = data.touchID;
          if (touchID !== DataStore1985.instance.shootIDTouch) return;

          if (!this._isAutoFire && this.checkPosTargetArea(position)) {
            this.onAutoFireMode();
            return;
          }

          var selfInfo = DataStore1985.instance.getSelfInfo();

          if (selfInfo.skillLock === Config1985.instance.SkillConfig.LASER && !selfInfo.isLockGun) {
            this.playerSendFireSkill();
            return;
          }

          this.btnAutoFire.active = false;
          this.onStopSendFire();
        };

        _proto.checkPosTargetArea = function checkPosTargetArea(position) {
          var posTarget = this.node.getComponent(UITransform).convertToNodeSpaceAR(v3(position.x, position.y, 0));

          var _this$btnAutoFire$get = this.btnAutoFire.getPosition(),
              x = _this$btnAutoFire$get.x,
              y = _this$btnAutoFire$get.y;

          var _this$btnAutoFire$get2 = this.btnAutoFire.getComponent(UITransform),
              width = _this$btnAutoFire$get2.width,
              height = _this$btnAutoFire$get2.height;

          return this.btnAutoFire.active && posTarget.x >= x - width / 2 && posTarget.x <= x + width / 2 && posTarget.y >= y - height / 2 && posTarget.y <= y + height / 2;
        };

        _proto.pauseAutoFire = function pauseAutoFire() {
          if (!this._isAutoFire) {
            this.onStopSendFire();
          } else {
            this.onStopSendFire();
            this._isAutoFire = true;
          }
        };

        _proto.resumeAutoFire = function resumeAutoFire() {
          if (this._isAutoFire) {
            this._isAutoFire = false;
            this.reset();
            this.onAutoFireMode();
          }
        };

        _proto.setTimeToShowAnim = function setTimeToShowAnim() {
          this.btnAutoFire.active = true;
        };

        _proto.onAutoFireMode = function onAutoFireMode() {
          if (this._isLockSkill || this._isHold) return;

          if (this._isAutoFire) {
            this.btnAutoFire.active = false;
            this.onStopSendFire();
            this._isAutoFire = false;
            return;
          }

          this.onStopSendFire();
          this.onSendFire();
          this._isAutoFire = true;
          this.btnAutoFire.active = false;
          this.fxAutoFire.active = true;
          this.btnAutoFire.active = true;
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.FIRE_LOCK);
        };

        _proto.lockFeatureFire = function lockFeatureFire(data) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe) {
            if (this._isAutoFire) {
              this.lockFire();
              this._isAutoFire = true;
            } else {
              this.lockFire();
            }
          }
        };

        _proto.lockFire = function lockFire() {
          this.onStopSendFire();
          this.btnAutoFire.active = false;
          this.unschedule(this.setTimeToShowAnim);
          this._isLockSkill = true;
        };

        _proto.openFeatureFire = function openFeatureFire(data) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);
          var selfInfo = DataStore1985.instance.getSelfInfo();

          if (player.isMe && selfInfo.skillLock !== Config1985.instance.SkillConfig.LASER) {
            this._isLockSkill = false;

            if (this._isAutoFire) {
              this.resumeAutoFire();
            }
          }
        };

        _proto.getPosWorldSpaceAR = function getPosWorldSpaceAR(pos) {
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(v3(pos.x, pos.y, 0));
        }
        /*
         * activeLaser
         * data: deskStation: number (0 -> 3), isActive: boolean
         */
        ;

        _proto.activeLaser = function activeLaser(data) {
          if (data.isActive) {
            this.fxBtnFireLaser.active = true;
            this.showSkillCountDown();
            this.lockFeatureFire(data);
          } else {
            this.openFeatureFire(data);
            this.resetCountDownSkill();
          }
        };

        _proto.showSkillCountDown = function showSkillCountDown() {
          var _this2 = this;

          var countDown = Config1985.instance.SkillConfig.TIMEOUT;
          Tween.stopAllByTarget(this.lblCountDownSkillLaser);
          this.lblCountDownSkillLaser.string = countDown.toString();
          tween(this.lblCountDownSkillLaser).delay(1).call(function () {
            countDown--;

            if (countDown <= 0) {
              _this2.resetCountDownSkill();

              log('30s auto fire skill');
              var data = {
                SkillID: DataStore1985.instance.getSelfInfo().skillLock,
                DeskStation: DataStore1985.instance.getSelfInfo().DeskStation
              };
              log('touch fire skill');
              gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.SEND_FIRE_SKILL, data);
            } else {
              _this2.lblCountDownSkillLaser.string = countDown.toString();
            }
          }).union().repeat(Config1985.instance.SkillConfig.TIMEOUT).start();
        };

        _proto.resetCountDownSkill = function resetCountDownSkill() {
          if (this.lblCountDownSkillLaser) {
            Tween.stopAllByTarget(this.lblCountDownSkillLaser);
            this.lblCountDownSkillLaser.string = "0";
          }

          if (this.fxBtnFireLaser) {
            this.fxBtnFireLaser.active = false;
          }
        };

        _proto.playerSendFireSkill = function playerSendFireSkill() {
          var selfInfo = DataStore1985.instance.getSelfInfo();
          var data = {
            SkillID: selfInfo.skillLock,
            DeskStation: selfInfo.DeskStation
          };
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.SEND_FIRE_SKILL, data);
        };

        _proto.reset = function reset() {
          this.unscheduleAllCallbacks();
          this.fxAutoFire.active = false;
          this.btnAutoFire.active = false;
          this._isAutoFire = false;
          this._isLockSkill = false;
          this._isHold = false;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return ShootController1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnAutoFire", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fxAutoFire", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fxBtnFireLaser", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lblCountDownSkillLaser", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerLayer1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfPlayerLayer.ts', './EventsCode1988.ts', './Player1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, convertAssetArrayToObject, gfEventEmitter, registerEvent, removeEvents, gfPlayerLayer, EventCode, Player1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfPlayerLayer = module.gfPlayerLayer;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      Player1988 = module.Player1988;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "05e86NRfWNLt70RAKx3dD4F", "PlayerLayer1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayerLayer1988 = exports('PlayerLayer1988', (_dec = ccclass('PlayerLayer1988'), _dec2 = property({
        type: Player1988,
        override: true
      }), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfPlayerLayer) {
        _inheritsLoose(PlayerLayer1988, _gfPlayerLayer);

        function PlayerLayer1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfPlayerLayer.call.apply(_gfPlayerLayer, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listPlayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectCircleIsMe", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PlayerLayer1988.prototype;

        _proto.initEvents = function initEvents() {
          _gfPlayerLayer.prototype.initEvents.call(this);

          registerEvent(EventCode.PLAYER_LAYER.CHANGE_GUN_DRILL, this.playerChangeGunDrill, this);
          registerEvent(EventCode.EFFECT_LAYER.DRILL_EXPLOSION, this.playerResetGun, this);
        };

        _proto.configAllPlayer = function configAllPlayer() {
          for (var i = 0; i < this.listPlayer.length; i++) {
            this.listPlayer[i].gunSprite = convertAssetArrayToObject(this.listGunSprite);
            this.listPlayer[i].avatarAtlas = this.avatarAtlas;
            this.listPlayer[i].waitingText = this.listWaiting[i];
            this.listPlayer[i].index = i;
            this.listPlayer[i].effectIsMe = this.effectIsMe;
            this.listPlayer[i].effectCircleIsMe = this.effectCircleIsMe;
            this.listPlayer[i].effectMaxGun = this.effectMaxGun;
          }
        };

        _proto.playerChangeGunLaser = function playerChangeGunLaser(DeskStation) {
          var player = this.getPlayerByDeskStation(DeskStation);

          if (player) {
            gfEventEmitter.instance.emit(EventCode.SOUND.GUN_EQUIP); //player.changeGunLaser(DeskStation);
          }
        };

        _proto.playerChangeGunDrill = function playerChangeGunDrill(DeskStation) {
          var player = this.getPlayerByDeskStation(DeskStation);

          if (player) {
            gfEventEmitter.instance.emit(EventCode.SOUND.GUN_EQUIP); //player.changeGunDrill(DeskStation);
          }
        };

        _proto.playerResetGun = function playerResetGun(data) {
          var deskStation = data.deskStation;
          var player = this.getPlayerByDeskStation(deskStation);
        };

        _proto.onDragonWarning = function onDragonWarning() {};

        _proto.onDragonCreated = function onDragonCreated() {};

        _proto.hideBallTray = function hideBallTray() {};

        _proto.hideAllPlayer = function hideAllPlayer() {
          _gfPlayerLayer.prototype.hideAllPlayer.call(this);

          this.effectCircleIsMe.active = false;
        };

        _proto.onDestroy = function onDestroy() {
          _gfPlayerLayer.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return PlayerLayer1988;
      }(gfPlayerLayer), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPlayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "effectCircleIsMe", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LetterSpacing.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, LabelComponent, warn, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      LabelComponent = module.LabelComponent;
      warn = module.warn;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "06158ZI+yBOppfcR+STxzzA", "LetterSpacing", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LetterSpacing = exports('LetterSpacing', (_dec = ccclass('LetterSpacing'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LetterSpacing, _Component);

        function LetterSpacing() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "spacingX", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LetterSpacing.prototype;

        _proto.start = function start() {
          var label = this.node.getComponent(LabelComponent);

          if (label) {
            label.spacingX = this.spacingX;
          } else {
            warn("do not have label to custom letter spacing");
          }
        };

        return LetterSpacing;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spacingX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGameScheduler.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _createClass, _defineProperty, cclegacy, director, Scheduler, error, gfBaseEvents, removeEvents, registerEvent;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      Scheduler = module.Scheduler;
      error = module.error;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      removeEvents = module.removeEvents;
      registerEvent = module.registerEvent;
    }],
    execute: function () {
      cclegacy._RF.push({}, "06790qDH8VFEI905Hc7qs9a", "gfGameScheduler", undefined);

      var gfGameScheduler = exports('default', /*#__PURE__*/function () {
        gfGameScheduler.initInstance = function initInstance() {
          this._instance = new gfGameScheduler();
        };

        function gfGameScheduler() {
          _defineProperty(this, "id", void 0);

          _defineProperty(this, "uuid", void 0);

          _defineProperty(this, "_scheduler", void 0);

          this.id = this.uuid = 'CCFactory';
          this._scheduler = director.getScheduler();
          Scheduler.enableForTarget(this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this._unScheduleAll, this);
        }

        var _proto = gfGameScheduler.prototype;

        _proto._schedule = function _schedule(callback, interval, repeat, delay, paused) {
          if (paused === void 0) {
            paused = false;
          }

          this._scheduler.schedule(callback, this, interval, repeat, delay, paused);
        };

        _proto._scheduleOnce = function _scheduleOnce(callback, delay) {
          this._scheduler.schedule(callback, this, 0, 0, delay, false);
        };

        _proto._unScheduleAll = function _unScheduleAll() {
          this._scheduler.unscheduleAllForTarget(this);
        };

        _proto._unschedule = function _unschedule(callback) {
          this._scheduler.unschedule(callback, this);
        };

        _proto._destroy = function _destroy() {
          removeEvents(this);

          this._unScheduleAll();

          this._scheduler = null;
        };

        gfGameScheduler.schedule = function schedule(callback, interval, repeat, delay, paused) {
          if (paused === void 0) {
            paused = false;
          }

          gfGameScheduler.instance._schedule(callback, interval, repeat, delay, paused);
        };

        gfGameScheduler.scheduleOnce = function scheduleOnce(callback, delay) {
          gfGameScheduler.instance._scheduleOnce(callback, delay);
        };

        gfGameScheduler.unschedule = function unschedule(callback) {
          gfGameScheduler.instance._scheduler.unschedule(callback);
        };

        gfGameScheduler.destroy = function destroy() {
          gfGameScheduler.instance._destroy();

          gfGameScheduler._instance = null;
        };

        _createClass(gfGameScheduler, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              error('GameScheduler is destroyed');
              return null;
            }

            return this._instance;
          }
        }]);

        return gfGameScheduler;
      }());

      _defineProperty(gfGameScheduler, "_instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkEvent.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "07553cK4r1DWor7xIE5zQx7", "gfNetworkEvent", undefined); //Contain only network event for NetworkParser and Network Socket


      var gfNetworkEvent = exports('default', {
        EVENT_NETWORK_RECONNECTED: 'network-reconnected',
        EVENT_NETWORK_CONNECTED: 'network-connected',
        EVENT_NETWORK_POOR: 'network-poor',
        EVENT_NETWORK_DIE: 'network-die',
        EVENT_AUTHEN_FAIL: 'authen-fail',
        EVENT_LOGIN_IN_OTHER_DEVICE: 'login-in-other-device',
        EVENT_NO_ACTION_LONG_TIME: 'no-action-long-time',
        EVENT_NEW_MESSAGE: 'new-message',
        EVENT_NETWORK_PINGPONG: 'ping-pong',
        LIST_EVENT_QUEUE: [2014]
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigWin1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './DataStore1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, _createClass, cclegacy, _decorator, sp, Label, Font, warn, tween, Component, formatWalletMoney, setOpacity, gfBaseEvents, fadeOut, stopAllActions, gfEventEmitter, gfBaseConfig, registerEvent, formatCoin, removeEvents, EventsCode1985, ReferenceManager1985, DataStore1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Label = module.Label;
      Font = module.Font;
      warn = module.warn;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      formatWalletMoney = module.formatWalletMoney;
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      formatCoin = module.formatCoin;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "077641kJTpJ7Y8JX56csJXR", "BigWin1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SKIN_NAME = {
        BIG_WIN: "thanglon",
        HUGE_WIN: "thangcuclon",
        SUPER_WIN: "thangsieulon"
      };
      var ANIM_NAME = {
        IS_ME: "isMe",
        OTHER: "other"
      };
      var BigWin1985 = exports('BigWin1985', (_dec = ccclass('BigWin1985'), _dec2 = property(sp.Skeleton), _dec3 = property(Label), _dec4 = property(Font), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BigWin1985, _Component);

        function BigWin1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "spine", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtCoin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fontBigWin", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "tweenHide", null);

          _defineProperty(_assertThisInitialized(_this), "_currentAnimName", void 0);

          _defineProperty(_assertThisInitialized(_this), "_isShowing", void 0);

          _defineProperty(_assertThisInitialized(_this), "_duration", 2);

          _defineProperty(_assertThisInitialized(_this), "tweenCoin", void 0);

          _defineProperty(_assertThisInitialized(_this), "_coinValue", 0);

          _defineProperty(_assertThisInitialized(_this), "_winValue", 0);

          _defineProperty(_assertThisInitialized(_this), "_isMe", false);

          return _this;
        }

        var _proto = BigWin1985.prototype;

        _proto.onLoad = function onLoad() {
          registerEvent(EventsCode1985.GAME_LAYER.AIRCRAFT_DIE, this.onFinish, this);
        };

        _proto.showAnimation = function showAnimation(data) {
          if (!this._isShowing) {
            this.show(data);
          } else {
            this.updateData(data);
          }
        };

        _proto.show = function show(data) {
          var gold = data.gold,
              bet = data.bet,
              isMe = data.isMe;

          if (!gold) {
            warn('BigWin without Gold!!!');
            return;
          }

          this.reset();
          this._isMe = isMe;
          this._isShowing = true;
          this.node.active = true;
          this.txtCoin.node.active = true;
          this._winValue = gold;
          var skinName = this.getAnimByBet(bet);

          this._playSpinAnim(skinName);

          this._tweenCoin(this._winValue);
        };

        _proto.updateData = function updateData(data) {
          var gold = data.gold,
              bet = data.bet;
          this._winValue += gold;
          var skinName = this.getAnimByBet(bet);

          if (skinName !== this._currentAnimName) {
            this._playSpinAnim(skinName);
          }

          this._tweenCoin(this._winValue);
        };

        _proto.getAnimByBet = function getAnimByBet(bet) {
          var skinName = SKIN_NAME.BIG_WIN;
          this.txtCoin.font = this.fontBigWin[0];

          if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.SUPER) {
            skinName = SKIN_NAME.SUPER_WIN;
            this.txtCoin.font = this.fontBigWin[2];
          } else if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.HUGE) {
            skinName = SKIN_NAME.HUGE_WIN;
            this.txtCoin.font = this.fontBigWin[1];
          }

          return skinName;
        };

        _proto._playSpinAnim = function _playSpinAnim(skinName) {
          this._currentAnimName = skinName;
          this.spine.setSkin(skinName);
          var animName = this._isMe ? ANIM_NAME.IS_ME : ANIM_NAME.OTHER;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BIG_WIN);
          this.spine.setAnimation(0, animName, false);
          this._duration = this.spine.findAnimation(animName).duration;
        };

        _proto._tweenCoin = function _tweenCoin(winAmount) {
          var _this2 = this;

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }

          if (this.tweenHide) {
            this.tweenHide.stop();
          }

          this._resetTxt();

          var _coinValue = this.coinValue;
          this.tweenCoin = tween(this.node).to(this._duration, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this2.coinValue = _coinValue + ratio * (winAmount - _coinValue);
            }
          }).call(function () {
            _this2.hideAnimation();
          });
          this.tweenCoin.start();
        };

        _proto.hideAnimation = function hideAnimation(playEffect) {
          var _this3 = this;

          if (playEffect === void 0) {
            playEffect = true;
          }

          if (!this._isShowing) return;

          if (playEffect) {
            this.tweenHide = tween(this.node).delay(2.75).call(function () {
              _this3.hideLabel();

              _this3._updateWalletMyPlayer();

              _this3.onFinish();
            }).start();
          } else {
            this._updateWalletMyPlayer();

            this.onFinish();
          }
        };

        _proto.hideLabel = function hideLabel() {
          tween(this.txtCoin.node).then(fadeOut(0.25)).start();
        };

        _proto._updateWalletMyPlayer = function _updateWalletMyPlayer() {
          if (this._isMe) {
            var player = ReferenceManager1985.instance.getPlayerByDeskStation(DataStore1985.instance.getSelfDeskStation());

            if (player.isMe) {
              player.addToDisplayWallet(this._winValue);
            }
          }
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.txtCoin.string = this._isMe ? "+" + formatCoin(this._coinValue) : "+" + formatWalletMoney(this._coinValue);
        };

        _proto._resetTxt = function _resetTxt() {
          if (this.txtCoin) {
            this.txtCoin.node.active = true;
            stopAllActions(this.txtCoin.node);
            setOpacity(this.txtCoin.node, 255);
          }
        };

        _proto.onFinish = function onFinish() {
          this.reset();
          this._winValue = 0;
          this._coinValue = 0;
          this._isShowing = false;
          this.node.active = false;
        };

        _proto.reset = function reset() {
          this.resetLabels();
          stopAllActions(this.node);
          var opacity = this._isMe ? 255 : 220;
          setOpacity(this.node, opacity);
        };

        _proto.resetLabels = function resetLabels() {
          stopAllActions(this.txtCoin.node);
          this.txtCoin.node.active = false;
          this.txtCoin.string = "";
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        _createClass(BigWin1985, [{
          key: "coinValue",
          get: function get() {
            return this._coinValue;
          },
          set: function set(value) {
            this._coinValue = value;

            this._updateCoinWin();
          }
        }]);

        return BigWin1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fontBigWin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyJackpot.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Component, tweenMoney, JackpotObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      tweenMoney = module.tweenMoney;
    }, function (module) {
      JackpotObject = module.JackpotObject;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "07bdaKv5lhPFY5MgFeH7S9/", "LobbyJackpot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LobbyJackpot = exports('LobbyJackpot', (_dec = ccclass('LobbyJackpot'), _dec2 = property({
        type: JackpotObject
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LobbyJackpot, _Component);

        function LobbyJackpot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listJackpots", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "jackpots", {});

          _defineProperty(_assertThisInitialized(_this), "isInit", false);

          _defineProperty(_assertThisInitialized(_this), "jackpotData", {});

          return _this;
        }

        var _proto = LobbyJackpot.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("UPDATE_JACKPOT", this.jackpotUpdate, this);
        };

        _proto.jackpotUpdate = function jackpotUpdate(data) {
          Object.assign(this.jackpotData, data);
          this.renderJackpot(3);
        };

        _proto.updateValueJP = function updateValueJP(jpType, jpValue) {
          if (this.jackpots[jpType]) {
            var jpObject = this.jackpots[jpType];
            this.renderJP({
              node: jpObject.jpNode,
              value: jpValue,
              time: 0.3
            });
          } else {
            console.warn("do not have jackpot", jpType);
          }
        };

        _proto.initData = function initData() {
          var _this2 = this;

          if (!this.isInit) {
            this.listJackpots.forEach(function (jpObj) {
              _this2.jackpots[jpObj.jpType] = jpObj;
            });
            this.isInit = true;
          }
        };

        _proto.renderJackpot = function renderJackpot(time) {
          var _this3 = this;

          if (time === void 0) {
            time = 3;
          }

          this.listJackpots.forEach(function (jpObj) {
            var value = parseInt(_this3.jackpotData[jpObj.jpType]);

            _this3.renderJP({
              node: jpObj.jpNode,
              value: value,
              time: time
            });
          });
        };

        _proto.renderJP = function renderJP(_ref) {
          var node = _ref.node,
              value = _ref.value,
              _ref$time = _ref.time,
              time = _ref$time === void 0 ? 3 : _ref$time;

          if (value == null) {
            node.active = false;
            return;
          }

          if (node) {
            var label = node.getComponent(Label);

            if (label && value) {
              tweenMoney(label, time, value);
            }
          }
        };

        return LobbyJackpot;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listJackpots", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePoolConfig.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, instantiate, warn, v2, Rect;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
      warn = module.warn;
      v2 = module.v2;
      Rect = module.Rect;
    }],
    execute: function () {
      cclegacy._RF.push({}, "086502tsbxDJZAcKPwxZxWQ", "gfNodePoolConfig", undefined);

      var gfNodePoolConfig = exports('default', /*#__PURE__*/function () {
        function gfNodePoolConfig(listAssets) {
          _defineProperty(this, "SPRITE_FISH_KIND", []);

          _defineProperty(this, "FISH_CONFIG", {});

          _defineProperty(this, "BULLET_CONFIG", {});

          _defineProperty(this, "BULLET_ICE_VALUE", void 0);

          _defineProperty(this, "NET_FX_CONFIG", {});

          _defineProperty(this, "COIN_CONFIG", {});

          _defineProperty(this, "DRAGON_BALL_CONFIG", {});

          _defineProperty(this, "assetHolder", void 0);

          gfNodePoolConfig.instance = this;
          this.FISH_CONFIG = {
            "0": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 499,
              AnimationName: ['animation'],
              targetPoint: v2(5, 0),
              BoxCollider: new Rect(5, 0, 22.9, 10.5)
            },
            "1": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 498,
              AnimationName: ['animation'],
              targetPoint: v2(5, 0),
              BoxCollider: new Rect(5, 0, 54.2, 13.8)
            },
            "2": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 497,
              AnimationName: ['animation'],
              BoxCollider: new Rect(-2, 2.2, 36, 19.5)
            },
            "3": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 496,
              AnimationName: ['animation'],
              targetPoint: v2(3, 2),
              BoxCollider: new Rect(5, 2.2, 35.7, 28.5)
            },
            "4": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 495,
              AnimationName: ['animation'],
              targetPoint: v2(18, 0),
              BoxCollider: new Rect(15, 2.2, 54.5, 29)
            },
            "5": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 494,
              AnimationName: ['animation'],
              targetPoint: v2(10, 2),
              BoxCollider: new Rect(10, 2.2, 67.9, 18.6)
            },
            "6": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 1,
              AnimationName: ['animation'],
              targetPoint: v2(10, 0),
              BoxCollider: new Rect(-10, 2.2, 59, 20)
            },
            "7": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 493,
              AnimationName: ['animation'],
              targetPoint: v2(7, 0),
              BoxCollider: new Rect(13, 2.2, 66.4, 25.6)
            },
            "8": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 100,
              AnimationName: ['animation'],
              targetPoint: v2(10, 0),
              BoxCollider: new Rect(15, 2.2, 52.6, 40.2)
            },
            "9": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 109,
              AnimationName: ['animation'],
              targetPoint: v2(7, 0),
              BoxCollider: new Rect(8, 1.2, 66.4, 27.2)
            },
            "10": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 108,
              AnimationName: ['animation'],
              targetPoint: v2(5, 0),
              BoxCollider: new Rect(10, 2.2, 66.6, 32.4)
            },
            "11": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 107,
              AnimationName: ['animation'],
              targetPoint: v2(8, 0),
              BoxCollider: new Rect(15, 2.2, 66.6, 32.4)
            },
            "12": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 106,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0.1, -0.2, 71.1, 51.6)
            },
            "13": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 492,
              AnimationName: ['animation'],
              BoxCollider: new Rect(-0.1, -0.2, 139.4, 20.2)
            },
            "14": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 200,
              AnimationName: ['animation'],
              targetPoint: v2(35, 0),
              BoxCollider: new Rect(20, -0.2, 81.5, 43.4)
            },
            "15": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 201,
              AnimationName: ['animation'],
              targetPoint: v2(5, 0),
              BoxCollider: [new Rect(5, -1.8, 41.5, 37.7), new Rect(4, -0.6, 17.6, 120)]
            },
            "16": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 202,
              AnimationName: ['animation'],
              targetPoint: v2(-5, 0),
              BoxCollider: [new Rect(-4.1, 1.6, 84.9, 24.4), new Rect(-17.3, 1.6, 58.3, 53.1)]
            },
            "17": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 203,
              AnimationName: ['animation'],
              targetPoint: v2(-10, 0),
              BoxCollider: new Rect(-10, 1, 65, 77.3)
            },
            "18": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 204,
              AnimationName: ['animation'],
              targetPoint: v2(10, 0),
              BoxCollider: [new Rect(11.5, 0.8, 97.1, 49.7), new Rect(0, -1.5, 36.8, 123.1)]
            },
            "19": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 205,
              AnimationName: ['animation'],
              targetPoint: v2(0, 0),
              BoxCollider: [new Rect(26.5, 1.2, 232.3, 10.8), new Rect(-7.8, 0.2, 110, 30.7)]
            },
            "20": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 206,
              AnimationName: ['animation'],
              BoxCollider: new Rect(0, 0, 133.5, 41.2)
            },
            "21": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 207,
              AnimationName: ['animation'],
              BoxCollider: new Rect(-1.2, -2.3, 76.3, 72.1)
            },
            "22": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 208,
              AnimationName: ['animation'],
              targetPoint: v2(10, 10),
              BoxCollider: new Rect(7, 9, 161.3, 64.5)
            },
            "23": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 209,
              AnimationName: ['animation'],
              targetPoint: v2(17, 0),
              BoxCollider: new Rect(20, 0, 159.3, 67)
            },
            "24": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 210,
              AnimationName: ['animation'],
              targetPoint: v2(-30, 0),
              BoxCollider: new Rect(27, 0, 167, 35)
            },
            "25": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 211,
              AnimationName: ['animation'],
              targetPoint: v2(-30, 0),
              BoxCollider: new Rect(-24, -3, 169, 68)
            },
            "27": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 2,
              AnimationName: ['animation'],
              customAnimProp: {
                angle: 90
              },
              BoxCollider: new Rect(-4, -7, 94, 73)
            },
            "30": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 491,
              AnimationName: ['animation'],
              customAnimProp: {
                scaleX: 0.469,
                scaleY: 0.469
              },
              targetPoint: v2(17, 0),
              BoxCollider: new Rect(-41, -3, 290, 50)
            },
            "31": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['thantaiphai'],
              BoxCollider: new Rect(2, 58, 73, 159),
              skipRotate: true
            },
            "34": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['walk'],
              customAnimProp: {
                scaleX: -1
              },
              customComponent: 'gfMiniBossGuardFish',
              targetPoint: v2(15, 0),
              BoxCollider: new Rect(0, 0, 180, 100)
            },
            "35": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['walk'],
              customAnimProp: {
                scaleX: -1
              },
              customComponent: 'gfMiniBossGuardFish',
              targetPoint: v2(0, 10),
              BoxCollider: new Rect(0, 15, 60, 100)
            },
            "36": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['walk'],
              customAnimProp: {
                scaleX: -1
              },
              customComponent: 'gfMiniBossGuardFish',
              BoxCollider: new Rect(0, 0, 50, 50)
            },
            "37": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 490,
              AnimationName: ['walk'],
              customAnimProp: {
                scaleX: -1
              },
              customComponent: 'gfMiniBossGuardFish',
              targetPoint: v2(0, -5),
              BoxCollider: new Rect(8, -5, 95, 70)
            },
            "43": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 105,
              AnimationName: ['animation'],
              targetPoint: v2(10, 0),
              BoxCollider: new Rect(10, 3, 110, 88),
              skipRotate: true
            }
          }; // this.SPRITE_FISH_KIND = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];

          this.BULLET_CONFIG = {
            "0": {
              BoxCollider: new Rect(5, 0, 20, 20)
            },
            "1": {
              BoxCollider: new Rect(5, 0, 20, 22)
            },
            "2": {
              BoxCollider: new Rect(5, 0, 20, 20)
            },
            "3": {
              BoxCollider: new Rect(5, 0, 20, 27)
            },
            "4": {
              BoxCollider: new Rect(5, 0, 20, 67)
            },
            "5": {
              BoxCollider: new Rect(0, 0, 20, 67)
            },
            "6": {
              BoxCollider: new Rect(0, 0, 20, 91)
            },
            "7": {
              BoxCollider: new Rect(0, 0, 20, 36)
            },
            "8": {
              BoxCollider: new Rect(0, 0, 20, 77)
            },
            "9": {
              BoxCollider: new Rect(0, 0, 20, 101)
            }
          };
          this.BULLET_ICE_VALUE = [7, 7, 7, 7, 8, 8, 9];
          this.DRAGON_BALL_CONFIG = {
            "0": {
              scale: 0.3
            },
            "1": {
              scale: 0.3
            },
            "2": {
              scale: 0.3
            },
            "3": {
              scale: 0.3
            },
            "4": {
              scale: 0.3
            },
            "5": {
              scale: 0.3
            },
            "6": {
              scale: 0.4
            }
          };
          this.initNodePoolAssets(listAssets);
        }

        var _proto = gfNodePoolConfig.prototype;

        _proto.initNodePoolAssets = function initNodePoolAssets(listAssets) {
          this.assetHolder = instantiate(listAssets).getComponent("gfNodePoolAssets");
          this.assetHolder.initMapAssets();
        };

        _proto.isSpriteFish = function isSpriteFish(kind) {
          return this.SPRITE_FISH_KIND.includes(kind);
        };

        _proto.checkFishPoolByKind = function checkFishPoolByKind(kind) {
          return this.FISH_CONFIG[kind] ? true : false;
        };

        _proto.getBulletConfig = function getBulletConfig(data) {
          var kind;

          if (data.isFreezed) {
            kind = this.BULLET_ICE_VALUE[data.BulletIndex];
          } else {
            kind = data.BulletIndex;
          }

          var config = this.BULLET_CONFIG[kind];

          if (!config) {
            warn("Bullet kind config not found: " + kind);

            if (kind != 0) {
              return this.getBulletConfig(0);
            }

            return null;
          }

          if (!config.asset) {
            config.asset = this.assetHolder.getBulletSprite(kind);
          }

          return config;
        };

        _proto.getFishConfig = function getFishConfig(kind) {
          var config = this.FISH_CONFIG[kind];

          if (!config) {
            warn("Fish kind config not found: " + kind);
            return null;
          }

          if (this.isSpriteFish(kind)) {
            if (!config.asset) {
              config.asset = this.assetHolder.getFishAnimationClip(kind);
            }
          } else {
            if (!config.asset) {
              config.asset = this.assetHolder.getFishSkeletonData(kind);
            }
          }

          if (!config.asset) {
            warn("Fish kind asset found: " + kind);
            return null;
          }

          return config;
        };

        _proto.getCoinConfig = function getCoinConfig(kind) {
          var asset = this.assetHolder.getCoinAsset(kind);

          if (!this.COIN_CONFIG[kind]) {
            if (asset) {
              this.COIN_CONFIG[kind] = {};
            } else {
              // warn("Coin kind config not found: " + kind);
              if (kind != 0) {
                return this.getCoinConfig(0);
              }

              return null;
            }
          }

          var config = this.COIN_CONFIG[kind];

          if (!config.asset) {
            config.asset = asset;
          }

          return config;
        };

        _proto.getLabelCoinFont = function getLabelCoinFont(kind) {
          var font = this.assetHolder.getLabelCoinAsset(kind);
          return font;
        };

        _proto.getNetFXConfig = function getNetFXConfig(kind) {
          var asset = this.assetHolder.getNetFXAsset(kind);

          if (!this.NET_FX_CONFIG[kind]) {
            if (asset) {
              this.NET_FX_CONFIG[kind] = {};
            } else {
              warn("NetFx kind config not found: " + kind);

              if (kind != 0) {
                return this.getNetFXConfig(0);
              }

              return null;
            }
          }

          var config = this.NET_FX_CONFIG[kind];

          if (!config.asset) {
            config.asset = asset;
          }

          return config;
        };

        _proto.getDragonBallConfig = function getDragonBallConfig(kind) {
          var config = this.DRAGON_BALL_CONFIG[kind];

          if (!config) {
            warn("Dragon Ball kind config not found: " + kind);
            return null;
          }

          if (!config.asset) {
            config.asset = this.assetHolder.getDragonBallAssets(kind);
            config.kind = kind;
          }

          return config;
        };

        _proto.destroy = function destroy() {
          this.assetHolder.destroy();
          this.assetHolder = null;
          gfNodePoolConfig.instance = null;
        };

        return gfNodePoolConfig;
      }());

      _defineProperty(gfNodePoolConfig, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha1.ts", ['cc', './crypto-core.ts'], function () {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "089a7e1551NLYG+wDwiHvdt", "sha1", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Reusable object

      var W = [];
      /**
       * SHA-1 hash algorithm.
       */

      var SHA1 = C_algo.SHA1 = Hasher.extend({
        _doReset: function _doReset() {
          this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0]);
        },
        _doProcessBlock: function _doProcessBlock(M, offset) {
          // Shortcut
          var H = this._hash.words; // Working variables

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3];
          var e = H[4]; // Computation

          for (var i = 0; i < 80; i++) {
            if (i < 16) {
              W[i] = M[offset + i] | 0;
            } else {
              var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
              W[i] = n << 1 | n >>> 31;
            }

            var t = (a << 5 | a >>> 27) + e + W[i];

            if (i < 20) {
              t += (b & c | ~b & d) + 0x5a827999;
            } else if (i < 40) {
              t += (b ^ c ^ d) + 0x6ed9eba1;
            } else if (i < 60) {
              t += (b & c | b & d | c & d) - 0x70e44324;
            } else
              /* if (i < 80) */
              {
                t += (b ^ c ^ d) - 0x359d3e2a;
              }

            e = d;
            d = c;
            c = b << 30 | b >>> 2;
            b = a;
            a = t;
          } // Intermediate hash value


          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
          H[4] = H[4] + e | 0;
        },
        _doFinalize: function _doFinalize() {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Return final computed hash


          return this._hash;
        },
        clone: function clone() {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA1('message');
       *     var hash = CryptoJS.SHA1(wordArray);
       */

      C.SHA1 = Hasher._createHelper(SHA1);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA1(message, key);
       */

      C.HmacSHA1 = Hasher._createHmacHelper(SHA1);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup06Lite.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, gfBaseConfig, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "089c2U6WkpJ7Ymir2ne02co", "gfFishGroup06Lite", undefined);

      var gfFishGroup6 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup6() {}

        gfFishGroup6.create = function create() {
          var fishCount = [20, 20, 20, 12, 12, 6, 1, 1]; //const fishKind = [13, 3, 4, 15, 3, 5, 25, 43];
          //Duration : 59

          var Height = gfBaseConfig.instance.AppSize.Height;
          var Y1 = 150;
          var Y2 = Y1 + 20;
          var Y3 = Y2 + 20;
          var Y4 = Y3 + 50;
          var Y5 = Y4 + 50;
          var Y6 = 360;
          var outerSpace = 210;
          var space = 150;
          var speed = 83; //2 side line

          FishGroupHelper.createFishLine(fishCount[0] / 2, Y1, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[0] / 2, Height - Y1, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[1] / 2, Y2, outerSpace, speed, -outerSpace / 2);
          FishGroupHelper.createFishLine(fishCount[1] / 2, Height - Y2, outerSpace, speed, -outerSpace / 2);
          FishGroupHelper.createFishLine(fishCount[2] / 2, Y3, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[2] / 2, Height - Y3, outerSpace, speed); //3 group in middle

          for (var i = 0; i < 2; ++i) {
            var count = fishCount[3] / 4;
            var xOffset = -i * 2 * space * count;
            FishGroupHelper.createFishLine(count, Y4, space, speed, xOffset);
            FishGroupHelper.createFishLine(count, Height - Y4, space, speed, xOffset);
          }

          for (var _i = 0; _i < 2; ++_i) {
            var _count = fishCount[4] / 4;

            var _xOffset = -_i * 2 * space * _count;

            FishGroupHelper.createFishLine(_count, Y5, space, speed, _xOffset);
            FishGroupHelper.createFishLine(_count, Height - Y5, space, speed, _xOffset);
          }

          for (var _i2 = 0; _i2 < 2; ++_i2) {
            var _count2 = fishCount[5] / 2;

            var _xOffset2 = -_i2 * 2 * space * _count2;

            FishGroupHelper.createFishLine(_count2, Y6, space, speed, _xOffset2);
          } //big fishes


          var bigSpace = space * fishCount[3] / 4;
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 1.5);
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 3.5);
        };

        return gfFishGroup6;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptCurvePoint.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, bezier, v2;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      bezier = module.bezier;
      v2 = module.v2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "09b93xxkfZAJ75WNaTSySmz", "gfptCurvePoint", undefined);

      var gfptCurvePoint = exports('gfptCurvePoint', /*#__PURE__*/function () {
        function gfptCurvePoint() {
          _defineProperty(this, "listPoint", []);
        }

        var _proto = gfptCurvePoint.prototype;

        _proto.setData = function setData(data) {
          this.listPoint.length = 0;

          for (var i = 0; i < data.pts1.length - 1; ++i) {
            var _p = data.pts1[i];
            var _p2 = data.pts2[i];
            var _p3 = data.pts2[i + 1];
            var _p4 = data.pts1[i + 1]; //symmetric point

            var _P = {
              x: 2 * _p4.x - _p3.x,
              y: 2 * _p4.y - _p3.y
            };

            for (var t = 0; t < 1; t += 0.01) {
              var _x = bezier(_p.x, _p2.x, _P.x, _p4.x, t);

              var _y = bezier(_p.y, _p2.y, _P.y, _p4.y, t);

              this.listPoint.push(v2(_x, _y));
            }
          } //add final point


          var _final = data.pts1.length - 2;

          var p0 = data.pts1[_final];
          var p1 = data.pts2[_final];
          var p2 = data.pts2[_final + 1];
          var p3 = data.pts1[_final + 1];
          var P2 = {
            x: 2 * p3.x - p2.x,
            y: 2 * p3.y - p2.y
          };
          var x = bezier(p0.x, p1.x, P2.x, p3.x, 1);
          var y = bezier(p0.y, p1.y, P2.y, p3.y, 1);
          this.listPoint.push(v2(x, y));
        };

        _proto.cloneData = function cloneData(data) {
          this.listPoint.length = 0;

          for (var i = 0; i < data.listPoint.length; ++i) {
            this.listPoint.push(v2(data.listPoint[i].x, data.listPoint[i].y));
          }
        };

        _proto.getPoint = function getPoint(step) {
          if (step >= this.listPoint.length) return null;
          return this.listPoint[step];
        };

        _proto.getMaxStep = function getMaxStep() {
          return this.listPoint.length;
        };

        _proto.getLastPoint = function getLastPoint() {
          return this.listPoint[this.listPoint.length - 1];
        };

        return gfptCurvePoint;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWallet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Component, warn, formatCoin;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
      warn = module.warn;
    }, function (module) {
      formatCoin = module.formatCoin;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "09e66uiZfZIT6s8Ofzt04fG", "gfWallet", undefined);

      var INCREASING_TIME = 0.3;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var logError = warn;
      var gfWallet = exports('gfWallet', (_dec = ccclass('gfWallet'), _dec2 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfWallet, _Component);

        function gfWallet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "displayLabel", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_displayAmount", 0);

          _defineProperty(_assertThisInitialized(_this), "_rewardAmount", 0);

          _defineProperty(_assertThisInitialized(_this), "_targetAmount", 0);

          _defineProperty(_assertThisInitialized(_this), "_totalAmount", 0);

          _defineProperty(_assertThisInitialized(_this), "_isMe", false);

          _defineProperty(_assertThisInitialized(_this), "incSpeed", 0);

          return _this;
        }

        var _proto = gfWallet.prototype;

        _proto.forceUpdateWallet = function forceUpdateWallet(amount) {
          this._displayAmount = amount;
          this._targetAmount = amount;
          this._rewardAmount = 0;
          this.incSpeed = 0;
          this._totalAmount = amount;
          this.updateDisplay();
        };

        _proto.updateWallet = function updateWallet(amount) {
          this._targetAmount = amount - this._rewardAmount;

          if (this._displayAmount > this._targetAmount) {
            this._displayAmount = this._targetAmount;
          } else {
            this.incSpeed = (this._targetAmount - this._displayAmount) / INCREASING_TIME;
          }

          this._totalAmount = amount;
          this.updateDisplay();
        };

        _proto.addToDisplay = function addToDisplay(amount) {
          if (amount > this._rewardAmount) {
            logError("Reward Wallet Amount is negative!");
          }

          this._rewardAmount -= amount;
          this._targetAmount += amount;

          if (this._targetAmount > this._totalAmount) {
            this._targetAmount = this._totalAmount;
          }

          this.incSpeed = (this._targetAmount - this._displayAmount) / INCREASING_TIME;
        };

        _proto.addGoldReward = function addGoldReward(reward) {
          this._rewardAmount += reward;
        };

        _proto.update = function update(dt) {
          if (this._displayAmount == this._targetAmount) return;
          this._displayAmount += this.incSpeed * dt;

          if (this._displayAmount > this._targetAmount) {
            this._displayAmount = this._targetAmount;
          }

          this.updateDisplay();
        };

        _proto.updateDisplay = function updateDisplay() {
          this.displayLabel.string = formatCoin(this._displayAmount);
        };

        _proto.getDisplayWallet = function getDisplayWallet() {
          return this._displayAmount;
        };

        _proto.getRealWallet = function getRealWallet() {
          return this._totalAmount;
        };

        _proto.resetOnExit = function resetOnExit() {
          this.displayLabel.string = '';
        };

        return gfWallet;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "displayLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoisonEffect1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, ParticleSystem2D, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ParticleSystem2D = module.ParticleSystem2D;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0aa69pz//ZPWKHxp20tCNed", "PoisonEffect1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PoisonEffect1988 = exports('PoisonEffect1988', (_dec = ccclass('PoisonEffect1988'), _dec(_class = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(PoisonEffect1988, _gfNode);

        function PoisonEffect1988() {
          return _gfNode.apply(this, arguments) || this;
        }

        var _proto = PoisonEffect1988.prototype;

        _proto.unuse = function unuse() {
          _gfNode.prototype.unuse.call(this);

          this.getComponent(ParticleSystem2D).emissionRate = 5;
        };

        return PoisonEffect1988;
      }(gfNode)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EC2Bullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './EnemyBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, EnemyBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      EnemyBullet = module.EnemyBullet;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "0af6eTrZEpI2ZlC1MRV+0q6", "EC2Bullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EC2Bullet = exports('EC2Bullet', (_dec = ccclass('EC2Bullet'), _dec(_class = /*#__PURE__*/function (_EnemyBullet) {
        _inheritsLoose(EC2Bullet, _EnemyBullet);

        function EC2Bullet() {
          return _EnemyBullet.apply(this, arguments) || this;
        }

        var _proto = EC2Bullet.prototype;

        _proto.init = function init(from, to, moveSpeed, delay) {
          if (moveSpeed === void 0) {
            moveSpeed = 400;
          }

          if (delay === void 0) {
            delay = 0;
          }

          _EnemyBullet.prototype.init.call(this, from, to, moveSpeed, delay);

          this.node.angle = this.node.angle - 90;
        };

        return EC2Bullet;
      }(EnemyBullet)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLuckyEffect.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, tween, v3, Tween, setOpacity, gfBaseEvents, rotateBy, fadeIn, stopAllActions, gfEventEmitter, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      v3 = module.v3;
      Tween = module.Tween;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      rotateBy = module.rotateBy;
      fadeIn = module.fadeIn;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "0b23deizqlFKZkw3Wpjbkmk", "gfLuckyEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLuckyEffect = exports('default', (_dec = ccclass('gfLuckyEffect'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfLuckyEffect, _gfNode);

        function gfLuckyEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "circle1Node", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "numberNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "multiNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "iconGlow", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pinNode", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "rotateTime", 3);

          return _this;
        }

        var _proto = gfLuckyEffect.prototype;

        _proto.initData = function initData(data) {
          for (var i = 0; i < this.multiNode.length; ++i) {
            this.multiNode[i].setScale(1, 1, 1);
          }

          tween(this.circle1Node).by(this.rotateTime, {
            angle: 360 * 4
          }).repeatForever().start();
          this.playEffect(data);
        };

        _proto.playEffect = function playEffect(data) {
          var _this2 = this;

          var multiplier = data.Multiplier;
          var result = multiplier - 2;
          var showTime = 0.5;
          var fadeTime = 0.2;
          this.iconGlow.active = true;
          setOpacity(this.iconGlow, 0);
          this.numberNode.angle = result * 90;
          tween(this.numberNode).parallel(tween().then(rotateBy(this.rotateTime, -360 * 3, "cubicOut")), tween().then(fadeIn(this.rotateTime, "cubicOut"))).start();
          tween(this.pinNode).then(fadeIn(0.5)).start();
          tween(this.node).to(showTime, {
            scale: v3(1, 1, 1)
          }).delay(this.rotateTime - showTime).call(function () {
            tween(_this2.multiNode[result]).delay(fadeTime).to(showTime, {
              scale: v3(1.5, 1.5, 1)
            }).call(function () {
              tween(_this2.node).to(showTime + fadeTime, {
                scale: v3(0, 0, 1)
              }).call(function () {
                gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_LUCKY_EFFECT_DONE, data);

                _this2.returnPool();
              }).start();
            }).start();
          }).start();
        };

        _proto.update = function update() {
          var _this3 = this;

          this.multiNode.forEach(function (element) {
            element.angle = -_this3.numberNode.angle;
          });
        };

        _proto.reuse = function reuse(poolMng) {
          _gfNode.prototype.reuse.call(this, poolMng);
        };

        _proto.unuse = function unuse() {
          this.unscheduleAllCallbacks();
          setOpacity(this.numberNode, 0);
          Tween.stopAllByTarget(this.circle1Node);
          this.circle1Node.setScale(1, 1, 1);
          this.circle1Node.setPosition(0, 0, 0);
          setOpacity(this.circle1Node, 255);
          setOpacity(this.pinNode, 255);
          stopAllActions(this.node);

          for (var i = 0; i < this.multiNode.length; ++i) {
            stopAllActions(this.multiNode[i]);
          }

          _gfNode.prototype.unuse.call(this);
        };

        return gfLuckyEffect;
      }(gfNode), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "circle1Node", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "numberNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "multiNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "iconGlow", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "pinNode", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SwipeComponent1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1985.ts', './PageView1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, v3, UITransform, Component, gfEventEmitter, EventsCode1985, PageView1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      v3 = module.v3;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      PageView1985 = module.PageView1985;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "0b76f/5tV9N+K1pvcUHkXw0", "SwipeComponent1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DIRECTION = {
        NONE: 0,
        LEFT: 1,
        RIGHT: 2
      };
      var MAPPING_ID_WITH_SPRITE_ID = {
        "0": 0,
        "1": 1,
        "2": 2,
        "3": 0,
        "4": 1,
        "5": 2
      };
      var DELTA_X = 30;
      var SwipeComponent1985 = exports('SwipeComponent1985', (_dec = ccclass('SwipeComponent1985'), _dec2 = property(Node), _dec3 = property(PageView1985), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SwipeComponent1985, _Component);

        function SwipeComponent1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrItems", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "autoScrollSpeed", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "defaultPageIndex", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pageView", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_touchPos", null);

          _defineProperty(_assertThisInitialized(_this), "_touchMoveDirection", DIRECTION.NONE);

          _defineProperty(_assertThisInitialized(_this), "_curPosItemActive", null);

          _defineProperty(_assertThisInitialized(_this), "_isAutoScrolling", false);

          _defineProperty(_assertThisInitialized(_this), "_totalItem", 0);

          _defineProperty(_assertThisInitialized(_this), "_autoScrollDistance", 0);

          _defineProperty(_assertThisInitialized(_this), "_scrollDirection", DIRECTION.NONE);

          _defineProperty(_assertThisInitialized(_this), "_itemLeftBoundary", null);

          _defineProperty(_assertThisInitialized(_this), "_itemRightBoundary", null);

          _defineProperty(_assertThisInitialized(_this), "_center", v3(0, 0, 0));

          _defineProperty(_assertThisInitialized(_this), "_curItemIdx", 0);

          _defineProperty(_assertThisInitialized(_this), "_curSpriteFrameIdx", 0);

          _defineProperty(_assertThisInitialized(_this), "_isTouchOnItem", false);

          return _this;
        }

        var _proto = SwipeComponent1985.prototype;

        _proto.onLoad = function onLoad() {
          // Register Touch Event
          this.node.on(Node.EventType.TOUCH_START, this.onTouchBegan, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMoved, this);
          this.node.on(Node.EventType.TOUCH_END, this.onTouchEnded, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
          this.initItemList();
        };

        _proto.initItemList = function initItemList() {
          this._totalItem = this.arrItems.length;
          this.registerEventTouchItem();
        };

        _proto.registerEventTouchItem = function registerEventTouchItem() {
          var _this2 = this;

          var _loop = function _loop(index) {
            var item = _this2.arrItems[index];
            item["value"] = index;
            var posStart = v3(0, 0, 0);
            item.on(Node.EventType.TOUCH_START, function (event) {
              posStart = event.getLocation();
            });
            item.on(Node.EventType.TOUCH_END, function (event) {
              var posEnd = event.getLocation();
              var offset = Math.abs(posEnd.x - posStart.x);

              if (offset < 10) {
                _this2._curItemIdx = item["value"];
                _this2._isTouchOnItem = true;

                _this2.scrollToItem(_this2._curItemIdx);

                gfEventEmitter.instance.emit(EventsCode1985.SOUND.SHOW_BUTTON_CLICK);
              }
            });
          };

          for (var index = 0; index < this.arrItems.length; index++) {
            _loop(index);
          }
        };

        _proto.getCurrentItem = function getCurrentItem() {
          if (this._curItemIdx >= 0) {
            return this.arrItems[this._curItemIdx];
          }
        };

        _proto.reset = function reset() {
          this._curItemIdx = this.defaultPageIndex;
          this.scrollToItem(this._curItemIdx);
          this._curSpriteFrameIdx = this._curItemIdx;
          this.pageView.resetTo(this._curSpriteFrameIdx);
        };

        _proto.onTouchBegan = function onTouchBegan(event) {
          this._touchPos = event.getLocation();

          if (this._isTouchOnItem) {
            this._isTouchOnItem = false;
          }
        };

        _proto.onTouchMoved = function onTouchMoved(event) {
          this.handleMoveLogic(event);
        };

        _proto.onTouchEnded = function onTouchEnded(event) {
          var _isAutoScroll = false;

          if (this._touchPos.x - event.getPreviousLocation().x != 0.0) {
            _isAutoScroll = true;
          }

          if (_isAutoScroll) {
            var touchPoint = event.getLocation();
            var offset = this._touchPos.x - touchPoint.x;
            this.handleReleaseLogic(offset);
          }
        };

        _proto.onTouchCancel = function onTouchCancel(event) {
          var touchPoint = event.getLocation();
          var offset = this._touchPos.x - touchPoint.x;
          this.handleReleaseLogic(offset);
        };

        _proto.handleMoveLogic = function handleMoveLogic(touch) {
          var touchPoint = touch.getLocation();
          var offset = touchPoint.x - touch.getPreviousLocation().x;

          if (offset < 0) {
            this._touchMoveDirection = DIRECTION.LEFT;
          } else if (offset > 0) {
            this._touchMoveDirection = DIRECTION.RIGHT;
          }

          this.moveItem(offset);
        };

        _proto.moveItem = function moveItem(offset) {
          this.arrItems.forEach(function (item) {
            if (item) {
              var _item$position = item.position,
                  x = _item$position.x,
                  y = _item$position.y,
                  z = _item$position.z;
              var newPosX = x + offset;
              item.setPosition(newPosX, y, z);
            }
          });
        };

        _proto.handleReleaseLogic = function handleReleaseLogic(offset) {
          var _this3 = this;

          var distanceBetween = Math.abs(this.arrItems[0].getPosition().x - this.arrItems[1].getPosition().x) / 2;
          var isScrollOverScreen = true;

          if (Math.abs(offset) < distanceBetween && Math.abs(offset) > DELTA_X) {
            this._curItemIdx += offset < 0 ? -1 : 1;
            this._curItemIdx = this._curItemIdx < 0 ? this.arrItems.length - 1 : this._curItemIdx;
            this._curItemIdx = this._curItemIdx > this.arrItems.length - 1 ? 0 : this._curItemIdx;
            this.scrollToItem(this._curItemIdx);
            return;
          } else if (this._isTouchOnItem) {
            this._isTouchOnItem = false;
            return;
          }

          this.arrItems.forEach(function (item) {
            var realPos = _this3.node.getComponent(UITransform).convertToNodeSpaceAR(item.worldPosition);

            var distance = Math.abs(realPos.x - _this3._center.x);

            if (distance <= item.getComponent(UITransform).width / 2) {
              isScrollOverScreen = false;
              _this3._curItemIdx = item["value"];
            }
          });

          if (isScrollOverScreen) {
            if (this._itemLeftBoundary && this._itemLeftBoundary.x > this._center.x) {
              this._curItemIdx = 0;
            } else if (this._itemRightBoundary && this._itemRightBoundary.x < this._center.x) {
              this._curItemIdx = this.arrItems.length - 1;
            }
          }

          this.scrollToItem(this._curItemIdx);
        };

        _proto.moveToNextItem = function moveToNextItem() {
          if (this._curItemIdx < this.arrItems.length - 1) {
            this.scrollToItem(this._curItemIdx + 1);
          }
        };

        _proto.moveToPreviousItem = function moveToPreviousItem() {
          if (this._curItemIdx > 1) {
            this.scrollToItem(this._curItemIdx - 1);
          }
        };

        _proto.canScrollPlaySound = function canScrollPlaySound() {
          var isCenter = false;
          this.arrItems.forEach(function (item) {
            if (item.position.x === 0.0) {
              isCenter = true;
            }
          });

          if (!this._isAutoScrolling) {
            if (isCenter) {
              return true;
            }
          }

          return false;
        };

        _proto.scrollToItem = function scrollToItem(idx) {
          idx = parseInt(idx);

          if (idx >= this.arrItems.length) {
            idx = this.arrItems.length - 1;
          }

          this._curItemIdx = idx;
          var curItem = this.arrItems[idx];
          var realPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(curItem.worldPosition);
          this._autoScrollDistance = realPos.x - this._center.x;
          this.autoScrollSpeed = Math.abs(this._autoScrollDistance) / 0.2;
          this._scrollDirection = this._touchMoveDirection = this._autoScrollDistance > 0 ? DIRECTION.LEFT : DIRECTION.RIGHT;
          this._isAutoScrolling = true;
        };

        _proto._autoScroll = function _autoScroll(dt) {
          if (this._scrollDirection == DIRECTION.RIGHT) {
            var step = this.autoScrollSpeed * dt;

            if (this._autoScrollDistance + step >= 0.0) {
              step = -this._autoScrollDistance;
              this._autoScrollDistance = 0.0;
              this._isAutoScrolling = false;
              var idx = MAPPING_ID_WITH_SPRITE_ID[this._curItemIdx];

              if (this._curSpriteFrameIdx != idx) {
                this._curSpriteFrameIdx = idx;
                this.pageView.scrollToPage(this._curSpriteFrameIdx);
              }
            } else {
              this._autoScrollDistance += step;
            }

            this.moveItem(step);
          } else {
            var _step = this.autoScrollSpeed * dt;

            if (this._autoScrollDistance - _step <= 0.0) {
              _step = this._autoScrollDistance;
              this._autoScrollDistance = 0.0;
              this._isAutoScrolling = false;
              var _idx = MAPPING_ID_WITH_SPRITE_ID[this._curItemIdx];

              if (this._curSpriteFrameIdx != _idx) {
                this._curSpriteFrameIdx = _idx;
                this.pageView.scrollToPage(this._curSpriteFrameIdx);
              }
            } else {
              this._autoScrollDistance -= _step;
            }

            this.moveItem(-_step);
          }
        };

        _proto.update = function update(dt) {
          var _this4 = this;

          this.arrItems.forEach(function (item) {
            _this4.updateItemStatus(item);
          });
          this.checkIsFirstOrEnd(this._touchMoveDirection == DIRECTION.LEFT);

          if (this._isAutoScrolling) {
            this._autoScroll(dt);
          }
        };

        _proto.updateItemStatus = function updateItemStatus(item) {
          var realPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(item.worldPosition);
          var distance = Math.abs(realPos.x - this._center.x);
          var isActive = distance > item.getComponent(UITransform).width / 2 ? false : true;

          if (item.getChildByName("itemActive").active != isActive) {
            item.getChildByName("itemActive").active = isActive;

            if (item.getChildByName("itemActive").active) {
              this._curItemIdx = item["value"];
            }
          }
        };

        _proto.checkIsFirstOrEnd = function checkIsFirstOrEnd(isSwipeLeft) {
          if (!isSwipeLeft) {
            var firstIndexID = this._curItemIdx == 0 ? this.arrItems.length - 1 : this._curItemIdx - 1;
            var beforeFirstIndexID = firstIndexID - 1;

            if (beforeFirstIndexID < 0) {
              beforeFirstIndexID = this.arrItems.length - 1;
            }

            var buttonBeforeFirstIndex = this.arrItems[beforeFirstIndexID];
            var buttonFirstIndex = this.arrItems[firstIndexID];

            var _buttonBeforeFirstInd = buttonBeforeFirstIndex.getPosition(),
                y = _buttonBeforeFirstInd.y,
                z = _buttonBeforeFirstInd.z;

            var newPosX = buttonFirstIndex.getPosition().x - 250;
            buttonBeforeFirstIndex.setPosition(newPosX, y, z);
          } else {
            var lastIndexID = this._curItemIdx == this.arrItems.length - 1 ? 0 : this._curItemIdx + 1;
            var afterLastIndexID = lastIndexID + 1;

            if (afterLastIndexID > this.arrItems.length - 1) {
              afterLastIndexID = 0;
            }

            var buttonAfterLastIndex = this.arrItems[afterLastIndexID];
            var buttonLastIndex = this.arrItems[lastIndexID];

            var _buttonAfterLastIndex = buttonAfterLastIndex.getPosition(),
                _y = _buttonAfterLastIndex.y,
                _z = _buttonAfterLastIndex.z;

            var _newPosX = buttonLastIndex.getPosition().x + 250;

            buttonAfterLastIndex.setPosition(_newPosX, _y, _z);
          }
        };

        return SwipeComponent1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrItems", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "autoScrollSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultPageIndex", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pageView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnergyController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './Config1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, tween, v3, UITransform, v2, Component, v3f, bezierTo, fadeTo, gfEventEmitter, EventsCode1985, Config1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      v3 = module.v3;
      UITransform = module.UITransform;
      v2 = module.v2;
      Component = module.Component;
    }, function (module) {
      v3f = module.v3f;
      bezierTo = module.bezierTo;
      fadeTo = module.fadeTo;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "0be9e+5TR5NVpETA9vUBcVo", "EnergyController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnergyController1985 = exports('EnergyController1985', (_dec = ccclass('EnergyController1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EnergyController1985, _Component);

        function EnergyController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "itemID", null);

          _defineProperty(_assertThisInitialized(_this), "isPick", false);

          return _this;
        }

        var _proto = EnergyController1985.prototype;

        _proto.getIsPick = function getIsPick() {
          return this.isPick;
        };

        _proto.setIsPick = function setIsPick(isPick) {
          if (isPick === void 0) {
            isPick = true;
          }

          this.isPick = isPick;
        };

        _proto.playAnimRemoveEnergy = function playAnimRemoveEnergy() {
          var _this2 = this;

          if (!this.isPick) return;
          tween(this.node).sequence(tween().to(0.15, {
            scale: v3(1.3, 1.3, 0)
          }), tween().to(0.15, {
            scale: v3(0, 0, 0)
          })).call(function () {
            _this2.node.removeFromParent();

            _this2.node.destroy();
          }).start();
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.PLAYER_SEND_PIECE_ENERGY, {
            ItemID: this.itemID
          });
        };

        _proto.initData = function initData(data) {
          this.itemID = data.ItemID;
          var pos = data.Position;
          this.setIsPick(false);
          this.playAnimSplashEnergy(pos);
          this.scheduleOnce(this.setIsPick, 3.5);
        };

        _proto.playAnimSplashEnergy = function playAnimSplashEnergy(pos) {
          var _this$node$getPositio = this.node.getPosition(),
              x = _this$node$getPositio.x,
              y = _this$node$getPositio.y;

          var heightParent = this.node.parent.getComponent(UITransform).height;
          var pos2 = pos.PosY > y ? v2(x, heightParent - 200) : v2(pos.PosX, y + 150);
          var pos3 = v2(pos.PosX, pos.PosY);
          var configPos = [v2(x, y), pos2, pos3];
          this.node.scale = v3f(0);
          tween(this.node).parallel(tween().then(bezierTo(2, configPos, "backOut")), tween().to(2, {
            scale: v3f(1)
          }, {
            easing: "backOut"
          })).repeat(4, tween().then(fadeTo(0.125, 150, "backOut")).then(fadeTo(0.125, 255, "backIn"))).start();
        };

        _proto.update = function update(dt) {
          var _this$node$getPositio2 = this.node.getPosition(),
              x = _this$node$getPositio2.x,
              y = _this$node$getPositio2.y;

          y += dt * Config1985.instance.BackgroundSpeed;

          if (y < -100) {
            this.node.removeFromParent();
            this.node.destroy();
          }

          this.node.setPosition(x, y, 0);
        };

        return EnergyController1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadingScene.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfReferenceManager.ts', './loadConfigAsync.ts', './gameCommonUtils.ts', './gfMainFSM.ts', './gfAssetBundle.ts', './gfMainController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, ProgressBar, Node, instantiate, assetManager, director, Prefab, error, Component, gfBaseConfig, gfReferenceManager, loadConfigAsync, gameCommonUtils, gfMainFSM, gfAssetBundle, gfMainController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Node = module.Node;
      instantiate = module.instantiate;
      assetManager = module.assetManager;
      director = module.director;
      Prefab = module.Prefab;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfAssetBundle = module.default;
    }, function (module) {
      gfMainController = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "10321Y4ew9IiqXDfRUMG3rZ", "gfLoadingScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLoadingScene = exports('gfLoadingScene', (_dec = ccclass('gfLoadingScene'), _dec2 = property(ProgressBar), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfLoadingScene, _Component);

        function gfLoadingScene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "isLoadByBundle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "processBar", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "loadingGlow", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "homeBtn", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "persistNodeName", 'PersisNodeContainer');

          _defineProperty(_assertThisInitialized(_this), "MaxStep", 3);

          _defineProperty(_assertThisInitialized(_this), "listSceneName", void 0);

          _defineProperty(_assertThisInitialized(_this), "persistNodePrefab", null);

          _defineProperty(_assertThisInitialized(_this), "isLoadByPrefab", false);

          _defineProperty(_assertThisInitialized(_this), "_targetPercent", 0);

          _defineProperty(_assertThisInitialized(_this), "_speed", 0);

          _defineProperty(_assertThisInitialized(_this), "_currentProgress", 0);

          return _this;
        }

        var _proto = gfLoadingScene.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          this.initGameConfig();
          this.initAssetBundle();

          if (this.isLoadByPrefab) {
            gfBaseConfig.instance.MainGameNode = this.node.parent;
            gfBaseConfig.instance.LoadGameByPrefab = true;
            var persistNode = instantiate(this.persistNodePrefab);
            this.node.parent.addChild(persistNode);
            gfReferenceManager.instance.setData({
              CurrentScene: this.node
            });
            gfMainController.instance.initToken();
          } else if (this.isLoadByBundle) {
            gfBaseConfig.instance.MainGameNode = this.node.parent;
            gfBaseConfig.instance.LoadGameByPrefab = true;
            gfAssetBundle.instance.GameBundle = assetManager.getBundle(gfBaseConfig.instance.BundleName);

            if (!gfAssetBundle.instance.GameBundle) {
              assetManager.loadBundle(gfBaseConfig.instance.BundleName, function (err, bundle) {
                if (err) {
                  console.error("Error while loading bundle" + err);
                } else {
                  gfAssetBundle.instance.GameBundle = bundle;

                  _this2.loadAssetsData();
                }
              });
            } else {
              this.loadAssetsData();
            }
          } else {
            this.preloadScene(0);
          }

          if (this.homeBtn) {
            this.homeBtn.active = false;

            if (!LOGIN_IFRAME) {
              this.homeBtn.off('click');
              this.homeBtn.on('click', function () {
                _this2.ExitGame();
              });
              this.scheduleOnce(function () {
                _this2.homeBtn.active = true;
              }, 10);
            }
          }
        };

        _proto.ExitGame = function ExitGame() {
          gfMainFSM.instance._fsm.goExitGame();

          gameCommonUtils.handleFlowOutGame();
        };

        _proto.initGameConfig = function initGameConfig() {
          if (!gfBaseConfig.instance) {
            new gfBaseConfig();
          }
        };

        _proto.initAssetBundle = function initAssetBundle() {
          if (!gfAssetBundle.instance) {
            new gfAssetBundle();
          }
        };

        _proto.setGameAndLobbyPrefab = function setGameAndLobbyPrefab(gamePrefab, lobbyPrefab, persistNodePrefab) {
          this.initGameConfig();
          gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName.Game] = gamePrefab;
          gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName.Lobby] = lobbyPrefab;
          this.persistNodePrefab = persistNodePrefab;
          this.isLoadByPrefab = true;
        };

        _proto.preloadScene = function preloadScene(indexScene) {
          var _this3 = this;

          if (indexScene === void 0) {
            indexScene = 0;
          }

          var listSceneName = Object.keys(gfBaseConfig.instance.SceneName);
          var sceneName = gfBaseConfig.instance.SceneName[listSceneName[indexScene]];
          var totalScene = listSceneName.length;
          director.preloadScene(sceneName, function (completedCount, totalCount, item) {
            _this3.updateLoadingProgress(indexScene + 1, completedCount / totalCount);
          }, function (error) {
            if (error) {
              _this3.ExitGame();
            } else {
              if (gfMainFSM.instance.isStateExit()) return;
              indexScene++;

              if (indexScene != totalScene) {
                _this3.preloadScene(indexScene);
              } else {
                gfReferenceManager.instance.setData({
                  CurrentScene: _this3.node
                });
                gfMainController.instance.initToken();
              }
            }
          });
        };

        _proto.loadAssetsData = function loadAssetsData() {
          var _this4 = this;

          if (!gfAssetBundle.instance.GameBundle) return;
          this.listSceneName = Object.keys(gfBaseConfig.instance.SceneName);
          var totalScene = this.listSceneName.length;
          this.MaxStep = totalScene + 1; // add 1 step load prefab persist node

          gfAssetBundle.instance.GameBundle.load(this.persistNodeName, Prefab, function (finished, total, item) {
            var percent = finished / total;

            _this4.updateLoadingProgress(0, percent);
          }, function (error, assets) {
            if (error) {
              _this4.ExitGame();

              return;
            }

            var persistNode = instantiate(assets);

            _this4.node.parent.addChild(persistNode);

            if (_this4.homeBtn) _this4.homeBtn.active = false;

            _this4.unscheduleAllCallbacks();

            _this4.loadSceneBundle(0); // this.preloadScene(0);

          });
        };

        _proto.loadSceneBundle = function loadSceneBundle(sceneIndex) {
          var _this5 = this;

          gfAssetBundle.instance.GameBundle.load('./Scenes/' + gfBaseConfig.instance.SceneName[this.listSceneName[sceneIndex]], Prefab, function (finished, total, item) {
            var percent = finished / total;

            _this5.updateLoadingProgress(sceneIndex + 1, percent);
          }, function (err, prefab) {
            if (err) {
              error(err);

              _this5.ExitGame();

              return;
            }

            gfBaseConfig.instance.ScenePrefabs[gfBaseConfig.instance.SceneName[_this5.listSceneName[sceneIndex]]] = prefab;

            if (sceneIndex < _this5.listSceneName.length - 1) {
              _this5.loadSceneBundle(sceneIndex + 1);
            } else {
              gfReferenceManager.instance.setData({
                CurrentScene: _this5.node
              });
              gfMainController.instance.initToken();
            }
          });
        };

        _proto.updateLoadingProgress = function updateLoadingProgress(step, currentPercent) {
          var percent = (step + currentPercent) / this.MaxStep;
          if (percent <= this._currentProgress) return;
          this._targetPercent = percent;
          this._speed = (percent - this._currentProgress) / ((1.0 - percent) * 3 + 0.1);
        };

        _proto.update = function update(dt) {
          this._currentProgress += this._speed * dt;
          this.updateLoadingProgressDisplay();
        };

        _proto.updateLoadingProgressDisplay = function updateLoadingProgressDisplay() {
          this.processBar.progress = Number(this._currentProgress.toFixed(3));
          if (this.processBar.progress > 1.0) this.processBar.progress = 1.0;

          if (this.loadingGlow) {
            var currentPosGlow = this.loadingGlow.getPosition();
            var newPosX = Math.max(currentPosGlow.x, this.processBar.totalLength * this.processBar.progress);
            this.loadingGlow.setPosition(newPosX, currentPosGlow.y, 0);
          }
        };

        return gfLoadingScene;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isLoadByBundle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "processBar", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "loadingGlow", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "homeBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemySP2.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './EnemySP2Move.ts', './SpineFish1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, tween, v3, gfBaseEvents, shake, call, gfEventEmitter, EventsCode1985, EnemySP2Move, SpineFish1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      shake = module.shake;
      call = module.call;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      EnemySP2Move = module.EnemySP2Move;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "10426Z7qpFH4q7gFkKQLx/x", "EnemySP2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemySP2 = exports('EnemySP2', (_dec = ccclass('EnemySP2'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_SpineFish) {
        _inheritsLoose(EnemySP2, _SpineFish);

        function EnemySP2() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SpineFish.call.apply(_SpineFish, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "effExplore", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "exploreDuration", 1.33);

          return _this;
        }

        var _proto = EnemySP2.prototype;

        _proto.initFishData = function initFishData(data) {
          var _this2 = this;

          _SpineFish.prototype.initFishData.call(this, data);

          this.FormationID = data.FormationID;
          this.IndexInGroup = data.IndexInGroup - 1;
          this.pathID = data.PathID;
          this.fishAnim.paused = false;
          this.moveComp = this.getComponent(EnemySP2Move);
          this.moveComp.setCompleteCallback(function () {
            _this2.onDie();
          });
          this.moveComp.setUpMove(data);
          this.setOpacity(255);

          if (data.EnvObjectKind != undefined && data.EnvObjectKind != null) {
            gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.CREATE_ENV_OBJECT, {
              EnvObjectKind: data.EnvObjectKind,
              PosX: data.PosX,
              isResume: data.isResume,
              BuildTick: data.BuildTick
            });
          }
        };

        _proto.onCatch = function onCatch(data) {
          var _this3 = this;

          this.stopAllActions();
          this.resetColor();
          this._isDie = true;
          var moveComp = this.moveComp;
          moveComp.onWaitDie();
          this.moveAction = tween(this.fishAnim.node);
          this.moveAction.then(shake(this.fishAnim.node.position, 0.25));
          this.moveAction.then(call(function () {
            _this3.playEffectDie(data);
          }));
          this.moveAction.start();
        };

        _proto.playEffectDie = function playEffectDie(data) {
          var _this4 = this;

          this.effExplore.node.active = true;
          this.effExplore.setAnimation(0, "animation", false);
          var fishPos = this.getLockPositionByWorldSpace();
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.DESTROY_SP2);
          this.scheduleOnce(function () {
            _this4.moveComp.playEffectWinInCatchFish(data);

            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, {
              fishPos: fishPos,
              deskStation: data.DeskStation
            });
          }, 0.5);
          this.scheduleOnce(function () {
            _SpineFish.prototype.playEffectDie.call(_this4, data);
          }, this.exploreDuration * 0.8);
        };

        _proto.unuse = function unuse() {
          _SpineFish.prototype.unuse.call(this);

          this.effExplore.node.active = false;
          this.fishAnim.node.setPosition(v3(0, 0, 0));
        };

        return EnemySP2;
      }(SpineFish1985), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "effExplore", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillUltimateComponent1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './FishManager1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, sp, UITransform, Component, FishManager1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      sp = module.sp;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      FishManager1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "11054WC72lOzLGHMYmevuL7", "SkillUltimateComponent1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillUltimateComponent1985 = exports('SkillUltimateComponent1985', (_dec = ccclass('SkillUltimateComponent1985'), _dec2 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillUltimateComponent1985, _Component);

        function SkillUltimateComponent1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "fxSkill", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sizeBoxES1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "scaleTimeAnim", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "listFish", []);

          _defineProperty(_assertThisInitialized(_this), "DeskStation", null);

          _defineProperty(_assertThisInitialized(_this), "skillID", 0);

          return _this;
        }

        var _proto = SkillUltimateComponent1985.prototype;

        _proto.initData = function initData(rewardData) {
          var data = rewardData.data,
              skillID = rewardData.skillID;
          var listFish = data.ListFish;

          for (var i = 0; i < listFish.length; i++) {
            var fish = listFish[i];
            var infoDetail = {
              DeskStation: data.DeskStation,
              FishID: fish.FishID,
              FishKind: fish.FishKind,
              GoldReward: fish.GoldReward,
              BulletMultiple: data.BulletMultiple,
              itemInfo: fish.itemInfo,
              isSkill: true,
              skillID: data.SkillID
            };
            this.listFish.push(infoDetail);
          }

          this.skillID = skillID;
          this.DeskStation = data.DeskStation;
        };

        _proto.rewardListFishFake = function rewardListFishFake() {
          var fishCount = this.listFish.length;

          for (var i = 0; i < fishCount; ++i) {
            if (!this.listFish[i]) continue;
            var fish = FishManager1985.instance.getFishById(this.listFish[i].FishID);

            if (!fish) {
              var data = this.listFish.splice(i, 1);
              FishManager1985.instance.catchFish(data[0]);
            }
          }
        };

        _proto.getFishById = function getFishById(id) {
          for (var i = 0; i < this.listFish.length; ++i) {
            if (this.listFish[i].FishID == id) {
              var data = this.listFish.splice(i, 1);
              return data[0];
            }
          }

          return null;
        };

        _proto.rewardAllListFish = function rewardAllListFish() {
          var fishCount = this.listFish.length;

          for (var i = 0; i < fishCount; ++i) {
            var data = this.listFish.shift();
            FishManager1985.instance.catchFish(data);
          }
        };

        _proto.randomFrameAnimation = function randomFrameAnimation(node) {
          var spineFX = node.getComponent(sp.Skeleton);
          var durAnim = spineFX.getCurrent(0).animation.duration;
          var dur = Math.random() * (durAnim - durAnim / 3);
          spineFX.getCurrent(0).startAnimation = dur;
          return dur;
        };

        _proto.scaleCalculation = function scaleCalculation(boxCollider) {
          var _boxCollider$getCompo = boxCollider.getComponent(UITransform),
              width = _boxCollider$getCompo.width;

          return width / this.sizeBoxES1;
        };

        return SkillUltimateComponent1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fxSkill", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sizeBoxES1", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 53;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "scaleTimeAnim", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotWinPopup.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './gf3DParticle.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, _createClass, cclegacy, _decorator, Component, Label, Node, v3, tween, Button, gfBaseEvents, fadeOut, stopAllActions, gfEventEmitter, gfBaseConfig, SetZIndex, formatCoin, gfDataStore, gf3DParticle;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
      Node = module.Node;
      v3 = module.v3;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      formatCoin = module.formatCoin;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "1209cTvFSNE5rzeau2KFyBh", "gfJackpotWinPopup", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfJackpotWinPopup = exports('gfJackpotWinPopup', (_dec = ccclass('gfJackpotWinPopup'), _dec2 = property(Component), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfJackpotWinPopup, _Component);

        function gfJackpotWinPopup() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "blackLayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtCoin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "particleCoin", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "animNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "winFrame", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "tweenCoin", void 0);

          _defineProperty(_assertThisInitialized(_this), "_coinValue", 0);

          _defineProperty(_assertThisInitialized(_this), "winValue", 0);

          _defineProperty(_assertThisInitialized(_this), "_duration", 9);

          return _this;
        }

        var _proto = gfJackpotWinPopup.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
        };

        _proto.setWinValue = function setWinValue(value) {
          this.winValue = value;
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.txtCoin.string = formatCoin(this._coinValue);
        };

        _proto.start = function start() {
          var _this2 = this;

          this.txtCoin.string = "0";
          this.winFrame.active = false;
          this.animNode.scale.set(v3(0, 0, 1));
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BIG_WIN);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN);
          this.particleCoin.active = true;
          this.particleCoin.getComponent(gf3DParticle).startAnimation();
          this.winFrame.active = true;
          this.winFrame.scale.set(1, 0.2);
          tween(this.winFrame).to(0.1, {
            scale: v3(1, 1, 1)
          }).start();
          tween(this.animNode).to(0.25, {
            scale: v3(1, 1, 1)
          }).start();
          this.scheduleOnce(function () {
            _this2.winFrame.getComponent(Button).interactable = true;
          }, 0.65);

          this._tweenCoin();
        };

        _proto._tweenCoin = function _tweenCoin() {
          var _this3 = this;

          var superValue = this.winValue * 0.75;
          var megaValue = this.winValue * 0.5;
          this.tweenCoin = tween(this).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = ratio * megaValue;
            }
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _this3.coinValue + ratio * (superValue - _this3.coinValue);
            }
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _this3.coinValue + (_this3.winValue - _this3.coinValue) * ratio;
            }
          }).call(function () {
            _this3.hideFn();
          });
          this.tweenCoin.start();
        };

        _proto.quickShow = function quickShow() {
          var _this4 = this;

          if (this.coinValue === this.winValue) {
            return;
          }

          this.winFrame.active = false;
          this.tweenCoin.stop();
          this.tweenCoin = tween(this).to(1, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this4.coinValue = _this4.coinValue + (_this4.winValue - _this4.coinValue) * ratio;
            }
          }).delay(1).call(function () {
            _this4.hideFn();
          }).start();
        };

        _proto.hideFn = function hideFn() {
          var _this5 = this;

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
          gfDataStore.instance.curBGMusic = null;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          tween(this.node).delay(.5).then(fadeOut(0.5)).call(function () {
            _this5.particleCoin.getComponent(gf3DParticle).stopAnimation();

            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.JACKPOT_WINAMOUNT_POPUP_CLOSE);
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM);
          }).removeSelf().start();
        };

        _proto.onDestroy = function onDestroy() {
          stopAllActions(this.node);

          if (this.tweenCoin) {
            gfDataStore.instance.curBGMusic = null;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
            this.tweenCoin.stop();
          }
        };

        _createClass(gfJackpotWinPopup, [{
          key: "coinValue",
          get: function get() {
            return this._coinValue;
          },
          set: function set(value) {
            this._coinValue = value;

            this._updateCoinWin();
          }
        }]);

        return gfJackpotWinPopup;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "blackLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "particleCoin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfPoolManager.ts', './gf3DParticle.ts', './gfBigWinWheel.ts', './gfDropSpecialGunFX.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, instantiate, v3, tween, UITransform, misc, Tween, isValid, Component, v2, getPostionInOtherNode, getRandomInt, gfBaseEvents, fadeOut, stopAllActions, v3f, fadeIn, moveTo, bezierTo, gfEventEmitter, gfBaseConfig, SetZIndex, registerEvent, randomBetween, formatCoin, removeEvents, gfReferenceManager, gfPoolManager, gf3DParticle, gfBigWinWheel, gfDropSpecialGunFX;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      v3 = module.v3;
      tween = module.tween;
      UITransform = module.UITransform;
      misc = module.misc;
      Tween = module.Tween;
      isValid = module.isValid;
      Component = module.Component;
      v2 = module.v2;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
      v3f = module.v3f;
      fadeIn = module.fadeIn;
      moveTo = module.moveTo;
      bezierTo = module.bezierTo;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      randomBetween = module.randomBetween;
      formatCoin = module.formatCoin;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfBigWinWheel = module.gfBigWinWheel;
    }, function (module) {
      gfDropSpecialGunFX = module.gfDropSpecialGunFX;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "13172rHP5NI1ZQsel6vXYj6", "gfEffectLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEffectLayer = exports('gfEffectLayer', (_dec = ccclass('gfEffectLayer'), _dec2 = property(Prefab), _dec3 = property(gfBigWinWheel), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEffectLayer, _Component);

        function gfEffectLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "particle3D", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bigWinWheels", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "itemLaser", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "itemBomb", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_listSkillItem", []);

          _defineProperty(_assertThisInitialized(_this), "_lisParticle", []);

          _defineProperty(_assertThisInitialized(_this), "_queueAnim", []);

          _defineProperty(_assertThisInitialized(_this), "_playingQueueAnim", false);

          return _this;
        }

        var _proto = gfEffectLayer.prototype;

        _proto.onLoad = function onLoad() {
          gfReferenceManager.instance.setData({
            EffectLayer: this.node
          });
          this.initEvents();

          for (var i = 0; i < this.bigWinWheels.length; i++) {
            var itemComp = this.bigWinWheels[i];
            itemComp.node.active = false;
            SetZIndex(itemComp.node.parent, gfBaseConfig.instance.Z_INDEX.BIGWIN);
            itemComp.index = i;
          }

          this._lisParticle.length = 0;
          this._listSkillItem.length = 0;
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.userExitBoard, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.playNetFX, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, this.playNetFX, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, this.playCoinReward, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, this.playDropGunLaser, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.CLEAR_DROP_GUN_LASER, this.clearDropGunLaserByDeskStation, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_BIG_WIN_EFFECT, this.onPlayEffectWinInCatchFish, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.TRIGGER_BOMB, this.triggerBombFX, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, this.playEffectFishSpecial, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, this.addAnimToQueueAnim, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM, this.checkQueueAnim, this);
          registerEvent(gfBaseEvents.DRAGON.BALL_ENTER_BIGWIN_WHEEL, this.onBallEnter, this);
        };

        _proto.playNetFX = function playNetFX(data) {
          var netFX = gfPoolManager.instance.getNetFX(data);

          if (netFX) {
            netFX.node.setParent(this.node);
            netFX.node.position = getPostionInOtherNode(this.node, data.bullet.node);
          }
        };

        _proto._playBigWinEffect = function _playBigWinEffect(data) {
          var _this2 = this;

          var deskStation = data.deskStation,
              beganPos = data.beganPos,
              gold = data.gold,
              bet = data.bet,
              isSkill = data.isSkill,
              fishKind = data.fishKind;

          if (gold === 0) {
            return;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.avatar.node);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
          var particle = instantiate(this.particle3D).getComponent(gf3DParticle);
          particle.node.parent = this.node;
          SetZIndex(particle.node, gfBaseConfig.instance.Z_INDEX.COIN);

          this._lisParticle.push(particle.node);

          particle.node.position = v3(beganPos.x, beganPos.y, 0);
          particle.setIsMe(player.isMe);
          particle.setLifetime(0.22);
          particle.setSpawnRate(8);
          particle.setItemSpeed(450, 650);
          particle.setGravity(-200);
          particle.setSpawnInterval(0.2);
          particle.setDuration(0.25);
          particle.startAnimation();
          tween(particle.node).delay(0.65).then(fadeOut(0.4)).removeSelf().call(function () {
            particle.stopAnimation();
            stopAllActions(particle.node);
            particle.node.destroy();

            var index = _this2._lisParticle.indexOf(particle.node);

            if (index >= 0) {
              _this2._lisParticle.splice(index, 1);
            }
          }).start();
          gfPoolManager.instance.createBigExplosion({
            position: beganPos
          });
          var playBigWin = !this._getWheel(player.index).isShowingDragonBall();

          this._playCoinLabelEffect({
            goldReward: gold,
            bulletMultiple: bet,
            labelPosition: beganPos,
            beganPos: beganPos,
            endPos: endPos,
            isSkill: isSkill,
            isMe: player.isMe,
            deskStation: deskStation,
            playBigWin: playBigWin,
            skipUpdateWallet: playBigWin
          });

          this.onPlayEffectWinInCatchFish({
            player: player,
            gold: gold,
            bet: bet,
            fishKind: fishKind
          });
        };

        _proto.onBallEnter = function onBallEnter(playerIndex) {
          var wheel = this._getWheel(playerIndex);

          var player = gfReferenceManager.instance.getPlayerByIndex(playerIndex);

          if (wheel && player.isActive()) {
            wheel.onBallEnter();
          }
        };

        _proto.onPlayEffectWinInCatchFish = function onPlayEffectWinInCatchFish(data) {
          var player = data.player,
              gold = data.gold,
              bet = data.bet,
              fishKind = data.fishKind;

          var wheel = this._getWheel(player.index);

          if (wheel) {
            wheel.showAnimation({
              gold: gold,
              bet: bet,
              isMe: player.isMe,
              fishKind: fishKind
            });
          }
        };

        _proto._getWheel = function _getWheel(idx) {
          if (this.bigWinWheels[idx]) {
            return this.bigWinWheels[idx];
          }

          return null;
        };

        _proto.getRandomPositionOutScreen = function getRandomPositionOutScreen() {
          var SceneBox = gfBaseConfig.instance.SceneBox;
          var x = [SceneBox.Left, SceneBox.Right][randomBetween(0, 1)];
          var y = randomBetween(SceneBox.Bottom + 100, SceneBox.Top - 100);
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(gfReferenceManager.instance.getNodeFishLayer().getComponent(UITransform).convertToWorldSpaceAR(v3(x, y, 0)));
        };

        _proto.getRandomPositionOutScreenByLaser = function getRandomPositionOutScreenByLaser(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          var rad = misc.degreesToRadians(player.getGunAngle());
          var x = Math.cos(rad) * 2060 + player.node.position.x;
          var y = Math.sin(rad) * 2060 + player.node.position.y;
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(gfReferenceManager.instance.getNodeFishLayer().getComponent(UITransform).convertToWorldSpaceAR(v3(x, y, 0)));
        };

        _proto.playCoinReward = function playCoinReward(rewardData) {
          var data = rewardData.data,
              fishPos = rewardData.fishPos,
              fishKind = rewardData.fishKind;

          if (fishPos) {
            fishPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
          } else if (data.skillID === gfBaseConfig.instance.SkillConfig.LASER) {
            fishPos = this.getRandomPositionOutScreenByLaser(data);
          } else {
            fishPos = this.getRandomPositionOutScreen();
          }

          var isBigwin = data.GoldReward >= data.BulletMultiple * gfBaseConfig.instance.BIG_WIN_RATIO.BIG_WIN_VALUE;

          if (isBigwin && !data.isSkill && !data.skipUpdateWallet) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 10
            });

            this._playBigWinEffect({
              deskStation: data.DeskStation,
              beganPos: fishPos,
              gold: data.GoldReward,
              bet: data.BulletMultiple,
              isSkill: data.isSkill,
              fishKind: fishKind
            });
          } else {
            var skipUpdateWallet = data.skipUpdateWallet;

            if (!skipUpdateWallet && data.isSkill) {
              var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
              skipUpdateWallet = !this._getWheel(player.index).isShowingDragonBall();
            }

            this._playCoinEffect({
              deskStation: data.DeskStation,
              fishKind: fishKind,
              beganPos: fishPos,
              goldReward: data.GoldReward,
              isSkill: data.isSkill,
              bulletMultiple: data.BulletMultiple,
              skipUpdateWallet: skipUpdateWallet
            });
          }
        };

        _proto._playCoinLabelEffect = function _playCoinLabelEffect(data) {
          var _this3 = this;

          var goldReward = data.goldReward,
              labelPosition = data.labelPosition,
              isMe = data.isMe;
          var label = gfPoolManager.instance.getLabelCoin(isMe);
          this.node.addChild(label.node);
          label.setString("+" + formatCoin(goldReward));
          label.setPosition(labelPosition.x, labelPosition.y, 0);
          SetZIndex(label.node, gfBaseConfig.instance.Z_INDEX.COIN_LABEL);
          label.node.scale = v3f(1.5);
          tween(label.node).to(0.2, {
            scale: v3f(1)
          }).to(0.1, {
            scale: v3f(1.5)
          }).to(0.1, {
            scale: v3f(1)
          }).delay(0.5).call(function () {
            _this3._playCoinAnim(data);
          }).to(0.25, {
            scale: v3f(0)
          }).call(function () {
            label.returnPool();
          }).start();
        };

        _proto._playCoinEffect = function _playCoinEffect(data) {
          var _this4 = this;

          var deskStation = data.deskStation,
              fishKind = data.fishKind,
              beganPos = data.beganPos,
              goldReward = data.goldReward,
              isSkill = data.isSkill,
              bulletMultiple = data.bulletMultiple,
              skipUpdateWallet = data.skipUpdateWallet;

          if (goldReward === 0) {
            return;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.avatar.node);

          if (fishKind === gfBaseConfig.instance.FISH_KIND.MINIBOSS) {
            beganPos.y -= 65;
          }

          if (isSkill) {
            gfPoolManager.instance.createSmallExplosion({
              position: beganPos
            });
            this.scheduleOnce(function () {
              _this4.playEffectCoin({
                beganPos: beganPos,
                goldReward: goldReward,
                bulletMultiple: bulletMultiple,
                endPos: endPos,
                isSkill: isSkill,
                player: player,
                deskStation: deskStation,
                skipUpdateWallet: skipUpdateWallet
              });
            }, 0.8);
          } else {
            this.playEffectCoin({
              beganPos: beganPos,
              goldReward: goldReward,
              bulletMultiple: bulletMultiple,
              endPos: endPos,
              isSkill: isSkill,
              player: player,
              deskStation: deskStation,
              skipUpdateWallet: skipUpdateWallet
            });
          }
        };

        _proto.playEffectCoin = function playEffectCoin(data) {
          var beganPos = data.beganPos,
              goldReward = data.goldReward,
              bulletMultiple = data.bulletMultiple,
              endPos = data.endPos,
              isSkill = data.isSkill,
              player = data.player,
              deskStation = data.deskStation,
              skipUpdateWallet = data.skipUpdateWallet;

          this._playCoinLabelEffect({
            goldReward: goldReward,
            bulletMultiple: bulletMultiple,
            labelPosition: beganPos,
            beganPos: beganPos,
            endPos: endPos,
            isSkill: isSkill,
            isMe: player.isMe,
            deskStation: deskStation,
            skipUpdateWallet: skipUpdateWallet
          });
        };

        _proto._playCoinAnim = function _playCoinAnim(data) {
          var _this5 = this;

          var goldReward = data.goldReward,
              bulletMultiple = data.bulletMultiple,
              beganPos = data.beganPos,
              endPos = data.endPos,
              isSkill = data.isSkill,
              deskStation = data.deskStation,
              playBigWin = data.playBigWin,
              skipUpdateWallet = data.skipUpdateWallet;
          var coinCount = this.calculateCoin(goldReward, bulletMultiple);

          if (!isSkill && !playBigWin) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_CATCH);
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);

          var _loop = function _loop(i) {
            var coinFx = player.isMe ? gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.MY_COIN) : gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.OTHER_COIN);

            _this5.node.addChild(coinFx.node);

            coinFx.node.setPosition(beganPos.x, beganPos.y, 0);
            coinFx.index = i;
            SetZIndex(coinFx.node, gfBaseConfig.instance.Z_INDEX.COIN);
            coinFx.startAnimation(0);
            coinFx.node.setScale(v3f(0.4));
            coinFx.setOpacity(0);
            var xRandom = i % 2 === 0 ? 15 + Math.random() * 5 : -(5 + Math.random() * 15);
            xRandom *= i;
            var yRandom = getRandomInt(-5, 5) * 7.5 - 50;
            var configPoint1 = v2(beganPos.x + (beganPos.x - endPos.x) * 0.3, beganPos.y);
            var configPoint2 = v2(endPos.x, beganPos.y + (beganPos.y - endPos.y) * 0.3);

            if (player.index < 2 && beganPos.y < endPos.y) {
              configPoint2.y = endPos.y + endPos.y - beganPos.y;
            }

            var bezierConfig = [configPoint1, configPoint2, endPos];
            var action = tween(coinFx.node);
            action.then(fadeIn(0.01));
            action.then(moveTo(0.175, beganPos.x + xRandom / 2, beganPos.y + 100, coinFx.node.position.z));
            action.call(function () {
              if (data.isMe && coinFx.index === 0 && !isSkill) {
                gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GOLD);
              }
            });
            action.then(moveTo(0.5, beganPos.x + xRandom, beganPos.y + yRandom, coinFx.node.position.z, 'bounceOut'));
            action.delay(0.15 + 0.05 * i);
            action.then(bezierTo(1, bezierConfig, 'sineIn'));
            action.call(function () {
              if (!skipUpdateWallet && i === 0 && data.isMe) {
                player.addToDisplayWallet(goldReward);
              }

              coinFx.stopAnimation();
            });
            action.start();
          };

          for (var i = 0; i < coinCount; ++i) {
            _loop(i);
          }
        };

        _proto.calculateCoin = function calculateCoin(goldReward, bullet) {
          var totalMultiply = goldReward / bullet;
          var coinCount = 0;

          if (totalMultiply < 10) {
            coinCount = 1;
          } else if (totalMultiply < 80) {
            coinCount = 3;
          } else if (totalMultiply < 150) {
            coinCount = 5;
          } else if (totalMultiply < 300) {
            coinCount = 6;
          } else {
            coinCount = 7;
          }

          return coinCount;
        };

        _proto.userExitBoard = function userExitBoard(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          var wheel = this._getWheel(player.index);

          if (wheel) {
            wheel.onUserExitBoard();
            wheel.hideAnimation(false);
          }
        };

        _proto.playDropGunLaser = function playDropGunLaser(_ref) {
          var _this6 = this;

          var fishPos = _ref.fishPos,
              deskStation = _ref.deskStation;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          if (!player) return;
          var itemLaserNode = instantiate(this.itemLaser);
          var itemLaserCompo = itemLaserNode.getComponent(gfDropSpecialGunFX);
          this.node.addChild(itemLaserNode);

          this._listSkillItem.push(itemLaserNode);

          var dataInfo = {
            angle: player.gun.angle,
            endPos: getPostionInOtherNode(this.node, player.gun),
            startPos: this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos),
            deskStation: deskStation
          };
          itemLaserCompo.playEffect(dataInfo, function (itemDrop) {
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.CHANGE_GUN_LASER, itemDrop.deskStation);

            _this6.clearDropGunLaserByDeskStation(itemDrop.deskStation);
          });
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER);
        };

        _proto.clearDropGunLaserByDeskStation = function clearDropGunLaserByDeskStation(deskStation) {
          if (!this._listSkillItem) return;
          var skillItem;

          for (var i = 0; i < this._listSkillItem.length; i++) {
            skillItem = this._listSkillItem[i];
            if (!skillItem.components || !skillItem.getComponent(gfDropSpecialGunFX)) continue;

            if (skillItem.getComponent(gfDropSpecialGunFX).deskStation === deskStation) {
              Tween.stopAllByTarget(skillItem);

              if (isValid(skillItem)) {
                skillItem.removeFromParent();
                skillItem.destroy();
              }

              this._listSkillItem.splice(i, 1);

              break;
            }
          }
        };

        _proto.triggerBombFX = function triggerBombFX(posNode) {
          var itemBomb = instantiate(this.itemBomb);
          var startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(posNode);
          this.node.addChild(itemBomb);

          this._listSkillItem.push(itemBomb);

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.03,
            amplitude: 5
          });
          itemBomb.setPosition(startPos);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
        };

        _proto.playEffectFishSpecial = function playEffectFishSpecial(rewardData) {
          //rewardData : { Angle, BulletMultiple, DeskStation, ListFish, SkillID, TotalReward, Wallet }
          var player = gfReferenceManager.instance.getPlayerByDeskStation(rewardData.DeskStation);
          this.onPlayEffectWinInCatchFish({
            player: player,
            gold: rewardData.TotalReward,
            bet: rewardData.BulletMultiple,
            fishKind: rewardData.fishKind
          });

          if (player.isMe) {
            var numberPlaySound = Math.round(rewardData.TotalReward / (rewardData.BulletMultiple * 120));
            tween(this.node).delay(0.15).repeat(numberPlaySound, tween().call(function () {
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GOLD);
            }).delay(0.15)).start();
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          this.unscheduleAllCallbacks();

          this._listSkillItem.forEach(function (item) {
            Tween.stopAllByTarget(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          this._listSkillItem.length = 0;

          this._lisParticle.forEach(function (item) {
            Tween.stopAllByTarget(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          this._lisParticle.length = 0;
          this.bigWinWheels.forEach(function (wheel) {
            if (wheel.hideAnimation) {
              wheel.hideAnimation(false);
            }
          });
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_BIG_WIN);
          this._queueAnim.length = 0;
          this._playingQueueAnim = false;
        };

        _proto.addAnimToQueueAnim = function addAnimToQueueAnim(name, data) {
          var animData = {
            name: name,
            dataInfo: data
          };

          if (this._queueAnim.length == 0 && !this._playingQueueAnim) {
            this.playQueueAnim(animData);
          } else {
            this._queueAnim.push(animData);
          }
        };

        _proto.checkQueueAnim = function checkQueueAnim() {
          if (this._queueAnim.length > 0) {
            var data = this._queueAnim.shift();

            this.playQueueAnim(data);
          } else {
            this._playingQueueAnim = false;
          }
        };

        _proto.playQueueAnim = function playQueueAnim(data) {
          this._playingQueueAnim = true;

          switch (data.name) {
            case "EVENT":
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_EFFECT_EVENT_WIN, data.dataInfo);
              break;

            case "JACKPOT":
              gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.PLAY_DRAGON_BALL_JACKPOT);
              break;
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        };

        return gfEffectLayer;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "particle3D", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bigWinWheels", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "itemLaser", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "itemBomb", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShieldController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './DataStore1985.ts', './Config1985.ts', './EnemyBullet.ts', './SpineFish1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, CircleCollider2D, Contact2DType, sp, Component, setOpacity, gfEventEmitter, EventsCode1985, DataStore1985, Config1985, EnemyBullet, SpineFish1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CircleCollider2D = module.CircleCollider2D;
      Contact2DType = module.Contact2DType;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      EnemyBullet = module.EnemyBullet;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "155f3Gx3bRPE4/wCA8Jy4Hn", "ShieldController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ANIMATION = {
        NORMAL: "shield_a",
        SKILL: "shield_b"
      };
      var ShieldController1985 = exports('ShieldController1985', (_dec = ccclass('ShieldController1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShieldController1985, _Component);

        function ShieldController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_isMe", false);

          _defineProperty(_assertThisInitialized(_this), "_isProtected", false);

          _defineProperty(_assertThisInitialized(_this), "spine", null);

          return _this;
        }

        var _proto = ShieldController1985.prototype;

        _proto.setIsMe = function setIsMe(isMe) {
          this._isMe = isMe;
        };

        _proto.setIsProtected = function setIsProtected(isProtected) {
          this._isProtected = isProtected;

          if (this._isMe) {
            DataStore1985.instance.isProtectedState = isProtected;
          }
        };

        _proto.initShield = function initShield() {
          this.node.getComponent(CircleCollider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          setOpacity(this.node, 0);
          this.spine = this.node.getComponent(sp.Skeleton);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var bullet = other.node.getComponent(EnemyBullet);

          if (bullet) {
            this.onHit(self);
            bullet.onHit();
            return;
          }

          if (DataStore1985.instance.curEnergyShield < 0 || this._isProtected) return;
          var fish = other.node.getComponent(SpineFish1985) || other.node.parent.getComponent(SpineFish1985) || other.node.parent.parent.getComponent(SpineFish1985);
          if (!fish || fish.checkDie() || fish.getZIndex() < Config1985.instance.AirLayerBaseZIndex) return; //hard code check zIndex for ground unit

          this.onHit(self);
        };

        _proto.onHit = function onHit(self) {
          var _this2 = this;

          if (this._isProtected) return;

          if (DataStore1985.instance.curEnergyShield <= 0) {
            gfEventEmitter.instance.emit(EventsCode1985.SOUND.WARNING_HAVE_NOT_SHIELD);
          } else {
            gfEventEmitter.instance.emit(EventsCode1985.SOUND.SHIELD_PROTECTED);
          }

          this.setIsProtected(true);
          var opacity = this._isMe ? 255 : 170;
          setOpacity(this.node, opacity);
          this.spine.setToSetupPose();
          this.spine.setAnimation(0, ANIMATION.NORMAL, true);
          var durationAnim = this.spine.findAnimation(ANIMATION.NORMAL).duration;
          this.scheduleOnce(function () {
            setOpacity(_this2.node, 0);

            _this2.setIsProtected(false);
          }, durationAnim);

          if (this._isMe) {
            gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.PLAYER_LOWER_SHIELD, {
              Shield: -1
            });
          }
        };

        _proto.showShieldWhenPlayerJoinRoom = function showShieldWhenPlayerJoinRoom() {
          var _this3 = this;

          this.setIsProtected(true);
          var opacity = this._isMe ? 255 : 170;
          setOpacity(this.node, opacity);
          this.spine.setToSetupPose();
          this.spine.setAnimation(0, ANIMATION.NORMAL, true);
          this.scheduleOnce(function () {
            _this3.setIsProtected(false);

            setOpacity(_this3.node, 0);
          }, this.spine.findAnimation(ANIMATION.NORMAL).duration);
        };

        _proto.changeStateShieldBySkill = function changeStateShieldBySkill(SkillID) {
          var time = this.spine.findAnimation(ANIMATION.SKILL).duration;

          switch (SkillID) {
            case Config1985.instance.SkillConfig.LASER:
              this.onShowShieldBySkill(time * 0.5);
              break;

            case Config1985.instance.SkillConfig.SKILL_ULTIMATE:
              this.onShowShieldBySkill(time * 0.4);
              break;
          }
        };

        _proto.onShowShieldBySkill = function onShowShieldBySkill(time) {
          var _this4 = this;

          this.setIsProtected(true);
          this.unscheduleAllCallbacks();
          var opacity = this._isMe ? 255 : 170;
          setOpacity(this.node, opacity);
          this.spine.setToSetupPose();
          this.spine.setAnimation(0, ANIMATION.SKILL, true);
          this.scheduleOnce(function () {
            _this4.setIsProtected(false);

            setOpacity(_this4.node, 0);
          }, time);
        };

        _proto.resetShieldWhenAircraftDie = function resetShieldWhenAircraftDie() {
          this.unscheduleAllCallbacks();
          setOpacity(this.node, 0);
        };

        return ShieldController1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillController1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1988.ts', './Config1988.ts', './gfSkillController.ts', './ReferenceManager1988.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfEventEmitter, registerEvent, EventCode, Config1988, gfSkillController, ReferenceManager1988;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      gfSkillController = module.gfSkillController;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "156e1Yl4qdGOb9c33MiIWg4", "SkillController1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillController1988 = exports('SkillController1988', (_dec = ccclass('SkillController1988'), _dec(_class = /*#__PURE__*/function (_gfSkillController) {
        _inheritsLoose(SkillController1988, _gfSkillController);

        function SkillController1988() {
          return _gfSkillController.apply(this, arguments) || this;
        }

        var _proto = SkillController1988.prototype;

        _proto.initEvents = function initEvents() {
          _gfSkillController.prototype.initEvents.call(this);

          registerEvent(EventCode.PLAYER_LAYER.CHANGE_GUN_DRILL, this.playerChangeDrillGun, this);
          registerEvent(EventCode.EFFECT_LAYER.DRILL_EXPLOSION, this.playerResetGun, this);
          registerEvent(EventCode.GAME_LAYER.RESUME_DRILL, this.onPlayerResumeDrill, this);
        };

        _proto.onPlayerResumeDrill = function onPlayerResumeDrill(data) {
          var _this = this;

          data.forEach(function (element) {
            var player = ReferenceManager1988.instance.getPlayerByDeskStation(element.DeskStation);

            if (player) {
              element.isResume = true;
              var gunSkill = _this.listGunSkill[player.index];

              if (gunSkill) {
                gunSkill.onFireSkill(element);
              }
            }
          });
        };

        _proto.playerChangeDrillGun = function playerChangeDrillGun(DeskStation) {
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.index];

            if (gunSkill) {
              var dataSpecialGun = {
                DeskStation: DeskStation,
                SkillID: Config1988.instance.SkillConfig.DRILL
              };
              gunSkill.changeSpecialGun(dataSpecialGun);
            }
          }
        };

        _proto.catchFishBySkill = function catchFishBySkill(data) {
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            switch (data.SkillID) {
              case Config1988.instance.SkillConfig.LASER:
                if (player.index > 1) data.Angle += 180;
                var gunSkill = this.listGunSkill[player.index];

                if (gunSkill) {
                  gunSkill.onFireSkill(data);
                }

                break;

              case Config1988.instance.SkillConfig.FISH_BOMB:
                gfEventEmitter.instance.emit(EventCode.FISH_LAYER.CATCH_FISH_BY_SKILL, data);
                break;

              case Config1988.instance.SkillConfig.DRILL:
                if (player.index > 1) data.Angle += 180;
                var gunSkillDrill = this.listGunSkill[player.index];

                if (gunSkillDrill) {
                  gunSkillDrill.onFireSkill(data);
                }

                break;
            }
          }
        };

        _proto.playerResetGun = function playerResetGun(data) {
          var deskStation = data.deskStation;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(deskStation);

          if (player) {
            player.resetGunDrillToNormal();
          }
        };

        return SkillController1988;
      }(gfSkillController)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup13.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "17e4av0KPlAh4b0/tbqShZw", "gfFishGroup13", undefined);

      var gfFishGroup13 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup13() {}

        gfFishGroup13.create = function create() {
          var yPos = gfBaseConfig.instance.AppSize.Height / 2;
          var left = -375;
          var right = gfBaseConfig.instance.AppSize.Width - left;
          var isFlipScreen = false;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [right, left];
            left = _ref[0];
            right = _ref[1];
            isFlipScreen = true;
          }

          var fishSpeed = 70;
          var radius = 200;
          var numberStep = 5;
          var numberFishPerLine = 15; //appear in right

          this.createSinFishGroup({
            count: numberFishPerLine,
            startPos: v2(right, yPos),
            numberStep: numberStep,
            isMoveRight: isFlipScreen,
            distanceX: gfBaseConfig.instance.AppSize.Width + 200,
            fishSpeed: fishSpeed,
            radius: radius,
            isMoveUp: isFlipScreen
          });
          this.createSinFishGroup({
            count: numberFishPerLine,
            startPos: v2(right, yPos),
            numberStep: numberStep,
            isMoveRight: isFlipScreen,
            distanceX: gfBaseConfig.instance.AppSize.Width + 200,
            fishSpeed: fishSpeed,
            radius: radius,
            isMoveUp: !isFlipScreen
          }); //appear in left

          this.createSinFishGroup({
            count: numberFishPerLine,
            startPos: v2(left, yPos),
            numberStep: numberStep,
            isMoveRight: !isFlipScreen,
            distanceX: gfBaseConfig.instance.AppSize.Width + 200,
            fishSpeed: fishSpeed,
            radius: radius,
            isMoveUp: isFlipScreen
          });
          this.createSinFishGroup({
            count: numberFishPerLine,
            startPos: v2(left, yPos),
            numberStep: numberStep,
            isMoveRight: !isFlipScreen,
            distanceX: gfBaseConfig.instance.AppSize.Width + 200,
            fishSpeed: fishSpeed,
            radius: radius,
            isMoveUp: !isFlipScreen
          });
        };

        gfFishGroup13.createSinFishGroup = function createSinFishGroup(_ref2) {
          var count = _ref2.count,
              startPos = _ref2.startPos,
              numberStep = _ref2.numberStep,
              isMoveRight = _ref2.isMoveRight,
              distanceX = _ref2.distanceX,
              isMoveUp = _ref2.isMoveUp,
              radius = _ref2.radius,
              fishSpeed = _ref2.fishSpeed;
          var dir = isMoveRight ? 1 : -1;
          var sub = isMoveUp ? 0 : 1;
          var distanceMini = distanceX * 1.25 / numberStep;
          var moveInTime = distanceX / fishSpeed / numberStep;
          var delayEach = 1.25;

          for (var i = 0; i < count; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = i * delayEach;
            var moveAction = new FishMoveActions(startPos);
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });

            for (var j = 0; j <= numberStep; j++) {
              var y = radius * Math.pow(-1, j + sub);
              moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: moveInTime,
                points: [v2(dir * distanceMini * 0.25, y), v2(dir * distanceMini * 0.75, y), v2(dir * distanceMini, 0)]
              });
            }

            data.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup13;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PageViewSelectAircraftComponent1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './EventsCode1985.ts', './DataStore1985.ts', './Config1985.ts', './AnimUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Button, PageView, Tween, tween, v2, v3, UITransform, sp, Component, getDistance, gfBaseEvents, v3f, gfEventEmitter, gfBaseConfig, SetZIndex, registerEvent, removeEvents, EventsCode1985, DataStore1985, Config1985, fadeIn, fadeOut, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      PageView = module.PageView;
      Tween = module.Tween;
      tween = module.tween;
      v2 = module.v2;
      v3 = module.v3;
      UITransform = module.UITransform;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      getDistance = module.getDistance;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      v3f = module.v3f;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

      cclegacy._RF.push({}, "18927KF7UZByaspPob7OM1g", "PageViewSelectAircraftComponent1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PageViewSelectAircraftComponent1985 = exports('PageViewSelectAircraftComponent1985', (_dec = ccclass('PageViewSelectAircraftComponent1985'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Button), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PageViewSelectAircraftComponent1985, _Component);

        function PageViewSelectAircraftComponent1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "cloudLayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "iconCircle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnPrev", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnNext", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnBuy", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "cart", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spaceShip", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listNodePlayAnim", _descriptor8, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_pageViewEvent", null);

          _defineProperty(_assertThisInitialized(_this), "_pageViewComp", null);

          _defineProperty(_assertThisInitialized(_this), "_pageIndex", 0);

          _defineProperty(_assertThisInitialized(_this), "originalPos", {});

          _defineProperty(_assertThisInitialized(_this), "iconLoadingPosY", -530);

          _defineProperty(_assertThisInitialized(_this), "speedMove", 500);

          return _this;
        }

        var _proto = PageViewSelectAircraftComponent1985.prototype;
        /*
            change the play animation time by changing speedMove
        */

        _proto.setInteractableButtonSelect = function setInteractableButtonSelect(state) {
          this.iconCircle.getComponent(Button).interactable = state;
        };

        _proto.onLoad = function onLoad() {
          this.originalPos["iconCircle"] = this.iconCircle.getPosition();
          this.originalPos["spineShip"] = this.spaceShip.getChildByName("spine").getPosition();
          this.setInteractableButtonSelect(false);
          SetZIndex(this.node, 9999);
          this.initEvents();
          this.initPage();
          this.reset();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(EventsCode1985.GAME_LAYER.ON_ANIMATION_SPACESHIP_JOIN_ROOM, this.onAnimationJoinGame, this);
        };

        _proto.initPage = function initPage() {
          this._pageViewEvent = this.pageViewEvent.bind(this);
          this.node.on('page-turning', this._pageViewEvent.bind(this));
          this._pageViewComp = this.node.getComponent(PageView);
          this._pageViewComp.enabled = false;
          this.updateButtons();
        };

        _proto.pageViewEvent = function pageViewEvent(pageView) {
          this._pageIndex = pageView._curPageIdx;
          this.updateButtons();
        };

        _proto.updateButtons = function updateButtons() {};

        _proto.oBtnPrev = function oBtnPrev() {};

        _proto.oBtnNext = function oBtnNext() {};

        _proto.onAnimationJoinGame = function onAnimationJoinGame() {
          var _this2 = this;

          Tween.stopAllByTarget(this.node);
          this.reset();
          this.node.active = true;
          var spaceShip = this.spaceShip.getChildByName("spine");

          var _this$calculateTimeTw = this.calculateTimeTween(this.iconCircle.getWorldPosition()),
              posTo = _this$calculateTimeTw.posTo,
              distance = _this$calculateTimeTw.distance,
              time = _this$calculateTimeTw.time;

          this.tweenMoveToPos(spaceShip, time, posTo);
          tween(this.node).delay(time).call(function () {
            distance = getDistance(v2(spaceShip.position.x, spaceShip.position.y), v2(_this2.originalPos["spineShip"].x, _this2.originalPos["spineShip"].y));
            time = distance / _this2.speedMove;

            _this2.tweenMoveToPos(spaceShip, time, _this2.originalPos["spineShip"], 1.8);

            _this2.tweenMoveToPos(_this2.iconCircle, time, _this2.originalPos["iconCircle"], 1);
          }).delay(time).call(function () {
            _this2.listNodePlayAnim.forEach(function (node) {
              return fadeIn(node, 1);
            });

            _this2.spaceShip.children.forEach(function (child) {
              return fadeIn(child, 1);
            });

            _this2.fadeToSpineUltimate(1, 255);
          }).delay(1).call(function () {
            _this2.scheduleOnce(_this2.onBtnSelect, 1);

            _this2.setInteractableButtonSelect(true);
          }).start();
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.LOCK_FIRE, {
            DeskStation: DataStore1985.instance.getSelfDeskStation()
          });
        };

        _proto.onBtnSelect = function onBtnSelect() {
          this.resetNodeSpaceShip(0.5, 1.8);
          this.playAnimJoinWar();
          this.listNodePlayAnim.forEach(function (node) {
            return fadeOut(node, 0.5);
          });
        };

        _proto.playAnimJoinWar = function playAnimJoinWar() {
          var _this3 = this;

          this.unscheduleAllCallbacks();
          this.fadeToSpineUltimate(0.5, 0);
          this.setInteractableButtonSelect(false);
          var spaceShip = this.spaceShip.getChildByName("spine");

          var _this$calculateTimeTw2 = this.calculateTimeTween(v3(0, 0, 0)),
              time = _this$calculateTimeTw2.time;

          var shipPosTo = this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 0));
          shipPosTo = this.spaceShip.getComponent(UITransform).convertToNodeSpaceAR(shipPosTo);
          this.tweenMoveToPos(spaceShip, time, shipPosTo, 1);
          var cloudPosTo = v3(0, -gfBaseConfig.instance.realSize.Height * 3, 0);
          this.tweenMoveToPos(this.cloudLayer, 1, cloudPosTo);
          var scaleIcon = 175 / this.iconCircle.getComponent(UITransform).width;
          this.tweenMoveToPos(this.iconCircle, time, v3(0, 0, 0), scaleIcon);
          this.scheduleOnce(function () {
            _this3.node.active = false;
            gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.ANIMATION_SPACESHIP_JOIN_ROOM_DONE);
            DataStore1985.instance.isWaitJoinRoom = false;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, Config1985.instance.SOUND_BACKGROUND_CONFIG.IN_GAME, true);
          }, time);
        };

        _proto.calculateTimeTween = function calculateTimeTween(posTarget) {
          var spaceShip = this.spaceShip.getChildByName("spine");
          var posTo = this.spaceShip.getComponent(UITransform).convertToNodeSpaceAR(posTarget);
          var distance = getDistance(v2(spaceShip.position.x, spaceShip.position.y), v2(posTo.x, posTo.y));
          var time = distance / this.speedMove;
          return {
            posTo: posTo,
            distance: distance,
            time: time
          };
        };

        _proto.tweenMoveToPos = function tweenMoveToPos(target, time, position, scale) {
          if (scale === void 0) {
            scale = 1;
          }

          tween(target).to(time, {
            position: position,
            scale: v3f(scale)
          }).start();
        };

        _proto.fadeToSpineUltimate = function fadeToSpineUltimate(time, opacity) {
          var spine = this.cart.getChildByName("spine").getComponent(sp.Skeleton);
          tween(spine).to(time, null, {
            onUpdate: function onUpdate(target, ratio) {
              spine.color.a += (opacity - spine.color.a) * ratio;
            }
          }).start();
        };

        _proto.resetNodeSpaceShip = function resetNodeSpaceShip(time, scale) {
          if (scale === void 0) {
            scale = 1;
          }

          this.spaceShip.children.forEach(function (child) {
            if (child.name == "spine") {
              child.setScale(scale, scale, scale);
              return;
            }

            fadeOut(child, time);
          });
        };

        _proto.reset = function reset() {
          this.resetNodeSpaceShip(0, 1);
          this.listNodePlayAnim.forEach(function (node) {
            return setOpacity(node, 0);
          });
          this.fadeToSpineUltimate(0, 0);
          var scaleIcon = 175 / this.iconCircle.getComponent(UITransform).width;
          this.iconCircle.setScale(scaleIcon, scaleIcon, 0);
          this.iconCircle.setPosition(this.iconCircle.position.x, this.iconLoadingPosY, 0);
          var spaceShip = this.spaceShip.getChildByName("spine");
          spaceShip.setPosition(spaceShip.position.x, spaceShip.position.y - 400, 0);
          DataStore1985.instance.isWaitJoinRoom = true;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return PageViewSelectAircraftComponent1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "cloudLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconCircle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnPrev", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnBuy", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "cart", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "spaceShip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "listNodePlayAnim", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonCacheData.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "189c5bd0a9ErqA9xYJApx//", "gfDragonCacheData", undefined);

      var BoneCacheValue = exports('BoneCacheValue', {});
      var DragonCacheData = exports('DragonCacheData', {
        "Swim In": ["294,-442,271,-467,239,-504,199,-537,159,-562,114,-586,67,-605,23,-621,-26,-634,-79,-645,-124,-653,-172,-660,-222,-664,-276,-668,-325,-670,-371,-671,-404,-670,-420,-663", "296,-438,274,-464,242,-500,202,-535,163,-560,118,-584,71,-604,27,-619,-22,-633,-74,-645,-120,-653,-167,-659,-218,-664,-271,-668,-321,-670,-367,-671,-399,-670,-416,-663", "301,-430,279,-458,248,-494,210,-529,170,-556,127,-580,79,-601,35,-617,-13,-631,-65,-643,-112,-651,-159,-658,-209,-663,-261,-667,-313,-670,-359,-670,-391,-670,-407,-663", "305,-422,284,-450,254,-488,217,-523,178,-551,135,-576,86,-598,43,-614,-4,-628,-55,-641,-104,-650,-150,-657,-200,-662,-252,-667,-305,-669,-351,-670,-382,-671,-398,-663", "309,-414,289,-442,260,-481,224,-517,185,-547,143,-572,95,-594,51,-611,5,-626,-46,-639,-96,-649,-142,-656,-191,-662,-242,-666,-297,-669,-342,-670,-374,-671,-390,-664", "312,-405,294,-434,265,-475,231,-511,191,-542,151,-567,104,-590,59,-609,13,-623,-36,-636,-88,-647,-134,-655,-182,-661,-233,-665,-287,-669,-334,-670,-365,-670,-382,-664", "315,-397,298,-426,271,-468,238,-504,198,-538,158,-563,113,-586,66,-606,22,-621,-27,-634,-80,-646,-125,-653,-173,-660,-223,-665,-277,-668,-326,-670,-357,-670,-373,-664", "318,-389,302,-418,275,-462,244,-498,205,-533,166,-559,121,-582,74,-603,30,-618,-18,-632,-71,-644,-117,-652,-164,-659,-214,-664,-267,-668,-318,-670,-349,-670,-365,-664", "320,-381,305,-410,281,-455,250,-492,212,-527,173,-554,130,-578,81,-600,38,-616,-9,-630,-61,-642,-109,-651,-156,-658,-205,-663,-258,-667,-310,-669,-340,-670,-357,-663", "323,-372,309,-402,286,-447,256,-485,220,-521,180,-550,138,-574,90,-597,46,-613,-1,-627,-52,-640,-101,-649,-147,-656,-196,-662,-248,-666,-302,-669,-332,-670,-349,-663", "325,-363,312,-394,291,-439,262,-479,227,-514,187,-545,146,-570,99,-593,54,-610,8,-625,-42,-638,-93,-648,-139,-655,-187,-661,-239,-666,-293,-669,-324,-670,-340,-663", "326,-354,314,-386,295,-431,267,-472,234,-508,194,-540,154,-566,107,-589,62,-608,16,-622,-33,-636,-85,-647,-131,-654,-179,-660,-229,-665,-283,-668,-316,-670,-332,-663", "328,-345,317,-378,299,-423,272,-466,240,-502,200,-536,161,-561,116,-585,69,-605,25,-620,-24,-633,-77,-645,-122,-653,-170,-659,-220,-664,-273,-668,-308,-669,-324,-663", "329,-336,319,-369,303,-415,277,-459,247,-496,207,-530,169,-557,125,-581,77,-602,33,-617,-15,-631,-67,-643,-114,-652,-161,-658,-211,-664,-264,-667,-300,-669,-316,-663", "329,-327,321,-360,307,-407,282,-452,253,-489,215,-524,176,-553,133,-577,84,-599,41,-615,-6,-629,-58,-641,-106,-650,-153,-657,-202,-663,-254,-667,-291,-669,-307,-662", "329,-318,322,-351,310,-399,288,-444,258,-483,222,-518,183,-548,141,-573,93,-595,49,-612,2,-626,-48,-639,-98,-649,-144,-656,-193,-662,-245,-666,-281,-668,-297,-662", "329,-309,324,-342,313,-391,292,-436,264,-477,229,-512,189,-543,149,-568,102,-591,57,-609,11,-624,-39,-637,-90,-648,-136,-655,-184,-661,-235,-666,-271,-668,-288,-662", "329,-300,324,-333,315,-383,297,-428,269,-470,236,-506,196,-539,156,-564,111,-588,64,-607,19,-622,-30,-635,-83,-646,-128,-654,-175,-660,-226,-665,-261,-667,-278,-661", "328,-291,325,-324,318,-374,301,-420,274,-464,243,-500,203,-534,164,-560,119,-584,72,-604,28,-619,-21,-633,-73,-644,-119,-652,-167,-659,-217,-664,-252,-667,-269,-661", "327,-282,325,-315,320,-365,304,-412,279,-457,249,-493,210,-528,171,-555,128,-579,79,-601,36,-616,-12,-630,-64,-642,-111,-651,-158,-658,-208,-663,-242,-666,-259,-660", "325,-273,325,-307,322,-356,308,-404,284,-449,255,-487,218,-522,178,-551,136,-575,87,-598,44,-614,-3,-628,-54,-640,-103,-650,-150,-657,-199,-662,-233,-665,-250,-660", "324,-264,324,-298,323,-348,311,-396,289,-441,260,-481,225,-516,185,-546,144,-571,96,-594,52,-611,6,-626,-45,-638,-95,-648,-141,-656,-190,-661,-224,-665,-241,-659", "321,-255,324,-289,324,-339,314,-388,294,-433,266,-474,232,-510,192,-542,152,-567,105,-590,59,-608,14,-623,-36,-636,-87,-647,-133,-654,-181,-661,-215,-664,-231,-658", "319,-246,322,-280,325,-330,316,-380,298,-425,271,-468,239,-504,198,-537,159,-563,114,-586,67,-606,22,-621,-26,-634,-80,-646,-125,-653,-172,-660,-205,-663,-222,-658", "316,-238,321,-271,325,-321,318,-371,302,-417,276,-461,245,-497,205,-532,167,-558,122,-582,75,-603,31,-618,-17,-632,-70,-644,-116,-652,-163,-659,-196,-662,-213,-657", "313,-229,319,-263,325,-312,320,-362,306,-409,281,-454,251,-491,213,-526,174,-554,131,-578,82,-600,39,-615,-9,-629,-60,-642,-108,-651,-155,-657,-188,-661,-204,-656", "310,-221,317,-254,325,-304,322,-353,309,-401,286,-446,257,-485,220,-520,181,-549,139,-574,90,-596,47,-613,0,-627,-51,-640,-100,-649,-146,-656,-179,-660,-196,-655", "306,-213,314,-245,324,-295,323,-344,312,-393,291,-438,263,-478,228,-514,188,-545,147,-570,99,-593,55,-610,9,-625,-41,-638,-92,-648,-138,-655,-170,-659,-187,-654", "302,-205,311,-237,323,-286,324,-335,315,-385,296,-430,268,-472,234,-508,194,-540,154,-565,108,-589,62,-607,17,-622,-32,-635,-85,-646,-130,-654,-161,-658,-178,-653", "297,-197,308,-229,322,-277,325,-327,317,-377,300,-422,273,-465,241,-501,201,-535,162,-561,117,-585,70,-604,25,-620,-23,-633,-76,-645,-121,-653,-153,-657,-170,-652", "292,-189,305,-221,320,-268,325,-318,319,-368,304,-414,278,-459,247,-495,208,-530,169,-557,125,-581,77,-602,34,-617,-14,-631,-66,-643,-113,-651,-144,-656,-161,-651", "287,-181,301,-213,318,-259,325,-309,321,-359,307,-406,283,-451,253,-489,216,-524,176,-552,134,-576,85,-599,42,-614,-5,-629,-57,-641,-105,-650,-136,-655,-153,-650", "282,-174,297,-205,316,-251,325,-300,323,-350,310,-398,288,-443,259,-482,223,-518,183,-548,142,-572,94,-595,50,-612,3,-626,-47,-639,-97,-649,-128,-654,-145,-649", "276,-167,292,-197,313,-242,324,-292,324,-341,313,-390,293,-435,264,-476,230,-512,190,-543,150,-568,103,-591,57,-609,12,-624,-38,-637,-90,-647,-120,-652,-137,-648", "271,-160,288,-189,310,-234,323,-283,325,-332,316,-382,297,-427,270,-469,237,-505,197,-538,157,-564,112,-587,65,-606,20,-621,-29,-635,-82,-646,-111,-651,-129,-647", "264,-153,283,-182,307,-226,321,-274,325,-323,318,-373,301,-419,275,-463,243,-499,203,-534,165,-559,120,-583,73,-603,28,-619,-20,-632,-72,-644,-103,-650,-121,-646", "258,-147,277,-175,303,-218,319,-265,325,-315,320,-364,305,-411,280,-456,249,-493,211,-528,172,-555,128,-579,80,-601,37,-616,-11,-630,-63,-642,-95,-648,-113,-644", "251,-141,272,-168,299,-210,317,-256,325,-306,322,-356,308,-403,285,-448,255,-486,219,-522,179,-550,137,-575,88,-597,45,-613,-2,-628,-53,-640,-88,-647,-105,-643", "244,-135,266,-161,295,-202,315,-248,324,-297,323,-347,311,-395,290,-440,261,-480,226,-515,186,-546,145,-571,97,-594,52,-611,6,-625,-44,-638,-80,-646,-97,-642", "237,-129,260,-155,291,-194,312,-239,323,-288,324,-338,314,-387,294,-432,266,-474,233,-509,193,-541,152,-566,106,-590,60,-608,15,-623,-35,-636,-70,-644,-87,-640", "229,-124,253,-149,286,-187,309,-231,322,-279,325,-329,316,-379,299,-424,272,-467,239,-503,199,-537,160,-562,115,-586,68,-605,23,-620,-25,-634,-60,-642,-78,-638", "222,-120,247,-143,281,-179,306,-223,321,-270,325,-320,319,-370,303,-416,276,-460,246,-497,206,-531,167,-558,123,-582,75,-602,31,-618,-17,-632,-51,-640,-68,-636", "214,-115,240,-137,275,-172,302,-215,319,-262,325,-311,321,-361,306,-408,282,-453,252,-490,214,-525,175,-553,131,-578,83,-599,40,-615,-8,-629,-42,-638,-59,-634", "206,-111,233,-132,270,-166,298,-207,316,-253,325,-303,322,-352,309,-400,287,-445,257,-484,221,-519,182,-549,140,-573,91,-596,48,-613,1,-627,-32,-635,-50,-632", "197,-107,225,-127,264,-159,293,-199,314,-245,324,-294,323,-343,312,-392,292,-437,263,-478,228,-513,188,-544,147,-569,100,-592,55,-610,10,-624,-23,-633,-41,-630", "189,-103,218,-122,257,-153,289,-191,311,-236,323,-285,324,-334,315,-384,296,-429,268,-471,235,-507,195,-540,155,-565,109,-588,63,-607,18,-622,-14,-631,-32,-628", "181,-99,210,-118,251,-146,284,-184,308,-228,322,-276,325,-326,317,-376,300,-421,273,-465,242,-501,201,-535,163,-561,118,-584,71,-604,26,-619,-6,-629,-23,-626", "173,-96,202,-114,244,-141,279,-177,304,-220,320,-267,325,-317,319,-367,304,-413,278,-458,248,-495,209,-529,170,-556,126,-580,78,-601,34,-617,3,-626,-14,-624", "165,-93,193,-110,237,-135,273,-170,300,-212,318,-259,325,-308,321,-358,307,-405,284,-450,254,-488,217,-523,177,-552,134,-576,86,-598,43,-614,12,-624,-6,-622", "157,-90,185,-106,230,-130,268,-163,296,-204,316,-250,325,-300,323,-349,310,-397,289,-442,260,-482,224,-517,184,-547,142,-572,95,-595,50,-612,20,-621,2,-619", "149,-87,177,-102,222,-125,261,-157,292,-196,313,-242,324,-291,324,-340,313,-389,293,-434,265,-475,231,-511,191,-542,150,-568,104,-591,58,-609,28,-619,11,-617", "140,-84,169,-99,215,-121,255,-150,287,-189,310,-233,323,-282,325,-331,316,-381,298,-426,270,-469,237,-505,197,-538,158,-563,112,-587,66,-606,36,-616,19,-615", "131,-81,161,-96,207,-117,248,-144,282,-181,307,-225,321,-273,325,-322,318,-373,302,-418,275,-462,244,-499,204,-533,165,-559,121,-583,73,-603,44,-614,27,-612", "123,-78,153,-93,198,-112,242,-139,277,-174,303,-217,319,-264,325,-314,320,-364,305,-410,280,-455,250,-492,212,-527,173,-554,129,-579,81,-600,52,-611,35,-610", "114,-76,145,-90,190,-108,234,-133,271,-167,299,-209,317,-255,325,-305,322,-355,309,-402,285,-447,256,-486,219,-521,180,-550,137,-575,89,-597,60,-608,42,-607", "106,-74,136,-87,182,-105,227,-128,265,-161,295,-201,315,-247,324,-296,323,-346,312,-394,290,-439,262,-479,226,-515,187,-545,145,-570,98,-593,68,-605,50,-604", "98,-72,128,-84,174,-101,220,-123,259,-154,290,-193,312,-239,323,-287,324,-337,314,-386,295,-431,267,-473,233,-509,193,-541,153,-566,107,-589,75,-602,57,-602", "88,-70,119,-82,166,-98,212,-119,253,-148,285,-186,309,-230,322,-278,325,-328,317,-378,299,-423,272,-466,240,-502,200,-536,161,-562,116,-585,83,-600,65,-599", "79,-69,111,-80,158,-95,204,-115,246,-142,280,-179,305,-222,320,-270,325,-319,319,-369,303,-415,277,-460,246,-496,207,-531,168,-557,124,-581,91,-596,73,-596", "71,-68,103,-78,151,-92,195,-111,239,-136,275,-172,302,-214,318,-261,325,-310,321,-360,306,-407,282,-452,252,-490,215,-525,175,-553,132,-577,100,-592,82,-592", "62,-67,95,-76,142,-89,187,-107,232,-131,269,-165,297,-206,316,-252,325,-302,322,-351,310,-399,287,-444,258,-483,222,-519,182,-548,140,-573,109,-588,91,-589", "54,-67,86,-74,133,-86,179,-103,224,-126,263,-158,293,-198,314,-244,324,-293,324,-342,313,-391,292,-436,264,-477,229,-513,189,-544,148,-569,118,-584,100,-586", "44,-67,77,-73,125,-83,171,-100,217,-122,257,-152,288,-191,311,-235,323,-284,324,-334,315,-383,296,-429,269,-471,236,-506,196,-539,156,-564,126,-580,109,-582", "35,-67,68,-72,116,-81,163,-97,209,-118,250,-146,283,-183,308,-227,321,-275,325,-325,317,-375,300,-421,274,-464,242,-500,202,-534,163,-560,134,-576,117,-579", "26,-68,60,-72,108,-79,156,-94,201,-113,243,-140,278,-176,304,-219,320,-266,325,-316,320,-366,304,-412,279,-457,248,-494,210,-529,171,-556,142,-572,126,-576", "18,-69,51,-71,100,-77,148,-91,192,-109,236,-135,273,-169,300,-211,318,-258,325,-307,321,-357,308,-404,284,-449,254,-488,217,-523,178,-551,150,-568,134,-572", "9,-70,42,-71,91,-75,139,-88,184,-106,229,-129,267,-163,296,-203,315,-249,324,-299,323,-348,311,-396,289,-442,260,-481,225,-516,185,-547,158,-563,142,-568", "0,-72,33,-72,82,-74,130,-85,176,-102,222,-125,261,-156,291,-195,313,-241,324,-290,324,-339,314,-388,294,-434,266,-475,231,-510,191,-542,165,-559,150,-565", "-9,-74,25,-72,74,-73,122,-82,168,-99,214,-120,254,-150,287,-188,310,-232,322,-281,325,-330,316,-380,298,-426,271,-468,238,-504,198,-537,172,-555,157,-561", "-17,-76,16,-73,65,-72,113,-80,160,-96,206,-116,248,-144,281,-181,306,-224,321,-272,325,-322,318,-372,302,-418,276,-462,245,-498,205,-532,180,-550,165,-557", "-26,-79,7,-75,57,-71,105,-78,153,-93,198,-112,241,-138,276,-173,303,-216,319,-263,325,-313,320,-363,306,-410,281,-454,251,-492,213,-526,186,-546,172,-554", "-34,-82,-1,-76,48,-71,97,-76,144,-90,189,-108,234,-133,271,-167,299,-208,317,-255,325,-304,322,-354,309,-401,286,-447,257,-485,220,-520,193,-541,179,-550", "-42,-85,-10,-79,39,-71,88,-75,136,-87,181,-104,226,-128,265,-160,294,-200,314,-246,324,-295,323,-345,312,-393,291,-439,262,-479,227,-514,200,-536,186,-546", "-51,-89,-18,-81,30,-72,79,-73,127,-84,173,-101,219,-123,259,-154,290,-193,311,-238,323,-286,324,-336,314,-385,295,-431,267,-472,234,-508,207,-531,194,-541", "-59,-92,-26,-84,21,-73,70,-72,119,-82,165,-98,211,-119,252,-147,285,-185,308,-229,322,-278,325,-327,317,-377,299,-423,273,-466,241,-502,214,-525,202,-536", "-67,-96,-35,-87,13,-74,62,-72,110,-79,158,-95,203,-115,245,-142,280,-178,305,-221,320,-269,325,-318,319,-368,303,-415,277,-459,247,-496,222,-519,210,-531", "-74,-100,-43,-90,4,-75,54,-71,102,-78,150,-92,195,-110,238,-136,274,-171,301,-213,318,-260,325,-310,321,-359,307,-407,283,-452,253,-489,229,-513,218,-525", "-82,-105,-51,-93,-4,-77,44,-71,94,-76,141,-89,186,-107,231,-131,268,-164,297,-205,316,-251,325,-301,322,-350,310,-399,288,-444,259,-483,236,-507,226,-520", "-90,-109,-59,-97,-13,-79,36,-71,85,-74,132,-86,178,-103,224,-126,263,-158,293,-197,313,-243,324,-292,324,-342,313,-390,292,-436,264,-476,242,-500,233,-514", "-98,-114,-67,-101,-21,-82,27,-72,76,-73,124,-83,170,-100,216,-121,256,-151,288,-190,310,-235,323,-283,324,-333,315,-382,297,-428,269,-470,248,-494,240,-508", "-105,-118,-74,-105,-29,-85,18,-73,67,-72,116,-81,162,-96,208,-117,250,-145,283,-182,307,-226,321,-274,325,-324,318,-374,301,-420,274,-463,254,-488,246,-503", "-112,-123,-82,-109,-38,-88,10,-74,59,-71,107,-79,155,-93,200,-113,243,-139,278,-175,304,-218,320,-265,325,-315,320,-365,305,-412,279,-457,260,-481,253,-497", "-120,-128,-89,-114,-46,-91,1,-76,50,-71,99,-77,147,-90,191,-109,236,-134,272,-168,300,-210,317,-257,325,-306,322,-356,308,-404,285,-449,265,-475,259,-491", "-127,-132,-97,-118,-54,-95,-7,-78,41,-71,90,-75,138,-87,183,-105,228,-129,266,-162,295,-202,315,-248,324,-298,323,-347,311,-396,290,-441,271,-468,265,-485", "-135,-137,-104,-123,-62,-99,-16,-80,32,-72,81,-74,129,-85,175,-102,221,-124,260,-155,291,-195,312,-240,324,-289,324,-338,314,-387,294,-433,276,-462,271,-478", "-142,-142,-112,-128,-69,-103,-24,-83,24,-72,73,-73,121,-82,167,-98,213,-120,254,-149,286,-187,309,-232,322,-280,325,-329,316,-379,298,-425,281,-455,277,-472", "-149,-147,-119,-132,-77,-107,-32,-86,15,-73,64,-72,113,-80,160,-95,205,-116,247,-143,281,-180,306,-224,321,-271,325,-321,318,-371,302,-417,286,-447,283,-464", "-156,-152,-127,-137,-85,-111,-41,-89,7,-75,56,-71,104,-78,152,-92,197,-112,240,-137,276,-173,302,-215,319,-262,325,-312,320,-362,306,-409,291,-439,288,-456", "-164,-157,-134,-142,-92,-116,-49,-92,-2,-77,47,-71,96,-76,143,-89,188,-108,233,-132,270,-166,298,-207,317,-254,325,-303,322,-353,309,-401,295,-431,293,-448", "-171,-162,-141,-147,-100,-120,-57,-96,-11,-79,38,-71,87,-75,135,-86,180,-104,226,-127,264,-159,294,-199,314,-245,324,-295,323,-344,312,-393,299,-423,298,-441", "-178,-167,-148,-152,-107,-125,-65,-100,-19,-81,29,-72,78,-73,126,-84,172,-101,218,-123,258,-153,289,-192,311,-237,323,-286,324,-335,315,-385,303,-415,303,-433", "-185,-171,-156,-157,-114,-129,-72,-104,-27,-84,21,-73,70,-72,118,-81,164,-97,210,-118,251,-147,284,-184,308,-229,322,-277,325,-326,317,-376,307,-407,307,-425", "-193,-176,-163,-162,-122,-134,-80,-108,-35,-87,12,-74,61,-72,110,-79,157,-94,202,-114,245,-141,279,-177,305,-221,320,-268,325,-317,319,-367,310,-399,311,-416", "-200,-181,-170,-167,-129,-139,-87,-113,-44,-90,3,-75,53,-71,101,-77,149,-91,194,-110,238,-135,274,-170,301,-212,318,-259,325,-309,321,-359,313,-391,314,-408", "-207,-186,-178,-172,-137,-144,-95,-117,-52,-94,-5,-77,44,-71,93,-76,140,-88,185,-106,230,-130,268,-164,297,-204,316,-251,325,-300,323,-350,315,-383,317,-400", "-215,-190,-185,-176,-144,-149,-103,-122,-60,-98,-14,-80,35,-71,84,-74,132,-85,177,-103,223,-125,262,-157,292,-197,313,-242,324,-291,324,-341,318,-374,320,-392", "-223,-195,-192,-181,-151,-154,-110,-126,-67,-102,-22,-82,26,-72,75,-73,123,-83,169,-99,215,-121,255,-151,287,-189,310,-234,323,-282,325,-332,320,-365,323,-383", "-231,-200,-199,-186,-158,-159,-117,-131,-75,-106,-30,-85,17,-73,66,-72,115,-81,162,-96,207,-117,249,-145,282,-182,307,-226,321,-273,325,-323,322,-356,326,-374", "-240,-205,-207,-191,-166,-164,-125,-136,-83,-110,-38,-88,9,-74,58,-71,107,-79,154,-93,199,-113,242,-139,277,-175,303,-218,319,-265,325,-314,323,-347,328,-365", "-248,-209,-215,-195,-173,-169,-132,-141,-90,-114,-46,-92,0,-76,49,-71,98,-77,146,-90,191,-109,235,-133,272,-168,299,-209,317,-256,325,-306,324,-339,329,-355", "-256,-214,-223,-200,-180,-173,-139,-146,-98,-119,-55,-95,-8,-78,40,-71,89,-75,137,-87,182,-105,228,-128,266,-161,295,-202,315,-247,324,-297,325,-330,331,-346", "-264,-217,-231,-205,-187,-178,-146,-151,-105,-123,-63,-99,-17,-81,31,-72,81,-74,128,-84,174,-101,220,-124,260,-155,290,-194,312,-239,323,-288,325,-321,332,-337", "-272,-221,-239,-210,-195,-183,-154,-155,-113,-128,-70,-103,-25,-83,23,-72,72,-73,120,-82,167,-98,212,-119,253,-148,286,-186,309,-231,322,-279,325,-312,332,-328", "-280,-224,-248,-214,-202,-188,-161,-160,-120,-133,-78,-107,-33,-86,14,-74,63,-72,112,-80,159,-95,204,-115,246,-142,280,-179,306,-223,321,-270,325,-303,333,-319", "-287,-227,-256,-218,-210,-192,-168,-165,-127,-138,-85,-111,-41,-89,6,-75,55,-71,104,-78,151,-92,196,-111,239,-137,275,-172,302,-215,319,-261,324,-295,333,-310", "-295,-230,-264,-222,-218,-197,-176,-170,-135,-143,-93,-116,-49,-93,-3,-77,46,-71,95,-76,143,-89,188,-107,232,-132,269,-165,298,-207,316,-253,323,-286,332,-301", "-303,-233,-272,-226,-226,-202,-183,-175,-142,-148,-101,-121,-57,-97,-11,-79,37,-71,86,-74,134,-86,180,-104,225,-127,264,-159,293,-199,314,-244,322,-277,331,-292", "-311,-236,-280,-229,-234,-207,-190,-180,-149,-152,-108,-125,-65,-100,-20,-81,28,-72,77,-73,125,-83,172,-100,217,-122,257,-152,289,-191,311,-236,320,-268,330,-283", "-320,-238,-288,-232,-242,-212,-197,-185,-156,-157,-115,-130,-73,-105,-28,-84,20,-73,69,-72,117,-81,164,-97,210,-118,251,-146,284,-184,308,-228,318,-259,329,-273", "-329,-240,-296,-235,-251,-216,-205,-189,-164,-162,-123,-135,-81,-109,-36,-87,11,-74,60,-72,109,-79,156,-94,201,-114,244,-140,278,-177,304,-220,316,-251,327,-264", "-338,-242,-303,-238,-259,-220,-213,-194,-171,-167,-130,-140,-88,-113,-44,-91,2,-76,52,-71,101,-77,148,-91,193,-110,237,-135,273,-170,300,-212,313,-242,325,-256", "-347,-244,-312,-240,-267,-224,-221,-199,-178,-172,-137,-144,-96,-118,-52,-94,-6,-78,43,-71,92,-75,139,-88,185,-106,230,-130,267,-163,296,-204,310,-234,322,-247", "-355,-245,-321,-243,-275,-227,-229,-204,-186,-177,-145,-149,-103,-122,-60,-98,-15,-80,34,-72,83,-74,131,-85,177,-102,222,-125,261,-156,292,-196,307,-226,320,-238", "-364,-246,-330,-245,-283,-230,-237,-209,-193,-181,-152,-154,-111,-127,-68,-102,-23,-82,25,-72,74,-73,122,-83,169,-99,215,-120,255,-150,287,-188,303,-218,317,-230", "-372,-247,-339,-247,-291,-233,-245,-213,-200,-186,-159,-159,-118,-132,-76,-106,-31,-85,17,-73,66,-72,114,-80,161,-96,207,-116,248,-144,282,-181,299,-210,313,-221", "-380,-247,-348,-248,-298,-236,-254,-217,-208,-191,-166,-164,-125,-136,-83,-110,-39,-88,8,-75,57,-71,106,-78,153,-93,198,-112,241,-138,277,-174,295,-202,309,-212", "-389,-247,-357,-250,-306,-239,-262,-221,-215,-196,-174,-169,-133,-141,-91,-115,-47,-92,-1,-76,48,-71,98,-77,145,-90,190,-108,234,-133,271,-167,290,-194,305,-204", "-398,-246,-365,-250,-315,-241,-270,-225,-224,-201,-181,-174,-140,-146,-99,-119,-55,-96,-9,-78,39,-71,89,-75,136,-87,182,-105,227,-128,265,-161,286,-187,301,-196", "-407,-246,-374,-251,-325,-244,-278,-228,-232,-206,-188,-178,-147,-151,-106,-124,-63,-99,-18,-81,31,-72,80,-73,128,-84,174,-101,219,-123,259,-154,281,-179,296,-188", "-416,-245,-382,-251,-334,-246,-286,-231,-240,-210,-195,-183,-154,-156,-113,-129,-71,-103,-26,-83,22,-73,71,-72,119,-82,166,-98,212,-119,252,-148,275,-172,291,-181", "-424,-243,-391,-251,-343,-248,-293,-234,-248,-215,-203,-188,-162,-161,-121,-133,-79,-108,-34,-86,13,-74,62,-72,111,-80,158,-95,203,-115,246,-142,270,-165,286,-173", "-433,-241,-401,-251,-351,-249,-301,-237,-257,-219,-210,-193,-169,-166,-128,-138,-86,-112,-42,-90,5,-75,54,-71,103,-78,150,-92,195,-111,239,-136,264,-159,280,-166", "-441,-239,-410,-250,-360,-250,-310,-240,-265,-223,-218,-198,-176,-171,-136,-143,-94,-116,-50,-93,-4,-77,45,-71,94,-76,142,-89,187,-107,232,-131,257,-152,274,-159", "-449,-237,-419,-249,-369,-251,-319,-242,-273,-226,-227,-203,-184,-175,-143,-148,-101,-121,-58,-97,-12,-79,36,-71,85,-74,133,-86,179,-103,224,-126,251,-146,268,-152", "-457,-234,-427,-247,-377,-251,-328,-245,-281,-229,-235,-208,-191,-180,-150,-153,-109,-126,-66,-101,-21,-82,27,-72,76,-73,124,-83,171,-100,217,-122,244,-140,261,-145", "-465,-230,-436,-245,-385,-251,-337,-246,-288,-233,-243,-212,-198,-185,-157,-158,-116,-130,-74,-105,-29,-85,19,-73,68,-72,116,-81,163,-97,209,-117,237,-135,254,-139", "-473,-227,-444,-243,-395,-251,-346,-248,-296,-235,-251,-216,-206,-190,-164,-163,-123,-135,-81,-109,-37,-88,10,-74,59,-72,108,-79,155,-94,200,-113,230,-130,247,-133", "-481,-223,-452,-240,-404,-250,-355,-249,-304,-238,-260,-220,-213,-195,-172,-168,-131,-140,-89,-114,-45,-91,2,-76,51,-71,100,-77,147,-91,192,-109,222,-125,240,-128", "-489,-218,-461,-237,-413,-249,-363,-250,-313,-241,-268,-224,-221,-200,-179,-172,-138,-145,-97,-118,-53,-95,-7,-78,42,-71,91,-75,138,-88,184,-106,215,-121,232,-122", "-496,-213,-469,-233,-422,-248,-372,-251,-322,-243,-276,-227,-230,-205,-186,-177,-145,-150,-104,-123,-61,-98,-15,-80,33,-72,82,-74,130,-85,176,-102,207,-116,225,-117", "-503,-208,-477,-230,-430,-246,-380,-251,-331,-245,-284,-231,-238,-209,-194,-182,-152,-155,-111,-127,-69,-102,-24,-83,24,-72,73,-73,121,-82,168,-99,198,-112,216,-113", "-510,-203,-485,-225,-439,-244,-389,-251,-340,-247,-291,-234,-246,-214,-201,-187,-160,-160,-119,-132,-77,-106,-32,-86,16,-73,65,-72,113,-80,160,-96,190,-108,208,-109", "-516,-197,-493,-221,-447,-242,-398,-251,-349,-249,-299,-236,-254,-218,-208,-192,-167,-165,-126,-137,-84,-111,-40,-89,7,-75,56,-71,105,-78,152,-93,182,-105,200,-105", "-523,-191,-500,-216,-455,-239,-407,-250,-358,-250,-307,-239,-263,-222,-216,-196,-175,-169,-134,-142,-92,-115,-48,-92,-2,-77,47,-71,97,-76,144,-90,174,-101,192,-101", "-529,-185,-507,-211,-464,-236,-416,-249,-366,-251,-316,-242,-271,-225,-225,-201,-182,-174,-141,-147,-99,-120,-56,-96,-10,-79,39,-71,88,-75,135,-87,166,-98,184,-98", "-535,-179,-514,-205,-472,-232,-425,-247,-375,-251,-326,-244,-279,-229,-233,-206,-189,-179,-148,-152,-107,-124,-64,-100,-18,-81,30,-72,79,-73,127,-84,158,-95,176,-94", "-540,-172,-521,-199,-480,-228,-434,-246,-383,-251,-335,-246,-286,-232,-241,-211,-196,-184,-155,-156,-114,-129,-72,-104,-27,-84,21,-73,70,-72,118,-81,151,-92,168,-91", "-546,-165,-527,-193,-488,-224,-442,-243,-392,-251,-343,-248,-294,-235,-249,-215,-204,-189,-162,-161,-121,-134,-79,-108,-35,-87,13,-74,62,-72,110,-79,142,-89,159,-88", "-551,-158,-534,-187,-496,-219,-450,-241,-401,-251,-352,-249,-302,-237,-257,-219,-211,-193,-170,-166,-129,-139,-87,-112,-43,-90,4,-75,53,-71,102,-77,133,-86,150,-85", "-555,-150,-539,-180,-503,-214,-459,-238,-411,-250,-361,-250,-311,-240,-266,-223,-219,-198,-177,-171,-136,-144,-95,-117,-51,-94,-5,-77,44,-71,93,-76,125,-83,142,-82", "-560,-143,-545,-173,-510,-209,-467,-234,-419,-248,-369,-251,-320,-243,-274,-227,-228,-203,-184,-176,-143,-148,-102,-122,-59,-97,-13,-79,35,-71,84,-74,116,-81,133,-80", "-564,-135,-550,-166,-517,-203,-475,-231,-428,-247,-378,-251,-329,-245,-281,-230,-236,-208,-192,-181,-151,-153,-109,-126,-67,-101,-21,-82,27,-72,76,-73,108,-79,125,-78", "-568,-127,-556,-158,-523,-197,-483,-226,-437,-245,-386,-251,-338,-247,-289,-233,-244,-212,-199,-185,-158,-158,-117,-131,-74,-105,-30,-85,18,-73,67,-72,100,-77,117,-76", "-572,-119,-560,-151,-530,-191,-491,-222,-445,-243,-396,-251,-347,-248,-297,-236,-252,-217,-206,-190,-165,-163,-124,-136,-82,-110,-38,-88,9,-74,59,-71,91,-75,108,-74", "-575,-111,-565,-143,-536,-184,-498,-217,-453,-240,-405,-250,-355,-249,-305,-238,-260,-221,-214,-195,-173,-168,-132,-141,-90,-114,-46,-91,1,-76,50,-71,82,-74,99,-72", "-578,-103,-569,-135,-542,-177,-505,-212,-462,-237,-414,-249,-364,-250,-314,-241,-268,-224,-222,-200,-180,-173,-139,-145,-97,-119,-54,-95,-8,-78,41,-71,73,-73,90,-71", "-581,-95,-573,-127,-547,-170,-512,-206,-470,-233,-423,-248,-373,-251,-323,-243,-276,-228,-231,-205,-187,-178,-146,-150,-105,-123,-62,-99,-16,-80,32,-72,65,-72,81,-69", "-583,-86,-576,-119,-552,-163,-519,-201,-478,-229,-431,-246,-381,-251,-332,-245,-284,-231,-239,-210,-194,-182,-153,-155,-112,-128,-70,-103,-25,-83,23,-72,56,-71,73,-69", "-585,-78,-580,-111,-557,-156,-526,-195,-486,-225,-440,-244,-390,-251,-341,-247,-292,-234,-247,-214,-202,-187,-160,-160,-119,-133,-77,-107,-33,-86,15,-73,48,-71,64,-68", "-587,-69,-583,-102,-562,-148,-532,-188,-494,-220,-448,-242,-399,-251,-350,-249,-300,-237,-255,-218,-209,-192,-168,-165,-127,-137,-85,-111,-41,-89,6,-75,39,-71,55,-68", "-589,-61,-585,-94,-566,-140,-538,-182,-501,-215,-456,-239,-408,-250,-359,-250,-308,-239,-263,-222,-217,-197,-175,-170,-134,-142,-93,-116,-49,-93,-2,-77,30,-72,46,-68", "-590,-52,-588,-85,-570,-132,-544,-175,-508,-210,-465,-235,-417,-249,-367,-251,-317,-242,-271,-226,-225,-202,-182,-175,-141,-147,-100,-120,-57,-96,-11,-79,21,-73,37,-68", "-591,-43,-590,-77,-574,-124,-549,-168,-515,-204,-473,-232,-426,-247,-376,-251,-326,-244,-279,-229,-234,-207,-190,-179,-149,-152,-107,-125,-65,-100,-19,-81,13,-74,29,-69", "-592,-34,-592,-68,-578,-116,-554,-160,-522,-198,-481,-228,-434,-245,-384,-251,-335,-246,-287,-232,-242,-211,-197,-184,-156,-157,-115,-130,-72,-104,-28,-84,4,-75,20,-70", "-592,-25,-593,-59,-581,-108,-559,-153,-528,-192,-489,-223,-443,-243,-393,-251,-344,-248,-295,-235,-250,-216,-204,-189,-163,-162,-122,-134,-80,-108,-36,-87,-4,-77,11,-72", "-592,-17,-595,-50,-584,-99,-564,-145,-534,-186,-496,-218,-451,-241,-402,-251,-353,-249,-303,-238,-258,-220,-212,-194,-171,-167,-130,-139,-88,-113,-44,-90,-13,-79,2,-74", "-592,-8,-596,-41,-586,-91,-568,-137,-540,-179,-504,-213,-459,-238,-411,-250,-362,-250,-311,-240,-266,-223,-220,-199,-178,-172,-137,-144,-95,-117,-52,-94,-21,-82,-6,-76", "-592,1,-596,-32,-589,-82,-572,-129,-546,-172,-511,-208,-468,-234,-420,-248,-370,-251,-321,-243,-274,-227,-228,-204,-185,-176,-144,-149,-103,-122,-60,-98,-30,-85,-14,-79", "-591,9,-597,-23,-591,-73,-575,-121,-551,-165,-517,-202,-476,-230,-429,-247,-379,-251,-330,-245,-282,-230,-237,-208,-192,-181,-151,-154,-110,-127,-68,-102,-38,-88,-23,-81", "-590,18,-597,-15,-592,-65,-579,-113,-556,-158,-524,-196,-484,-226,-438,-245,-387,-251,-339,-247,-290,-233,-245,-213,-200,-186,-159,-159,-117,-131,-75,-106,-46,-91,-31,-85", "-589,27,-597,-6,-594,-56,-582,-104,-561,-150,-530,-190,-492,-221,-446,-242,-397,-251,-348,-248,-298,-236,-253,-217,-207,-191,-166,-164,-125,-136,-83,-110,-54,-95,-39,-88", "-588,36,-596,3,-595,-47,-585,-96,-565,-142,-536,-183,-499,-217,-454,-240,-406,-250,-356,-250,-306,-238,-261,-221,-215,-196,-173,-169,-132,-141,-91,-114,-62,-99,-47,-92", "-586,44,-595,12,-596,-38,-587,-87,-569,-134,-542,-177,-506,-211,-463,-236,-415,-249,-365,-250,-315,-241,-269,-225,-223,-201,-180,-173,-140,-146,-98,-119,-69,-103,-55,-96", "-584,53,-594,21,-597,-29,-589,-79,-573,-126,-548,-170,-513,-206,-471,-233,-424,-248,-373,-251,-324,-244,-277,-228,-231,-206,-188,-178,-147,-151,-105,-124,-77,-107,-62,-100", "-582,61,-593,30,-597,-20,-591,-70,-577,-118,-553,-162,-520,-200,-479,-229,-432,-246,-382,-251,-333,-246,-285,-231,-240,-210,-195,-183,-154,-156,-113,-128,-85,-111,-70,-104", "-579,70,-592,39,-597,-11,-593,-61,-580,-110,-558,-155,-526,-194,-487,-224,-441,-244,-391,-251,-342,-247,-293,-234,-248,-214,-202,-188,-161,-161,-120,-133,-92,-116,-78,-108", "-576,78,-590,47,-597,-2,-594,-53,-583,-101,-562,-147,-533,-188,-494,-220,-449,-241,-400,-251,-351,-249,-301,-237,-256,-219,-210,-193,-169,-166,-128,-138,-100,-120,-85,-113", "-573,86,-588,56,-596,6,-595,-44,-586,-93,-567,-140,-538,-181,-502,-215,-457,-238,-409,-250,-359,-250,-309,-239,-264,-222,-218,-197,-176,-170,-135,-143,-107,-125,-92,-118", "-570,94,-585,65,-595,15,-596,-35,-588,-84,-571,-132,-544,-174,-509,-209,-466,-235,-418,-249,-368,-251,-318,-242,-272,-226,-226,-202,-183,-175,-142,-148,-115,-129,-100,-122", "-566,102,-583,73,-594,24,-597,-26,-590,-76,-574,-123,-550,-167,-516,-204,-474,-231,-427,-247,-376,-251,-327,-244,-280,-229,-235,-207,-190,-180,-149,-152,-122,-134,-107,-127", "-562,110,-580,81,-593,33,-597,-17,-592,-67,-578,-115,-555,-160,-522,-198,-482,-227,-435,-245,-385,-251,-336,-246,-288,-232,-243,-212,-198,-185,-157,-157,-129,-139,-114,-132", "-558,118,-576,90,-591,42,-597,-8,-594,-58,-581,-107,-560,-152,-529,-192,-490,-223,-444,-243,-394,-251,-345,-248,-296,-235,-251,-216,-205,-189,-164,-162,-137,-144,-122,-138", "-554,125,-573,98,-589,51,-596,1,-595,-49,-584,-98,-564,-144,-535,-185,-497,-218,-452,-240,-403,-250,-354,-249,-303,-238,-259,-220,-213,-194,-171,-167,-144,-149,-129,-143", "-549,133,-569,106,-587,59,-596,10,-596,-40,-587,-90,-568,-137,-541,-178,-504,-213,-460,-237,-412,-250,-363,-250,-312,-240,-267,-224,-221,-199,-179,-172,-151,-154,-136,-148", "-545,140,-565,114,-584,68,-595,19,-596,-31,-589,-81,-572,-129,-546,-171,-511,-207,-469,-234,-421,-248,-371,-251,-322,-243,-275,-227,-229,-204,-186,-177,-158,-159,-143,-153", "-540,147,-561,122,-581,76,-593,28,-597,-23,-591,-73,-576,-120,-552,-164,-518,-202,-477,-230,-430,-246,-379,-251,-331,-245,-283,-230,-238,-209,-193,-182,-166,-164,-150,-158", "-534,154,-557,130,-578,84,-592,36,-597,-14,-593,-64,-579,-112,-557,-157,-525,-196,-485,-226,-438,-244,-388,-251,-340,-247,-291,-233,-246,-213,-200,-186,-173,-169,-157,-163", "-529,162,-552,137,-575,93,-590,45,-597,-5,-594,-55,-582,-104,-561,-149,-531,-189,-492,-221,-447,-242,-397,-251,-348,-248,-299,-236,-254,-217,-208,-191,-180,-173,-164,-168", "-523,168,-547,144,-571,101,-588,54,-596,4,-595,-46,-585,-95,-566,-142,-537,-183,-500,-216,-455,-239,-407,-250,-357,-250,-307,-239,-262,-221,-216,-196,-188,-178,-171,-173"],
        "Swim Loop": ["-517,175,-542,151,-568,109,-586,62,-595,12,-596,-38,-587,-87,-569,-134,-542,-176,-506,-211,-463,-236,-415,-249,-365,-250,-315,-241,-269,-225,-223,-201,-194,-182,-178,-178", "-511,181,-537,158,-564,116,-584,70,-594,21,-597,-29,-589,-79,-573,-127,-548,-170,-513,-206,-471,-233,-423,-248,-373,-251,-324,-244,-277,-228,-231,-205,-201,-187,-185,-182", "-505,186,-532,165,-560,123,-581,78,-593,29,-597,-21,-591,-71,-576,-119,-553,-163,-519,-201,-478,-229,-432,-246,-381,-251,-332,-246,-285,-231,-239,-210,-208,-192,-192,-187", "-499,192,-526,172,-556,131,-578,86,-592,38,-597,-12,-593,-62,-580,-111,-557,-156,-526,-195,-486,-225,-440,-244,-390,-251,-341,-247,-292,-234,-247,-214,-216,-196,-200,-191", "-493,197,-520,178,-551,138,-575,94,-590,46,-597,-4,-594,-54,-583,-103,-562,-148,-532,-189,-493,-220,-448,-242,-398,-251,-349,-249,-299,-236,-255,-218,-224,-201,-208,-196", "-486,201,-514,184,-547,145,-571,102,-588,54,-596,5,-595,-46,-585,-95,-566,-141,-537,-182,-500,-216,-455,-239,-407,-250,-358,-250,-307,-239,-263,-222,-232,-206,-216,-201", "-479,206,-508,190,-542,152,-567,109,-586,62,-595,13,-596,-37,-588,-86,-570,-134,-543,-176,-507,-211,-464,-236,-416,-249,-366,-250,-316,-241,-270,-225,-240,-210,-224,-206", "-472,210,-501,196,-537,159,-564,117,-583,70,-594,22,-597,-28,-590,-78,-573,-126,-548,-169,-514,-206,-471,-232,-424,-248,-374,-251,-325,-244,-278,-228,-248,-214,-232,-210", "-465,213,-495,201,-531,166,-560,124,-581,79,-593,30,-597,-20,-591,-70,-577,-118,-553,-162,-520,-200,-479,-229,-432,-246,-382,-251,-333,-246,-285,-231,-255,-218,-239,-214", "-457,217,-488,205,-525,172,-555,131,-578,87,-592,39,-597,-11,-593,-62,-580,-110,-558,-155,-526,-194,-487,-224,-441,-244,-390,-251,-342,-247,-293,-234,-263,-222,-247,-218", "-449,220,-481,210,-519,179,-551,139,-574,95,-590,47,-597,-3,-594,-53,-583,-102,-562,-148,-532,-188,-494,-220,-448,-241,-399,-251,-350,-249,-300,-237,-271,-225,-255,-221", "-442,222,-473,214,-513,185,-546,146,-571,102,-588,55,-596,5,-595,-45,-585,-94,-566,-140,-538,-182,-501,-215,-456,-239,-408,-250,-359,-250,-308,-239,-278,-229,-262,-224", "-434,225,-466,217,-507,191,-541,153,-567,110,-586,63,-595,14,-596,-36,-588,-86,-570,-133,-543,-175,-508,-210,-464,-236,-417,-249,-367,-251,-317,-242,-286,-232,-270,-227", "-426,227,-458,221,-501,196,-536,159,-563,118,-583,71,-594,23,-597,-27,-590,-77,-574,-125,-549,-168,-514,-205,-472,-232,-425,-247,-375,-251,-326,-244,-293,-234,-277,-230", "-417,228,-450,224,-494,201,-530,166,-559,125,-580,79,-593,31,-597,-19,-592,-69,-577,-117,-554,-161,-521,-199,-480,-228,-433,-246,-383,-251,-334,-246,-301,-237,-285,-233", "-410,230,-442,227,-487,206,-525,173,-555,132,-577,87,-591,40,-597,-11,-593,-61,-580,-109,-558,-154,-527,-193,-487,-224,-441,-244,-391,-251,-343,-248,-309,-239,-293,-236", "-401,231,-434,229,-480,210,-519,179,-550,139,-574,95,-590,48,-597,-2,-594,-52,-583,-101,-563,-147,-533,-187,-495,-220,-449,-241,-400,-251,-351,-249,-317,-242,-302,-238", "-393,232,-426,231,-473,214,-513,186,-546,146,-570,103,-588,56,-596,6,-595,-44,-586,-93,-567,-140,-538,-181,-502,-215,-457,-238,-409,-250,-359,-250,-326,-244,-310,-241", "-385,232,-418,233,-465,218,-506,191,-541,153,-567,111,-585,64,-595,15,-596,-35,-588,-85,-571,-132,-544,-174,-508,-210,-465,-235,-418,-249,-368,-251,-335,-246,-319,-243", "-377,233,-410,234,-457,221,-500,197,-535,160,-563,119,-583,72,-594,23,-597,-27,-590,-77,-574,-124,-549,-168,-515,-204,-473,-232,-426,-247,-376,-251,-343,-248,-327,-245", "-368,233,-401,235,-450,224,-493,202,-530,167,-559,126,-580,80,-593,32,-597,-18,-592,-68,-578,-116,-554,-161,-521,-199,-481,-228,-434,-245,-384,-251,-352,-249,-336,-246", "-360,233,-393,236,-442,227,-486,206,-524,174,-554,133,-577,88,-591,40,-597,-10,-593,-60,-581,-108,-559,-153,-527,-193,-488,-224,-442,-243,-392,-251,-360,-250,-344,-247", "-352,233,-385,237,-433,229,-479,211,-518,180,-550,140,-574,96,-589,49,-596,-1,-595,-51,-583,-100,-563,-146,-533,-187,-495,-219,-450,-241,-401,-251,-368,-251,-352,-248", "-343,232,-376,237,-425,231,-472,215,-512,186,-545,147,-570,104,-587,57,-596,7,-595,-43,-586,-92,-567,-139,-539,-180,-502,-214,-458,-238,-410,-250,-376,-251,-360,-249", "-335,232,-368,237,-417,233,-464,218,-506,192,-540,154,-566,112,-585,65,-595,16,-596,-34,-588,-84,-571,-131,-544,-174,-509,-209,-466,-235,-418,-249,-384,-251,-368,-249", "-327,231,-359,237,-409,234,-457,221,-499,197,-535,161,-562,119,-582,73,-594,24,-597,-26,-590,-76,-575,-123,-550,-167,-516,-204,-474,-231,-427,-247,-393,-251,-377,-250", "-319,230,-351,237,-401,235,-449,224,-492,202,-529,168,-558,127,-580,81,-593,33,-597,-17,-592,-67,-578,-116,-555,-160,-522,-198,-481,-227,-435,-245,-402,-251,-385,-249", "-310,229,-342,237,-392,236,-441,227,-486,207,-524,174,-554,134,-577,89,-591,41,-597,-9,-593,-59,-581,-107,-559,-153,-528,-192,-489,-223,-443,-243,-410,-250,-394,-249", "-302,227,-334,236,-384,237,-433,229,-478,211,-518,181,-549,141,-573,97,-589,50,-596,0,-595,-50,-584,-99,-563,-145,-534,-186,-496,-219,-451,-241,-419,-249,-402,-248", "-293,226,-326,235,-375,237,-424,231,-471,215,-511,187,-545,148,-570,105,-587,58,-596,8,-596,-42,-586,-91,-567,-138,-540,-180,-503,-214,-459,-238,-427,-247,-411,-247", "-285,224,-317,234,-367,237,-416,233,-463,219,-505,192,-540,155,-566,113,-585,66,-595,17,-596,-33,-588,-83,-571,-130,-545,-173,-510,-209,-467,-234,-436,-245,-419,-246", "-277,222,-309,233,-358,237,-408,234,-456,222,-499,198,-534,162,-562,120,-582,74,-594,25,-597,-25,-590,-75,-575,-123,-550,-166,-516,-203,-475,-231,-444,-243,-427,-244", "-269,221,-300,231,-350,237,-400,236,-448,225,-492,203,-529,168,-558,127,-579,82,-592,34,-597,-16,-592,-67,-578,-115,-555,-159,-523,-198,-482,-227,-451,-240,-435,-242", "-261,219,-292,230,-342,236,-391,236,-440,227,-485,207,-523,175,-554,134,-576,90,-591,42,-597,-8,-594,-58,-581,-107,-560,-152,-529,-192,-490,-223,-459,-238,-443,-239", "-253,216,-284,228,-333,236,-383,237,-432,230,-478,211,-517,181,-549,142,-573,98,-589,50,-596,1,-595,-50,-584,-98,-564,-145,-535,-185,-497,-218,-467,-234,-451,-237", "-245,214,-276,227,-325,235,-374,237,-423,232,-470,215,-511,187,-544,149,-569,106,-587,58,-596,9,-596,-41,-586,-90,-568,-137,-540,-179,-504,-213,-475,-231,-458,-233", "-237,212,-268,225,-317,234,-366,237,-415,233,-463,219,-504,193,-539,155,-565,113,-585,67,-595,18,-596,-32,-589,-82,-572,-130,-546,-172,-510,-208,-483,-227,-466,-230", "-229,209,-260,223,-308,233,-357,237,-407,235,-455,222,-498,198,-534,162,-562,121,-582,75,-594,26,-597,-24,-591,-74,-575,-122,-551,-165,-517,-203,-490,-222,-473,-226", "-221,207,-251,220,-300,231,-349,237,-399,236,-447,225,-491,203,-528,169,-557,128,-579,83,-592,35,-597,-16,-592,-66,-579,-114,-556,-158,-523,-197,-497,-218,-481,-222", "-213,204,-243,218,-291,230,-341,236,-390,236,-439,228,-484,208,-522,176,-553,135,-576,91,-591,43,-597,-7,-594,-57,-582,-106,-560,-151,-529,-191,-504,-213,-488,-218", "-205,201,-235,216,-283,228,-332,236,-382,237,-431,230,-477,212,-516,182,-548,142,-573,99,-589,51,-596,1,-595,-49,-584,-98,-564,-144,-535,-185,-511,-208,-494,-213", "-197,198,-227,213,-275,226,-324,235,-373,237,-422,232,-469,216,-510,188,-544,149,-569,107,-587,59,-596,10,-596,-40,-587,-90,-568,-136,-541,-178,-517,-202,-501,-208", "-189,195,-219,211,-267,224,-316,234,-365,237,-414,233,-462,219,-504,194,-538,156,-565,114,-584,67,-595,18,-596,-32,-589,-81,-572,-129,-546,-172,-524,-197,-507,-203", "-182,192,-211,208,-259,222,-307,233,-356,237,-406,235,-454,222,-497,199,-533,163,-561,122,-582,76,-594,27,-597,-23,-591,-73,-576,-121,-551,-165,-530,-191,-514,-198", "-174,189,-203,205,-251,220,-299,231,-348,237,-398,236,-446,225,-490,204,-528,170,-557,129,-579,84,-592,35,-597,-15,-592,-65,-579,-113,-556,-158,-536,-184,-520,-192", "-166,186,-195,202,-242,218,-290,230,-340,236,-390,236,-438,228,-483,208,-522,176,-553,136,-576,92,-590,44,-597,-6,-594,-56,-582,-105,-560,-150,-541,-178,-525,-186", "-158,183,-187,199,-234,215,-282,228,-332,236,-381,237,-430,230,-476,212,-516,183,-548,143,-572,99,-589,52,-596,2,-595,-48,-585,-97,-565,-143,-546,-171,-531,-180", "-151,179,-179,196,-226,213,-274,226,-323,235,-373,237,-422,232,-469,216,-510,189,-543,150,-569,107,-586,60,-596,11,-596,-39,-587,-89,-569,-136,-552,-164,-536,-174", "-143,176,-172,193,-218,210,-266,224,-315,234,-364,237,-413,234,-461,220,-503,194,-538,157,-565,115,-584,68,-595,19,-596,-31,-589,-81,-572,-128,-556,-157,-542,-167", "-135,172,-164,190,-210,208,-258,222,-306,232,-355,237,-405,235,-453,223,-496,199,-533,164,-561,122,-581,76,-593,28,-597,-22,-591,-72,-576,-120,-561,-150,-546,-160", "-128,169,-156,186,-202,205,-250,220,-298,231,-347,237,-397,236,-445,226,-490,204,-527,170,-557,129,-578,84,-592,36,-597,-14,-593,-64,-579,-112,-565,-143,-551,-153", "-120,165,-148,183,-194,202,-242,218,-290,229,-339,236,-389,237,-437,228,-483,209,-521,177,-552,137,-575,92,-590,45,-597,-5,-594,-55,-582,-104,-569,-135,-555,-146", "-113,161,-141,180,-186,199,-233,215,-281,228,-331,236,-380,237,-429,230,-475,213,-515,183,-547,144,-572,100,-588,53,-596,3,-595,-47,-585,-96,-573,-127,-559,-139", "-105,158,-133,176,-179,196,-225,213,-273,226,-322,235,-372,237,-421,232,-468,217,-509,189,-543,151,-568,108,-586,61,-596,12,-596,-38,-587,-88,-576,-120,-563,-132", "-98,154,-125,172,-171,193,-217,210,-265,224,-314,234,-363,237,-413,234,-460,220,-502,195,-537,158,-564,116,-584,69,-595,20,-596,-30,-589,-80,-579,-112,-567,-124", "-91,150,-118,169,-163,189,-209,207,-257,222,-305,232,-355,237,-404,235,-453,223,-496,200,-532,164,-560,123,-581,77,-593,29,-597,-21,-591,-71,-582,-104,-570,-117", "-83,146,-110,165,-155,186,-201,205,-249,220,-297,231,-346,237,-396,236,-445,226,-489,205,-526,171,-556,130,-578,85,-592,37,-597,-13,-593,-63,-585,-95,-573,-109", "-76,141,-103,161,-147,183,-194,202,-241,217,-289,229,-338,236,-388,237,-436,228,-482,209,-520,178,-552,137,-575,93,-590,46,-597,-4,-594,-55,-587,-87,-576,-101", "-68,137,-95,157,-140,179,-186,199,-232,215,-281,228,-330,235,-379,237,-428,230,-475,213,-514,184,-547,144,-571,101,-588,54,-596,4,-595,-46,-589,-79,-579,-93", "-61,133,-88,153,-132,176,-178,196,-224,212,-272,226,-321,235,-371,237,-420,232,-467,217,-508,190,-542,151,-568,109,-586,62,-595,13,-596,-37,-591,-71,-581,-85", "-57,131,-84,151,-128,174,-174,194,-220,211,-268,225,-317,234,-366,237,-416,233,-463,219,-505,193,-539,155,-566,113,-585,66,-595,17,-596,-33,-592,-67,-582,-81", "-50,127,-77,147,-121,170,-166,191,-212,208,-260,223,-309,233,-358,237,-408,234,-456,222,-498,198,-534,162,-562,120,-582,74,-594,25,-597,-25,-594,-58,-584,-73", "-43,122,-69,143,-113,166,-158,187,-204,206,-252,221,-300,231,-350,237,-399,236,-448,225,-492,203,-529,169,-558,127,-579,82,-592,34,-597,-16,-595,-50,-586,-65", "-36,118,-62,139,-106,163,-150,184,-197,203,-244,218,-292,230,-341,236,-391,236,-440,227,-485,207,-523,175,-553,135,-576,90,-591,42,-597,-8,-596,-41,-587,-57", "-29,113,-55,134,-98,159,-143,181,-189,200,-236,216,-284,228,-333,236,-383,237,-431,230,-477,212,-517,182,-549,142,-573,98,-589,51,-596,1,-596,-32,-588,-48", "-22,109,-48,130,-91,155,-135,177,-181,197,-227,213,-276,226,-325,235,-374,237,-423,232,-470,215,-511,188,-544,149,-569,106,-587,59,-596,9,-597,-24,-589,-40", "-15,104,-40,126,-83,151,-127,173,-173,194,-219,211,-267,225,-316,234,-366,237,-415,233,-462,219,-504,193,-539,156,-565,114,-584,67,-595,18,-597,-16,-590,-32", "-8,99,-33,121,-76,147,-120,170,-165,190,-212,208,-259,223,-308,233,-357,237,-407,235,-455,222,-498,198,-534,162,-561,121,-582,75,-594,26,-597,-7,-590,-24", "-1,94,-26,117,-68,142,-112,166,-157,187,-204,205,-251,220,-299,231,-349,237,-399,236,-447,225,-491,203,-528,169,-557,128,-579,83,-592,35,-596,1,-590,-15", "6,89,-19,112,-61,138,-105,162,-150,184,-196,202,-243,218,-291,230,-341,236,-390,236,-439,228,-484,208,-522,176,-553,135,-576,91,-591,43,-596,10,-590,-7", "12,85,-12,107,-54,134,-97,158,-142,180,-188,200,-235,216,-283,228,-332,236,-382,237,-431,230,-477,212,-516,182,-548,142,-572,99,-589,51,-595,18,-590,1", "19,80,-5,102,-47,130,-90,154,-134,177,-180,196,-227,213,-275,226,-324,235,-373,237,-422,232,-469,216,-510,188,-543,149,-569,107,-587,60,-594,27,-589,10", "26,74,2,97,-40,125,-82,150,-127,173,-172,193,-219,211,-267,224,-315,234,-365,237,-414,233,-462,219,-504,194,-538,156,-565,114,-584,68,-592,35,-588,18", "32,69,9,93,-33,121,-75,146,-119,169,-164,190,-211,208,-258,222,-307,232,-356,237,-406,235,-454,223,-497,199,-533,163,-561,122,-582,76,-590,44,-587,26", "39,64,15,88,-25,116,-68,142,-112,166,-157,187,-203,205,-250,220,-298,231,-348,237,-398,236,-446,225,-490,204,-527,170,-557,129,-579,84,-589,52,-586,34", "46,58,22,83,-18,111,-60,138,-104,162,-149,183,-195,202,-242,218,-290,230,-340,236,-389,236,-438,228,-483,208,-522,177,-552,136,-576,92,-586,60,-584,43", "52,53,29,78,-11,107,-53,133,-97,158,-141,180,-187,199,-234,215,-282,228,-331,236,-381,237,-430,230,-476,212,-516,183,-548,143,-572,100,-584,68,-582,51", "58,48,36,72,-4,102,-46,129,-89,154,-133,176,-179,196,-226,213,-274,226,-323,235,-372,237,-421,232,-468,216,-509,189,-543,150,-568,108,-581,76,-580,59", "64,42,42,67,3,97,-39,125,-82,150,-126,173,-171,193,-218,210,-266,224,-315,234,-364,237,-413,234,-461,220,-503,194,-538,157,-565,115,-578,84,-578,67", "70,37,49,61,9,92,-32,120,-74,146,-118,169,-164,190,-210,208,-258,222,-306,232,-355,237,-405,235,-453,223,-496,199,-532,164,-561,122,-575,92,-575,75", "76,31,55,56,16,87,-25,116,-67,141,-111,165,-156,186,-202,205,-249,220,-298,231,-347,237,-397,236,-445,226,-489,204,-527,171,-556,130,-572,100,-572,82", "83,25,61,51,22,82,-18,111,-60,137,-103,161,-148,183,-194,202,-241,218,-289,229,-339,236,-388,237,-437,228,-482,209,-521,177,-552,137,-568,108,-569,90", "89,20,67,45,29,77,-10,106,-52,133,-96,158,-140,179,-186,199,-233,215,-281,228,-330,236,-380,237,-429,230,-475,213,-515,183,-547,144,-564,116,-566,98", "96,14,73,40,36,72,-3,101,-45,129,-88,154,-133,176,-178,196,-225,213,-273,226,-322,235,-371,237,-420,232,-468,217,-509,189,-542,151,-560,123,-562,105", "102,9,80,34,43,66,3,96,-38,124,-81,149,-125,172,-171,193,-217,210,-265,224,-314,233,-363,237,-412,234,-460,220,-502,195,-537,158,-556,130,-559,113", "109,4,86,28,50,61,10,92,-31,120,-74,145,-118,169,-163,189,-209,207,-257,222,-305,232,-354,237,-404,235,-452,223,-496,200,-532,165,-552,137,-555,120", "115,-1,92,23,56,55,17,87,-24,115,-66,141,-110,165,-155,186,-201,204,-249,220,-297,231,-346,237,-396,236,-444,226,-489,205,-526,171,-547,144,-550,127", "122,-7,99,17,62,50,23,82,-17,110,-59,137,-103,161,-147,183,-193,202,-240,217,-288,229,-338,236,-388,237,-436,228,-482,209,-520,178,-542,151,-546,134", "129,-12,105,12,68,45,30,76,-10,106,-52,133,-95,157,-140,179,-185,199,-232,215,-280,228,-330,235,-379,237,-428,231,-474,213,-514,184,-537,158,-541,141", "136,-17,112,7,74,39,37,71,-3,101,-45,128,-88,153,-132,176,-178,195,-224,212,-272,226,-321,234,-371,237,-420,232,-467,217,-508,190,-531,165,-536,148", "143,-22,118,2,80,33,44,66,4,96,-38,124,-80,149,-124,172,-170,192,-216,210,-264,224,-313,233,-362,237,-412,234,-459,220,-502,195,-526,172,-531,155", "150,-27,125,-4,87,28,50,60,11,91,-31,119,-73,145,-117,168,-162,189,-208,207,-256,222,-304,232,-354,237,-403,235,-451,223,-495,200,-520,178,-526,162", "157,-31,132,-9,93,22,56,55,17,86,-23,115,-65,141,-109,164,-154,186,-200,204,-248,219,-296,231,-345,237,-395,236,-444,226,-488,205,-514,185,-521,168", "164,-36,139,-14,99,17,62,49,24,81,-16,110,-58,136,-102,161,-146,182,-192,201,-240,217,-288,229,-337,236,-387,237,-435,229,-481,210,-508,190,-515,174", "171,-41,146,-19,106,11,68,44,31,76,-9,105,-51,132,-94,157,-139,179,-185,198,-231,215,-279,227,-329,235,-378,237,-427,231,-474,214,-501,196,-509,180", "178,-45,153,-23,112,6,75,38,38,70,-2,100,-44,128,-87,153,-131,175,-177,195,-223,212,-271,225,-320,234,-370,237,-419,233,-466,217,-494,201,-504,186", "185,-50,160,-28,119,1,81,33,44,65,5,95,-37,123,-79,149,-124,172,-169,192,-215,209,-263,224,-312,233,-361,237,-411,234,-458,221,-487,206,-497,191", "192,-54,166,-33,126,-4,87,27,51,60,11,91,-30,119,-72,144,-116,168,-161,189,-207,207,-255,221,-303,232,-353,237,-403,235,-451,224,-480,210,-491,196", "200,-58,173,-37,133,-9,94,22,57,54,18,86,-22,114,-65,140,-108,164,-153,185,-200,204,-247,219,-295,230,-344,237,-394,236,-443,226,-473,214,-484,200", "207,-62,180,-42,139,-14,100,16,63,49,25,81,-15,109,-57,136,-101,160,-146,182,-192,201,-239,217,-287,229,-336,236,-386,237,-435,229,-466,218,-477,204", "215,-66,188,-46,146,-19,107,11,69,43,32,75,-8,105,-50,132,-94,156,-138,178,-184,198,-231,214,-279,227,-328,235,-377,237,-426,231,-458,221,-470,208", "222,-70,195,-50,153,-24,113,6,75,38,38,70,-1,100,-43,127,-86,152,-130,175,-176,195,-222,212,-271,225,-319,234,-369,237,-418,233,-450,224,-463,212", "229,-74,203,-55,160,-29,120,1,82,32,45,64,6,95,-36,123,-79,148,-123,171,-168,192,-215,209,-262,223,-311,233,-360,237,-410,234,-442,227,-456,215", "237,-78,210,-59,167,-33,126,-5,88,27,52,59,12,90,-29,118,-71,144,-115,167,-160,188,-207,206,-254,221,-303,232,-352,237,-402,235,-434,229,-448,218", "245,-82,217,-63,174,-38,133,-10,94,21,58,54,19,85,-22,114,-64,140,-108,164,-153,185,-199,204,-246,219,-294,230,-344,237,-393,236,-426,231,-440,221", "253,-85,225,-67,181,-42,140,-15,101,16,64,48,25,80,-15,109,-57,135,-100,160,-145,182,-191,201,-238,217,-286,229,-335,236,-385,237,-417,233,-432,223", "260,-89,232,-71,189,-47,147,-20,107,10,70,43,32,75,-8,104,-49,131,-93,156,-137,178,-183,198,-230,214,-278,227,-327,235,-376,237,-409,234,-424,225", "268,-92,239,-74,196,-51,154,-24,114,5,76,37,39,69,-1,99,-42,127,-85,152,-130,174,-175,195,-222,212,-270,225,-319,234,-368,237,-401,235,-416,226", "276,-95,247,-78,203,-55,161,-29,120,0,82,31,46,64,6,94,-35,122,-78,148,-122,171,-167,191,-214,209,-262,223,-310,233,-359,237,-393,236,-408,228", "284,-98,255,-82,211,-59,168,-34,127,-5,89,26,52,58,13,90,-28,118,-70,144,-114,167,-159,188,-206,206,-253,221,-302,232,-351,237,-384,237,-400,229", "292,-101,263,-85,218,-63,175,-38,134,-10,95,20,58,53,19,85,-21,113,-63,139,-107,163,-152,185,-198,203,-245,219,-293,230,-343,237,-376,237,-392,230", "300,-104,270,-88,225,-67,182,-43,141,-15,101,15,64,48,26,80,-14,108,-56,135,-99,159,-144,181,-190,200,-237,216,-285,228,-334,236,-367,237,-384,231", "308,-107,278,-92,233,-71,189,-47,148,-20,108,10,70,42,33,74,-7,104,-49,131,-92,155,-136,178,-182,197,-229,214,-277,227,-326,235,-359,237,-375,231", "316,-110,286,-95,240,-75,197,-51,155,-25,115,5,77,37,40,69,0,99,-42,126,-85,151,-129,174,-174,194,-221,211,-269,225,-318,234,-350,237,-367,232", "324,-112,294,-98,248,-78,204,-56,162,-30,121,-1,83,31,46,63,7,94,-35,122,-77,147,-121,170,-166,191,-213,209,-261,223,-309,233,-342,237,-359,232", "332,-115,302,-100,256,-82,211,-60,169,-34,128,-6,89,25,53,58,14,89,-27,117,-70,143,-114,167,-159,188,-205,206,-253,221,-301,231,-334,236,-351,232", "340,-117,310,-103,264,-85,219,-64,176,-39,135,-11,96,20,59,53,20,84,-20,113,-62,139,-106,163,-151,184,-197,203,-244,218,-292,230,-326,235,-342,232", "348,-119,318,-106,271,-89,226,-68,183,-43,142,-16,102,15,65,47,27,79,-13,108,-55,135,-99,159,-143,181,-189,200,-236,216,-284,228,-317,234,-334,232", "357,-121,326,-108,279,-92,234,-71,190,-47,149,-21,109,9,71,42,34,74,-6,103,-48,130,-91,155,-136,177,-181,197,-228,214,-276,227,-309,233,-325,232", "365,-122,334,-111,287,-95,241,-75,197,-52,155,-25,115,4,77,36,41,68,1,98,-41,126,-84,151,-128,174,-173,194,-220,211,-268,225,-300,231,-317,231", "374,-124,342,-113,294,-98,249,-79,205,-56,162,-30,122,-1,84,30,47,63,8,93,-34,121,-76,147,-120,170,-166,191,-212,208,-260,223,-292,230,-308,231", "382,-125,350,-115,302,-101,257,-82,212,-60,169,-35,129,-6,90,25,53,57,14,89,-27,117,-69,143,-113,166,-158,187,-204,206,-252,221,-284,228,-300,230", "391,-126,358,-116,311,-103,264,-86,220,-64,176,-39,135,-11,96,19,60,52,21,84,-19,112,-62,138,-105,162,-150,184,-196,203,-243,218,-276,226,-292,229", "399,-127,367,-118,319,-106,272,-89,227,-68,184,-43,142,-16,103,14,66,47,28,78,-12,107,-54,134,-98,159,-142,180,-188,200,-235,216,-267,225,-283,228", "407,-128,375,-120,327,-108,280,-92,234,-72,191,-48,149,-21,109,9,72,41,35,73,-5,103,-47,130,-90,155,-135,177,-181,197,-227,213,-259,223,-275,227", "416,-128,384,-121,335,-111,288,-95,242,-75,198,-52,156,-26,116,4,78,35,41,68,2,98,-40,125,-83,151,-127,173,-173,194,-219,211,-251,220,-267,226", "425,-128,392,-122,343,-113,295,-98,250,-79,206,-56,163,-30,122,-2,84,30,48,62,8,93,-33,121,-76,146,-120,170,-165,190,-211,208,-243,218,-258,224", "433,-128,400,-123,351,-115,303,-101,257,-83,213,-61,170,-35,129,-7,91,24,54,57,15,88,-26,116,-68,142,-112,166,-157,187,-203,205,-235,216,-250,222", "442,-128,408,-123,359,-117,311,-104,265,-86,220,-65,177,-40,136,-12,97,19,60,51,21,83,-19,112,-61,138,-105,162,-149,184,-195,202,-227,213,-241,221", "450,-127,417,-124,368,-118,320,-106,273,-89,228,-68,184,-44,143,-17,104,13,66,46,28,78,-12,107,-54,134,-97,158,-142,180,-188,199,-219,211,-233,219", "459,-126,426,-124,376,-120,328,-109,281,-93,235,-72,192,-48,150,-22,110,8,72,40,35,72,-5,102,-46,129,-90,154,-134,177,-180,196,-211,208,-225,217", "467,-125,434,-124,384,-121,336,-111,288,-96,243,-76,199,-53,157,-26,117,3,79,35,42,67,2,97,-39,125,-82,150,-126,173,-172,193,-203,205,-217,215", "476,-123,442,-123,393,-122,344,-113,296,-98,250,-79,206,-57,164,-31,123,-2,85,29,48,62,9,92,-32,121,-75,146,-119,169,-164,190,-195,202,-208,213", "484,-121,450,-123,401,-123,352,-115,304,-101,258,-83,214,-61,171,-36,130,-7,91,24,55,56,16,88,-25,116,-67,142,-111,165,-156,187,-187,199,-200,210", "492,-118,459,-122,409,-123,360,-117,312,-104,266,-86,221,-65,178,-40,137,-12,98,18,61,51,22,83,-18,111,-60,138,-104,162,-149,183,-179,196,-192,208", "500,-115,467,-120,418,-124,369,-118,320,-107,274,-90,228,-69,185,-44,144,-17,104,13,67,46,29,77,-11,106,-53,133,-96,158,-141,180,-171,193,-184,205", "508,-112,476,-119,426,-124,377,-120,329,-109,281,-93,236,-72,192,-49,151,-22,111,8,73,40,36,72,-4,102,-46,129,-89,154,-133,176,-163,190,-176,202", "516,-108,484,-116,435,-124,385,-121,337,-111,289,-96,243,-76,200,-53,158,-27,117,2,79,34,43,66,3,97,-39,125,-81,150,-126,173,-156,186,-168,199", "524,-104,492,-114,443,-123,394,-122,345,-113,297,-99,251,-80,207,-57,165,-31,124,-3,86,29,49,61,10,92,-32,120,-74,146,-118,169,-148,183,-160,196", "531,-99,499,-111,451,-123,402,-123,353,-115,305,-102,259,-83,214,-61,172,-36,131,-8,92,23,55,56,16,87,-24,115,-67,141,-110,165,-140,179,-152,193", "538,-94,507,-108,460,-122,410,-123,361,-117,313,-104,267,-87,222,-65,179,-40,138,-13,98,18,61,50,23,82,-17,111,-59,137,-103,161,-133,176,-144,189", "544,-88,515,-104,468,-120,419,-124,369,-119,321,-107,275,-90,229,-69,186,-45,144,-18,105,12,67,45,30,77,-10,106,-52,133,-96,157,-125,172,-137,186", "550,-82,522,-100,476,-118,427,-124,378,-120,329,-109,282,-93,237,-73,193,-49,151,-23,111,7,74,39,37,71,-3,101,-45,128,-88,153,-117,169,-129,182", "556,-75,529,-95,485,-116,436,-124,386,-121,337,-111,290,-96,244,-77,201,-54,158,-27,118,2,80,34,43,66,4,96,-38,124,-81,149,-110,165,-121,178", "562,-68,536,-90,492,-114,444,-123,394,-122,345,-113,298,-99,252,-80,208,-58,165,-32,125,-3,86,28,50,60,10,91,-31,120,-73,145,-103,161,-114,175", "566,-61,542,-84,500,-111,452,-123,403,-123,353,-115,306,-102,260,-84,215,-62,172,-36,131,-8,93,23,56,55,17,87,-24,115,-66,141,-95,157,-106,171", "571,-53,548,-78,508,-107,460,-121,411,-124,362,-117,314,-105,268,-87,223,-66,179,-41,138,-13,99,17,62,50,23,82,-16,110,-59,137,-88,153,-99,167", "575,-45,553,-72,516,-104,469,-120,420,-124,370,-119,322,-107,275,-90,230,-70,187,-45,145,-18,106,12,68,44,30,76,-9,105,-51,132,-80,149,-91,163", "579,-38,558,-65,523,-99,477,-118,428,-124,379,-120,330,-109,283,-93,237,-73,194,-50,152,-23,112,7,74,39,37,71,-2,101,-44,128,-73,145,-83,159", "582,-30,563,-58,530,-95,485,-116,437,-124,387,-121,338,-112,291,-96,245,-77,201,-54,159,-28,119,1,81,33,44,65,4,96,-37,124,-65,141,-76,155", "585,-22,567,-50,536,-89,493,-113,445,-123,395,-122,346,-114,299,-99,253,-81,209,-58,166,-32,125,-4,87,27,50,60,11,91,-30,119,-58,136,-69,151", "587,-13,571,-43,542,-84,501,-111,453,-122,403,-123,354,-115,307,-102,261,-84,216,-62,173,-37,132,-9,93,22,57,55,18,86,-23,114,-51,132,-61,146", "589,-5,575,-35,548,-78,509,-107,461,-121,412,-124,363,-117,315,-105,268,-87,223,-66,180,-41,139,-14,100,17,63,49,24,81,-16,110,-44,128,-54,142", "591,3,578,-28,554,-71,516,-103,470,-120,421,-124,371,-119,323,-107,276,-91,231,-70,187,-46,146,-19,106,11,69,44,31,76,-9,105,-37,123,-47,138", "592,12,581,-20,559,-65,524,-99,478,-118,429,-124,380,-120,331,-110,284,-94,238,-74,195,-50,153,-24,113,6,75,38,38,70,-2,100,-30,119,-40,134", "593,20,583,-12,563,-57,530,-94,486,-116,437,-124,388,-121,339,-112,292,-97,246,-77,202,-54,160,-28,119,1,81,32,45,65,5,95,-22,114,-32,129", "594,29,585,-3,568,-50,537,-89,494,-113,446,-123,396,-122,347,-114,299,-100,254,-81,209,-59,167,-33,126,-4,88,27,51,59,12,90,-15,109,-25,124", "594,38,587,5,572,-42,543,-83,502,-110,454,-122,404,-123,355,-116,308,-102,261,-84,217,-63,174,-37,133,-9,94,21,57,54,18,86,-8,105,-18,120", "594,46,588,13,575,-34,549,-77,510,-107,462,-121,413,-124,364,-117,316,-105,269,-88,224,-67,181,-42,140,-14,100,16,63,49,25,80,-1,100,-11,115", "593,55,589,21,578,-27,554,-71,517,-103,471,-120,421,-124,372,-119,324,-108,277,-91,232,-70,188,-46,147,-19,107,11,69,43,32,75,6,95,-4,110", "592,63,590,30,581,-19,559,-64,524,-98,479,-118,430,-124,380,-120,332,-110,285,-94,239,-74,195,-51,154,-24,113,5,76,37,39,70,12,90,3,105", "591,72,590,38,583,-11,564,-56,531,-93,487,-116,438,-124,389,-122,340,-112,292,-97,247,-78,203,-55,161,-29,120,0,82,32,45,64,19,85,10,101", "589,80,589,47,585,-3,568,-49,538,-88,495,-113,447,-123,397,-122,348,-114,300,-100,254,-81,210,-59,167,-33,127,-5,88,26,52,59,25,80,17,96", "587,89,589,55,587,6,572,-41,544,-83,503,-110,455,-122,405,-123,356,-116,308,-103,262,-85,218,-63,174,-38,134,-10,95,21,58,53,32,75,24,90", "585,97,588,63,588,14,575,-34,549,-77,510,-106,463,-121,414,-124,365,-118,317,-105,270,-88,225,-67,182,-42,140,-15,101,15,64,48,39,69,31,85", "582,105,586,72,589,22,579,-26,555,-70,518,-102,472,-119,422,-124,373,-119,325,-108,278,-91,232,-71,189,-47,147,-20,108,10,70,43,46,64,38,80", "579,113,585,80,590,31,581,-18,560,-63,525,-98,480,-118,431,-124,381,-121,333,-110,285,-94,240,-74,196,-51,154,-25,114,5,76,37,52,58,44,74", "576,121,583,88,590,39,584,-10,564,-56,532,-93,488,-115,439,-124,390,-122,341,-112,293,-97,247,-78,204,-55,161,-29,121,0,82,31,58,53,51,69", "572,129,580,96,589,48,586,-2,569,-48,538,-88,496,-113,447,-123,398,-123,349,-114,301,-100,255,-82,211,-59,168,-34,127,-5,89,26,64,48,57,64", "568,137,578,104,589,56,587,7,572,-41,544,-82,503,-109,455,-122,406,-123,357,-116,309,-103,263,-85,218,-63,175,-38,134,-10,95,20,70,42,63,58", "564,144,575,112,588,64,588,15,576,-33,550,-76,511,-106,464,-121,415,-124,365,-118,317,-106,271,-89,226,-67,182,-43,141,-15,102,15,77,37,69,53", "560,151,571,120,586,73,589,23,579,-25,555,-69,519,-102,473,-119,423,-124,374,-119,326,-108,279,-92,233,-71,190,-47,148,-20,108,10,83,31,75,47", "555,159,568,127,585,81,590,32,582,-17,560,-62,526,-97,481,-117,432,-124,382,-121,334,-110,286,-95,241,-75,197,-52,155,-25,115,4,89,25,82,41", "550,166,564,135,582,89,590,40,584,-9,565,-55,532,-92,489,-115,440,-124,390,-122,342,-112,294,-98,248,-79,204,-56,162,-30,121,-1,96,20,88,36", "545,173,560,142,580,97,589,48,586,-1,569,-47,539,-87,496,-112,448,-123,399,-123,350,-114,302,-100,256,-82,212,-60,169,-34,128,-6,102,15,94,30", "540,179,556,150,577,105,589,57,587,7,573,-40,545,-81,504,-109,456,-122,407,-123,358,-116,310,-103,264,-86,219,-64,176,-39,135,-11,109,9,100,25", "535,186,551,157,574,113,588,65,589,16,576,-32,551,-75,512,-105,465,-121,415,-124,366,-118,318,-106,272,-89,226,-68,183,-43,142,-16,115,4,107,20", "529,192,546,164,571,121,586,73,589,24,579,-24,556,-69,519,-101,473,-119,424,-124,375,-119,326,-108,279,-92,234,-71,190,-48,149,-21,122,-1,113,14", "523,199,541,171,567,128,584,82,590,32,582,-16,561,-62,526,-97,482,-117,433,-124,383,-121,334,-111,287,-95,241,-75,198,-52,156,-26,129,-6,120,9", "517,205,536,177,564,136,582,90,590,41,584,-8,565,-54,533,-92,490,-115,441,-124,391,-122,342,-113,295,-98,249,-79,205,-56,163,-30,135,-11,126,4", "511,211,531,184,560,143,580,98,589,49,586,0,569,-47,540,-87,497,-112,449,-123,399,-123,350,-115,303,-101,257,-82,212,-60,170,-35,142,-16,133,-1", "505,217,525,190,555,150,577,106,588,58,587,8,573,-39,546,-81,505,-109,457,-122,408,-123,359,-116,311,-104,265,-86,220,-64,177,-39,149,-21,140,-6", "498,222,520,196,551,157,574,114,587,66,589,17,576,-31,551,-75,513,-105,466,-121,416,-124,367,-118,319,-106,272,-89,227,-68,184,-44,156,-26,147,-11", "492,228,514,202,546,164,571,121,586,74,589,25,579,-24,556,-68,520,-101,474,-119,425,-124,376,-120,327,-109,280,-92,235,-72,191,-48,163,-31,153,-16", "485,233,508,208,541,171,567,129,584,82,590,33,582,-16,561,-61,527,-96,482,-117,433,-124,384,-121,335,-111,288,-95,242,-76,199,-52,170,-35,160,-20", "478,238,502,214,536,178,563,137,582,91,590,42,584,-7,566,-53,534,-91,490,-114,442,-123,392,-122,343,-113,296,-98,250,-79,206,-57,177,-40,167,-25", "471,243,495,219,530,184,559,144,579,99,589,50,586,1,570,-46,540,-86,498,-112,450,-123,400,-123,351,-115,304,-101,258,-83,213,-61,184,-44,174,-29", "464,248,489,225,525,191,555,151,577,107,588,59,588,9,574,-38,546,-80,506,-108,458,-122,409,-123,360,-117,312,-104,265,-86,221,-65,192,-48,181,-34", "457,252,482,230,519,197,550,158,574,114,587,67,589,17,577,-30,552,-74,514,-105,467,-120,417,-124,368,-118,320,-106,273,-90,228,-69,199,-53,188,-38", "450,256,475,235,513,203,545,165,570,122,586,75,589,26,580,-23,557,-67,521,-100,475,-119,426,-124,376,-120,328,-109,281,-93,235,-72,206,-57,196,-43", "442,261,468,240,507,209,540,172,567,130,584,83,590,34,582,-15,562,-60,528,-96,483,-117,434,-124,385,-121,336,-111,289,-96,243,-76,214,-61,203,-47", "434,265,461,244,501,214,535,179,563,137,582,92,590,43,585,-7,566,-53,535,-91,491,-114,443,-123,393,-122,344,-113,296,-98,251,-80,221,-65,210,-51", "427,268,454,249,495,220,530,185,559,145,579,100,589,51,586,2,570,-45,541,-85,499,-111,451,-123,401,-123,352,-115,304,-101,259,-83,228,-69,217,-55", "419,272,447,253,488,225,524,191,554,152,576,107,588,59,588,10,574,-37,547,-79,507,-108,459,-122,409,-123,360,-117,313,-104,266,-87,236,-73,224,-59", "411,275,439,257,481,230,519,197,550,159,573,115,587,68,589,18,577,-30,552,-73,514,-104,468,-120,418,-124,369,-118,321,-107,274,-90,243,-76,232,-63", "403,278,432,261,474,235,513,203,545,166,570,123,586,76,589,27,580,-22,557,-66,522,-100,476,-119,427,-124,377,-120,329,-109,282,-93,251,-80,239,-67", "395,281,424,265,468,240,506,209,540,173,566,131,584,84,590,35,583,-14,562,-59,529,-95,484,-116,435,-124,386,-121,337,-111,289,-96,259,-83,247,-70", "387,284,417,268,461,245,500,215,535,179,562,138,581,92,590,44,585,-6,567,-52,535,-90,492,-114,443,-123,394,-122,345,-113,297,-99,267,-87,255,-74", "380,287,409,271,453,249,494,220,529,186,558,145,579,100,589,52,586,3,571,-44,541,-85,500,-111,452,-123,402,-123,353,-115,305,-102,275,-90,262,-77", "372,289,401,275,446,253,487,226,524,192,554,153,576,108,588,60,588,11,574,-37,547,-79,508,-108,460,-122,410,-124,361,-117,313,-104,282,-93,270,-81", "364,291,393,278,439,257,481,231,518,198,549,160,573,116,587,69,589,19,577,-29,553,-72,515,-104,468,-120,419,-124,370,-119,322,-107,290,-96,277,-84", "355,294,385,280,431,261,474,236,512,204,544,167,570,124,585,77,589,28,580,-21,558,-66,522,-100,477,-118,428,-124,378,-120,330,-109,298,-99,285,-87", "347,296,378,283,424,265,467,241,506,210,539,173,566,131,583,85,590,36,583,-13,563,-58,529,-95,485,-116,436,-124,387,-121,338,-111,306,-102,293,-90", "339,298,370,285,416,268,460,245,500,215,534,180,562,139,581,93,590,44,585,-5,567,-51,536,-90,493,-114,444,-123,395,-122,346,-114,314,-105,301,-93", "331,299,362,287,408,272,453,250,493,221,529,186,558,146,579,101,589,53,587,3,571,-43,542,-84,500,-111,452,-123,403,-123,354,-115,322,-107,309,-96", "322,301,354,290,400,275,445,254,487,226,523,193,553,153,576,109,588,61,588,12,575,-36,548,-78,508,-107,461,-121,411,-124,362,-117,330,-109,316,-98", "314,303,345,292,392,278,438,258,480,231,517,199,549,160,573,117,587,69,589,20,578,-28,553,-72,516,-103,469,-120,420,-124,371,-119,338,-112,324,-101", "306,304,337,293,385,281,430,262,473,236,511,205,544,167,569,125,585,78,590,28,581,-20,558,-65,523,-99,478,-118,429,-124,379,-120,346,-114,332,-103", "297,305,329,295,377,283,423,265,466,241,505,210,539,174,565,132,583,86,590,37,583,-12,563,-58,530,-94,486,-116,437,-124,387,-121,354,-116,340,-105", "289,307,321,297,369,285,415,269,459,246,499,216,534,181,562,140,581,94,589,45,585,-4,568,-50,537,-89,494,-113,445,-123,396,-122,363,-117,348,-107", "281,308,313,298,361,288,408,272,452,250,493,221,528,187,557,147,578,102,589,54,587,4,571,-43,543,-84,501,-110,453,-122,404,-123,371,-119,356,-109", "272,309,305,300,353,290,400,275,445,254,486,227,523,193,553,154,575,110,588,62,588,13,575,-35,549,-78,509,-107,462,-121,412,-124,380,-120,365,-111", "264,310,296,301,344,292,392,278,437,258,479,232,517,199,548,161,572,118,587,70,589,21,578,-27,554,-71,517,-103,470,-120,421,-124,388,-121,373,-112", "256,311,288,302,336,294,384,281,430,262,472,237,511,205,543,168,569,125,585,79,590,29,581,-19,559,-64,524,-99,479,-118,429,-124,396,-122,381,-114", "247,312,279,304,328,295,376,283,422,266,465,242,505,211,538,175,565,133,583,87,590,38,583,-11,564,-57,531,-94,487,-116,438,-124,404,-123,389,-115", "239,312,271,305,320,297,368,286,414,269,458,246,498,217,533,181,561,140,581,95,589,46,585,-3,568,-49,537,-89,494,-113,446,-123,413,-124,397,-116", "230,313,263,306,312,299,360,288,407,272,451,250,492,222,528,188,557,148,578,103,589,55,587,5,572,-42,543,-83,502,-110,454,-122,421,-124,405,-117", "222,314,255,307,304,300,352,290,399,276,444,255,485,227,522,194,552,155,575,111,588,63,588,13,575,-34,549,-77,510,-106,463,-121,430,-124,414,-117", "214,314,246,307,295,301,344,292,391,278,436,259,478,232,516,200,548,162,572,118,587,71,589,22,578,-26,554,-70,517,-103,471,-120,438,-124,422,-117", "205,314,238,308,287,303,335,294,383,281,429,263,472,237,510,206,543,169,568,126,585,79,590,30,581,-19,560,-63,525,-98,479,-118,447,-123,430,-117", "193,315,225,309,274,304,323,296,371,285,417,268,461,244,501,214,535,179,563,138,582,92,590,43,585,-6,566,-52,535,-91,491,-114,459,-122,442,-117", "184,315,217,310,266,305,315,298,363,287,410,271,454,249,494,220,530,185,559,145,579,100,589,51,586,2,570,-45,541,-85,499,-111,467,-120,450,-116", "176,315,209,310,258,306,307,299,355,289,402,274,447,253,488,225,524,191,554,152,576,108,588,60,588,10,574,-37,547,-79,507,-108,476,-119,458,-115", "167,315,200,310,250,307,299,301,347,291,394,277,439,257,481,230,518,198,550,159,573,115,587,68,589,18,577,-30,552,-73,514,-104,484,-116,466,-114", "159,315,192,311,241,308,290,302,338,293,386,280,432,261,474,235,512,204,545,166,570,123,586,76,589,27,580,-22,558,-66,522,-100,492,-114,474,-113", "151,315,184,311,233,308,282,303,331,295,378,283,424,265,467,240,506,209,540,173,566,131,584,84,590,35,583,-14,562,-59,529,-95,500,-111,482,-111", "142,315,175,311,224,309,274,304,323,297,371,285,417,268,460,245,500,215,535,179,562,138,581,93,590,44,585,-5,567,-52,535,-90,507,-108,490,-108", "134,315,167,311,216,310,265,305,314,298,363,287,409,272,453,249,494,220,529,186,558,146,579,101,589,52,587,3,571,-44,542,-85,515,-104,497,-106", "125,315,158,311,208,310,257,306,306,300,354,289,401,275,446,253,487,226,524,192,554,153,576,108,588,60,588,11,574,-36,547,-79,522,-100,505,-102", "117,314,150,311,199,310,249,307,298,301,346,291,393,278,439,258,480,231,518,198,549,160,573,116,587,69,589,19,577,-29,553,-72,529,-95,512,-99", "108,314,142,311,191,311,240,308,289,302,338,293,385,280,431,261,474,236,512,204,544,167,570,124,585,77,589,28,580,-21,558,-66,536,-90,519,-95", "100,313,133,310,183,311,232,309,281,303,330,295,378,283,424,265,467,241,506,210,539,174,566,132,583,85,590,36,583,-13,563,-58,542,-84,525,-91", "92,313,125,310,174,311,223,309,273,304,322,297,370,285,416,269,460,245,499,216,534,180,562,139,581,93,590,45,585,-5,567,-51,548,-78,532,-86", "83,312,117,310,166,311,215,310,265,305,313,298,362,287,408,272,453,250,493,221,529,186,558,146,579,101,589,53,587,4,571,-43,553,-72,538,-81", "75,311,108,309,157,311,207,310,256,306,305,300,353,290,400,275,445,254,486,226,523,193,553,153,576,109,588,61,588,12,575,-36,558,-65,544,-75", "67,311,100,309,149,311,199,310,248,307,297,301,345,292,392,278,438,258,480,231,517,199,549,160,573,117,587,70,589,20,578,-28,563,-58,549,-69", "58,310,91,308,141,311,190,311,239,308,288,302,337,294,384,281,430,262,473,236,511,205,544,167,569,125,585,78,590,29,581,-20,567,-50,554,-62", "50,309,83,308,132,310,182,311,231,309,280,304,329,295,377,283,423,265,466,241,505,211,539,174,565,132,583,86,590,37,583,-12,571,-43,559,-55", "41,308,75,307,124,310,173,311,223,309,272,305,321,297,369,285,415,269,459,246,499,216,533,181,561,140,581,94,589,45,585,-4,575,-35,563,-48", "33,307,66,306,116,310,165,311,214,310,264,306,313,298,361,288,407,272,452,250,492,222,528,187,557,147,578,102,589,54,587,4,578,-27,567,-41", "25,305,58,305,107,309,157,311,206,310,255,306,304,300,353,290,399,275,444,254,486,227,522,193,553,154,575,110,588,62,588,13,581,-20,571,-33", "16,304,50,304,99,309,148,311,198,310,247,307,296,301,344,292,391,278,437,258,479,232,517,199,548,161,572,118,587,70,589,21,583,-11,574,-26", "8,303,41,303,91,308,140,311,189,311,239,308,287,303,336,294,384,281,429,262,472,237,510,205,543,168,569,126,585,79,590,29,585,-3,577,-18", "0,302,33,302,82,308,132,310,181,311,230,309,279,304,328,295,376,283,422,266,465,242,504,211,538,175,565,133,583,87,590,38,587,5,580,-10", "-8,300,25,301,74,307,123,310,172,311,222,309,271,305,320,297,368,286,414,269,458,246,498,217,533,181,561,141,581,95,589,46,588,13,582,-2", "-17,299,17,300,66,306,115,310,164,311,213,310,263,306,312,299,360,288,407,273,451,251,492,222,527,188,557,148,578,103,589,55,589,22,584,6", "-25,297,8,299,57,305,106,309,156,311,205,310,255,307,303,300,352,290,399,276,444,255,485,227,522,194,552,155,575,111,588,63,590,30,585,14", "-33,295,0,297,49,304,98,309,147,311,197,310,246,307,295,301,343,292,391,278,436,259,478,233,516,200,548,162,572,119,586,71,590,38,587,22", "-41,294,-8,296,41,303,90,308,139,311,188,311,238,308,287,303,335,294,383,281,429,263,471,237,510,206,543,169,568,126,585,80,589,47,587,30", "-50,292,-16,294,32,302,81,307,131,310,180,311,229,309,278,304,327,296,375,284,421,266,465,242,504,212,538,176,565,134,583,88,589,55,588,39", "-58,290,-25,293,24,301,73,307,122,310,172,311,221,309,270,305,319,297,367,286,414,270,457,247,497,217,532,182,561,141,580,96,588,64,588,47", "-66,288,-33,291,16,300,65,306,114,310,163,311,213,310,262,306,311,299,359,288,406,273,450,251,491,223,527,188,556,149,578,104,586,72,587,55", "-74,286,-41,289,7,298,56,305,105,309,155,311,204,310,254,307,303,300,351,290,398,276,443,255,484,228,521,195,552,156,575,112,585,80,587,64", "-82,284,-49,287,-1,297,48,304,97,309,147,311,196,310,245,307,294,302,342,292,390,279,435,259,478,233,515,201,547,163,572,119,583,88,585,72", "-90,282,-57,286,-9,296,40,303,89,308,138,311,188,311,237,308,286,303,334,294,382,281,428,263,471,238,509,207,542,170,568,127,580,96,584,81", "-99,279,-66,284,-17,294,31,302,80,307,130,310,179,311,228,309,278,304,326,296,374,284,420,267,464,243,503,212,537,176,564,135,578,104,582,89", "-107,277,-74,282,-26,293,23,301,72,307,121,310,171,311,220,309,269,305,318,297,366,286,413,270,457,247,497,218,532,183,560,142,575,112,580,97", "-115,274,-82,279,-34,291,15,300,64,306,113,310,162,311,212,310,261,306,310,299,358,288,405,273,450,251,490,223,526,189,556,149,571,120,578,105", "-123,272,-90,277,-42,289,7,298,55,305,105,309,154,311,203,310,253,307,302,300,350,290,397,276,442,256,484,228,521,195,551,156,568,128,575,113", "-131,269,-98,275,-50,287,-2,297,47,304,96,309,146,311,195,310,244,308,293,302,342,292,389,279,435,260,477,234,515,201,547,163,564,135,572,121", "-139,266,-106,272,-58,285,-10,295,39,303,88,308,137,311,187,311,236,308,285,303,334,294,381,282,427,263,470,238,509,207,542,170,560,143,569,129", "-147,264,-114,270,-66,283,-18,294,30,302,80,307,129,310,178,311,227,309,277,304,326,296,374,284,420,267,463,243,502,213,537,177,556,150,565,136", "-154,261,-122,267,-75,281,-26,292,22,301,71,307,121,310,170,311,219,309,269,305,317,298,366,286,412,270,456,248,496,218,531,183,551,157,561,144", "-162,258,-130,265,-83,279,-35,291,14,299,63,306,112,310,161,311,211,310,260,306,309,299,357,289,404,273,449,252,490,224,526,190,546,164,557,151", "-170,254,-138,262,-91,277,-43,289,6,298,55,305,104,309,153,311,203,310,252,307,301,300,349,291,396,277,441,256,483,229,520,196,541,171,553,159", "-178,251,-146,259,-99,275,-51,287,-3,297,46,304,95,309,145,311,194,311,244,308,292,302,341,293,388,279,434,260,476,234,514,202,536,177,548,166", "-186,248,-153,256,-107,272,-59,285,-11,295,38,303,87,308,136,311,186,311,235,308,284,303,333,294,380,282,426,264,469,239,508,208,531,184,543,173", "-193,244,-161,253,-115,270,-67,283,-19,294,30,302,79,307,128,310,177,311,227,309,276,304,325,296,373,284,419,267,462,244,502,213,525,190,538,180", "-201,241,-169,250,-123,267,-75,281,-27,292,21,301,70,307,120,310,169,311,218,309,268,305,317,298,365,287,411,271,455,248,495,219,520,196,533,187", "-209,237,-177,247,-131,265,-83,279,-35,290,13,299,62,306,111,310,161,311,210,310,259,306,308,299,357,289,403,274,448,252,489,224,514,202,528,193", "-216,234,-185,244,-139,262,-92,277,-44,289,5,298,54,305,103,309,152,311,202,310,251,307,300,301,348,291,395,277,441,256,482,230,508,208,522,200", "-224,230,-192,240,-146,259,-100,274,-52,287,-3,297,45,304,95,309,144,311,193,311,243,308,292,302,340,293,387,280,433,260,475,235,501,214,516,206", "-231,226,-200,237,-154,256,-108,272,-60,285,-12,295,37,303,86,308,136,311,185,311,234,308,283,303,332,295,380,282,426,264,469,239,495,219,510,212", "-239,221,-207,233,-162,253,-116,269,-68,283,-20,294,29,302,78,307,127,310,177,311,226,309,275,304,324,296,372,284,418,268,462,244,489,225,504,218", "-246,217,-215,229,-170,250,-124,267,-76,281,-28,292,20,300,70,306,119,310,168,311,217,309,267,305,316,298,364,287,410,271,454,248,482,230,498,224", "-253,213,-222,225,-178,247,-132,264,-84,279,-36,290,12,299,61,306,110,310,160,311,209,310,259,306,307,299,356,289,402,274,447,253,475,235,491,230", "-260,209,-230,221,-185,243,-139,261,-92,276,-45,289,4,298,53,305,102,309,151,311,201,310,250,307,299,301,347,291,395,277,440,257,468,240,485,235", "-268,204,-237,217,-193,240,-147,259,-100,274,-53,287,-4,296,45,304,94,308,143,311,193,311,242,308,291,302,339,293,387,280,432,261,461,244,478,240", "-275,199,-245,213,-201,236,-155,256,-108,272,-61,285,-13,295,36,303,85,308,135,311,184,311,233,308,282,303,331,295,379,282,425,264,454,249,471,245", "-282,195,-252,209,-208,233,-163,253,-117,269,-69,283,-21,293,28,302,77,307,126,310,176,311,225,309,274,304,323,296,371,285,417,268,447,253,464,250", "-289,190,-259,205,-216,229,-171,250,-124,267,-77,281,-29,292,20,300,69,306,118,310,167,311,217,310,266,305,315,298,363,287,409,271,439,257,457,255", "-295,185,-266,200,-223,225,-179,246,-132,264,-85,278,-37,290,11,299,60,305,110,309,159,311,208,310,258,306,307,299,355,289,402,274,432,261,449,259", "-302,180,-273,195,-231,221,-186,243,-140,261,-93,276,-45,288,3,298,52,305,101,309,151,311,200,310,249,307,298,301,347,291,394,277,424,265,442,264", "-309,174,-280,191,-238,217,-194,239,-148,258,-101,274,-54,286,-5,296,44,304,93,308,142,311,192,311,241,308,290,302,338,293,386,280,417,268,434,268", "-315,169,-287,186,-245,213,-201,236,-156,255,-109,271,-62,285,-13,295,35,303,84,308,134,311,183,311,232,308,281,303,330,295,378,283,409,272,427,271", "-322,163,-293,181,-252,209,-209,232,-164,252,-117,269,-70,283,-22,293,27,301,76,307,125,310,175,311,224,309,273,304,322,297,370,285,401,275,419,275", "-328,158,-300,176,-259,204,-216,229,-172,249,-125,266,-78,280,-30,292,19,300,68,306,117,310,166,311,216,310,265,305,314,298,362,287,393,278,411,279", "-334,152,-306,171,-267,200,-224,225,-179,246,-133,264,-86,278,-38,290,10,299,59,305,109,309,158,311,207,310,257,306,306,300,354,289,385,280,403,282", "-340,146,-313,165,-274,195,-231,221,-187,243,-141,261,-94,276,-46,288,2,298,51,304,100,309,150,311,199,310,248,307,297,301,346,291,378,283,395,285", "-346,140,-319,160,-281,190,-239,217,-195,239,-149,258,-102,274,-54,286,-6,296,43,303,92,308,141,311,191,311,240,308,289,302,337,293,370,285,387,287", "-352,134,-326,154,-287,185,-246,212,-202,236,-157,255,-110,271,-63,284,-14,295,34,302,84,308,133,310,182,311,232,309,281,303,329,295,362,287,379,290", "-358,128,-332,149,-294,180,-253,208,-210,232,-165,252,-118,269,-71,282,-22,293,26,301,75,307,125,310,174,311,223,309,272,305,321,297,353,290,371,292", "-363,121,-338,143,-300,175,-260,204,-217,228,-172,249,-126,266,-79,280,-31,291,18,300,67,306,116,310,165,311,215,310,264,306,313,298,345,292,363,295", "-369,115,-344,137,-307,170,-267,199,-225,224,-180,246,-134,263,-87,278,-39,290,10,299,59,305,108,309,157,311,207,310,256,306,305,300,337,294,354,297", "-374,108,-349,131,-314,165,-274,194,-232,220,-188,242,-142,261,-95,276,-47,288,1,297,50,304,99,309,149,311,198,310,248,307,296,301,329,295,346,299", "-379,101,-355,124,-320,159,-281,190,-240,216,-195,239,-150,258,-103,273,-55,286,-7,296,42,303,91,308,140,311,190,311,239,308,288,302,321,297,338,300", "-384,95,-360,118,-326,154,-288,185,-247,212,-203,235,-158,255,-111,271,-63,284,-15,295,34,302,83,308,132,310,181,311,231,309,280,304,313,298,330,302", "-389,88,-366,112,-332,148,-295,180,-254,208,-210,232,-165,252,-119,268,-72,282,-23,293,25,301,74,307,124,310,173,311,222,309,272,305,304,300,321,304", "-393,80,-371,105,-338,142,-301,175,-261,203,-218,228,-173,249,-127,266,-80,280,-32,291,17,300,66,306,115,310,164,311,214,310,263,306,296,301,313,305", "-398,73,-376,98,-344,136,-308,169,-268,199,-226,224,-181,245,-135,263,-88,278,-40,290,9,299,58,305,107,309,156,311,206,310,255,306,287,303,304,307", "-402,66,-381,92,-350,130,-314,164,-275,194,-233,220,-189,242,-143,260,-96,276,-48,288,1,297,49,304,98,309,148,311,197,310,247,307,279,304,296,308", "-406,58,-385,85,-356,124,-321,159,-282,189,-240,216,-196,238,-151,257,-104,273,-56,286,-8,296,41,303,90,308,140,311,189,311,238,308,271,305,288,309", "-410,51,-390,78,-361,118,-327,153,-289,184,-247,211,-204,235,-158,254,-112,271,-64,284,-16,294,33,302,82,308,131,310,181,311,230,309,263,306,280,310", "-413,43,-394,70,-366,111,-333,147,-295,179,-254,207,-211,231,-166,251,-120,268,-72,282,-24,293,24,301,74,307,123,310,172,311,221,309,255,307,271,311", "-417,35,-399,63,-372,104,-339,141,-302,174,-262,203,-219,227,-174,248,-128,266,-80,280,-32,291,16,300,65,306,114,310,164,311,213,310,246,307,263,312", "-420,27,-402,56,-377,98,-345,135,-309,169,-269,198,-226,223,-182,245,-136,263,-88,278,-41,289,8,299,57,305,106,309,155,311,205,310,238,308,254,313", "-423,19,-406,48,-381,91,-351,129,-315,163,-276,193,-234,219,-189,242,-144,260,-97,275,-49,288,0,297,49,304,98,309,147,311,197,310,229,309,246,313", "-426,11,-410,41,-386,84,-356,123,-321,158,-283,189,-241,215,-197,238,-151,257,-105,273,-57,286,-9,296,40,303,89,308,139,311,188,311,221,309,237,314", "-428,3,-413,33,-391,77,-361,117,-327,152,-289,184,-248,211,-204,234,-159,254,-113,270,-65,284,-17,294,32,302,81,307,130,310,180,311,213,310,229,315", "-430,-5,-416,25,-395,70,-367,110,-333,147,-296,179,-255,207,-212,231,-167,251,-121,268,-73,282,-25,293,24,301,73,307,122,310,171,311,204,310,221,315", "-432,-13,-419,17,-399,62,-372,104,-340,141,-303,174,-262,202,-220,227,-175,248,-129,265,-81,280,-33,291,15,300,64,306,114,310,163,311,196,310,212,315", "-434,-22,-422,9,-403,55,-377,97,-345,135,-309,168,-269,198,-227,223,-183,245,-137,263,-89,277,-41,289,7,298,56,305,105,309,155,311,188,311,204,316", "-435,-30,-424,1,-407,47,-382,90,-351,129,-316,163,-277,193,-235,219,-190,241,-144,260,-97,275,-50,287,-1,297,48,304,97,309,146,311,179,311,196,316", "-436,-39,-426,-7,-410,40,-386,83,-357,122,-322,157,-283,188,-242,215,-198,238,-152,257,-105,273,-58,285,-9,296,39,303,88,308,138,311,171,311,187,316", "-437,-47,-428,-15,-413,32,-391,76,-362,116,-328,152,-290,183,-249,211,-205,234,-160,254,-114,270,-66,283,-18,294,31,302,80,307,130,310,162,311,178,316", "-438,-56,-430,-23,-416,24,-395,69,-367,110,-334,146,-297,178,-256,206,-213,230,-168,251,-121,268,-74,281,-26,292,23,301,72,307,121,310,154,311,170,316", "-438,-64,-431,-32,-419,17,-399,62,-373,103,-340,140,-303,173,-263,202,-220,227,-176,247,-129,265,-82,279,-34,291,14,300,63,306,113,310,146,311,162,316", "-438,-73,-432,-40,-422,8,-403,54,-378,96,-346,134,-310,168,-270,197,-228,223,-183,244,-137,262,-90,277,-42,289,6,298,55,305,104,309,137,311,153,316", "-438,-81,-433,-48,-424,0,-407,47,-382,89,-352,128,-316,162,-277,192,-235,218,-191,241,-145,259,-98,275,-51,287,-2,297,47,304,96,309,129,310,145,315", "-437,-91,-434,-57,-426,-8,-410,39,-387,83,-357,122,-323,157,-284,188,-243,214,-199,237,-153,257,-106,272,-59,285,-10,295,38,303,88,308,121,310,137,315", "-436,-100,-434,-65,-428,-16,-414,31,-391,75,-363,116,-329,151,-291,183,-250,210,-206,234,-161,254,-114,270,-67,283,-19,294,30,302,79,307,112,310,128,315", "-434,-109,-434,-73,-430,-24,-417,24,-396,68,-368,109,-335,146,-297,178,-257,206,-213,230,-169,250,-122,267,-75,281,-27,292,22,301,71,307,104,309,120,314", "-433,-118,-433,-82,-431,-32,-420,16,-400,61,-373,102,-341,140,-304,173,-264,201,-221,226,-176,247,-130,265,-83,279,-35,291,14,299,63,306,95,309,111,314", "-430,-127,-433,-91,-432,-41,-422,8,-404,53,-378,95,-347,133,-311,167,-271,197,-229,222,-184,244,-138,262,-91,277,-43,289,5,298,54,305,87,308,103,313", "-428,-135,-431,-100,-433,-49,-425,0,-407,46,-383,89,-352,127,-317,162,-278,192,-236,218,-192,240,-146,259,-99,275,-51,287,-3,297,46,304,79,307,95,312", "-425,-143,-430,-109,-434,-57,-427,-9,-411,38,-387,82,-358,121,-323,156,-285,187,-243,214,-199,237,-154,256,-107,272,-60,285,-11,295,38,303,70,307,86,311", "-422,-151,-428,-118,-434,-66,-428,-17,-414,30,-392,75,-363,115,-329,151,-291,182,-250,210,-207,233,-162,253,-115,270,-68,283,-19,294,29,302,62,306,78,311", "-418,-159,-426,-126,-434,-74,-430,-25,-417,23,-396,67,-368,108,-335,145,-298,177,-257,205,-214,230,-169,250,-123,267,-76,281,-28,292,21,301,54,305,70,310", "-415,-167,-424,-134,-433,-83,-431,-33,-420,15,-400,60,-374,102,-341,139,-305,172,-265,201,-222,226,-177,247,-131,264,-84,279,-36,290,13,299,45,304,61,309", "-410,-175,-421,-142,-433,-92,-432,-42,-422,7,-404,53,-379,95,-347,133,-311,167,-272,196,-229,222,-185,243,-139,262,-92,277,-44,289,4,298,37,303,53,308", "-406,-182,-418,-150,-431,-101,-433,-50,-425,-1,-408,45,-383,88,-353,127,-318,161,-279,191,-237,218,-193,240,-147,259,-100,274,-52,287,-4,297,29,302,44,307", "-401,-189,-414,-158,-430,-110,-434,-58,-427,-9,-411,37,-388,81,-358,121,-324,156,-285,187,-244,213,-200,237,-155,256,-108,272,-60,285,-12,295,20,300,36,305", "-396,-196,-410,-166,-428,-118,-434,-67,-429,-17,-414,30,-392,74,-364,114,-330,150,-292,182,-251,209,-208,233,-162,253,-116,269,-68,283,-20,294,12,299,28,304", "-391,-203,-406,-173,-426,-127,-434,-75,-430,-26,-417,22,-397,67,-369,108,-336,144,-299,177,-258,205,-215,229,-170,250,-124,267,-77,281,-28,292,4,298,20,303", "-385,-209,-402,-180,-423,-135,-433,-84,-431,-34,-420,14,-401,59,-374,101,-342,138,-305,172,-265,200,-223,225,-178,246,-132,264,-85,279,-37,290,-4,296,11,301", "-379,-216,-397,-187,-420,-143,-432,-93,-432,-42,-423,6,-404,52,-379,94,-348,132,-312,166,-272,196,-230,221,-186,243,-140,261,-93,276,-45,288,-13,295,3,300", "-373,-222,-392,-194,-417,-151,-431,-102,-433,-51,-425,-2,-408,44,-384,87,-353,126,-318,161,-279,191,-238,217,-193,240,-148,259,-101,274,-53,287,-21,293,-5,298", "-367,-228,-387,-201,-414,-159,-430,-111,-434,-59,-427,-10,-412,37,-388,80,-359,120,-325,155,-286,186,-245,213,-201,236,-155,256,-109,272,-61,285,-29,292,-13,297", "-360,-234,-382,-207,-410,-166,-428,-119,-434,-68,-429,-18,-415,29,-393,73,-364,113,-331,150,-293,181,-252,209,-208,233,-163,253,-117,269,-69,283,-37,290,-22,295", "-353,-240,-376,-213,-406,-174,-426,-128,-434,-76,-430,-27,-418,21,-397,66,-370,107,-337,144,-299,176,-259,205,-216,229,-171,249,-125,267,-77,281,-45,288,-30,293", "-346,-245,-370,-219,-401,-181,-423,-136,-433,-85,-432,-35,-420,13,-401,58,-375,100,-343,138,-306,171,-266,200,-224,225,-179,246,-133,264,-85,278,-54,286,-38,291", "-339,-250,-363,-225,-397,-188,-420,-144,-432,-94,-433,-43,-423,5,-405,51,-380,93,-348,132,-313,166,-273,195,-231,221,-187,243,-141,261,-93,276,-62,285,-46,289", "-331,-255,-357,-231,-392,-195,-417,-152,-431,-103,-433,-52,-425,-3,-408,43,-384,87,-354,125,-319,160,-280,190,-238,217,-194,239,-148,258,-102,274,-70,283,-54,287", "-324,-260,-350,-237,-387,-201,-413,-160,-429,-112,-434,-60,-427,-11,-412,36,-389,80,-359,119,-325,155,-287,186,-246,213,-202,236,-156,255,-110,271,-78,280,-62,285", "-317,-264,-343,-242,-381,-208,-410,-167,-428,-120,-434,-68,-429,-19,-415,28,-393,72,-365,113,-331,149,-293,181,-253,208,-209,232,-164,252,-118,269,-86,278,-70,283", "-309,-268,-336,-247,-375,-214,-405,-174,-425,-129,-434,-77,-430,-28,-418,20,-397,65,-370,106,-337,143,-300,176,-260,204,-217,228,-172,249,-126,266,-94,276,-78,281", "-302,-272,-328,-252,-369,-220,-401,-182,-423,-137,-433,-86,-432,-36,-421,12,-401,58,-375,99,-343,137,-307,170,-267,199,-224,224,-180,246,-134,264,-102,274,-87,279", "-294,-276,-321,-257,-363,-226,-396,-189,-420,-145,-432,-95,-433,-44,-423,4,-405,50,-380,93,-349,131,-313,165,-274,195,-232,220,-187,242,-141,261,-110,271,-95,276", "-287,-280,-314,-261,-356,-232,-391,-195,-417,-153,-431,-104,-433,-52,-425,-4,-409,43,-385,86,-355,125,-320,160,-281,190,-239,216,-195,239,-149,258,-118,269,-103,274", "-279,-283,-307,-265,-349,-237,-386,-202,-413,-160,-429,-113,-434,-61,-427,-12,-412,35,-389,79,-360,119,-326,154,-288,185,-246,212,-202,235,-157,255,-126,266,-111,271", "-271,-287,-299,-269,-342,-242,-380,-208,-409,-168,-427,-121,-434,-69,-429,-20,-415,27,-394,72,-365,112,-332,148,-294,180,-253,208,-210,232,-165,252,-134,263,-119,268", "-263,-290,-292,-273,-335,-248,-375,-215,-405,-175,-425,-130,-434,-78,-431,-28,-418,20,-398,64,-371,105,-338,142,-301,175,-260,204,-217,228,-173,249,-142,261,-126,266", "-254,-293,-284,-276,-328,-253,-368,-221,-401,-182,-422,-138,-433,-87,-432,-37,-421,11,-402,57,-376,99,-344,136,-307,170,-268,199,-225,224,-180,245,-150,258,-134,263", "-246,-296,-276,-280,-320,-257,-362,-226,-396,-189,-419,-146,-432,-96,-433,-45,-423,3,-406,50,-381,92,-350,130,-314,164,-275,194,-233,220,-188,242,-158,255,-142,260", "-237,-299,-268,-283,-313,-261,-356,-232,-391,-196,-416,-154,-431,-105,-433,-53,-426,-5,-409,42,-385,85,-355,124,-320,159,-282,189,-240,216,-196,239,-165,252,-150,257", "-229,-301,-260,-286,-306,-265,-349,-238,-385,-203,-413,-161,-429,-113,-434,-62,-428,-13,-413,34,-390,78,-361,118,-326,153,-288,185,-247,212,-203,235,-173,248,-158,254", "-220,-304,-252,-289,-299,-269,-342,-243,-380,-209,-409,-169,-427,-122,-434,-70,-429,-21,-416,26,-394,71,-366,111,-332,148,-295,180,-254,208,-211,231,-181,245,-165,251", "-211,-306,-244,-292,-291,-273,-334,-248,-374,-215,-405,-176,-425,-130,-434,-78,-431,-29,-419,19,-398,63,-371,105,-338,142,-301,175,-261,203,-218,228,-189,242,-173,247", "-203,-308,-235,-295,-283,-277,-327,-253,-368,-221,-400,-183,-422,-139,-433,-88,-432,-38,-421,11,-402,56,-376,98,-344,136,-308,169,-268,198,-226,224,-196,238,-181,244", "-195,-310,-227,-297,-276,-280,-319,-258,-361,-227,-395,-190,-419,-147,-432,-97,-433,-46,-424,3,-406,49,-381,91,-350,130,-315,164,-275,194,-233,220,-204,235,-188,240", "-187,-312,-218,-300,-268,-283,-312,-262,-355,-233,-390,-197,-416,-154,-431,-106,-433,-54,-426,-5,-410,41,-386,84,-356,124,-321,158,-282,189,-241,215,-211,231,-196,237", "-178,-314,-209,-302,-259,-286,-305,-266,-348,-238,-385,-203,-412,-162,-429,-114,-434,-63,-428,-14,-413,33,-390,77,-361,117,-327,153,-289,184,-248,211,-219,227,-203,233", "-170,-315,-201,-304,-251,-290,-298,-270,-341,-244,-379,-210,-408,-169,-427,-123,-434,-71,-429,-22,-416,26,-395,70,-367,111,-333,147,-296,179,-255,207,-226,223,-211,229", "-161,-317,-193,-306,-243,-292,-290,-273,-334,-249,-373,-216,-404,-177,-425,-131,-433,-79,-431,-30,-419,18,-399,63,-372,104,-339,141,-302,174,-262,203,-234,219,-218,225", "-153,-318,-185,-308,-234,-295,-283,-277,-326,-254,-367,-222,-400,-184,-422,-139,-433,-89,-432,-38,-422,10,-403,55,-377,97,-345,135,-309,169,-269,198,-241,215,-226,221", "-144,-320,-177,-310,-226,-298,-275,-280,-319,-258,-361,-228,-395,-191,-419,-147,-432,-98,-433,-47,-424,2,-406,48,-382,91,-351,129,-315,163,-276,193,-248,211,-233,217", "-136,-321,-168,-311,-217,-300,-267,-284,-312,-262,-354,-233,-390,-197,-415,-155,-430,-107,-433,-55,-426,-6,-410,40,-386,84,-356,123,-322,158,-283,188,-255,207,-240,213", "-127,-322,-160,-313,-209,-303,-259,-287,-304,-266,-347,-239,-384,-204,-412,-163,-429,-115,-434,-64,-428,-14,-413,33,-391,76,-362,117,-328,152,-290,184,-262,202,-247,209", "-118,-323,-152,-314,-200,-305,-250,-290,-297,-270,-340,-244,-379,-210,-408,-170,-427,-124,-434,-72,-430,-23,-416,25,-395,69,-367,110,-334,147,-296,179,-270,198,-254,204", "-109,-324,-143,-315,-192,-306,-242,-293,-289,-274,-333,-249,-373,-216,-404,-177,-424,-132,-433,-80,-431,-31,-419,17,-399,62,-372,103,-340,141,-303,174,-277,193,-261,199", "-100,-324,-134,-317,-184,-308,-234,-295,-282,-277,-325,-254,-367,-222,-399,-185,-422,-140,-433,-90,-432,-39,-422,9,-403,55,-377,97,-346,134,-310,168,-283,188,-268,195", "-92,-325,-126,-318,-176,-310,-225,-298,-274,-281,-318,-259,-360,-228,-394,-191,-418,-148,-432,-99,-433,-48,-424,1,-407,47,-382,90,-351,128,-316,163,-290,183,-275,190", "-83,-325,-117,-318,-168,-311,-216,-300,-266,-284,-311,-263,-353,-234,-389,-198,-415,-156,-430,-107,-434,-56,-426,-7,-410,39,-387,83,-357,122,-322,157,-297,178,-281,185", "-74,-326,-108,-319,-159,-313,-208,-303,-258,-287,-304,-267,-347,-239,-384,-205,-411,-164,-429,-116,-434,-64,-428,-15,-414,32,-391,76,-362,116,-328,152,-303,173,-288,180", "-65,-326,-99,-320,-151,-314,-200,-305,-250,-290,-296,-270,-339,-245,-378,-211,-407,-171,-426,-125,-434,-73,-430,-24,-417,24,-395,68,-368,109,-334,146,-310,168,-295,175", "-57,-326,-91,-321,-142,-315,-192,-307,-241,-293,-289,-274,-332,-250,-372,-217,-403,-178,-424,-133,-433,-81,-431,-32,-419,16,-400,61,-373,103,-340,140,-316,162,-301,170", "-48,-326,-82,-321,-133,-317,-183,-308,-233,-296,-281,-278,-324,-255,-366,-223,-399,-185,-421,-141,-433,-90,-432,-40,-422,8,-403,54,-378,96,-346,134,-323,157,-308,165", "-40,-326,-73,-321,-125,-318,-175,-310,-224,-298,-273,-281,-317,-259,-359,-229,-394,-192,-418,-149,-432,-100,-433,-48,-424,0,-407,46,-383,89,-352,128,-329,151,-314,159", "-31,-326,-65,-322,-116,-319,-167,-312,-215,-301,-265,-284,-310,-263,-353,-234,-389,-199,-415,-157,-430,-108,-434,-57,-427,-8,-411,39,-387,82,-357,122,-335,146,-320,154", "-22,-326,-56,-322,-107,-319,-158,-313,-207,-303,-257,-287,-303,-267,-346,-240,-383,-205,-411,-164,-428,-117,-434,-65,-428,-16,-414,31,-392,75,-363,115,-341,140,-326,148", "-14,-326,-48,-322,-99,-320,-150,-314,-199,-305,-249,-290,-295,-271,-339,-245,-377,-212,-407,-172,-426,-126,-434,-74,-430,-24,-417,23,-396,68,-368,109,-347,133,-332,142", "-5,-325,-39,-322,-90,-321,-141,-316,-191,-307,-240,-293,-288,-274,-331,-250,-371,-218,-403,-179,-424,-134,-433,-82,-431,-33,-420,15,-400,60,-373,102,-352,127,-338,136", "4,-325,-30,-322,-81,-321,-133,-317,-182,-309,-232,-296,-280,-278,-324,-255,-365,-224,-398,-186,-421,-142,-433,-91,-432,-41,-422,7,-404,53,-378,95,-358,121,-343,130", "12,-324,-22,-322,-72,-322,-124,-318,-174,-310,-223,-299,-272,-281,-317,-259,-359,-229,-393,-193,-418,-150,-431,-100,-433,-49,-425,-1,-407,46,-383,88,-363,115,-349,124", "21,-324,-13,-321,-64,-322,-115,-319,-166,-312,-214,-301,-264,-285,-309,-263,-352,-235,-388,-199,-414,-158,-430,-109,-434,-58,-427,-9,-411,38,-388,81,-369,108,-354,118", "30,-323,-5,-321,-55,-322,-106,-319,-157,-313,-206,-303,-256,-288,-302,-267,-345,-240,-383,-206,-411,-165,-428,-118,-434,-66,-429,-17,-414,30,-392,74,-374,101,-360,111", "38,-322,4,-321,-47,-322,-98,-320,-149,-315,-198,-305,-248,-291,-295,-271,-338,-246,-377,-212,-407,-173,-426,-126,-434,-74,-430,-25,-417,22,-396,67,-379,95,-365,105", "47,-321,13,-320,-38,-322,-89,-321,-140,-316,-190,-307,-239,-294,-287,-275,-330,-251,-371,-218,-402,-180,-423,-135,-433,-83,-431,-34,-420,14,-400,60,-383,88,-370,98", "56,-320,21,-319,-29,-322,-80,-321,-132,-317,-182,-309,-231,-296,-279,-278,-323,-256,-365,-224,-398,-187,-421,-143,-432,-92,-432,-42,-423,6,-404,52,-388,81,-374,92", "64,-319,30,-319,-21,-322,-71,-322,-123,-318,-173,-310,-222,-299,-271,-282,-316,-260,-358,-230,-393,-194,-417,-151,-431,-101,-433,-50,-425,-2,-408,45,-392,74,-379,85", "73,-318,39,-318,-12,-321,-63,-322,-114,-319,-165,-312,-213,-301,-263,-285,-309,-264,-351,-236,-387,-200,-414,-158,-430,-110,-434,-59,-427,-10,-411,37,-397,66,-383,78", "82,-316,47,-317,-4,-321,-54,-322,-106,-320,-156,-313,-205,-303,-255,-288,-301,-268,-344,-241,-382,-207,-410,-166,-428,-119,-434,-67,-429,-18,-415,29,-401,59,-388,71", "90,-315,56,-316,5,-321,-46,-322,-97,-320,-148,-315,-197,-305,-247,-291,-294,-272,-337,-246,-376,-213,-406,-173,-426,-127,-434,-75,-430,-26,-418,22,-404,52,-392,64", "99,-314,64,-315,14,-320,-37,-322,-88,-321,-139,-316,-189,-307,-238,-294,-286,-275,-330,-251,-370,-219,-402,-180,-423,-136,-433,-84,-432,-34,-420,14,-408,44,-396,56", "108,-312,73,-313,22,-319,-29,-322,-79,-321,-131,-317,-181,-309,-230,-297,-278,-279,-322,-256,-364,-225,-397,-187,-420,-144,-432,-93,-433,-43,-423,6,-412,36,-399,49", "116,-310,82,-312,31,-319,-20,-322,-70,-322,-122,-318,-172,-311,-221,-299,-271,-282,-315,-260,-357,-231,-392,-194,-417,-152,-431,-102,-433,-51,-425,-2,-415,29,-403,42", "125,-309,90,-311,39,-318,-11,-321,-62,-322,-113,-319,-164,-312,-213,-301,-263,-285,-308,-264,-351,-236,-387,-201,-414,-159,-430,-111,-434,-60,-427,-11,-418,21,-406,34", "133,-307,99,-309,48,-317,-3,-321,-53,-322,-105,-320,-156,-313,-204,-304,-254,-288,-301,-268,-344,-242,-381,-207,-410,-167,-428,-120,-434,-68,-429,-19,-420,13,-409,27", "142,-305,107,-308,57,-316,6,-320,-45,-322,-96,-320,-147,-315,-196,-306,-246,-291,-293,-272,-336,-247,-376,-214,-406,-174,-425,-128,-434,-76,-430,-27,-423,5,-412,19", "150,-303,116,-306,65,-315,15,-320,-36,-322,-87,-321,-139,-316,-188,-307,-238,-294,-285,-276,-329,-252,-369,-220,-401,-181,-423,-136,-433,-85,-432,-35,-425,-3,-415,11", "158,-300,124,-304,74,-313,23,-319,-28,-322,-78,-321,-130,-317,-180,-309,-229,-297,-278,-279,-321,-257,-363,-226,-397,-188,-420,-144,-432,-94,-433,-44,-427,-11,-417,3", "167,-298,133,-302,83,-312,32,-318,-19,-322,-70,-322,-121,-318,-172,-311,-220,-299,-270,-282,-314,-261,-357,-231,-392,-195,-417,-152,-431,-103,-433,-52,-429,-19,-419,-5", "175,-296,141,-300,91,-311,40,-318,-10,-321,-61,-322,-112,-319,-163,-312,-212,-302,-262,-286,-307,-265,-350,-237,-386,-202,-413,-160,-429,-112,-434,-60,-431,-28,-421,-13", "183,-293,150,-298,100,-309,49,-317,-2,-321,-53,-322,-104,-320,-155,-314,-204,-304,-253,-289,-300,-269,-343,-242,-381,-208,-409,-167,-427,-121,-434,-69,-432,-36,-423,-21", "191,-291,158,-296,108,-307,58,-316,7,-320,-44,-322,-95,-320,-146,-315,-195,-306,-245,-292,-292,-272,-336,-247,-375,-214,-405,-175,-425,-129,-434,-77,-433,-44,-424,-29", "199,-288,166,-294,117,-306,66,-314,15,-320,-35,-322,-86,-321,-138,-316,-187,-308,-237,-294,-285,-276,-328,-252,-369,-220,-401,-182,-423,-137,-433,-86,-433,-53,-425,-37", "208,-285,174,-292,125,-304,75,-313,24,-319,-27,-322,-77,-321,-129,-317,-179,-309,-228,-297,-277,-279,-321,-257,-363,-226,-396,-189,-420,-145,-432,-95,-434,-61,-426,-45", "216,-283,182,-289,134,-302,83,-312,33,-318,-18,-322,-69,-322,-120,-318,-171,-311,-220,-300,-269,-283,-314,-261,-356,-232,-391,-196,-416,-153,-431,-104,-434,-69,-427,-53", "225,-279,190,-287,142,-300,92,-310,41,-317,-10,-321,-60,-322,-112,-319,-162,-312,-211,-302,-261,-286,-306,-265,-349,-237,-386,-202,-413,-161,-429,-113,-434,-78,-427,-61", "233,-276,199,-284,150,-298,101,-309,50,-316,-1,-321,-52,-322,-103,-320,-154,-314,-203,-304,-253,-289,-299,-269,-342,-243,-380,-209,-409,-168,-427,-122,-433,-87,-428,-70", "241,-273,207,-281,159,-296,109,-307,58,-315,8,-320,-43,-322,-94,-320,-145,-315,-195,-306,-244,-292,-291,-273,-335,-248,-374,-215,-405,-176,-425,-130,-432,-96,-427,-79", "249,-270,215,-278,167,-294,118,-306,67,-314,16,-320,-35,-322,-85,-321,-137,-316,-186,-308,-236,-295,-284,-276,-327,-253,-368,-221,-400,-183,-422,-138,-431,-105,-427,-88", "257,-266,224,-275,175,-291,126,-304,76,-313,25,-319,-26,-322,-76,-321,-128,-317,-178,-309,-227,-297,-276,-280,-320,-257,-362,-227,-396,-190,-419,-146,-429,-114,-427,-96", "265,-263,232,-272,183,-289,135,-302,84,-312,34,-318,-17,-322,-68,-322,-119,-318,-170,-311,-219,-300,-268,-283,-313,-262,-355,-232,-390,-196,-416,-154,-427,-122,-426,-105", "273,-259,240,-269,191,-286,143,-300,93,-310,42,-317,-9,-321,-59,-322,-111,-319,-161,-313,-210,-302,-260,-286,-306,-266,-348,-238,-385,-203,-412,-162,-425,-130,-425,-113", "281,-255,248,-265,199,-284,151,-298,102,-309,51,-316,0,-321,-51,-322,-102,-320,-153,-314,-202,-304,-252,-289,-298,-269,-341,-243,-380,-209,-409,-169,-422,-139,-423,-122", "288,-251,256,-262,208,-281,160,-296,110,-307,59,-315,9,-320,-42,-322,-93,-320,-144,-315,-194,-306,-243,-292,-291,-273,-334,-248,-374,-215,-404,-176,-419,-147,-421,-130", "296,-247,264,-258,216,-278,168,-293,119,-305,68,-314,17,-320,-34,-322,-84,-321,-136,-316,-186,-308,-235,-295,-283,-277,-327,-253,-368,-221,-400,-183,-416,-154,-419,-138", "303,-243,272,-255,225,-275,176,-291,127,-304,77,-313,26,-319,-25,-322,-75,-321,-127,-317,-177,-310,-226,-298,-275,-280,-319,-258,-361,-227,-395,-190,-412,-162,-417,-146", "311,-239,279,-251,233,-272,184,-289,135,-302,85,-312,34,-318,-16,-322,-67,-322,-118,-318,-169,-311,-218,-300,-267,-283,-312,-262,-355,-233,-390,-197,-408,-170,-414,-154", "318,-235,287,-247,241,-268,192,-286,144,-300,94,-310,43,-317,-8,-321,-58,-322,-110,-319,-161,-313,-209,-302,-259,-287,-305,-266,-348,-238,-385,-204,-404,-177,-411,-162", "325,-230,294,-243,249,-265,200,-283,152,-298,102,-309,52,-316,1,-321,-50,-322,-101,-320,-152,-314,-201,-304,-251,-290,-297,-270,-341,-244,-379,-210,-400,-184,-408,-170", "333,-225,302,-239,257,-262,209,-281,160,-295,111,-307,60,-315,9,-320,-41,-322,-92,-321,-144,-315,-193,-306,-243,-293,-290,-274,-333,-249,-373,-216,-395,-191,-404,-177", "341,-220,309,-235,265,-258,217,-278,169,-293,119,-305,69,-314,18,-320,-33,-322,-83,-321,-135,-316,-185,-308,-234,-295,-282,-277,-326,-254,-367,-222,-390,-197,-400,-185", "348,-215,316,-231,273,-254,226,-274,177,-291,128,-303,78,-313,27,-319,-24,-322,-75,-321,-126,-317,-176,-310,-225,-298,-274,-280,-318,-258,-361,-228,-384,-204,-395,-192", "355,-209,324,-226,280,-251,234,-271,185,-288,136,-301,86,-311,35,-318,-16,-322,-66,-322,-118,-318,-168,-311,-217,-300,-266,-284,-311,-262,-354,-234,-379,-210,-391,-199", "362,-204,331,-221,288,-247,242,-268,193,-286,145,-299,95,-310,44,-317,-7,-321,-58,-322,-109,-319,-160,-313,-208,-303,-258,-287,-304,-266,-347,-239,-373,-217,-386,-206", "369,-198,339,-216,295,-243,250,-265,201,-283,153,-297,103,-308,53,-316,2,-321,-49,-322,-100,-320,-151,-314,-200,-305,-250,-290,-297,-270,-340,-244,-366,-222,-380,-213", "375,-192,346,-211,303,-239,258,-261,210,-280,161,-295,112,-307,61,-315,10,-320,-40,-322,-91,-321,-143,-315,-192,-307,-242,-293,-289,-274,-332,-249,-360,-228,-374,-220", "382,-187,353,-205,310,-234,266,-258,218,-277,169,-293,120,-305,70,-314,19,-320,-32,-322,-82,-321,-134,-317,-184,-308,-233,-296,-281,-277,-325,-254,-353,-234,-368,-227", "388,-181,360,-200,317,-230,273,-254,226,-274,178,-291,129,-303,78,-313,28,-319,-23,-322,-74,-321,-125,-318,-176,-310,-225,-298,-274,-281,-318,-259,-346,-239,-362,-233", "394,-175,366,-194,324,-225,281,-250,235,-271,186,-288,137,-301,87,-311,36,-318,-15,-321,-65,-322,-117,-319,-167,-312,-216,-301,-266,-284,-311,-263,-339,-245,-355,-239", "400,-168,373,-189,332,-220,289,-246,243,-268,194,-286,146,-299,96,-310,45,-317,-6,-321,-57,-322,-108,-319,-159,-313,-207,-303,-257,-287,-303,-267,-332,-250,-348,-245", "405,-162,379,-183,339,-215,296,-242,251,-264,202,-283,154,-297,104,-308,53,-316,3,-321,-48,-322,-99,-320,-150,-314,-199,-305,-249,-290,-296,-271,-324,-255,-341,-251", "410,-156,385,-177,347,-210,303,-238,259,-261,211,-280,162,-295,113,-307,62,-315,11,-320,-40,-322,-90,-321,-142,-316,-191,-307,-241,-293,-288,-274,-317,-259,-334,-256", "416,-148,391,-171,354,-205,310,-234,266,-257,219,-277,170,-293,121,-305,71,-314,20,-319,-31,-322,-81,-321,-133,-317,-183,-308,-232,-296,-281,-278,-310,-263,-327,-261", "421,-141,397,-165,360,-199,318,-230,274,-253,227,-274,179,-290,130,-303,79,-312,29,-319,-22,-322,-73,-321,-124,-318,-175,-310,-224,-298,-273,-281,-303,-267,-320,-265", "426,-134,402,-159,367,-194,325,-225,282,-250,235,-271,187,-288,138,-301,88,-311,37,-318,-14,-321,-64,-322,-116,-319,-166,-312,-215,-301,-265,-284,-295,-271,-313,-270", "431,-126,407,-152,374,-188,333,-220,289,-246,244,-267,195,-285,146,-299,97,-310,46,-317,-5,-321,-56,-322,-107,-319,-158,-313,-207,-303,-257,-288,-288,-275,-306,-274", "435,-119,413,-145,380,-182,340,-215,297,-242,252,-264,203,-283,155,-297,105,-308,54,-316,4,-321,-47,-322,-98,-320,-149,-314,-198,-305,-248,-291,-280,-278,-298,-278", "439,-111,418,-138,386,-177,347,-210,304,-238,259,-260,211,-280,163,-295,114,-306,63,-315,12,-320,-39,-322,-89,-321,-141,-316,-190,-307,-240,-293,-272,-281,-290,-282", "443,-103,423,-131,392,-171,354,-204,311,-234,267,-257,220,-277,171,-292,122,-305,72,-314,21,-319,-30,-322,-81,-321,-132,-317,-182,-309,-231,-296,-264,-285,-282,-285", "446,-95,427,-123,397,-164,361,-199,318,-229,275,-253,228,-273,179,-290,131,-303,80,-312,29,-319,-21,-322,-72,-322,-124,-318,-174,-310,-223,-299,-256,-288,-274,-288", "449,-86,432,-116,403,-158,368,-193,326,-224,283,-249,236,-270,187,-288,139,-301,89,-311,38,-318,-13,-321,-63,-322,-115,-319,-165,-312,-214,-301,-248,-291,-265,-292", "452,-78,436,-108,408,-152,374,-188,334,-219,290,-245,244,-267,196,-285,147,-299,97,-309,47,-317,-4,-321,-55,-322,-106,-319,-157,-313,-206,-303,-239,-294,-257,-295", "455,-70,439,-100,413,-145,380,-182,341,-214,298,-241,252,-264,204,-282,156,-297,106,-308,55,-316,4,-321,-46,-322,-97,-320,-149,-315,-198,-305,-231,-296,-248,-298", "457,-61,443,-92,418,-137,386,-176,348,-209,305,-237,260,-260,212,-279,164,-294,114,-306,64,-315,13,-320,-38,-322,-88,-321,-140,-316,-189,-307,-222,-299,-240,-301", "458,-53,446,-84,423,-130,392,-170,355,-204,312,-233,268,-256,221,-276,172,-292,123,-304,72,-313,22,-319,-29,-322,-80,-321,-131,-317,-181,-309,-213,-301,-231,-303", "460,-45,448,-76,428,-123,398,-164,362,-198,319,-229,276,-253,229,-273,180,-290,131,-303,81,-312,30,-319,-21,-322,-71,-322,-123,-318,-173,-310,-205,-303,-222,-306", "461,-36,451,-68,432,-115,403,-158,368,-193,327,-224,283,-249,237,-270,188,-287,140,-301,90,-311,39,-318,-12,-321,-63,-322,-114,-319,-165,-312,-197,-305,-214,-308", "461,-28,453,-59,436,-107,409,-151,375,-187,334,-219,291,-245,245,-267,196,-285,148,-299,98,-309,48,-317,-3,-321,-54,-322,-105,-320,-156,-313,-189,-307,-206,-310", "462,-19,454,-51,440,-100,414,-144,381,-181,342,-214,298,-241,253,-263,205,-282,156,-296,107,-308,56,-316,5,-321,-45,-322,-96,-320,-148,-315,-181,-309,-198,-311", "462,-11,455,-43,443,-92,419,-137,387,-175,349,-208,306,-237,261,-260,213,-279,165,-294,115,-306,65,-315,14,-320,-37,-322,-88,-321,-139,-316,-172,-311,-189,-313", "461,-2,456,-35,446,-84,424,-129,393,-169,356,-203,313,-233,269,-256,222,-276,173,-292,124,-304,73,-313,23,-319,-28,-322,-79,-321,-130,-317,-164,-312,-181,-315", "461,7,457,-27,448,-75,428,-122,398,-163,363,-198,320,-228,277,-252,230,-273,181,-290,132,-302,82,-312,31,-318,-20,-322,-70,-322,-122,-318,-156,-313,-173,-316", "460,16,457,-19,451,-67,432,-114,404,-157,369,-192,328,-223,284,-249,238,-270,189,-287,141,-300,91,-311,40,-318,-11,-321,-62,-322,-113,-319,-147,-315,-164,-318", "458,25,457,-10,453,-59,436,-107,409,-150,375,-186,335,-218,292,-245,246,-266,197,-284,149,-298,99,-309,48,-317,-2,-321,-53,-322,-104,-320,-138,-316,-155,-319", "456,34,457,-2,454,-51,440,-99,414,-143,382,-181,342,-213,299,-241,254,-263,206,-282,157,-296,108,-308,57,-316,6,-320,-45,-322,-95,-320,-130,-317,-147,-320", "454,43,456,7,455,-43,443,-91,420,-136,388,-175,350,-208,306,-236,262,-259,214,-279,166,-294,116,-306,66,-314,15,-320,-36,-322,-87,-321,-121,-318,-138,-321", "452,52,455,16,456,-34,446,-83,424,-129,393,-169,356,-203,313,-232,270,-256,222,-276,174,-292,125,-304,74,-313,23,-319,-27,-322,-78,-321,-112,-319,-129,-322", "449,61,454,24,457,-26,449,-75,429,-121,399,-162,363,-197,321,-228,277,-252,231,-272,182,-289,133,-302,83,-312,32,-318,-19,-322,-69,-322,-104,-320,-120,-323", "447,70,452,33,457,-18,451,-66,433,-114,404,-156,370,-192,328,-223,285,-248,239,-269,190,-287,142,-300,92,-310,41,-318,-10,-321,-61,-322,-95,-320,-111,-324", "444,78,450,42,457,-9,453,-58,437,-106,410,-149,376,-186,336,-218,292,-244,247,-266,198,-284,150,-298,100,-309,49,-317,-2,-321,-52,-322,-86,-321,-103,-324", "440,86,448,52,457,-1,454,-50,440,-98,415,-142,382,-180,343,-213,300,-240,255,-262,207,-281,158,-296,109,-307,58,-315,7,-320,-44,-322,-77,-321,-94,-325", "437,93,445,61,456,8,456,-42,443,-90,420,-135,388,-174,350,-207,307,-236,263,-259,215,-278,166,-294,117,-306,67,-314,16,-320,-35,-322,-69,-322,-85,-325", "433,101,442,69,455,17,456,-34,446,-82,425,-128,394,-168,357,-202,314,-232,271,-255,223,-275,175,-291,126,-304,75,-313,24,-319,-26,-322,-60,-322,-77,-325", "429,109,439,77,454,25,457,-25,449,-74,429,-120,400,-162,364,-197,322,-227,278,-252,231,-272,183,-289,134,-302,84,-312,33,-318,-18,-322,-52,-322,-68,-325", "425,116,436,85,452,34,457,-17,451,-65,433,-113,405,-156,370,-191,329,-222,286,-248,240,-269,191,-287,142,-300,92,-310,42,-317,-9,-321,-43,-322,-59,-325", "421,123,433,92,450,43,457,-9,453,-57,437,-105,410,-149,377,-185,337,-217,293,-244,248,-266,199,-284,151,-298,101,-309,50,-316,-1,-321,-34,-322,-51,-325", "416,131,429,100,447,53,457,0,455,-49,441,-97,416,-142,383,-179,344,-212,301,-240,256,-262,207,-281,159,-296,109,-307,59,-315,8,-320,-26,-322,-42,-325", "412,138,425,107,445,61,456,9,456,-41,444,-89,421,-134,389,-173,351,-207,308,-236,264,-259,216,-278,167,-294,118,-305,67,-314,17,-320,-17,-322,-33,-325", "407,145,421,114,442,70,455,17,456,-33,447,-81,425,-127,395,-167,358,-201,315,-231,271,-255,224,-275,175,-291,126,-304,76,-313,25,-319,-9,-321,-25,-324", "402,151,417,122,439,78,453,26,457,-24,449,-73,430,-120,400,-161,365,-196,322,-227,279,-251,232,-272,184,-289,135,-302,85,-312,34,-318,0,-321,-16,-324", "396,158,412,129,436,85,452,35,457,-16,451,-64,434,-112,405,-155,371,-190,330,-222,287,-247,240,-269,192,-286,143,-300,93,-310,43,-317,9,-320,-8,-323", "391,164,408,136,432,93,450,44,457,-8,453,-56,437,-104,411,-148,377,-185,337,-217,294,-243,249,-265,200,-284,152,-298,102,-309,51,-316,17,-320,1,-323", "385,171,403,142,429,101,447,53,457,1,455,-48,441,-96,416,-141,384,-179,345,-212,301,-239,257,-262,208,-281,160,-296,110,-307,60,-315,26,-319,10,-322", "379,177,398,149,425,108,444,62,456,10,456,-40,444,-88,421,-134,389,-173,352,-206,309,-235,264,-258,217,-278,168,-293,119,-305,68,-314,34,-318,18,-321", "373,183,392,156,421,115,442,70,455,18,457,-32,447,-80,426,-126,395,-167,359,-201,316,-231,272,-255,225,-275,176,-291,127,-303,77,-313,43,-317,27,-320", "367,189,387,162,417,122,439,78,453,27,457,-24,449,-72,430,-119,401,-161,365,-195,323,-226,280,-251,233,-271,184,-288,136,-302,86,-311,52,-316,36,-319", "361,194,381,168,412,129,435,86,451,36,457,-15,452,-64,434,-111,406,-154,372,-190,331,-221,287,-247,241,-268,192,-286,144,-300,94,-310,60,-315,44,-318", "354,200,376,174,407,136,432,94,449,45,457,-7,453,-55,438,-103,411,-147,378,-184,338,-216,295,-243,249,-265,201,-283,152,-297,103,-308,69,-314,53,-317", "348,205,370,180,402,143,428,101,447,54,457,2,455,-47,441,-95,417,-140,384,-178,345,-211,302,-239,257,-261,209,-280,161,-295,111,-307,78,-313,62,-316", "341,211,364,186,397,150,424,109,444,63,456,10,456,-39,444,-87,422,-133,390,-172,352,-206,309,-235,265,-258,218,-277,169,-293,120,-305,86,-311,70,-314", "334,216,357,192,392,156,420,116,441,71,455,19,457,-31,447,-79,426,-125,396,-166,359,-200,316,-230,273,-254,226,-274,177,-291,128,-303,95,-310,79,-313", "327,221,351,197,386,163,416,123,438,79,453,28,457,-23,450,-71,430,-118,401,-160,366,-195,324,-226,281,-250,234,-271,185,-288,137,-301,103,-308,87,-311", "320,225,344,202,381,169,412,130,435,87,451,37,457,-14,452,-63,435,-110,407,-153,372,-189,332,-221,288,-246,242,-268,193,-286,145,-299,112,-307,96,-309", "313,230,338,208,375,175,407,137,432,95,449,46,457,-6,454,-54,438,-103,412,-146,379,-183,339,-216,296,-243,250,-264,202,-283,153,-297,120,-305,104,-308", "306,235,331,213,369,181,402,144,428,102,447,55,456,3,455,-46,442,-95,417,-139,385,-178,346,-210,303,-238,258,-261,210,-280,162,-295,129,-303,113,-306", "299,239,324,217,363,187,397,151,424,109,444,64,456,11,456,-38,445,-87,422,-132,391,-172,353,-205,310,-234,266,-257,218,-277,170,-293,137,-301,121,-304", "291,243,317,222,357,192,391,157,420,117,441,72,454,20,457,-30,447,-78,427,-125,396,-165,360,-200,317,-230,274,-254,227,-274,178,-290,146,-299,129,-302", "284,247,310,227,350,198,386,163,416,124,438,80,453,29,457,-22,450,-70,431,-117,402,-159,367,-194,325,-225,281,-250,235,-271,186,-288,154,-297,138,-300", "276,251,303,231,344,203,380,170,411,131,435,88,451,38,457,-14,452,-62,435,-110,407,-153,373,-189,332,-220,289,-246,243,-268,194,-285,162,-295,146,-298", "269,255,296,235,337,208,374,176,406,138,431,95,449,47,457,-5,454,-54,439,-102,413,-146,379,-183,340,-215,296,-242,251,-264,202,-283,170,-293,154,-295", "261,259,289,240,330,213,368,181,401,145,428,103,446,56,456,4,455,-46,442,-94,418,-139,385,-177,347,-210,304,-238,259,-261,211,-280,179,-290,162,-293", "253,262,281,244,323,218,362,187,396,151,424,110,444,65,456,12,456,-38,445,-86,423,-131,391,-171,354,-205,311,-234,267,-257,219,-277,187,-288,170,-290", "246,266,274,248,316,223,356,193,391,158,420,117,441,73,454,21,457,-29,448,-78,427,-124,397,-165,361,-199,318,-230,275,-253,228,-274,195,-285,178,-288", "238,269,266,251,309,227,350,198,385,164,415,125,438,81,453,30,457,-21,450,-69,431,-116,402,-159,367,-194,326,-225,282,-250,236,-270,203,-283,187,-285", "230,272,259,255,302,232,343,203,379,170,411,132,434,89,451,39,457,-13,452,-61,435,-109,408,-152,374,-188,333,-220,290,-246,244,-267,211,-280,195,-282", "222,275,251,259,295,236,336,209,374,176,406,139,431,96,449,48,457,-4,454,-53,439,-101,413,-145,380,-182,340,-215,297,-242,252,-264,220,-277,203,-279", "214,278,243,262,288,240,329,214,368,182,401,145,427,104,446,57,456,4,455,-45,442,-93,418,-138,386,-176,348,-209,304,-238,260,-260,228,-273,212,-276", "206,281,236,265,280,244,323,218,362,188,396,152,423,111,443,66,455,13,456,-37,445,-85,423,-131,392,-170,355,-204,311,-233,268,-257,236,-270,220,-273", "198,284,228,269,273,248,316,223,355,193,390,158,419,118,440,74,454,22,457,-28,448,-77,428,-123,397,-164,361,-199,319,-229,275,-253,244,-267,228,-270", "190,287,220,272,265,252,309,228,349,199,385,165,415,125,437,82,453,31,457,-20,450,-68,432,-116,403,-158,368,-193,326,-224,283,-249,252,-264,236,-266", "182,289,212,275,258,255,302,232,342,204,379,171,410,132,434,89,451,40,457,-12,452,-60,436,-108,408,-151,374,-187,334,-219,290,-245,260,-260,244,-263", "174,292,204,277,250,259,294,236,336,209,373,177,405,139,430,97,448,49,457,-3,454,-52,439,-100,414,-144,381,-182,341,-214,298,-241,268,-256,252,-260", "166,294,196,280,243,262,287,241,329,214,367,183,400,146,427,104,446,58,456,5,455,-44,443,-92,419,-137,387,-176,348,-209,305,-237,276,-253,259,-256", "158,296,188,283,235,266,280,245,322,219,361,188,395,153,423,112,443,67,455,14,456,-36,446,-84,423,-130,392,-170,355,-203,312,-233,283,-249,267,-252", "150,298,180,285,227,269,272,248,315,224,355,194,390,159,419,119,440,75,454,23,457,-28,448,-76,428,-122,398,-164,362,-198,320,-229,291,-245,274,-248", "141,301,172,288,219,272,265,252,308,228,348,199,384,165,414,126,437,82,452,32,457,-19,451,-68,432,-115,403,-157,369,-192,327,-224,298,-241,282,-245", "133,302,164,290,211,275,257,256,301,233,342,205,378,171,410,133,434,90,450,41,457,-11,453,-59,436,-107,409,-151,375,-187,335,-219,306,-237,289,-241", "125,304,156,292,203,278,249,259,294,237,335,210,372,177,405,140,430,98,448,50,457,-2,454,-51,440,-99,414,-144,381,-181,342,-214,313,-233,296,-237", "117,306,148,294,195,280,242,263,286,241,328,215,366,183,400,147,426,105,445,59,456,6,455,-43,443,-91,419,-136,387,-175,349,-208,320,-228,303,-232", "108,308,140,296,187,283,234,266,279,245,321,219,360,189,394,153,422,112,443,67,455,15,456,-35,446,-83,424,-129,393,-169,356,-203,328,-223,311,-228", "100,309,132,298,179,286,226,269,271,249,314,224,354,194,389,160,418,120,440,75,454,24,457,-27,449,-75,428,-122,399,-163,363,-197,335,-218,318,-223", "92,311,123,300,171,288,218,272,264,253,307,229,347,200,383,166,414,127,437,83,452,33,457,-18,451,-67,433,-114,404,-157,369,-192,342,-213,326,-218", "83,312,115,302,163,290,210,275,256,256,300,233,341,205,378,172,409,134,433,91,450,42,457,-10,453,-58,436,-106,409,-150,376,-186,350,-208,333,-213", "75,313,107,304,155,293,203,278,249,260,293,237,334,210,372,178,404,141,430,99,448,51,457,-1,454,-50,440,-98,415,-143,382,-180,356,-203,340,-208", "67,315,99,305,147,295,195,281,241,263,285,241,327,215,366,184,399,147,426,106,445,60,456,7,455,-42,443,-90,420,-136,388,-174,363,-197,347,-203", "58,316,90,307,139,297,187,283,233,266,278,245,321,220,360,189,394,154,422,113,442,68,455,16,456,-34,446,-82,424,-128,394,-168,370,-191,353,-197", "50,317,82,308,131,299,179,286,225,270,271,249,314,225,353,195,388,160,418,120,439,76,454,25,457,-26,449,-74,429,-121,399,-162,376,-186,360,-192", "41,318,74,309,122,300,171,288,217,273,263,253,307,229,347,200,383,167,413,128,436,84,452,34,457,-18,451,-66,433,-113,405,-156,382,-180,366,-187", "33,319,65,310,114,302,162,291,210,275,256,257,299,233,340,206,377,173,409,135,433,92,450,43,457,-9,453,-57,437,-105,410,-149,388,-174,372,-181", "25,319,57,312,106,304,154,293,202,278,248,260,292,238,333,211,371,179,404,141,429,99,448,52,457,-1,454,-49,440,-98,415,-142,394,-168,378,-175", "16,320,49,313,98,305,146,295,194,281,240,263,285,242,327,216,365,184,399,148,426,107,445,61,456,8,456,-41,444,-90,420,-135,400,-162,384,-170", "8,321,40,313,89,307,138,297,186,284,232,267,277,246,320,220,359,190,393,155,422,114,442,69,455,17,456,-33,446,-82,425,-127,405,-156,389,-164", "-1,321,32,314,81,308,130,299,178,286,225,270,270,250,313,225,353,196,388,161,417,121,439,77,454,26,457,-25,449,-73,429,-120,410,-149,395,-157", "-9,321,24,315,73,309,122,301,170,288,217,273,262,253,306,229,346,201,382,167,413,128,436,85,452,35,457,-17,451,-65,433,-112,416,-142,400,-151", "-18,322,15,316,64,311,113,302,162,291,209,276,255,257,299,234,339,206,376,173,408,135,433,93,450,44,457,-8,453,-57,437,-105,421,-134,406,-144", "-26,322,7,316,56,312,105,304,153,293,201,279,247,260,291,238,333,211,371,179,403,142,429,100,447,53,457,0,455,-49,441,-97,425,-127,411,-137", "-35,322,-2,317,48,313,97,305,145,295,193,281,239,264,284,242,326,216,365,185,398,149,425,107,445,62,456,9,456,-41,444,-89,430,-119,416,-130", "-43,322,-10,317,39,314,89,307,137,297,185,284,232,267,276,246,319,221,358,191,393,155,421,115,442,70,455,18,457,-32,447,-81,434,-112,420,-123", "-51,322,-19,317,31,314,80,308,129,299,177,286,224,270,269,250,312,225,352,196,387,162,417,122,439,78,453,27,457,-24,449,-72,437,-104,424,-116", "-60,322,-27,318,23,315,72,310,121,301,169,289,216,273,262,254,305,230,345,201,382,168,412,129,436,86,452,36,457,-16,451,-64,441,-96,428,-109", "-69,321,-35,318,15,316,64,311,113,302,161,291,208,276,254,257,298,234,339,207,376,174,408,136,432,93,449,45,457,-7,453,-56,444,-88,432,-101", "-77,321,-43,318,6,316,55,312,104,304,153,293,200,279,246,261,291,239,332,212,370,180,403,143,429,101,447,54,457,1,455,-48,447,-80,436,-94", "-86,321,-52,318,-3,317,47,313,96,306,144,295,192,282,239,264,283,243,325,217,364,186,398,149,425,108,444,63,456,10,456,-40,449,-72,439,-86", "-94,320,-60,317,-11,317,39,314,88,307,136,297,184,284,231,267,276,247,318,221,358,191,392,156,421,115,442,71,455,19,457,-32,452,-63,442,-78", "-102,319,-69,317,-19,317,30,314,79,308,128,299,176,287,223,270,268,250,311,226,351,197,387,162,416,123,439,79,453,28,457,-23,453,-55,444,-70", "-110,318,-78,317,-28,318,22,315,71,310,120,301,168,289,215,273,261,254,304,230,345,202,381,169,412,130,435,86,451,37,457,-15,455,-47,446,-62", "-119,317,-86,316,-36,318,14,316,63,311,112,303,160,291,207,276,253,258,297,235,338,207,375,175,407,137,432,94,449,46,457,-6,456,-39,448,-55", "-127,316,-94,316,-44,318,5,316,54,312,103,304,152,293,199,279,245,261,290,239,331,212,369,180,402,143,428,102,447,55,457,2,457,-31,449,-47", "-135,314,-102,315,-53,318,-3,317,46,313,95,306,144,295,191,282,238,264,282,243,325,217,363,186,397,150,424,109,444,63,456,11,457,-23,451,-39", "-144,313,-110,314,-61,317,-12,317,38,314,87,307,135,297,183,284,230,268,275,247,318,222,357,192,392,157,420,116,441,72,455,20,457,-14,451,-31", "-152,311,-119,313,-70,317,-20,317,29,315,79,309,127,299,175,287,222,271,267,251,311,226,351,197,386,163,416,123,438,79,453,29,457,-6,452,-22", "-160,308,-127,312,-78,317,-29,318,21,315,70,310,119,301,167,289,214,274,260,254,304,231,344,203,380,169,411,130,435,87,451,37,456,3,452,-14", "-169,306,-135,310,-87,316,-37,318,13,316,62,311,111,303,159,291,206,277,252,258,296,235,337,208,375,175,407,137,431,95,449,47,456,11,452,-5", "-177,303,-143,308,-95,315,-45,318,4,316,53,312,103,304,151,294,198,279,245,261,289,239,331,213,369,181,402,144,428,102,446,56,454,20,452,3", "-185,301,-152,306,-103,315,-54,318,-4,317,45,313,94,306,143,296,190,282,237,265,282,243,324,218,363,187,396,151,424,110,444,64,453,29,451,12", "-193,297,-160,304,-111,314,-62,317,-13,317,37,314,86,307,135,298,182,285,229,268,274,247,317,222,356,192,391,157,420,117,441,72,451,38,450,21", "-201,294,-168,302,-119,313,-71,317,-21,317,28,315,78,309,126,300,174,287,221,271,267,251,310,227,350,198,386,164,415,124,438,80,449,47,448,30", "-209,291,-176,299,-128,311,-79,317,-30,318,20,315,69,310,118,301,166,289,213,274,259,255,303,231,343,203,380,170,411,131,435,88,446,56,447,40", "-217,287,-184,296,-136,310,-88,316,-38,318,12,316,61,311,110,303,158,292,206,277,252,258,296,236,337,208,374,176,406,138,431,96,444,65,445,48", "-224,284,-192,293,-144,308,-96,315,-46,318,3,316,53,312,102,305,150,294,198,280,244,262,288,240,330,213,368,182,401,145,427,103,441,73,442,56", "-232,280,-200,290,-153,306,-104,315,-55,318,-5,317,44,313,93,306,142,296,190,282,236,265,281,244,323,218,362,187,396,151,423,111,438,81,440,64", "-239,275,-208,287,-161,304,-112,314,-63,317,-14,317,36,314,85,307,134,298,182,285,228,268,273,248,316,223,356,193,391,158,419,118,434,89,437,72", "-247,271,-215,283,-169,301,-120,313,-72,317,-22,317,28,315,77,309,126,300,174,287,220,271,266,252,309,227,349,198,385,164,415,125,431,96,435,80", "-254,267,-223,279,-177,299,-129,311,-80,316,-30,318,19,315,68,310,117,301,166,290,213,274,258,255,302,232,343,204,379,170,410,132,427,104,432,88", "-261,262,-230,275,-185,296,-137,310,-88,316,-39,318,11,316,60,311,109,303,157,292,205,277,251,259,295,236,336,209,373,176,406,139,423,111,428,95", "-268,257,-238,271,-193,293,-145,308,-97,315,-47,318,2,317,52,312,101,305,149,294,197,280,243,262,287,240,329,214,367,182,401,146,419,118,425,103", "-275,252,-245,267,-201,290,-154,306,-105,315,-55,318,-6,317,43,313,93,306,141,296,189,283,235,265,280,244,322,219,361,188,395,152,415,125,421,110", "-282,247,-252,263,-208,286,-162,304,-113,314,-64,317,-15,317,35,314,84,308,133,298,181,285,228,269,273,248,315,223,355,193,390,159,410,132,417,117", "-289,241,-259,258,-216,283,-170,301,-121,313,-73,317,-23,318,27,315,76,309,125,300,173,288,220,272,265,252,308,228,349,199,384,165,405,139,413,125", "-295,236,-266,253,-224,279,-178,298,-129,311,-81,316,-31,318,19,315,68,310,116,302,165,290,212,275,258,256,301,232,342,204,379,171,400,146,408,132", "-302,230,-273,248,-231,275,-186,296,-138,310,-89,316,-40,318,10,316,59,311,108,303,157,292,204,278,250,259,294,237,335,209,373,177,395,153,404,139", "-308,224,-280,243,-238,271,-194,293,-146,308,-98,315,-48,318,2,317,51,312,100,305,148,294,196,280,242,263,287,241,329,214,367,183,390,159,399,146", "-314,218,-286,238,-246,267,-201,289,-154,306,-106,314,-56,317,-7,317,43,313,92,306,140,296,188,283,235,266,279,245,322,219,361,189,384,165,394,152", "-319,211,-293,232,-253,262,-209,286,-162,303,-114,314,-65,317,-15,317,34,314,84,308,132,298,180,285,227,269,272,249,315,224,354,194,378,171,389,159", "-325,205,-299,226,-260,258,-217,282,-170,301,-122,312,-73,317,-24,318,26,315,75,309,124,300,172,288,219,272,264,252,308,228,348,199,372,177,383,165", "-330,198,-305,221,-267,253,-224,279,-178,298,-130,311,-82,316,-32,318,18,316,67,310,116,302,164,290,211,275,257,256,301,233,341,205,366,183,378,171", "-335,191,-311,214,-274,248,-232,275,-186,295,-139,309,-90,316,-40,318,9,316,58,311,107,304,156,292,203,278,249,259,293,237,335,210,360,189,372,177", "-340,184,-317,208,-281,243,-239,271,-194,292,-147,307,-98,315,-49,318,1,317,50,312,99,305,148,295,195,281,241,263,286,241,328,215,354,194,366,183", "-344,176,-322,202,-287,237,-247,266,-202,289,-155,305,-106,314,-57,317,-8,317,42,313,91,307,139,297,187,283,234,266,278,245,321,220,347,200,360,189", "-348,168,-327,195,-293,232,-254,262,-210,286,-163,303,-115,313,-66,317,-16,317,33,314,83,308,131,298,179,286,226,269,271,249,314,224,341,205,354,195", "-351,160,-332,188,-300,226,-261,257,-218,282,-171,301,-123,312,-74,317,-25,318,25,315,74,309,123,300,171,288,218,272,264,253,307,229,334,210,347,201", "-355,152,-336,181,-306,220,-268,252,-225,278,-179,298,-131,311,-83,316,-33,318,17,316,66,310,115,302,163,290,210,275,256,256,300,233,327,215,341,206", "-357,144,-340,173,-311,214,-274,247,-233,274,-187,295,-139,309,-91,316,-41,318,8,316,57,312,107,304,155,293,202,278,248,260,293,237,321,220,334,211", "-359,136,-344,166,-317,207,-281,242,-240,270,-195,292,-148,307,-99,315,-49,318,0,317,49,313,98,305,147,295,194,281,241,263,285,242,314,225,328,216", "-361,127,-348,158,-322,201,-288,237,-247,266,-203,289,-156,305,-107,314,-58,317,-9,317,41,313,90,307,139,297,186,283,233,266,278,246,306,229,321,221", "-362,118,-351,150,-327,194,-294,231,-255,261,-211,285,-164,303,-115,313,-67,317,-17,317,32,314,82,308,130,299,178,286,225,270,270,249,299,233,314,226", "-362,110,-353,142,-332,187,-300,225,-262,257,-218,282,-172,300,-124,312,-75,317,-26,318,24,315,73,309,122,300,170,288,217,273,263,253,292,238,307,231", "-362,101,-355,134,-337,180,-306,219,-268,252,-226,278,-180,298,-132,311,-84,316,-34,318,16,316,65,311,114,302,162,291,209,276,255,257,285,242,300,235", "-361,92,-357,126,-341,173,-312,213,-275,247,-233,274,-188,295,-140,309,-92,316,-42,318,7,316,57,312,106,304,154,293,201,278,248,260,277,246,292,240", "-360,84,-358,117,-345,165,-318,207,-282,241,-241,270,-196,292,-149,307,-100,315,-50,318,-1,317,48,313,97,305,146,295,193,281,240,264,270,250,285,244", "-358,75,-358,109,-348,157,-323,200,-288,236,-248,265,-204,288,-157,305,-108,314,-59,317,-10,317,40,314,89,307,138,297,185,284,232,267,262,253,278,248", "-356,67,-358,101,-351,150,-328,193,-295,230,-255,261,-212,285,-165,303,-116,313,-68,317,-18,317,32,314,81,308,129,299,177,286,224,270,255,257,270,252", "-353,59,-357,92,-353,141,-333,187,-301,225,-262,256,-219,281,-173,300,-125,312,-76,317,-26,318,23,315,73,309,121,301,169,289,216,273,247,260,263,256", "-350,51,-356,84,-355,133,-337,179,-307,219,-269,251,-227,277,-181,297,-133,311,-85,316,-35,318,15,316,64,311,113,302,161,291,208,276,239,264,255,260", "-346,43,-354,75,-357,125,-341,172,-313,213,-276,246,-234,273,-189,294,-141,309,-93,316,-43,318,6,316,56,312,105,304,153,293,201,279,232,267,248,264", "-342,35,-351,67,-358,116,-345,164,-318,206,-283,241,-242,269,-197,291,-150,307,-101,315,-51,318,-2,317,47,313,97,306,145,295,193,281,224,270,240,267", "-337,27,-349,60,-358,108,-348,157,-324,199,-289,235,-249,265,-205,288,-158,305,-109,314,-60,317,-11,317,39,314,88,307,137,297,185,284,216,273,232,271", "-331,19,-345,52,-358,100,-351,149,-328,193,-295,230,-256,260,-212,284,-166,302,-117,313,-69,317,-19,317,31,314,80,308,129,299,177,286,208,276,224,274", "-325,12,-342,45,-357,91,-354,141,-333,186,-302,224,-263,256,-220,281,-174,300,-125,312,-77,317,-27,318,22,315,72,310,120,301,169,289,200,279,217,277", "-319,5,-337,37,-356,83,-355,132,-338,179,-307,218,-270,251,-227,277,-182,297,-134,310,-85,316,-36,318,14,316,63,311,112,303,160,291,192,282,209,280", "-313,-2,-333,29,-354,75,-357,124,-342,171,-313,212,-277,246,-235,273,-190,294,-142,309,-94,316,-44,318,6,316,55,312,104,304,152,293,184,284,201,283", "-307,-8,-327,21,-351,67,-358,116,-345,163,-319,205,-283,240,-242,269,-198,291,-150,307,-102,315,-52,318,-3,317,47,313,96,306,144,295,176,287,193,286", "-300,-13,-321,14,-348,59,-358,107,-349,156,-324,199,-290,235,-250,264,-205,288,-159,304,-110,314,-61,317,-11,317,38,314,87,307,136,297,168,289,185,289", "-293,-18,-316,7,-345,51,-358,99,-351,148,-329,192,-296,229,-257,260,-213,284,-167,302,-118,313,-69,317,-20,317,30,315,79,308,128,299,160,291,177,291", "-286,-23,-310,1,-341,44,-357,91,-354,140,-334,185,-302,223,-264,255,-221,280,-175,299,-126,312,-78,317,-28,318,22,315,71,310,120,301,152,293,169,294", "-278,-27,-303,-5,-337,36,-355,82,-356,131,-338,178,-308,218,-271,250,-228,277,-183,297,-135,310,-86,316,-36,318,13,316,62,311,111,303,144,296,161,296", "-271,-31,-297,-10,-332,28,-353,74,-357,123,-342,170,-314,211,-277,245,-236,273,-191,294,-143,308,-94,315,-45,318,5,316,54,312,103,304,135,297,152,299", "-263,-34,-290,-15,-327,20,-351,66,-358,115,-346,163,-319,205,-284,240,-243,268,-198,291,-151,306,-103,315,-53,318,-4,317,46,313,95,306,127,299,144,301", "-255,-37,-283,-19,-321,13,-348,58,-358,106,-349,155,-325,198,-290,234,-250,264,-206,287,-159,304,-111,314,-62,317,-12,317,37,314,87,307,119,301,136,303", "-246,-40,-276,-23,-315,7,-345,51,-358,98,-352,147,-329,191,-297,229,-257,259,-214,284,-167,302,-119,313,-70,317,-21,317,29,315,78,309,111,303,128,305", "-238,-42,-268,-27,-309,0,-341,43,-357,90,-354,139,-334,184,-303,223,-264,255,-222,280,-175,299,-127,312,-79,317,-29,318,21,315,70,310,103,304,120,307", "-229,-43,-261,-30,-303,-5,-336,35,-355,81,-356,131,-339,177,-309,217,-271,250,-229,276,-183,296,-135,310,-87,316,-37,318,12,316,62,311,94,306,111,309", "-220,-45,-253,-33,-296,-11,-331,27,-353,73,-357,122,-343,169,-314,211,-278,245,-236,272,-191,293,-144,308,-95,315,-46,318,4,316,53,312,86,307,103,311", "-211,-46,-245,-36,-289,-16,-326,20,-351,65,-358,114,-346,162,-320,204,-285,239,-244,268,-199,290,-152,306,-103,315,-54,318,-5,317,45,313,78,309,95,312", "-202,-46,-236,-38,-282,-20,-320,13,-348,57,-358,105,-349,154,-325,197,-291,234,-251,263,-207,287,-160,304,-112,314,-63,317,-13,317,36,314,69,310,86,314", "-193,-46,-228,-39,-275,-24,-314,6,-344,50,-358,97,-352,146,-330,191,-297,228,-258,259,-215,283,-168,302,-120,313,-71,317,-22,317,28,315,61,311,78,315", "-185,-46,-219,-40,-268,-27,-308,0,-340,42,-357,89,-354,138,-335,184,-303,222,-265,254,-222,280,-176,299,-128,311,-80,317,-30,318,20,315,53,312,70,317", "-177,-46,-210,-41,-260,-31,-302,-6,-336,34,-355,80,-356,130,-339,176,-309,216,-272,249,-230,276,-184,296,-136,310,-88,316,-38,318,11,316,44,313,61,318", "-168,-45,-201,-42,-252,-33,-295,-11,-331,26,-353,72,-357,121,-343,169,-315,210,-279,244,-237,272,-192,293,-145,308,-96,315,-46,318,3,316,36,314,53,319", "-160,-45,-192,-42,-244,-36,-288,-16,-325,19,-350,64,-358,113,-346,161,-320,203,-285,239,-245,267,-200,290,-153,306,-104,315,-55,318,-6,317,28,315,44,320", "-151,-44,-184,-42,-235,-38,-281,-20,-320,12,-347,57,-358,105,-350,153,-326,197,-292,233,-252,263,-208,287,-161,304,-112,314,-64,317,-14,317,19,315,36,321", "-143,-42,-176,-42,-227,-39,-274,-24,-314,5,-344,49,-357,96,-352,145,-330,190,-298,227,-259,258,-216,283,-169,301,-121,313,-72,317,-22,317,11,316,28,322", "-134,-41,-168,-41,-218,-40,-267,-28,-308,-1,-340,41,-356,88,-354,137,-335,183,-304,222,-266,254,-223,279,-177,299,-129,311,-80,316,-31,318,2,317,19,323", "-125,-39,-160,-40,-209,-41,-259,-31,-301,-7,-336,34,-355,79,-356,129,-339,175,-310,216,-273,249,-231,275,-185,296,-137,310,-89,316,-39,318,-6,317,10,323", "-116,-38,-151,-39,-200,-42,-251,-34,-295,-12,-330,26,-353,71,-357,120,-343,168,-316,209,-279,243,-238,271,-193,293,-146,308,-97,315,-47,318,-15,317,2,324", "-107,-36,-143,-38,-192,-42,-243,-36,-288,-16,-325,18,-350,64,-358,112,-347,160,-321,203,-286,238,-245,267,-201,290,-154,306,-105,315,-56,317,-23,318,-7,324", "-98,-34,-134,-37,-183,-42,-235,-38,-281,-21,-319,11,-347,56,-358,104,-350,152,-326,196,-292,233,-253,262,-209,286,-162,303,-113,314,-64,317,-31,318,-15,324", "-90,-32,-125,-35,-175,-42,-226,-39,-273,-25,-313,5,-344,48,-357,95,-352,144,-331,189,-299,227,-260,258,-216,283,-170,301,-121,313,-73,317,-40,318,-23,325", "-82,-30,-117,-33,-167,-41,-217,-41,-266,-28,-307,-2,-340,41,-356,87,-355,136,-336,182,-305,221,-267,253,-224,279,-178,298,-130,311,-81,316,-48,318,-32,325", "-74,-27,-108,-31,-159,-40,-209,-41,-258,-31,-300,-7,-335,33,-355,79,-356,128,-340,175,-310,215,-273,248,-231,275,-186,295,-138,309,-90,316,-56,317,-40,325", "-66,-25,-99,-29,-150,-39,-200,-42,-250,-34,-294,-12,-330,25,-352,70,-357,120,-344,167,-316,208,-280,243,-239,271,-194,292,-146,308,-98,315,-65,317,-49,325", "-58,-22,-91,-27,-142,-38,-191,-42,-242,-36,-287,-17,-324,17,-350,63,-358,111,-347,159,-322,202,-287,238,-246,266,-202,289,-155,305,-106,314,-74,317,-58,324", "-50,-20,-83,-25,-133,-37,-183,-42,-234,-38,-280,-21,-318,10,-347,55,-358,103,-350,152,-327,195,-293,232,-253,262,-209,286,-163,303,-114,314,-82,316,-66,324", "-42,-17,-75,-23,-124,-35,-175,-41,-225,-40,-273,-25,-312,4,-343,47,-357,95,-353,144,-331,188,-299,226,-260,257,-217,282,-171,301,-122,312,-90,316,-74,324", "-33,-15,-67,-21,-116,-33,-166,-41,-216,-41,-265,-28,-306,-2,-339,40,-356,86,-355,135,-336,181,-305,220,-267,253,-225,278,-179,298,-131,311,-98,315,-83,323", "-25,-12,-59,-18,-107,-31,-158,-40,-208,-41,-257,-32,-300,-8,-335,32,-354,78,-356,127,-340,174,-311,214,-274,248,-232,274,-187,295,-139,309,-107,314,-91,322", "-17,-9,-51,-16,-98,-29,-149,-39,-199,-42,-249,-34,-293,-13,-329,24,-352,70,-357,119,-344,166,-317,208,-281,242,-240,270,-195,292,-147,307,-115,313,-99,322", "-8,-6,-42,-13,-90,-27,-141,-38,-190,-42,-241,-36,-286,-17,-324,17,-350,62,-358,110,-347,159,-322,201,-287,237,-247,266,-203,289,-156,305,-123,312,-108,321", "0,-3,-34,-10,-82,-25,-132,-36,-182,-42,-233,-38,-279,-22,-318,10,-346,54,-358,102,-350,151,-327,195,-294,231,-254,262,-210,285,-164,303,-131,311,-116,320", "8,0,-26,-7,-74,-23,-124,-35,-174,-41,-224,-40,-272,-25,-312,3,-343,47,-357,94,-353,143,-332,188,-300,226,-261,257,-218,282,-172,300,-140,309,-125,318", "16,3,-17,-4,-66,-20,-115,-33,-165,-41,-216,-41,-264,-29,-306,-3,-339,39,-356,85,-355,135,-336,181,-306,220,-268,252,-225,278,-180,298,-148,307,-133,317", "24,6,-9,-2,-58,-18,-106,-31,-157,-40,-207,-42,-257,-32,-299,-8,-334,31,-354,77,-357,126,-341,173,-312,214,-275,247,-233,274,-188,295,-156,305,-142,315", "32,9,-1,2,-50,-15,-97,-29,-149,-39,-198,-42,-248,-34,-292,-13,-329,23,-352,69,-358,118,-344,166,-317,207,-281,242,-240,270,-196,292,-164,303,-150,313", "40,12,7,4,-41,-13,-89,-27,-140,-38,-189,-42,-240,-37,-286,-18,-323,16,-349,61,-358,109,-348,158,-323,201,-288,236,-248,266,-203,288,-172,300,-158,310", "48,15,15,7,-33,-10,-81,-25,-131,-36,-181,-42,-232,-38,-278,-22,-317,9,-346,53,-358,101,-351,150,-328,194,-294,231,-255,261,-211,285,-180,298,-166,308", "56,19,23,10,-25,-7,-73,-22,-123,-35,-173,-41,-223,-40,-271,-26,-311,3,-342,46,-357,93,-353,142,-332,187,-301,225,-262,256,-219,281,-188,295,-175,305", "64,22,31,14,-17,-4,-65,-20,-114,-33,-165,-41,-215,-41,-264,-29,-305,-3,-338,38,-356,84,-355,134,-337,180,-306,219,-269,252,-226,278,-196,292,-183,302", "72,25,39,17,-8,-1,-57,-18,-105,-31,-156,-40,-206,-42,-256,-32,-298,-9,-333,30,-354,76,-357,125,-341,172,-312,213,-275,247,-234,274,-204,288,-191,299", "80,28,47,20,0,2,-49,-15,-96,-29,-148,-39,-197,-42,-248,-35,-292,-14,-328,22,-352,68,-358,117,-345,165,-318,206,-282,241,-241,269,-212,285,-199,296", "88,31,55,23,8,5,-41,-12,-88,-27,-139,-38,-188,-42,-239,-37,-285,-18,-322,15,-349,60,-358,109,-348,157,-323,200,-289,236,-248,265,-219,281,-206,292", "96,35,63,26,16,8,-32,-10,-80,-24,-130,-36,-180,-42,-231,-39,-278,-22,-317,8,-346,53,-358,100,-351,149,-328,193,-295,230,-256,261,-227,277,-214,288", "104,38,71,29,24,11,-24,-7,-72,-22,-122,-34,-172,-41,-222,-40,-270,-26,-311,2,-342,45,-357,92,-353,141,-333,186,-301,224,-263,256,-234,273,-222,285", "112,41,79,32,32,14,-16,-4,-64,-20,-113,-33,-164,-41,-214,-41,-263,-29,-304,-4,-338,37,-356,84,-355,133,-337,179,-307,219,-269,251,-242,269,-229,280", "120,44,87,36,40,17,-7,-1,-56,-17,-104,-30,-155,-40,-205,-42,-255,-32,-298,-9,-333,29,-354,75,-357,125,-341,172,-313,212,-276,246,-249,265,-237,276", "128,48,95,39,48,20,1,2,-48,-15,-96,-28,-147,-39,-196,-42,-247,-35,-291,-14,-327,22,-351,67,-358,116,-345,164,-318,206,-283,241,-256,260,-244,272", "136,51,103,42,56,23,9,5,-40,-12,-88,-26,-138,-37,-187,-42,-239,-37,-284,-19,-322,14,-349,60,-358,108,-348,156,-324,199,-289,235,-263,256,-251,267", "140,53,107,44,60,25,13,7,-36,-11,-84,-25,-134,-37,-183,-42,-234,-38,-281,-21,-319,11,-347,56,-358,104,-350,152,-326,196,-293,232,-266,253,-255,265", "148,56,115,47,68,28,21,10,-27,-8,-76,-23,-125,-35,-175,-42,-226,-39,-273,-25,-313,4,-344,48,-357,95,-353,144,-331,189,-299,227,-273,248,-262,260", "165,62,131,54,84,34,37,16,-11,-2,-59,-18,-108,-31,-159,-40,-208,-41,-258,-31,-300,-7,-335,33,-355,78,-356,128,-340,174,-311,215,-287,238,-276,250", "173,65,139,57,92,38,45,19,-2,1,-51,-16,-99,-29,-150,-39,-199,-42,-250,-34,-294,-12,-330,25,-352,70,-357,119,-344,167,-316,208,-293,232,-282,244", "176,67,143,58,96,39,49,20,2,2,-47,-14,-95,-28,-146,-39,-195,-42,-246,-35,-290,-15,-327,21,-351,66,-358,115,-346,163,-319,205,-296,229,-285,242", "184,70,152,62,104,43,57,24,10,5,-39,-12,-87,-26,-137,-37,-187,-42,-238,-37,-283,-19,-321,14,-348,59,-358,107,-349,155,-324,198,-302,223,-292,236", "192,73,160,65,112,46,65,27,18,8,-31,-9,-79,-24,-129,-36,-178,-42,-229,-39,-276,-23,-315,7,-345,51,-358,99,-352,148,-329,192,-308,217,-298,230", "200,76,168,68,120,49,73,30,26,11,-22,-6,-71,-22,-120,-34,-170,-41,-221,-40,-269,-27,-309,1,-341,43,-357,90,-354,139,-334,185,-314,211,-304,224", "208,79,176,71,128,52,81,33,34,14,-14,-3,-63,-19,-111,-32,-162,-40,-212,-41,-261,-30,-303,-5,-337,36,-355,82,-356,131,-338,177,-319,205,-310,218", "216,82,183,74,136,56,89,36,42,18,-6,0,-54,-17,-102,-30,-154,-40,-203,-42,-253,-33,-296,-10,-332,28,-353,73,-357,123,-342,170,-325,198,-316,212", "224,85,191,77,144,59,97,40,50,21,3,3,-46,-14,-94,-28,-145,-38,-194,-42,-245,-35,-290,-15,-326,20,-351,66,-358,114,-346,162,-330,191,-321,205", "233,88,199,80,152,62,105,43,58,24,11,6,-38,-12,-86,-26,-136,-37,-186,-42,-237,-37,-283,-20,-321,13,-348,58,-358,106,-349,155,-334,184,-326,198", "241,91,207,83,160,65,113,46,66,27,19,9,-30,-9,-78,-24,-128,-36,-178,-42,-228,-39,-275,-24,-315,6,-345,50,-358,98,-352,147,-339,177,-331,191", "249,93,215,86,168,68,121,49,74,30,27,12,-21,-6,-70,-21,-119,-34,-169,-41,-220,-40,-268,-27,-309,0,-341,43,-357,89,-354,139,-343,169,-335,184", "258,96,224,89,176,71,129,53,82,33,34,15,-13,-3,-62,-19,-110,-32,-161,-40,-211,-41,-260,-30,-302,-6,-336,35,-355,81,-356,130,-346,162,-340,177", "266,99,232,92,184,74,137,56,90,37,42,18,-5,0,-54,-17,-101,-30,-153,-39,-202,-42,-252,-33,-296,-11,-331,27,-353,72,-357,122,-349,154,-343,169", "274,101,240,95,192,78,145,59,98,40,50,21,4,3,-45,-14,-93,-28,-144,-38,-193,-42,-244,-36,-289,-16,-326,19,-351,65,-358,113,-352,146,-347,162", "282,104,249,98,200,81,153,62,106,43,58,24,11,6,-37,-11,-85,-26,-136,-37,-185,-42,-236,-38,-282,-20,-320,12,-348,57,-358,105,-354,138,-350,154", "290,106,257,100,208,83,161,65,114,46,66,27,19,9,-29,-8,-77,-24,-127,-35,-177,-42,-227,-39,-275,-24,-314,6,-344,49,-357,97,-356,130,-352,146", "298,108,265,103,216,86,169,69,122,50,74,31,27,12,-21,-6,-69,-21,-118,-34,-169,-41,-219,-40,-267,-28,-308,-1,-340,42,-356,88,-357,121,-354,137", "306,110,273,106,224,89,177,72,130,53,82,34,35,15,-12,-3,-61,-19,-109,-32,-160,-40,-210,-41,-259,-31,-302,-6,-336,34,-355,80,-358,113,-356,129", "314,112,282,108,233,92,185,75,138,56,90,37,43,18,-4,0,-53,-16,-100,-30,-152,-39,-201,-42,-252,-33,-295,-11,-331,26,-353,72,-358,105,-357,121", "323,114,290,110,241,95,193,78,146,59,99,40,51,21,4,3,-45,-14,-92,-28,-143,-38,-192,-42,-243,-36,-288,-16,-325,19,-350,64,-357,96,-357,113", "332,116,298,112,250,98,201,81,154,63,107,44,59,25,12,6,-36,-11,-84,-25,-135,-37,-184,-42,-235,-38,-281,-20,-319,12,-347,56,-356,88,-357,104", "340,117,306,114,258,101,209,84,162,66,115,47,67,28,20,9,-28,-8,-76,-23,-126,-35,-176,-42,-227,-39,-274,-24,-313,5,-344,49,-355,79,-356,96", "349,119,314,116,266,103,217,87,170,69,123,50,75,31,28,12,-20,-5,-68,-21,-117,-33,-168,-41,-218,-41,-266,-28,-307,-1,-340,41,-353,71,-355,87", "358,120,322,118,274,106,225,90,178,72,131,53,83,34,36,15,-11,-2,-60,-19,-108,-31,-159,-40,-209,-41,-259,-31,-301,-7,-335,33,-350,63,-353,80", "366,121,331,120,282,108,234,93,186,75,139,57,91,37,44,19,-3,1,-52,-16,-99,-29,-151,-39,-200,-42,-251,-34,-294,-12,-330,25,-347,56,-351,72", "374,122,340,122,291,110,242,96,194,78,147,60,99,41,52,22,5,4,-44,-13,-91,-27,-142,-38,-191,-42,-243,-36,-287,-17,-325,18,-344,48,-348,64", "382,122,349,123,299,113,250,98,202,81,155,63,107,44,60,25,13,7,-35,-11,-83,-25,-134,-37,-183,-42,-234,-38,-280,-21,-319,11,-340,40,-345,56", "390,122,358,124,306,115,259,101,210,84,163,66,115,47,68,28,21,10,-27,-8,-75,-23,-125,-35,-175,-42,-226,-39,-273,-25,-313,4,-335,33,-341,48", "398,122,366,125,314,116,267,104,218,87,171,69,123,50,76,31,29,13,-19,-5,-67,-21,-116,-33,-167,-41,-217,-41,-266,-28,-307,-2,-330,25,-336,40", "407,122,375,126,323,118,275,106,226,90,179,72,132,54,84,34,37,16,-11,-2,-59,-18,-107,-31,-158,-40,-208,-41,-258,-31,-300,-7,-324,17,-331,32", "415,121,383,126,332,120,283,108,235,93,187,75,140,57,92,38,45,19,-2,1,-51,-16,-99,-29,-150,-39,-199,-42,-250,-34,-294,-12,-318,10,-326,25", "424,120,391,127,341,122,291,111,243,96,195,78,148,60,100,41,53,22,6,4,-43,-13,-91,-27,-141,-38,-190,-42,-242,-36,-287,-17,-312,4,-321,18", "432,118,399,127,350,123,299,113,251,99,203,81,156,63,108,44,61,25,14,7,-35,-10,-83,-25,-133,-36,-182,-42,-233,-38,-280,-21,-306,-2,-315,12", "441,117,408,126,359,124,307,115,260,101,210,84,164,66,116,47,69,28,22,10,-26,-8,-75,-23,-124,-35,-174,-41,-225,-40,-272,-25,-300,-8,-310,6", "449,114,417,125,367,125,315,117,268,104,219,87,172,70,124,51,77,32,30,13,-18,-5,-67,-20,-115,-33,-166,-41,-216,-41,-265,-29,-293,-13,-304,0", "456,111,425,124,375,126,324,119,276,106,227,90,180,73,132,54,85,35,38,16,-10,-2,-58,-18,-106,-31,-158,-40,-207,-41,-257,-32,-286,-17,-297,-5", "464,108,434,123,384,126,333,120,284,109,235,93,188,76,140,57,93,38,46,19,-1,1,-50,-15,-98,-29,-149,-39,-198,-42,-249,-34,-279,-22,-291,-9", "471,104,442,121,392,127,342,122,292,111,244,96,196,79,148,60,101,41,54,22,7,4,-42,-13,-90,-27,-141,-38,-190,-42,-241,-36,-272,-25,-284,-14", "478,100,451,118,400,126,351,123,300,113,252,99,203,82,157,64,109,45,62,26,15,7,-34,-10,-82,-25,-132,-36,-181,-42,-232,-38,-264,-29,-277,-18", "484,96,459,115,408,126,359,124,308,115,260,102,211,85,165,67,117,48,70,29,23,10,-25,-7,-74,-23,-123,-35,-173,-41,-224,-40,-256,-32,-270,-21", "490,91,466,112,417,125,368,125,316,117,269,104,220,88,173,70,125,51,78,32,31,13,-17,-4,-66,-20,-114,-33,-165,-41,-215,-41,-248,-34,-262,-24", "496,86,474,108,426,124,376,126,325,119,277,107,228,91,180,73,133,54,86,35,39,16,-9,-1,-58,-18,-106,-31,-157,-40,-206,-42,-240,-37,-255,-27", "502,80,481,104,435,122,385,126,334,121,285,109,236,94,188,76,141,58,94,38,47,20,0,2,-49,-15,-97,-29,-148,-39,-197,-42,-232,-38,-247,-30", "508,74,487,99,443,120,393,127,343,122,293,111,245,96,196,79,149,61,102,42,55,23,8,5,-41,-13,-89,-27,-140,-38,-189,-42,-223,-40,-239,-32", "513,67,494,94,451,118,401,126,352,123,301,113,253,99,204,82,157,64,110,45,63,26,16,8,-33,-10,-81,-25,-131,-36,-181,-42,-215,-41,-230,-33", "518,60,500,89,459,115,409,126,360,125,309,115,261,102,212,85,165,67,118,48,71,29,24,11,-25,-7,-73,-22,-122,-34,-172,-41,-206,-42,-222,-34", "523,52,506,83,467,111,418,125,369,125,317,117,270,104,220,88,173,70,126,51,79,32,31,14,-16,-4,-65,-20,-113,-33,-164,-41,-197,-42,-213,-35", "527,44,511,76,474,108,427,124,377,126,326,119,278,107,229,91,181,73,134,55,87,36,39,17,-8,-1,-57,-17,-105,-31,-156,-40,-188,-42,-205,-36", "531,36,517,69,481,103,436,122,385,126,335,121,286,109,237,94,189,76,142,58,95,39,47,20,0,2,-49,-15,-96,-29,-147,-39,-180,-42,-197,-36", "535,28,522,62,488,99,444,120,394,127,344,122,294,111,246,97,197,79,150,61,103,42,55,23,9,5,-40,-12,-88,-27,-139,-37,-172,-41,-189,-36", "538,20,527,54,494,94,452,118,402,126,353,124,302,113,254,99,205,82,158,64,111,45,63,26,16,8,-32,-10,-80,-24,-130,-36,-164,-41,-180,-35", "540,12,532,45,501,88,460,115,410,126,361,125,310,115,262,102,213,85,166,67,119,49,71,29,24,11,-24,-7,-72,-22,-121,-34,-155,-40,-172,-35", "542,4,535,37,506,82,468,111,419,125,370,126,318,117,270,105,221,88,174,71,127,52,79,33,32,14,-15,-4,-64,-20,-113,-32,-147,-39,-164,-34", "543,-3,539,29,512,75,475,107,428,124,378,126,327,119,279,107,230,91,182,74,135,55,87,36,40,17,-7,-1,-56,-17,-104,-30,-138,-37,-155,-33", "545,-12,542,21,517,68,482,103,437,122,386,126,336,121,287,109,238,94,190,77,143,58,95,39,48,20,1,2,-48,-15,-95,-28,-130,-36,-147,-32", "545,-20,544,13,523,61,489,98,445,120,394,127,345,122,295,112,246,97,198,80,151,61,104,42,56,23,9,5,-39,-12,-87,-26,-121,-34,-138,-31", "545,-28,546,5,527,53,495,93,453,117,402,126,354,124,303,114,255,100,206,83,159,65,112,46,64,27,17,8,-31,-9,-79,-24,-112,-32,-129,-29", "544,-36,548,-3,532,44,501,87,461,114,411,126,362,125,311,116,263,102,214,86,167,68,120,49,72,30,25,11,-23,-6,-71,-22,-103,-30,-121,-27", "543,-44,549,-12,536,36,507,81,469,111,420,125,371,126,319,117,271,105,222,89,175,71,128,52,80,33,33,14,-15,-3,-63,-19,-95,-28,-112,-25", "542,-52,549,-21,539,28,513,75,476,107,429,124,379,126,328,119,279,107,231,92,183,74,136,55,88,36,41,17,-6,0,-55,-17,-87,-26,-104,-24", "539,-60,549,-29,542,20,518,68,483,102,437,122,387,127,337,121,287,110,239,94,191,77,144,59,96,39,49,21,2,3,-47,-14,-79,-24,-96,-22", "536,-68,549,-37,545,12,523,60,489,98,446,120,395,127,346,123,296,112,247,97,199,80,152,62,104,43,57,24,10,6,-39,-12,-71,-22,-88,-19", "533,-75,547,-46,546,4,528,52,496,92,454,117,403,126,354,124,303,114,256,100,207,83,160,65,112,46,65,27,18,9,-30,-9,-63,-19,-80,-17", "529,-82,546,-54,548,-4,532,43,502,87,462,114,412,126,363,125,311,116,264,103,215,86,168,68,120,49,73,30,26,12,-22,-6,-54,-17,-72,-15", "524,-89,543,-62,549,-13,536,35,508,81,469,110,421,125,371,126,320,118,272,105,223,89,176,71,129,52,81,33,34,15,-14,-3,-46,-14,-64,-12", "519,-95,540,-70,549,-22,540,27,513,74,477,106,430,123,380,126,329,120,280,108,231,92,184,74,137,56,89,37,42,18,-5,0,-38,-12,-56,-10", "514,-101,536,-78,549,-30,542,19,518,67,484,102,438,122,388,127,338,121,288,110,240,95,192,77,145,59,97,40,50,21,3,3,-30,-9,-47,-7", "508,-107,532,-85,549,-38,545,11,524,59,490,97,447,119,396,127,347,123,296,112,248,98,200,80,153,62,105,43,58,24,11,6,-21,-6,-39,-5", "502,-112,527,-92,547,-46,547,3,528,51,496,92,455,117,404,126,355,124,304,114,256,100,208,83,161,65,113,46,66,27,19,9,-13,-3,-31,-2", "495,-117,522,-98,545,-55,548,-5,533,42,502,86,463,114,413,126,364,125,312,116,265,103,215,86,169,68,121,50,74,30,27,12,-5,0,-22,1", "488,-122,516,-105,543,-63,549,-14,537,34,508,80,470,110,422,125,372,126,321,118,273,105,224,89,177,72,129,53,82,34,35,15,4,3,-14,4", "481,-127,510,-111,540,-71,549,-22,540,26,514,73,478,106,431,123,381,126,330,120,281,108,232,92,185,75,137,56,90,37,43,18,12,6,-6,7", "474,-131,504,-116,536,-78,549,-31,543,18,519,66,484,101,439,121,389,127,339,121,289,110,241,95,193,78,145,59,98,40,51,21,19,9,2,10", "467,-134,497,-121,532,-86,549,-39,545,10,524,58,491,97,447,119,397,127,348,123,297,112,249,98,200,81,153,62,106,43,59,24,27,12,10,13", "459,-137,490,-126,527,-92,547,-47,547,2,529,50,497,91,456,116,405,126,356,124,305,114,257,101,208,84,162,66,114,47,67,28,35,15,18,16", "451,-140,483,-131,522,-99,545,-56,548,-6,533,42,503,86,463,113,414,126,365,125,313,116,266,103,216,86,170,69,122,50,75,31,43,18,26,19", "443,-143,475,-135,516,-105,542,-64,549,-15,537,33,509,79,471,109,423,125,373,126,322,118,274,106,225,89,177,72,130,53,83,34,51,21,34,22", "435,-145,468,-138,510,-111,539,-72,549,-23,540,25,514,73,478,105,432,123,381,126,331,120,282,108,233,92,185,75,138,56,91,37,59,25,42,25", "427,-147,460,-142,503,-117,535,-79,549,-32,543,17,520,65,485,101,440,121,390,127,340,122,290,110,242,95,193,78,146,60,99,40,67,28,50,28", "419,-149,452,-145,497,-122,531,-86,548,-40,545,9,525,58,491,96,448,119,398,127,348,123,298,112,250,98,201,81,154,63,107,44,75,31,58,31", "411,-151,444,-147,490,-127,526,-93,547,-48,547,2,529,49,498,91,456,116,406,126,357,124,306,114,258,101,209,84,162,66,115,47,83,34,66,35", "403,-152,436,-150,482,-131,521,-100,545,-56,548,-7,534,41,504,85,464,113,415,126,366,125,314,116,266,103,217,87,170,69,123,50,91,37,74,38", "395,-153,428,-152,475,-135,515,-106,542,-65,549,-16,537,33,509,79,472,109,424,124,374,126,323,118,275,106,226,90,178,72,131,53,99,41,82,41", "386,-153,420,-154,467,-139,509,-112,539,-72,549,-24,541,24,515,72,479,105,433,123,382,126,332,120,283,108,234,93,186,75,139,57,107,44,90,44", "378,-154,411,-155,460,-142,503,-117,535,-80,549,-33,543,16,520,65,486,100,441,121,391,127,341,122,291,110,242,96,194,78,147,60,115,47,98,48", "370,-154,403,-156,452,-145,496,-122,531,-87,548,-41,545,9,525,57,492,96,449,119,399,127,349,123,299,113,251,98,202,81,155,63,124,50,106,51", "361,-154,394,-157,443,-148,489,-127,526,-94,547,-49,547,1,530,48,498,90,457,116,407,126,358,124,307,115,259,101,210,84,163,66,132,54,114,54", "353,-153,385,-158,435,-150,481,-132,520,-100,545,-57,548,-8,534,40,504,84,465,112,416,125,367,125,315,117,267,104,218,87,171,69,140,57,122,57", "345,-153,377,-158,427,-152,474,-136,514,-107,542,-65,549,-17,538,32,510,78,472,109,425,124,375,126,324,118,275,106,227,90,179,73,148,60,130,61", "336,-152,369,-158,419,-154,466,-139,508,-113,538,-73,549,-25,541,24,515,71,480,104,433,123,383,126,333,120,284,108,235,93,187,76,156,63,138,64", "328,-151,361,-158,410,-155,459,-142,502,-118,535,-81,549,-33,543,16,521,64,486,100,442,121,391,127,342,122,292,111,243,96,195,79,164,66,146,67", "320,-150,352,-158,402,-156,451,-145,495,-123,530,-88,548,-41,546,8,526,56,493,95,450,118,399,127,350,123,300,113,252,99,203,82,172,70,154,70", "312,-148,344,-157,393,-157,442,-148,488,-128,525,-95,547,-50,547,0,530,47,499,90,458,115,408,126,359,124,308,115,260,101,211,84,180,73,162,73", "303,-147,335,-156,385,-158,434,-150,481,-132,520,-101,544,-58,549,-9,534,39,505,84,466,112,417,125,367,125,316,117,268,104,219,87,188,76,170,77", "295,-145,326,-155,376,-158,426,-152,473,-136,514,-107,541,-66,549,-17,538,31,511,77,473,108,426,124,376,126,325,119,276,106,227,90,196,79,178,80", "287,-143,318,-154,368,-158,418,-154,466,-139,508,-113,538,-74,549,-26,541,23,516,70,480,104,434,123,384,126,334,120,284,109,236,93,203,82,186,83", "279,-140,310,-152,360,-158,410,-155,458,-143,501,-118,534,-81,549,-34,544,15,521,63,487,99,443,121,392,127,342,122,292,111,244,96,211,85,194,86", "270,-138,302,-151,351,-158,401,-156,450,-146,494,-123,530,-88,548,-42,546,7,526,55,493,94,451,118,400,126,351,123,300,113,253,99,220,88,202,89", "263,-135,294,-149,343,-157,392,-157,442,-148,487,-128,525,-95,546,-51,547,-1,531,47,499,89,459,115,409,126,360,125,308,115,261,102,228,91,210,92", "255,-133,285,-147,334,-156,384,-158,433,-150,480,-132,519,-102,544,-59,549,-10,535,38,505,83,467,112,418,125,368,125,317,117,269,104,236,94,219,95", "247,-130,277,-144,326,-155,376,-158,425,-152,472,-136,513,-108,541,-67,549,-18,538,30,511,77,474,108,427,124,377,126,326,119,277,107,245,96,227,98", "240,-127,269,-142,317,-154,367,-158,417,-154,465,-140,507,-114,538,-75,549,-27,541,22,517,70,481,104,435,122,385,126,335,121,285,109,253,99,235,101", "232,-123,261,-139,309,-152,359,-158,409,-155,457,-143,501,-119,534,-82,549,-35,544,14,522,62,488,99,444,120,393,127,343,122,293,111,261,102,244,104", "224,-120,253,-137,301,-150,350,-157,400,-156,449,-146,494,-124,529,-89,548,-43,546,6,527,54,494,94,452,118,401,126,352,124,301,113,270,104,252,106", "216,-116,245,-134,293,-149,342,-157,392,-157,441,-148,487,-129,524,-96,546,-52,548,-2,531,46,500,88,460,115,410,126,361,125,309,115,278,107,260,109", "208,-112,237,-130,284,-146,333,-156,383,-158,432,-151,479,-133,519,-102,544,-60,549,-11,535,37,506,82,467,111,419,125,369,125,318,117,286,109,268,111", "200,-108,229,-127,276,-144,325,-155,375,-158,424,-153,472,-137,513,-109,541,-68,549,-19,539,29,512,76,475,107,427,124,378,126,327,119,294,111,276,114", "192,-104,222,-124,268,-142,317,-153,366,-158,416,-154,464,-140,506,-114,537,-75,549,-28,542,21,517,69,482,103,436,122,386,126,335,121,302,113,284,116", "184,-101,214,-120,260,-139,308,-152,358,-158,408,-155,456,-143,500,-119,533,-83,549,-36,544,13,522,61,488,98,444,120,394,127,344,122,310,115,292,118", "176,-98,206,-116,252,-136,300,-150,350,-157,399,-157,448,-146,493,-124,529,-90,548,-44,546,5,527,53,495,93,453,117,402,126,353,124,318,117,301,121", "169,-94,198,-112,244,-133,292,-148,341,-157,391,-157,440,-149,486,-129,524,-97,546,-53,548,-3,532,45,501,88,460,114,411,126,362,125,327,119,310,123", "161,-91,190,-108,236,-130,283,-146,332,-156,382,-158,432,-151,478,-133,518,-103,544,-61,549,-12,536,36,507,82,468,111,420,125,370,126,336,121,319,125", "154,-89,182,-105,229,-127,275,-144,324,-155,374,-158,424,-153,471,-137,512,-109,540,-69,549,-20,539,28,512,75,476,107,428,124,378,126,345,122,328,127", "146,-86,174,-101,221,-123,267,-141,316,-153,366,-158,415,-154,463,-140,506,-115,537,-76,549,-29,542,20,518,68,482,103,437,122,387,126,354,124,336,128", "137,-83,167,-98,213,-119,259,-139,308,-152,357,-158,407,-156,455,-144,499,-120,533,-84,549,-37,544,12,523,61,489,98,445,120,395,127,362,125,345,130", "129,-80,159,-95,205,-115,251,-136,299,-150,349,-157,398,-157,447,-146,492,-125,528,-91,548,-45,546,4,528,52,495,93,453,117,403,126,371,126,354,131", "121,-78,152,-92,197,-112,244,-133,291,-148,340,-157,390,-157,439,-149,485,-129,523,-97,546,-53,548,-4,532,44,501,87,461,114,412,126,379,126,362,132", "113,-76,144,-89,189,-108,236,-130,283,-146,331,-156,381,-158,431,-151,477,-134,517,-104,543,-62,549,-12,536,36,507,81,469,111,421,125,387,127,371,133", "105,-74,135,-87,181,-104,228,-126,274,-144,323,-155,373,-158,423,-153,470,-137,511,-110,540,-69,549,-21,539,27,513,75,476,106,429,124,395,127,379,134", "97,-72,127,-84,173,-101,220,-123,266,-141,315,-153,365,-158,414,-154,462,-141,505,-115,536,-77,549,-29,542,19,518,67,483,102,438,122,403,126,387,134", "88,-70,119,-82,166,-98,212,-119,258,-138,307,-152,356,-158,406,-156,455,-144,498,-120,532,-84,549,-38,545,11,523,60,490,97,446,120,412,126,397,134", "80,-69,111,-80,158,-95,204,-115,251,-136,298,-150,348,-157,398,-157,446,-147,492,-125,528,-91,547,-46,547,4,528,52,496,92,454,117,421,125,406,133", "71,-68,104,-78,151,-92,196,-111,243,-133,290,-148,339,-157,389,-157,438,-149,484,-130,522,-98,545,-54,548,-5,533,43,502,87,462,114,430,123,415,133", "63,-67,95,-76,143,-89,188,-107,235,-129,282,-146,330,-156,380,-158,430,-151,477,-134,517,-104,543,-62,549,-13,536,35,508,80,470,110,438,122,424,131", "55,-67,87,-75,135,-86,180,-104,227,-126,273,-143,322,-154,372,-158,422,-153,469,-138,511,-110,540,-70,549,-22,540,27,513,74,477,106,447,119,433,130", "46,-67,78,-73,126,-84,173,-101,219,-122,265,-141,314,-153,364,-158,414,-155,462,-141,504,-116,536,-78,549,-30,543,19,519,67,484,102,455,117,441,128", "37,-67,70,-72,118,-82,165,-98,211,-119,258,-138,306,-151,355,-158,405,-156,454,-144,498,-121,532,-85,549,-38,545,11,524,59,490,97,463,114,450,125", "29,-67,62,-72,110,-79,158,-95,203,-115,250,-135,298,-150,347,-157,397,-157,446,-147,491,-126,527,-92,547,-47,547,3,529,51,497,92,470,110,458,122", "20,-68,54,-71,103,-78,150,-92,195,-111,242,-132,289,-148,338,-156,388,-158,437,-149,483,-130,522,-99,545,-55,548,-5,533,42,503,86,478,106,466,119", "12,-69,45,-71,95,-76,142,-89,187,-107,234,-129,281,-145,329,-155,380,-158,429,-151,476,-135,516,-105,543,-63,549,-14,537,34,508,80,484,101,474,115", "4,-71,37,-71,86,-74,134,-86,179,-104,226,-126,272,-143,321,-154,371,-158,421,-153,468,-138,510,-111,539,-71,549,-23,540,26,514,73,491,97,481,110", "-5,-73,29,-72,78,-73,126,-84,172,-100,218,-122,264,-140,313,-153,363,-158,413,-155,461,-141,504,-116,536,-79,549,-31,543,18,519,66,497,91,488,105", "-13,-75,20,-73,69,-72,118,-81,164,-97,210,-118,257,-138,305,-151,354,-158,404,-156,453,-144,497,-122,531,-86,548,-39,545,10,524,58,503,86,494,100", "-21,-77,12,-74,61,-72,110,-79,157,-94,202,-114,249,-135,297,-149,346,-157,396,-157,445,-147,490,-126,527,-93,547,-48,547,2,529,50,509,79,501,94", "-29,-80,4,-75,53,-71,102,-77,150,-92,194,-110,241,-132,288,-147,337,-156,387,-158,436,-150,483,-131,521,-99,545,-56,548,-6,533,41,514,73,507,88", "-37,-83,-4,-77,45,-71,94,-76,141,-89,186,-107,233,-129,280,-145,329,-155,379,-158,428,-152,475,-135,515,-106,542,-64,549,-15,537,33,520,65,513,81", "-45,-86,-12,-79,36,-71,85,-74,133,-86,179,-103,225,-125,272,-143,321,-154,370,-158,420,-153,468,-138,509,-112,539,-72,549,-24,540,25,525,58,519,73", "-53,-90,-20,-82,28,-72,77,-73,125,-83,171,-100,217,-122,264,-140,312,-153,362,-158,412,-155,460,-142,503,-117,535,-79,549,-32,543,17,529,49,524,65", "-61,-93,-28,-84,19,-73,68,-72,117,-81,163,-97,209,-118,256,-138,304,-151,354,-158,403,-156,452,-145,496,-122,531,-87,548,-40,545,9,534,41,529,56", "-68,-97,-36,-87,11,-74,60,-72,109,-79,156,-94,201,-114,248,-135,296,-149,345,-157,395,-157,444,-147,489,-127,526,-93,547,-49,547,1,537,33,533,48", "-75,-101,-44,-90,3,-76,52,-71,101,-77,149,-91,193,-110,240,-132,288,-147,336,-156,386,-158,435,-150,482,-131,521,-100,545,-57,548,-7,541,24,537,40", "-83,-105,-52,-94,-5,-77,44,-71,93,-76,140,-88,186,-106,232,-128,279,-145,328,-155,378,-158,427,-152,474,-135,515,-106,542,-65,549,-16,543,16,540,32", "-90,-109,-59,-97,-13,-80,35,-71,84,-74,132,-86,178,-103,225,-125,271,-142,320,-154,370,-158,419,-154,467,-139,509,-112,539,-73,549,-25,545,8,543,25", "-98,-114,-67,-101,-21,-82,27,-72,76,-73,124,-83,170,-100,217,-121,263,-140,312,-153,361,-158,411,-155,459,-142,502,-117,535,-80,549,-33,547,1,545,17", "-105,-118,-74,-105,-29,-85,19,-73,68,-72,116,-81,163,-97,209,-117,255,-137,303,-151,353,-158,403,-156,451,-145,496,-123,530,-87,548,-41,548,-8,547,8", "-112,-122,-81,-109,-37,-88,10,-74,59,-72,108,-79,155,-94,201,-113,247,-134,295,-149,344,-157,394,-157,443,-148,489,-127,526,-94,547,-49,549,-17,549,0", "-119,-127,-89,-113,-45,-91,2,-76,51,-71,100,-77,148,-91,193,-110,239,-131,287,-147,335,-156,385,-158,434,-150,481,-132,520,-101,544,-58,549,-25,550,-9", "-126,-132,-96,-118,-52,-94,-6,-78,43,-71,92,-75,139,-88,185,-106,232,-128,278,-145,327,-155,377,-158,427,-152,474,-136,514,-107,542,-66,549,-33,550,-17", "-133,-136,-103,-122,-60,-98,-14,-80,34,-71,83,-74,131,-85,177,-103,224,-125,270,-142,319,-154,369,-158,418,-154,466,-139,508,-113,538,-73,548,-42,550,-25", "-140,-141,-110,-126,-67,-102,-22,-82,26,-72,75,-73,123,-83,169,-99,216,-121,262,-140,311,-152,360,-158,410,-155,458,-142,502,-118,534,-81,547,-50,549,-34", "-147,-146,-117,-131,-75,-105,-30,-85,18,-73,67,-72,115,-81,162,-96,208,-117,254,-137,302,-151,352,-158,402,-156,450,-145,495,-123,530,-88,544,-58,548,-42", "-154,-150,-124,-136,-82,-110,-38,-88,10,-74,59,-71,107,-79,155,-93,200,-113,246,-134,294,-149,343,-157,393,-157,442,-148,488,-128,525,-95,541,-66,546,-50", "-161,-155,-131,-140,-89,-114,-45,-91,1,-76,50,-71,100,-77,147,-91,192,-109,239,-131,286,-147,335,-156,384,-158,434,-150,480,-132,520,-101,538,-74,543,-58", "-168,-160,-138,-145,-97,-118,-53,-95,-7,-78,42,-71,91,-75,138,-88,184,-106,231,-128,277,-144,326,-155,376,-158,426,-152,473,-136,514,-108,534,-81,540,-66", "-175,-164,-145,-149,-104,-122,-61,-98,-15,-80,33,-72,82,-74,130,-85,176,-102,223,-124,269,-142,318,-154,368,-158,418,-154,465,-140,507,-113,530,-88,537,-74", "-182,-169,-152,-154,-111,-127,-68,-102,-23,-82,25,-72,74,-73,122,-83,169,-99,215,-120,261,-139,310,-152,359,-158,409,-155,458,-143,501,-119,525,-95,532,-81", "-188,-173,-159,-159,-118,-131,-75,-106,-31,-85,17,-73,66,-72,114,-80,161,-96,207,-117,253,-137,302,-151,351,-158,401,-156,450,-146,494,-124,519,-102,528,-88", "-195,-178,-166,-164,-125,-136,-83,-110,-39,-88,9,-74,58,-71,106,-78,154,-93,199,-113,246,-134,293,-149,342,-157,392,-157,441,-148,487,-128,513,-108,522,-94", "-202,-183,-173,-168,-132,-141,-90,-114,-46,-91,0,-76,50,-71,99,-77,146,-90,191,-109,238,-131,285,-147,334,-156,383,-158,433,-151,479,-133,507,-114,517,-100", "-210,-187,-180,-173,-139,-145,-97,-119,-54,-95,-8,-78,41,-71,90,-75,138,-87,183,-105,230,-127,276,-144,325,-155,375,-158,425,-152,472,-136,501,-119,511,-106", "-217,-192,-187,-177,-146,-150,-104,-123,-62,-99,-16,-80,33,-72,82,-74,129,-85,175,-102,222,-124,268,-142,317,-154,367,-158,417,-154,465,-140,494,-124,505,-111", "-225,-196,-194,-182,-152,-155,-111,-127,-69,-102,-24,-83,24,-72,73,-73,121,-82,168,-99,214,-120,260,-139,309,-152,359,-158,408,-155,457,-143,486,-129,498,-116", "-233,-201,-201,-187,-159,-159,-118,-132,-76,-106,-32,-85,16,-73,65,-72,113,-80,160,-96,206,-116,253,-136,301,-150,350,-157,400,-156,449,-146,479,-133,491,-121", "-240,-206,-208,-191,-166,-164,-125,-137,-83,-110,-39,-89,8,-75,57,-71,106,-78,153,-93,198,-112,245,-133,292,-148,341,-157,391,-157,440,-149,472,-137,484,-125", "-248,-210,-215,-196,-174,-169,-133,-141,-91,-115,-47,-92,0,-76,49,-71,98,-77,145,-90,190,-108,237,-130,284,-146,333,-156,383,-158,432,-151,464,-140,477,-129", "-256,-214,-223,-201,-180,-173,-139,-146,-98,-119,-55,-95,-9,-78,40,-71,89,-75,137,-87,182,-105,229,-127,276,-144,324,-155,374,-158,424,-153,456,-143,469,-132", "-264,-217,-231,-205,-187,-178,-146,-150,-105,-123,-62,-99,-17,-80,32,-72,81,-74,129,-84,175,-102,221,-123,267,-141,316,-153,366,-158,416,-154,448,-146,462,-136", "-271,-221,-239,-210,-194,-182,-153,-155,-112,-128,-70,-103,-25,-83,23,-72,72,-73,120,-82,167,-98,213,-120,260,-139,308,-152,358,-158,408,-156,440,-149,454,-139", "-279,-224,-247,-214,-201,-187,-160,-160,-119,-132,-77,-107,-32,-86,15,-73,64,-72,113,-80,160,-95,205,-116,252,-136,300,-150,349,-157,399,-157,431,-151,446,-141", "-286,-227,-255,-218,-209,-192,-167,-165,-126,-137,-84,-111,-40,-89,7,-75,56,-71,105,-78,152,-93,197,-112,244,-133,292,-148,341,-157,390,-157,423,-153,438,-143", "-294,-230,-262,-222,-216,-196,-174,-169,-133,-142,-92,-115,-48,-92,-1,-76,48,-71,97,-76,144,-90,189,-108,236,-130,283,-146,332,-156,382,-158,415,-154,430,-145", "-301,-232,-270,-225,-224,-201,-181,-174,-140,-146,-99,-120,-56,-96,-9,-78,39,-71,88,-75,136,-87,181,-105,228,-127,275,-144,324,-155,374,-158,407,-156,422,-147", "-308,-235,-278,-228,-232,-206,-188,-178,-147,-151,-106,-124,-63,-99,-17,-81,31,-72,80,-73,128,-84,174,-101,220,-123,267,-141,315,-153,365,-158,398,-157,414,-148", "-317,-237,-285,-231,-240,-210,-195,-183,-154,-156,-113,-128,-70,-103,-25,-83,23,-72,71,-72,120,-82,166,-98,212,-119,259,-139,307,-152,357,-158,390,-157,405,-149", "-326,-240,-293,-234,-248,-214,-202,-188,-161,-160,-120,-133,-78,-107,-33,-86,14,-74,63,-72,112,-80,159,-95,204,-115,251,-136,299,-150,348,-157,381,-158,397,-150", "-334,-241,-300,-237,-255,-218,-209,-192,-168,-165,-127,-137,-85,-111,-41,-89,6,-75,55,-71,104,-78,152,-92,196,-111,243,-133,291,-148,340,-157,373,-158,389,-151", "-343,-243,-308,-239,-263,-222,-217,-197,-175,-170,-134,-142,-92,-116,-49,-92,-2,-77,47,-71,96,-76,143,-89,188,-108,235,-130,282,-146,331,-156,365,-158,381,-151", "-351,-244,-317,-242,-271,-225,-225,-202,-182,-174,-141,-147,-100,-120,-56,-96,-10,-79,38,-71,87,-75,135,-87,181,-104,227,-126,274,-143,323,-154,356,-158,373,-152", "-359,-245,-325,-244,-278,-229,-233,-206,-189,-179,-148,-151,-107,-124,-64,-100,-18,-81,30,-72,79,-73,127,-84,173,-101,220,-123,266,-141,315,-153,348,-157,364,-152", "-367,-246,-334,-246,-286,-232,-241,-211,-196,-183,-155,-156,-114,-129,-71,-104,-26,-84,22,-73,71,-72,119,-82,166,-98,212,-119,258,-138,306,-152,339,-157,356,-151", "-375,-247,-342,-247,-293,-234,-248,-215,-203,-188,-162,-161,-121,-133,-78,-108,-34,-86,14,-74,63,-72,111,-80,158,-95,204,-115,250,-135,298,-150,330,-156,347,-151", "-383,-247,-351,-249,-301,-237,-256,-219,-210,-193,-169,-166,-128,-138,-86,-112,-42,-90,5,-75,55,-71,103,-78,151,-92,196,-111,242,-132,290,-148,322,-154,339,-150", "-391,-247,-359,-250,-309,-239,-264,-222,-218,-197,-176,-170,-135,-143,-93,-116,-49,-93,-3,-77,46,-71,95,-76,143,-89,188,-107,235,-129,281,-146,314,-153,331,-150", "-400,-246,-367,-251,-318,-242,-272,-226,-226,-202,-183,-175,-142,-147,-100,-120,-57,-96,-11,-79,37,-71,87,-75,134,-86,180,-104,227,-126,273,-143,306,-151,323,-149", "-409,-246,-375,-251,-326,-244,-279,-229,-233,-207,-189,-179,-148,-152,-107,-125,-65,-100,-19,-81,29,-72,78,-73,126,-84,172,-100,219,-122,265,-141,298,-150,315,-147", "-417,-244,-383,-251,-335,-246,-287,-232,-241,-211,-196,-184,-155,-157,-114,-129,-72,-104,-27,-84,21,-73,70,-72,118,-81,165,-97,211,-118,257,-138,289,-148,306,-146", "-425,-243,-392,-251,-343,-248,-294,-235,-249,-215,-204,-188,-162,-161,-121,-134,-79,-108,-35,-87,13,-74,62,-72,110,-79,157,-94,203,-114,249,-135,281,-145,298,-144", "-433,-241,-401,-251,-352,-249,-302,-237,-257,-219,-211,-193,-169,-166,-128,-138,-87,-112,-43,-90,4,-75,54,-71,102,-78,150,-92,195,-111,242,-132,272,-143,290,-143", "-441,-239,-410,-250,-360,-250,-310,-240,-265,-223,-218,-198,-176,-171,-136,-143,-94,-116,-50,-93,-4,-77,45,-71,94,-76,142,-89,187,-107,234,-129,264,-140,282,-141", "-449,-237,-418,-249,-368,-251,-318,-242,-272,-226,-226,-203,-183,-175,-142,-148,-101,-121,-58,-97,-12,-79,37,-71,86,-74,133,-86,179,-103,226,-126,257,-138,274,-139", "-456,-234,-427,-247,-376,-251,-327,-244,-280,-229,-234,-207,-190,-180,-149,-152,-108,-125,-65,-101,-20,-81,28,-72,77,-73,125,-83,171,-100,218,-122,249,-135,266,-136", "-464,-231,-435,-245,-384,-251,-336,-246,-287,-232,-242,-211,-197,-184,-156,-157,-115,-130,-73,-104,-28,-84,20,-73,69,-72,117,-81,164,-97,210,-118,241,-132,258,-134", "-472,-227,-443,-243,-393,-251,-344,-248,-295,-235,-250,-216,-204,-189,-163,-162,-122,-134,-80,-108,-36,-87,12,-74,61,-72,109,-79,157,-94,202,-114,233,-129,250,-131", "-479,-223,-451,-241,-402,-251,-353,-249,-302,-237,-258,-219,-212,-194,-170,-167,-129,-139,-87,-113,-43,-90,4,-75,53,-71,102,-77,149,-91,194,-110,225,-125,242,-128", "-487,-219,-459,-238,-411,-250,-361,-250,-311,-240,-265,-223,-219,-198,-177,-171,-136,-144,-95,-117,-51,-94,-5,-77,44,-71,93,-76,141,-88,186,-107,217,-122,234,-125", "-494,-215,-467,-235,-419,-249,-369,-251,-319,-242,-273,-226,-227,-203,-184,-176,-143,-148,-102,-121,-59,-97,-13,-79,36,-71,85,-74,132,-86,178,-103,209,-118,225,-122", "-500,-210,-474,-231,-427,-247,-377,-251,-328,-245,-281,-230,-235,-208,-191,-180,-150,-153,-109,-126,-66,-101,-21,-82,27,-72,76,-73,124,-83,171,-100,201,-114,217,-118", "-507,-205,-482,-227,-436,-245,-385,-251,-337,-246,-288,-232,-243,-212,-198,-185,-157,-158,-116,-130,-73,-105,-29,-84,19,-73,68,-72,116,-81,163,-97,193,-110,209,-114", "-513,-200,-489,-223,-444,-243,-394,-251,-345,-248,-296,-235,-251,-216,-205,-189,-164,-162,-123,-135,-81,-109,-36,-87,11,-74,60,-72,109,-79,156,-94,185,-106,201,-111", "-520,-194,-497,-218,-451,-240,-403,-251,-353,-249,-303,-238,-259,-220,-212,-194,-171,-167,-130,-139,-88,-113,-44,-91,3,-76,52,-71,101,-77,148,-91,178,-103,194,-108", "-526,-189,-504,-213,-459,-238,-411,-250,-362,-250,-311,-240,-266,-223,-220,-199,-178,-172,-137,-144,-95,-117,-52,-94,-5,-77,43,-71,92,-76,140,-88,170,-100,186,-104", "-531,-182,-510,-208,-467,-234,-420,-248,-370,-251,-320,-243,-274,-227,-228,-204,-185,-176,-144,-149,-102,-122,-59,-98,-14,-80,35,-71,84,-74,132,-85,163,-97,178,-101", "-537,-176,-517,-203,-475,-231,-428,-247,-378,-251,-329,-245,-282,-230,-236,-208,-192,-181,-151,-153,-109,-126,-67,-101,-22,-82,26,-72,75,-73,124,-83,155,-94,171,-98", "-542,-170,-523,-197,-483,-227,-436,-245,-386,-251,-337,-247,-289,-233,-244,-212,-199,-185,-158,-158,-116,-131,-74,-105,-29,-85,18,-73,67,-72,116,-81,148,-91,163,-96", "-547,-163,-529,-191,-490,-222,-444,-243,-395,-251,-346,-248,-296,-235,-252,-216,-206,-190,-165,-163,-123,-135,-82,-109,-37,-88,10,-74,59,-71,108,-79,139,-88,155,-93", "-552,-156,-535,-185,-497,-218,-452,-240,-404,-250,-354,-249,-304,-238,-259,-220,-213,-194,-172,-168,-131,-140,-89,-113,-45,-91,2,-76,51,-71,100,-77,131,-85,147,-90", "-556,-149,-541,-178,-504,-213,-460,-237,-412,-250,-363,-250,-312,-240,-267,-224,-221,-199,-179,-172,-138,-145,-96,-118,-53,-94,-6,-78,42,-71,92,-75,123,-83,139,-87", "-560,-142,-546,-172,-511,-208,-468,-234,-421,-248,-371,-251,-321,-243,-275,-227,-229,-204,-185,-177,-144,-149,-103,-122,-60,-98,-14,-80,34,-72,83,-74,115,-81,131,-85", "-564,-134,-551,-165,-517,-202,-476,-230,-429,-247,-379,-251,-330,-245,-282,-230,-237,-208,-192,-181,-151,-154,-110,-127,-68,-102,-22,-82,26,-72,75,-73,107,-79,123,-83", "-568,-127,-556,-158,-524,-196,-484,-226,-437,-245,-387,-251,-338,-247,-290,-233,-245,-213,-199,-186,-158,-159,-117,-131,-75,-106,-30,-85,17,-73,66,-72,100,-77,115,-81", "-572,-119,-560,-151,-530,-190,-491,-222,-445,-242,-396,-251,-347,-248,-297,-236,-252,-217,-207,-190,-165,-163,-124,-136,-82,-110,-38,-88,9,-74,58,-71,91,-75,107,-79", "-575,-111,-565,-143,-536,-184,-498,-217,-453,-240,-405,-250,-355,-249,-305,-238,-260,-221,-214,-195,-172,-168,-131,-140,-90,-114,-46,-91,1,-76,50,-71,82,-74,98,-78", "-578,-103,-569,-136,-541,-178,-505,-212,-461,-237,-413,-249,-363,-250,-313,-241,-268,-224,-222,-200,-179,-173,-138,-145,-97,-118,-53,-95,-7,-78,41,-71,74,-73,90,-77", "-580,-95,-572,-128,-546,-171,-512,-207,-469,-233,-422,-248,-372,-251,-322,-243,-276,-227,-230,-204,-186,-177,-145,-150,-104,-123,-61,-98,-15,-80,33,-72,66,-72,82,-76", "-583,-88,-576,-120,-552,-164,-518,-202,-477,-230,-430,-246,-380,-251,-331,-245,-283,-230,-238,-209,-193,-182,-152,-154,-111,-127,-68,-102,-23,-83,25,-72,58,-71,74,-75", "-585,-79,-579,-112,-556,-157,-524,-196,-484,-226,-438,-244,-388,-251,-339,-247,-291,-233,-245,-213,-200,-186,-159,-159,-118,-132,-76,-106,-31,-85,17,-73,50,-71,66,-74", "-587,-71,-582,-104,-561,-150,-530,-190,-492,-221,-446,-242,-397,-251,-348,-248,-298,-236,-253,-217,-207,-191,-166,-164,-125,-136,-83,-110,-39,-88,8,-74,41,-71,57,-74", "-588,-63,-585,-96,-565,-143,-536,-184,-499,-217,-454,-240,-405,-250,-356,-250,-305,-238,-261,-221,-215,-195,-173,-169,-132,-141,-90,-114,-47,-92,0,-76,32,-72,49,-74", "-590,-55,-587,-88,-569,-135,-542,-177,-506,-212,-462,-237,-414,-249,-364,-250,-314,-241,-269,-224,-223,-200,-180,-173,-139,-146,-98,-119,-54,-95,-8,-78,24,-72,41,-74", "-591,-46,-589,-80,-573,-127,-547,-170,-512,-207,-470,-233,-423,-248,-372,-251,-323,-243,-276,-228,-230,-205,-187,-178,-146,-150,-105,-123,-62,-99,-16,-80,16,-73,33,-75", "-592,-38,-591,-72,-576,-120,-552,-163,-519,-201,-478,-229,-431,-246,-380,-251,-332,-245,-284,-231,-238,-209,-194,-182,-153,-155,-112,-128,-69,-102,-24,-83,8,-75,25,-76", "-592,-29,-593,-63,-579,-112,-557,-156,-525,-195,-485,-225,-439,-244,-389,-251,-340,-247,-291,-234,-246,-214,-201,-187,-160,-160,-119,-132,-76,-106,-32,-86,0,-76,16,-77", "-592,-21,-594,-55,-582,-103,-561,-149,-531,-189,-492,-221,-447,-242,-398,-251,-349,-248,-299,-236,-254,-218,-208,-191,-167,-164,-126,-137,-84,-111,-40,-89,-9,-78,8,-79", "-592,-13,-595,-46,-585,-95,-565,-142,-537,-183,-499,-216,-455,-239,-406,-250,-357,-250,-306,-239,-262,-221,-215,-196,-174,-169,-133,-141,-91,-115,-47,-92,-17,-80,0,-81", "-592,-5,-596,-38,-587,-87,-569,-134,-542,-176,-506,-211,-463,-236,-415,-249,-365,-250,-315,-241,-269,-225,-223,-201,-181,-174,-140,-146,-98,-119,-55,-95,-25,-83,-7,-83", "-592,4,-597,-29,-589,-79,-573,-127,-548,-170,-513,-206,-471,-233,-423,-248,-373,-251,-324,-244,-277,-228,-231,-205,-188,-178,-147,-151,-105,-124,-63,-99,-32,-86,-15,-85", "-591,12,-597,-21,-591,-71,-577,-119,-553,-163,-519,-200,-478,-229,-432,-246,-381,-251,-332,-246,-285,-231,-239,-210,-195,-183,-153,-155,-112,-128,-70,-103,-40,-89,-23,-88", "-590,21,-597,-12,-593,-62,-580,-111,-557,-156,-526,-195,-486,-225,-440,-244,-390,-251,-341,-247,-292,-234,-247,-214,-202,-187,-160,-160,-119,-133,-77,-107,-48,-92,-31,-91", "-589,29,-597,-4,-594,-54,-583,-103,-562,-148,-532,-189,-493,-220,-448,-242,-399,-251,-349,-249,-300,-236,-255,-218,-209,-192,-168,-165,-126,-137,-85,-111,-56,-96,-38,-94", "-587,37,-596,5,-595,-45,-585,-94,-566,-141,-537,-182,-500,-216,-456,-239,-407,-250,-358,-250,-307,-239,-263,-222,-216,-196,-175,-170,-134,-142,-92,-115,-63,-99,-46,-98", "-586,45,-595,13,-596,-37,-588,-86,-570,-133,-543,-176,-507,-211,-464,-236,-416,-249,-366,-251,-316,-242,-270,-225,-224,-201,-181,-174,-140,-147,-99,-120,-70,-103,-53,-101", "-584,54,-594,22,-597,-28,-590,-78,-573,-126,-548,-169,-514,-205,-472,-232,-424,-248,-374,-251,-325,-244,-278,-228,-232,-206,-188,-179,-147,-151,-106,-124,-78,-107,-60,-105", "-581,61,-593,30,-597,-20,-591,-70,-577,-118,-553,-162,-520,-200,-479,-229,-433,-246,-382,-251,-333,-246,-285,-231,-240,-210,-195,-183,-154,-156,-113,-128,-85,-111,-68,-109", "-579,69,-592,39,-597,-11,-593,-62,-580,-110,-558,-155,-526,-194,-487,-224,-441,-244,-391,-251,-342,-247,-293,-234,-248,-214,-202,-188,-161,-160,-120,-133,-92,-116,-75,-113", "-576,77,-590,47,-597,-3,-594,-53,-583,-102,-562,-148,-532,-188,-494,-220,-449,-241,-399,-251,-350,-249,-300,-237,-256,-218,-210,-192,-168,-165,-127,-138,-100,-120,-82,-117", "-573,85,-588,55,-596,6,-595,-45,-585,-94,-566,-140,-538,-182,-501,-215,-456,-239,-408,-250,-359,-250,-308,-239,-263,-222,-217,-197,-175,-170,-134,-142,-107,-124,-89,-122", "-570,93,-586,63,-595,14,-596,-36,-588,-86,-570,-133,-543,-175,-508,-210,-464,-236,-417,-249,-367,-251,-317,-242,-271,-225,-225,-202,-182,-175,-141,-147,-114,-129,-96,-126", "-567,101,-583,71,-594,23,-597,-27,-590,-77,-574,-125,-549,-168,-514,-205,-472,-232,-425,-247,-375,-251,-326,-244,-279,-229,-233,-206,-189,-179,-148,-152,-121,-133,-103,-130", "-563,109,-580,79,-593,31,-597,-19,-592,-69,-577,-117,-554,-161,-521,-199,-480,-228,-433,-246,-383,-251,-334,-246,-286,-232,-241,-211,-196,-184,-155,-156,-128,-138,-110,-135", "-559,116,-577,87,-591,40,-597,-10,-593,-61,-580,-109,-558,-154,-527,-193,-487,-224,-441,-244,-392,-251,-343,-248,-294,-234,-249,-215,-203,-188,-162,-161,-135,-143,-117,-139", "-555,123,-574,95,-590,48,-597,-2,-594,-52,-583,-101,-563,-147,-533,-187,-495,-219,-449,-241,-400,-251,-351,-249,-301,-237,-256,-219,-210,-193,-169,-166,-142,-147,-124,-144", "-551,130,-570,103,-588,56,-596,6,-595,-44,-586,-93,-567,-139,-539,-181,-502,-215,-457,-238,-409,-250,-359,-250,-309,-240,-264,-222,-218,-197,-176,-170,-148,-152,-131,-148", "-547,137,-567,111,-585,64,-595,15,-596,-35,-588,-85,-571,-132,-544,-174,-508,-210,-465,-235,-418,-249,-368,-251,-318,-242,-272,-226,-226,-202,-183,-175,-155,-157,-138,-153", "-542,144,-563,119,-583,72,-594,24,-597,-26,-590,-76,-574,-124,-549,-168,-515,-204,-473,-232,-426,-247,-376,-251,-327,-244,-279,-229,-234,-207,-190,-180,-162,-161,-145,-157", "-537,151,-559,126,-580,80,-593,32,-597,-18,-592,-68,-578,-116,-554,-160,-521,-199,-481,-228,-434,-245,-384,-251,-335,-246,-287,-232,-242,-211,-197,-184,-169,-166,-153,-162", "-532,158,-554,133,-577,88,-591,41,-597,-10,-593,-60,-581,-108,-559,-153,-528,-193,-488,-223,-442,-243,-392,-251,-344,-248,-294,-235,-250,-215,-204,-189,-177,-171,-160,-167", "-526,164,-550,140,-574,96,-589,49,-596,-1,-595,-51,-583,-100,-563,-146,-533,-187,-495,-219,-450,-241,-401,-251,-352,-249,-302,-237,-257,-219,-211,-193,-183,-175,-167,-171", "-521,171,-545,147,-570,104,-587,57,-596,7,-596,-43,-586,-92,-567,-139,-539,-180,-502,-214,-458,-238,-410,-250,-360,-250,-310,-240,-265,-223,-219,-198,-190,-180,-174,-175", "-520,172,-544,148,-569,105,-587,58,-596,9,-596,-41,-586,-91,-568,-138,-540,-179,-503,-213,-459,-238,-411,-250,-362,-250,-311,-240,-266,-223,-220,-199,-191,-180,-175,-176"],
        "Swim Out": ["-517,175,-542,151,-568,109,-586,62,-595,12,-596,-38,-587,-87,-569,-134,-542,-176,-506,-211,-463,-236,-415,-249,-365,-250,-315,-241,-269,-225,-223,-201,-194,-182,-178,-178", "-510,182,-536,160,-563,118,-583,72,-594,23,-597,-27,-590,-77,-574,-125,-549,-168,-515,-205,-473,-232,-425,-247,-375,-251,-326,-244,-279,-229,-233,-207,-203,-188,-187,-184", "-502,189,-529,168,-558,127,-579,82,-592,34,-597,-16,-592,-67,-578,-115,-555,-159,-523,-198,-482,-227,-436,-245,-385,-251,-337,-246,-288,-233,-243,-212,-212,-194,-196,-189", "-494,196,-521,177,-552,136,-575,92,-590,44,-597,-6,-594,-56,-582,-105,-561,-150,-530,-190,-491,-222,-446,-242,-396,-251,-347,-248,-298,-236,-253,-217,-222,-200,-206,-195", "-486,202,-514,184,-547,145,-571,102,-588,54,-596,5,-595,-45,-585,-94,-566,-141,-537,-182,-500,-216,-456,-239,-407,-250,-358,-250,-307,-239,-263,-222,-232,-206,-216,-201", "-477,208,-506,192,-540,154,-566,112,-585,65,-595,15,-596,-34,-588,-84,-571,-131,-544,-174,-509,-209,-466,-235,-418,-249,-368,-251,-318,-242,-272,-226,-242,-211,-226,-207", "-468,213,-498,199,-534,162,-562,121,-582,75,-594,26,-597,-24,-591,-74,-575,-122,-551,-165,-517,-203,-476,-230,-429,-247,-378,-251,-329,-245,-282,-230,-252,-216,-236,-212", "-459,218,-490,205,-527,171,-556,130,-578,85,-592,37,-597,-13,-593,-63,-579,-112,-557,-156,-525,-195,-485,-225,-439,-244,-389,-251,-340,-247,-291,-234,-261,-221,-245,-217", "-450,222,-481,211,-519,179,-551,139,-574,95,-590,47,-597,-3,-594,-53,-583,-101,-562,-147,-532,-188,-494,-220,-449,-241,-400,-251,-351,-249,-301,-237,-271,-225,-255,-222", "-440,226,-472,216,-512,187,-545,148,-570,105,-587,58,-596,8,-596,-42,-586,-91,-567,-138,-540,-180,-503,-214,-459,-238,-411,-250,-361,-250,-311,-240,-281,-229,-264,-226", "-430,230,-462,221,-504,194,-538,156,-565,115,-584,68,-595,19,-596,-31,-589,-81,-572,-128,-546,-171,-511,-207,-469,-234,-421,-248,-371,-251,-322,-243,-290,-233,-274,-230", "-420,233,-453,226,-496,200,-532,165,-560,124,-581,78,-593,29,-597,-21,-591,-71,-577,-119,-553,-163,-520,-200,-479,-229,-432,-246,-381,-251,-333,-246,-299,-236,-283,-233", "-410,236,-443,230,-487,207,-524,173,-555,133,-577,88,-591,40,-597,-10,-593,-60,-581,-109,-559,-154,-527,-193,-488,-224,-442,-243,-392,-251,-343,-248,-309,-240,-293,-237", "-400,238,-433,234,-478,213,-517,181,-549,142,-573,98,-589,50,-596,1,-595,-49,-584,-98,-564,-145,-535,-185,-497,-218,-452,-240,-403,-250,-354,-249,-320,-243,-304,-240", "-390,240,-423,237,-469,218,-509,189,-543,150,-568,108,-586,61,-596,11,-596,-39,-587,-88,-569,-135,-542,-177,-506,-212,-462,-237,-414,-249,-364,-250,-331,-245,-315,-243", "-380,242,-413,240,-460,223,-501,196,-536,159,-563,117,-583,71,-594,22,-597,-28,-590,-78,-574,-125,-548,-169,-514,-205,-472,-232,-425,-248,-374,-251,-342,-247,-326,-246", "-369,243,-402,242,-450,227,-493,202,-529,168,-558,126,-580,81,-593,33,-597,-17,-592,-67,-578,-116,-555,-160,-522,-198,-481,-227,-435,-245,-384,-251,-352,-249,-336,-248", "-359,243,-392,244,-440,231,-484,209,-522,176,-553,135,-576,91,-591,43,-597,-7,-594,-57,-582,-105,-560,-151,-530,-191,-491,-222,-445,-243,-395,-251,-363,-250,-347,-249", "-348,244,-382,246,-430,235,-475,214,-515,184,-547,144,-572,101,-588,54,-596,4,-595,-46,-585,-95,-566,-142,-537,-183,-500,-216,-455,-239,-407,-250,-373,-251,-357,-250", "-338,244,-371,247,-420,238,-466,219,-507,191,-541,153,-567,111,-585,64,-595,15,-596,-35,-588,-85,-570,-132,-544,-175,-508,-210,-465,-235,-417,-249,-383,-251,-367,-251", "-327,244,-360,248,-410,240,-457,224,-499,198,-534,162,-562,120,-582,74,-594,25,-597,-25,-590,-75,-575,-122,-550,-166,-516,-203,-475,-231,-428,-247,-394,-251,-378,-251", "-317,243,-350,248,-399,243,-447,228,-490,204,-527,170,-557,129,-579,84,-592,36,-597,-14,-593,-64,-579,-113,-556,-157,-524,-196,-484,-226,-438,-245,-405,-250,-389,-251", "-306,242,-339,248,-389,245,-437,232,-482,210,-520,178,-551,138,-575,94,-590,47,-597,-3,-594,-54,-583,-102,-562,-148,-532,-188,-493,-220,-448,-242,-416,-249,-400,-250", "-296,241,-329,248,-378,246,-427,236,-472,216,-512,186,-545,147,-570,104,-587,57,-596,7,-595,-43,-586,-92,-567,-139,-539,-180,-502,-214,-458,-238,-426,-247,-410,-249", "-286,240,-318,248,-368,247,-417,239,-463,221,-504,193,-539,156,-565,114,-584,67,-595,18,-596,-32,-589,-82,-572,-129,-546,-172,-511,-208,-468,-234,-437,-245,-420,-247", "-275,238,-307,247,-357,248,-406,241,-454,225,-496,200,-532,164,-560,123,-581,77,-593,29,-597,-21,-591,-72,-576,-119,-552,-163,-519,-201,-478,-229,-447,-242,-431,-245", "-265,236,-297,246,-346,248,-396,243,-444,230,-488,206,-525,173,-555,132,-577,87,-591,39,-597,-11,-593,-61,-580,-109,-558,-154,-527,-194,-487,-224,-457,-239,-440,-242", "-255,233,-286,244,-336,248,-386,245,-434,233,-479,212,-518,181,-549,141,-573,97,-589,50,-596,0,-595,-50,-584,-99,-563,-145,-534,-186,-496,-218,-467,-235,-451,-239", "-245,231,-276,242,-325,248,-375,246,-424,237,-470,217,-510,188,-543,150,-569,107,-587,60,-596,10,-596,-40,-587,-89,-569,-136,-541,-178,-505,-212,-476,-230,-461,-235", "-234,228,-265,240,-315,247,-364,247,-414,239,-460,222,-502,195,-537,158,-564,117,-583,70,-594,21,-597,-29,-589,-79,-573,-126,-548,-169,-513,-206,-486,-225,-470,-230", "-224,224,-255,238,-304,246,-354,248,-403,242,-451,227,-494,202,-530,167,-559,126,-580,80,-593,32,-597,-18,-592,-68,-577,-116,-554,-161,-521,-199,-495,-219,-479,-225", "-215,221,-245,235,-293,245,-343,248,-393,244,-441,231,-485,208,-523,175,-553,135,-576,90,-591,43,-597,-8,-594,-58,-581,-106,-560,-152,-529,-191,-504,-213,-488,-220", "-205,217,-234,232,-283,244,-333,248,-382,246,-431,234,-476,214,-515,183,-548,144,-572,100,-588,53,-596,3,-595,-47,-585,-96,-565,-142,-536,-184,-512,-207,-497,-214", "-195,213,-224,229,-273,242,-322,248,-372,247,-421,238,-467,219,-508,190,-541,152,-567,110,-586,63,-595,14,-596,-36,-588,-86,-570,-133,-543,-175,-520,-200,-505,-207", "-186,209,-214,225,-262,239,-311,247,-361,248,-410,240,-457,224,-499,197,-535,161,-562,119,-582,73,-594,24,-597,-26,-590,-76,-575,-123,-550,-167,-528,-192,-513,-201", "-176,204,-204,222,-252,237,-301,246,-351,248,-400,243,-448,228,-491,204,-528,169,-557,128,-579,83,-592,35,-597,-15,-592,-65,-579,-113,-556,-158,-535,-185,-521,-193", "-167,199,-195,218,-242,234,-290,245,-340,248,-390,244,-438,232,-482,210,-520,178,-552,137,-575,93,-590,46,-597,-4,-594,-55,-582,-103,-561,-149,-542,-176,-528,-186", "-158,194,-185,213,-231,231,-280,243,-329,248,-379,246,-428,235,-473,215,-513,185,-546,146,-570,103,-588,56,-596,6,-595,-44,-586,-93,-567,-140,-549,-168,-535,-178", "-148,189,-175,209,-221,228,-269,241,-319,248,-369,247,-417,238,-464,220,-505,193,-539,155,-566,113,-585,66,-595,17,-596,-33,-589,-83,-571,-130,-555,-159,-541,-169", "-140,183,-166,204,-211,224,-259,239,-308,247,-358,248,-407,241,-455,225,-497,199,-533,164,-561,122,-581,76,-593,28,-597,-22,-591,-72,-576,-120,-561,-150,-547,-161", "-131,178,-156,199,-201,220,-249,236,-298,246,-347,248,-397,243,-445,229,-488,206,-526,172,-556,131,-578,86,-592,38,-597,-12,-593,-62,-580,-110,-566,-141,-553,-152", "-122,171,-147,193,-192,216,-238,233,-287,244,-337,248,-387,245,-435,233,-480,212,-518,180,-550,140,-574,96,-589,49,-596,-1,-595,-51,-583,-100,-571,-131,-558,-143", "-114,165,-138,188,-182,212,-228,230,-277,242,-326,248,-376,246,-425,236,-470,217,-511,188,-544,149,-569,106,-587,59,-596,10,-596,-40,-587,-90,-575,-122,-563,-134", "-106,159,-129,182,-172,207,-218,227,-266,240,-316,247,-365,247,-414,239,-461,222,-503,195,-537,158,-564,116,-584,69,-595,20,-596,-30,-589,-80,-579,-112,-567,-124", "-98,152,-121,176,-163,202,-208,223,-256,238,-305,247,-355,248,-404,242,-452,226,-494,201,-531,166,-559,125,-580,79,-593,31,-597,-19,-592,-69,-583,-101,-571,-115", "-90,145,-112,169,-154,197,-198,219,-246,235,-294,245,-344,248,-394,244,-442,230,-486,208,-523,175,-554,134,-576,89,-591,42,-597,-8,-593,-59,-586,-91,-575,-105", "-82,137,-104,163,-145,192,-189,215,-235,232,-284,244,-334,248,-383,245,-432,234,-477,213,-516,182,-548,143,-572,99,-589,52,-596,2,-595,-48,-589,-81,-578,-95", "-75,130,-96,156,-136,186,-179,210,-225,229,-273,242,-323,248,-373,247,-421,237,-468,219,-508,190,-542,152,-568,109,-586,62,-595,13,-596,-37,-591,-71,-581,-85", "-68,122,-88,149,-127,180,-169,206,-215,226,-263,240,-312,247,-362,248,-411,240,-458,223,-500,197,-535,160,-563,119,-583,72,-594,24,-597,-26,-593,-60,-584,-75", "-61,114,-80,141,-118,174,-160,201,-205,222,-253,237,-302,246,-351,248,-401,242,-449,228,-492,203,-528,169,-558,128,-579,82,-592,34,-597,-16,-595,-49,-586,-65", "-55,106,-73,134,-110,167,-151,195,-195,218,-242,234,-291,245,-341,248,-391,244,-439,232,-483,209,-521,177,-552,137,-575,92,-590,45,-597,-5,-596,-39,-588,-54", "-48,98,-66,126,-101,161,-142,190,-186,214,-232,231,-281,243,-330,248,-380,246,-429,235,-474,215,-514,185,-546,146,-571,102,-588,55,-596,5,-597,-28,-589,-44", "-43,89,-59,118,-93,154,-133,184,-176,209,-222,228,-270,241,-320,248,-369,247,-418,238,-465,220,-506,192,-540,154,-566,112,-585,65,-595,16,-597,-17,-590,-33", "-37,80,-52,110,-86,147,-124,178,-167,204,-212,225,-260,239,-309,247,-359,248,-408,241,-455,225,-498,199,-533,163,-561,121,-582,75,-594,27,-597,-7,-590,-23", "-31,71,-46,101,-78,139,-116,172,-157,199,-202,221,-250,236,-298,246,-348,248,-398,243,-446,229,-489,205,-526,171,-556,130,-578,85,-592,38,-596,4,-590,-13", "-26,62,-40,93,-71,132,-107,165,-148,194,-192,217,-239,234,-288,244,-338,248,-387,245,-436,233,-480,211,-519,179,-550,139,-574,95,-590,48,-595,15,-590,-2", "-22,53,-34,84,-64,124,-99,159,-139,188,-183,212,-229,230,-277,243,-327,248,-377,246,-425,236,-471,217,-511,187,-544,148,-569,105,-587,58,-594,25,-589,8", "-17,43,-28,75,-57,116,-91,152,-130,182,-173,208,-219,227,-267,241,-316,248,-366,247,-415,239,-462,222,-503,194,-538,157,-565,115,-584,68,-592,36,-588,19", "-13,34,-23,65,-50,107,-83,144,-121,176,-164,203,-209,223,-257,238,-306,247,-355,248,-405,242,-452,226,-495,201,-531,165,-560,124,-581,78,-590,47,-587,29", "-10,24,-18,56,-44,99,-76,137,-113,170,-154,198,-199,220,-246,236,-295,245,-345,248,-395,244,-443,230,-486,207,-524,174,-554,133,-577,89,-587,57,-585,39", "-7,14,-14,46,-38,90,-68,129,-105,163,-145,192,-189,215,-236,233,-285,244,-334,248,-384,245,-433,234,-478,213,-517,182,-549,142,-573,99,-584,67,-582,49", "-4,4,-10,37,-32,81,-61,121,-97,156,-136,186,-180,211,-226,229,-274,242,-324,248,-374,247,-422,237,-468,218,-509,189,-542,151,-568,108,-581,77,-580,59", "-1,-6,-6,27,-27,72,-55,113,-89,149,-128,181,-170,206,-216,226,-264,240,-313,247,-363,248,-412,240,-459,223,-501,196,-536,160,-563,118,-577,87,-577,69", "0,-11,-4,22,-24,67,-51,109,-85,146,-123,177,-165,204,-211,224,-259,239,-308,247,-357,248,-407,241,-454,225,-497,200,-532,164,-561,122,-575,92,-575,75", "2,-20,-1,11,-19,58,-45,100,-77,138,-115,171,-156,199,-201,220,-248,236,-297,246,-347,248,-397,243,-444,229,-488,206,-525,172,-555,132,-571,102,-571,85", "4,-30,2,1,-15,48,-39,92,-70,131,-106,165,-147,193,-191,216,-238,233,-287,244,-336,248,-386,245,-434,233,-479,212,-518,180,-550,140,-566,112,-567,94", "5,-40,4,-9,-11,38,-33,83,-63,123,-98,158,-138,188,-182,212,-228,230,-276,242,-326,248,-376,246,-424,237,-470,217,-510,188,-544,149,-561,121,-563,104", "7,-49,6,-18,-7,29,-28,73,-56,115,-90,151,-129,182,-172,207,-218,227,-266,240,-315,247,-365,247,-414,239,-461,222,-502,195,-537,158,-556,130,-558,113", "8,-59,8,-28,-3,18,-23,64,-49,106,-82,143,-120,176,-163,202,-208,223,-256,238,-305,246,-354,248,-404,242,-451,227,-494,202,-530,166,-550,139,-553,122", "9,-70,10,-38,0,8,-18,55,-43,98,-75,136,-112,169,-153,197,-198,219,-245,235,-294,245,-344,248,-393,244,-441,231,-485,208,-523,175,-544,148,-548,131", "10,-80,11,-48,2,-2,-14,45,-37,89,-68,128,-104,163,-144,191,-188,215,-235,232,-283,244,-333,248,-383,245,-431,234,-476,214,-516,183,-538,157,-542,140", "11,-90,12,-58,5,-12,-9,35,-31,80,-61,120,-96,156,-135,186,-179,210,-225,229,-273,242,-323,248,-372,247,-421,237,-467,219,-508,190,-531,165,-536,148", "11,-101,13,-68,7,-21,-6,26,-26,71,-54,112,-88,149,-126,180,-169,206,-215,226,-263,240,-312,247,-362,248,-411,240,-458,224,-500,197,-524,174,-530,157", "12,-111,14,-78,8,-31,-2,15,-21,61,-47,104,-80,141,-118,174,-160,201,-205,222,-252,237,-301,246,-351,248,-401,242,-448,228,-491,204,-517,182,-523,165", "12,-122,15,-89,10,-41,1,5,-17,52,-41,95,-73,134,-109,167,-151,195,-195,218,-242,234,-291,245,-341,248,-390,244,-438,232,-483,210,-509,189,-516,173", "12,-133,16,-99,11,-51,3,-5,-12,42,-35,86,-65,126,-101,160,-141,190,-185,213,-232,231,-280,243,-330,248,-380,246,-428,235,-474,215,-501,196,-509,180", "12,-144,16,-110,13,-61,5,-15,-8,32,-30,77,-58,118,-93,154,-133,184,-176,209,-222,228,-270,241,-319,248,-369,247,-418,238,-464,220,-493,203,-501,187", "12,-156,16,-121,14,-71,7,-24,-5,22,-25,68,-52,109,-85,146,-124,178,-166,204,-212,224,-260,239,-309,247,-358,248,-408,241,-455,225,-484,209,-494,194", "11,-167,17,-132,15,-81,9,-34,-1,12,-20,58,-46,101,-78,139,-115,172,-157,199,-202,221,-249,236,-298,246,-348,248,-398,243,-445,229,-475,214,-485,200", "11,-178,16,-143,15,-92,10,-44,1,2,-15,49,-39,92,-70,131,-107,165,-148,194,-192,216,-239,233,-287,244,-337,248,-387,245,-435,233,-466,220,-477,206", "10,-190,16,-154,16,-103,12,-54,4,-8,-11,39,-34,83,-63,123,-99,158,-139,188,-182,212,-229,230,-277,243,-327,248,-376,246,-425,236,-456,224,-468,211", "9,-200,16,-166,16,-113,13,-64,6,-18,-7,29,-28,74,-56,115,-91,151,-130,182,-173,207,-219,227,-267,240,-316,247,-366,247,-415,239,-447,229,-459,216", "8,-210,15,-177,17,-124,14,-74,8,-27,-4,19,-23,65,-50,107,-83,144,-121,176,-163,202,-209,223,-256,238,-305,247,-355,248,-405,242,-437,232,-450,220", "7,-220,14,-189,17,-135,15,-85,9,-37,-1,9,-18,56,-44,98,-75,137,-113,170,-154,197,-199,219,-246,235,-295,245,-345,248,-394,244,-426,236,-440,224", "6,-230,14,-200,16,-146,16,-95,11,-47,2,-1,-14,46,-38,90,-68,129,-104,163,-145,192,-189,215,-236,233,-284,244,-334,248,-384,245,-416,239,-430,228", "5,-240,13,-209,16,-158,16,-106,12,-57,5,-11,-10,36,-32,81,-61,121,-96,156,-136,186,-179,211,-226,229,-274,242,-323,248,-373,247,-406,241,-420,231", "4,-250,12,-219,16,-169,16,-117,13,-67,6,-20,-6,26,-27,71,-54,113,-88,149,-127,180,-170,206,-216,226,-264,240,-313,247,-362,248,-396,243,-410,234", "2,-260,11,-229,15,-181,17,-128,14,-77,8,-30,-3,16,-21,62,-48,104,-81,142,-119,174,-161,201,-206,222,-253,237,-302,246,-352,248,-385,245,-400,236", "1,-270,9,-239,14,-192,17,-139,15,-88,10,-40,0,6,-17,53,-42,96,-73,134,-110,168,-151,196,-196,218,-243,235,-292,245,-341,248,-375,247,-390,238", "-1,-280,8,-249,13,-203,16,-150,16,-98,11,-50,3,-5,-13,43,-36,87,-66,126,-102,161,-142,190,-186,214,-233,232,-281,243,-331,248,-364,248,-380,239", "-3,-290,7,-259,12,-212,16,-161,16,-109,13,-60,5,-14,-9,33,-30,78,-59,118,-94,154,-133,184,-177,209,-223,228,-271,241,-320,248,-353,248,-369,240", "-5,-301,5,-269,11,-222,15,-173,16,-120,14,-70,7,-23,-5,23,-25,69,-52,110,-86,147,-125,178,-167,204,-213,225,-260,239,-310,247,-343,248,-359,241", "-7,-311,3,-280,10,-232,15,-184,17,-131,15,-80,9,-33,-2,13,-20,59,-46,102,-78,140,-116,172,-158,199,-203,221,-250,237,-299,246,-332,248,-349,242", "-9,-322,2,-290,9,-242,14,-196,16,-142,15,-91,10,-43,1,3,-16,50,-40,93,-71,132,-108,166,-149,194,-193,217,-240,234,-288,244,-322,248,-338,242", "-11,-332,0,-300,8,-252,13,-206,16,-153,16,-102,12,-53,4,-7,-11,40,-34,84,-64,124,-99,159,-139,188,-183,212,-229,231,-278,243,-311,247,-328,241", "-13,-343,-2,-311,6,-262,12,-215,16,-165,16,-112,13,-63,6,-17,-7,30,-29,75,-57,116,-91,152,-131,183,-174,208,-219,227,-268,241,-300,246,-317,241", "-16,-353,-4,-321,5,-273,11,-225,15,-176,17,-123,14,-73,8,-26,-4,20,-23,66,-50,108,-84,145,-122,177,-164,203,-210,224,-257,238,-290,245,-307,240", "-18,-364,-6,-332,3,-283,10,-235,14,-188,17,-134,15,-84,9,-36,-1,10,-19,56,-44,99,-76,137,-113,170,-155,198,-200,220,-247,236,-279,243,-297,239", "-21,-375,-9,-342,1,-293,9,-245,14,-199,16,-146,16,-94,11,-46,2,-1,-14,47,-38,90,-69,129,-105,164,-146,192,-190,216,-237,233,-269,241,-286,237", "-24,-386,-11,-353,-1,-304,7,-255,13,-208,16,-157,16,-105,12,-56,4,-10,-10,37,-32,81,-62,122,-97,157,-137,187,-180,211,-226,230,-259,239,-276,236", "-26,-397,-14,-364,-3,-314,6,-265,12,-218,16,-168,16,-116,13,-66,6,-20,-6,27,-27,72,-55,113,-89,150,-128,181,-171,206,-216,226,-248,236,-266,233", "-29,-408,-16,-375,-5,-324,4,-276,11,-228,15,-180,17,-127,14,-76,8,-29,-3,17,-22,63,-48,105,-81,142,-119,175,-161,201,-207,222,-238,233,-256,231", "-32,-418,-19,-385,-7,-335,2,-286,9,-238,14,-191,17,-138,15,-87,10,-39,0,7,-17,53,-42,96,-74,135,-111,168,-152,196,-197,218,-228,230,-245,228", "-35,-428,-22,-396,-10,-346,1,-296,8,-248,13,-202,16,-149,16,-97,11,-49,3,-4,-13,44,-36,88,-67,127,-103,162,-143,191,-187,214,-218,227,-235,225", "-38,-438,-25,-407,-12,-356,-1,-307,7,-258,12,-211,16,-160,16,-108,13,-59,5,-13,-9,34,-31,79,-60,119,-94,155,-134,185,-177,210,-208,223,-226,222", "-41,-448,-28,-418,-14,-367,-3,-317,5,-269,11,-221,15,-172,16,-119,14,-69,7,-23,-5,24,-25,69,-53,111,-87,148,-125,179,-168,205,-198,219,-216,219", "-44,-457,-31,-428,-17,-378,-6,-328,4,-279,10,-231,15,-183,17,-130,15,-80,9,-32,-2,14,-20,60,-47,102,-79,140,-117,173,-158,200,-188,215,-206,215", "-47,-467,-34,-438,-20,-389,-8,-338,2,-289,9,-241,14,-195,16,-141,15,-90,10,-42,1,4,-16,51,-40,94,-72,133,-108,166,-149,195,-179,210,-196,211", "-50,-477,-36,-448,-23,-400,-10,-349,0,-299,8,-251,13,-205,16,-152,16,-101,12,-52,4,-7,-12,41,-35,85,-64,125,-100,159,-140,189,-169,205,-187,207", "-53,-487,-39,-457,-26,-411,-13,-360,-2,-310,6,-261,12,-214,16,-164,16,-112,13,-62,6,-16,-8,31,-29,76,-58,117,-92,153,-131,183,-160,200,-177,202", "-57,-496,-42,-467,-29,-422,-15,-370,-4,-320,5,-272,11,-224,15,-175,16,-122,14,-72,7,-26,-4,21,-24,66,-51,108,-84,145,-123,177,-150,195,-168,198", "-60,-506,-46,-477,-32,-431,-18,-381,-6,-331,3,-282,10,-234,15,-187,17,-133,15,-83,9,-35,-1,11,-19,57,-45,100,-77,138,-114,171,-141,190,-159,193", "-63,-516,-49,-487,-34,-441,-21,-392,-9,-342,1,-292,9,-244,14,-198,16,-145,15,-93,11,-45,2,0,-15,48,-39,91,-69,130,-106,164,-132,184,-149,188", "-67,-526,-52,-497,-37,-451,-24,-403,-11,-352,-1,-303,7,-254,13,-208,16,-156,16,-104,12,-55,4,-9,-10,38,-33,82,-62,122,-98,157,-124,178,-140,183", "-70,-536,-55,-506,-40,-460,-27,-414,-13,-363,-3,-313,6,-265,12,-218,16,-167,16,-115,13,-65,6,-19,-7,28,-27,73,-55,114,-90,150,-115,172,-131,177", "-74,-546,-59,-516,-43,-470,-30,-425,-16,-374,-5,-324,4,-275,11,-227,15,-179,17,-126,14,-76,8,-28,-3,18,-22,64,-49,106,-82,143,-107,165,-123,171", "-78,-556,-62,-526,-47,-480,-32,-434,-19,-385,-7,-334,3,-285,10,-237,14,-190,17,-137,15,-86,10,-38,0,8,-18,54,-43,97,-74,136,-99,158,-114,166", "-82,-566,-66,-536,-50,-490,-35,-444,-22,-395,-9,-345,1,-295,8,-247,13,-201,16,-148,16,-97,11,-48,3,-3,-13,45,-37,88,-67,128,-91,151,-105,159", "-86,-576,-70,-546,-53,-500,-38,-454,-25,-406,-12,-356,-1,-306,7,-258,13,-211,16,-159,16,-107,12,-58,5,-12,-9,35,-31,79,-60,120,-83,144,-97,153", "-89,-586,-73,-556,-56,-509,-41,-463,-28,-417,-14,-366,-3,-316,5,-268,12,-221,16,-171,16,-118,14,-68,7,-22,-6,25,-26,70,-53,112,-75,137,-89,146", "-93,-596,-77,-566,-60,-519,-44,-473,-31,-428,-17,-377,-5,-327,4,-278,10,-230,15,-182,17,-129,14,-79,9,-31,-2,15,-21,61,-47,103,-68,129,-81,139", "-98,-606,-81,-576,-63,-529,-48,-483,-33,-437,-20,-388,-8,-337,2,-288,9,-240,14,-194,17,-140,15,-89,10,-41,1,4,-16,51,-41,95,-61,121,-73,132", "-102,-616,-85,-586,-67,-539,-51,-493,-36,-447,-23,-399,-10,-348,0,-299,8,-250,13,-204,16,-151,16,-100,12,-51,3,-6,-12,42,-35,86,-54,113,-65,125", "-106,-626,-89,-596,-71,-549,-54,-503,-39,-457,-25,-410,-13,-359,-2,-309,6,-261,12,-214,16,-163,16,-111,13,-61,5,-15,-8,32,-30,77,-48,104,-58,117", "-110,-636,-93,-606,-74,-559,-58,-512,-42,-466,-29,-421,-15,-370,-4,-320,5,-271,11,-224,15,-174,16,-122,14,-72,7,-25,-4,22,-24,67,-42,96,-51,109", "-115,-646,-97,-616,-78,-569,-61,-522,-45,-476,-31,-431,-18,-380,-6,-330,3,-281,10,-233,15,-186,17,-133,15,-82,9,-34,-1,12,-19,58,-36,87,-44,101", "-119,-656,-101,-626,-82,-579,-65,-532,-49,-486,-34,-440,-21,-391,-8,-341,1,-291,9,-243,14,-197,16,-144,15,-92,11,-44,2,1,-15,48,-30,78,-37,93", "-124,-666,-106,-637,-86,-589,-68,-542,-52,-496,-37,-450,-23,-402,-11,-351,0,-302,7,-254,13,-207,16,-155,16,-103,12,-54,4,-9,-11,39,-25,68,-31,84", "-128,-676,-110,-647,-90,-599,-72,-552,-55,-506,-40,-460,-26,-413,-13,-362,-2,-312,6,-264,12,-217,16,-166,16,-114,13,-64,6,-18,-7,29,-20,59,-25,75", "-132,-685,-115,-657,-94,-609,-76,-562,-59,-516,-43,-469,-29,-424,-16,-373,-5,-323,4,-274,11,-227,15,-178,17,-125,14,-75,8,-28,-3,19,-15,50,-19,66", "-137,-695,-119,-667,-98,-619,-79,-572,-62,-525,-46,-479,-32,-434,-19,-384,-7,-333,3,-284,10,-237,14,-189,17,-136,15,-85,10,-37,0,8,-11,40,-14,57", "-141,-704,-123,-677,-103,-630,-83,-582,-66,-535,-50,-489,-35,-443,-21,-395,-9,-344,1,-295,8,-247,14,-200,16,-147,16,-96,11,-47,2,-2,-7,30,-9,47", "-145,-713,-128,-686,-107,-640,-87,-592,-69,-545,-53,-499,-38,-453,-24,-405,-12,-355,-1,-305,7,-257,13,-210,16,-158,16,-106,12,-57,5,-12,-4,20,-4,37", "-150,-723,-132,-695,-111,-650,-91,-602,-73,-555,-56,-509,-41,-463,-27,-416,-14,-365,-3,-315,5,-267,12,-220,16,-170,16,-117,13,-68,7,-21,-1,10,0,27", "-154,-732,-136,-705,-116,-660,-96,-612,-77,-565,-60,-519,-44,-472,-30,-427,-17,-376,-5,-326,4,-277,11,-230,15,-181,17,-128,14,-78,8,-31,2,-1,4,17", "-159,-741,-141,-714,-120,-670,-100,-623,-81,-575,-63,-528,-47,-482,-33,-436,-19,-387,-7,-337,2,-287,9,-240,14,-193,17,-139,15,-88,10,-40,4,-10,7,7", "-164,-751,-145,-723,-125,-680,-104,-633,-85,-585,-67,-538,-51,-492,-36,-446,-22,-398,-10,-347,0,-298,8,-250,13,-203,16,-151,16,-99,11,-50,6,-20,10,-2", "-168,-760,-150,-733,-129,-689,-108,-643,-89,-595,-70,-548,-54,-502,-39,-456,-25,-409,-12,-358,-2,-308,7,-260,12,-213,16,-162,16,-110,13,-60,8,-29,12,-12", "-173,-769,-155,-742,-133,-698,-113,-653,-93,-605,-74,-558,-57,-512,-42,-466,-28,-420,-15,-369,-4,-319,5,-270,11,-223,15,-173,16,-121,14,-71,10,-39,14,-22", "-178,-779,-159,-752,-138,-708,-117,-663,-97,-615,-78,-568,-61,-522,-45,-475,-31,-430,-18,-379,-6,-329,3,-280,10,-233,15,-185,17,-132,15,-81,11,-49,16,-32", "-183,-788,-164,-761,-142,-717,-122,-673,-101,-626,-82,-578,-64,-531,-48,-485,-34,-439,-20,-390,-8,-340,2,-291,9,-243,14,-196,16,-143,15,-92,13,-59,18,-42", "-188,-798,-169,-770,-147,-726,-126,-682,-105,-636,-86,-588,-68,-541,-52,-495,-37,-449,-23,-401,-11,-350,0,-301,8,-253,13,-206,16,-154,16,-102,14,-69,19,-52", "-193,-807,-174,-780,-151,-736,-130,-692,-110,-646,-90,-598,-72,-551,-55,-505,-40,-459,-26,-412,-13,-361,-2,-311,6,-263,12,-216,16,-165,16,-113,15,-80,20,-63", "-198,-816,-179,-789,-156,-745,-135,-701,-114,-656,-94,-608,-75,-561,-58,-515,-43,-469,-29,-423,-16,-372,-4,-322,4,-273,11,-226,15,-177,17,-124,15,-90,21,-74", "-203,-826,-184,-798,-161,-754,-139,-710,-119,-666,-98,-619,-79,-571,-62,-525,-46,-478,-32,-433,-18,-383,-7,-332,3,-283,10,-236,14,-189,17,-135,16,-101,22,-84", "-208,-835,-189,-808,-165,-764,-144,-720,-123,-676,-102,-629,-83,-581,-65,-535,-49,-488,-35,-442,-21,-394,-9,-343,1,-294,9,-246,14,-199,16,-146,16,-112,23,-95", "-214,-844,-194,-817,-170,-773,-148,-729,-127,-685,-107,-639,-87,-591,-69,-544,-53,-498,-38,-452,-24,-405,-11,-354,-1,-304,7,-256,13,-209,16,-157,16,-123,23,-106", "-219,-854,-199,-826,-175,-783,-153,-739,-132,-695,-111,-649,-91,-602,-73,-554,-56,-508,-41,-462,-27,-416,-14,-364,-3,-315,6,-266,12,-219,16,-169,17,-134,24,-117", "-224,-863,-204,-836,-180,-792,-157,-748,-136,-704,-116,-659,-95,-612,-76,-564,-59,-518,-44,-472,-30,-426,-16,-375,-5,-325,4,-276,11,-229,15,-180,16,-145,24,-129", "-230,-872,-209,-845,-185,-801,-162,-757,-141,-713,-120,-669,-99,-622,-80,-574,-63,-528,-47,-481,-33,-436,-19,-386,-7,-336,2,-287,9,-239,14,-192,16,-156,24,-140", "-235,-881,-214,-855,-190,-811,-167,-767,-145,-723,-124,-679,-104,-632,-84,-584,-66,-538,-50,-491,-36,-445,-22,-397,-10,-346,0,-297,8,-249,13,-202,16,-167,23,-151", "-241,-891,-220,-864,-195,-820,-172,-776,-150,-732,-129,-688,-108,-642,-88,-595,-70,-548,-54,-501,-39,-455,-25,-408,-12,-357,-2,-307,7,-259,12,-212,15,-179,23,-163", "-246,-900,-225,-873,-200,-829,-177,-785,-154,-741,-133,-697,-112,-652,-92,-605,-74,-557,-57,-511,-42,-465,-28,-419,-15,-368,-4,-318,5,-269,11,-222,14,-191,23,-175", "-252,-909,-231,-883,-205,-839,-182,-795,-159,-751,-137,-707,-117,-662,-96,-615,-78,-567,-60,-521,-45,-475,-31,-429,-17,-379,-6,-328,3,-279,10,-232,13,-201,22,-185", "-257,-919,-236,-892,-211,-848,-187,-804,-164,-760,-142,-716,-121,-672,-101,-625,-82,-578,-64,-531,-48,-484,-34,-439,-20,-389,-8,-339,2,-290,9,-242,13,-211,21,-195", "-263,-928,-242,-901,-216,-857,-192,-813,-168,-770,-146,-726,-126,-682,-105,-635,-85,-588,-68,-541,-51,-494,-37,-448,-23,-400,-10,-350,0,-300,8,-252,12,-221,20,-205", "-269,-937,-247,-910,-221,-867,-197,-823,-173,-779,-151,-735,-130,-691,-109,-645,-89,-598,-71,-551,-55,-504,-40,-458,-26,-411,-13,-360,-2,-311,6,-262,10,-231,19,-215", "-274,-945,-253,-920,-227,-876,-202,-832,-178,-788,-156,-744,-134,-700,-114,-655,-94,-608,-75,-561,-58,-514,-43,-468,-29,-422,-15,-371,-4,-321,5,-272,9,-241,18,-225", "-280,-954,-259,-929,-232,-885,-207,-842,-183,-798,-160,-754,-139,-710,-118,-665,-98,-618,-79,-571,-61,-524,-46,-478,-32,-432,-18,-382,-6,-332,3,-283,8,-251,17,-235", "-285,-963,-264,-938,-238,-895,-212,-851,-188,-807,-165,-763,-143,-719,-123,-675,-102,-628,-83,-581,-65,-534,-49,-487,-35,-442,-21,-393,-9,-342,1,-293,6,-261,16,-246", "-291,-972,-270,-947,-243,-904,-218,-860,-193,-816,-170,-772,-148,-728,-127,-685,-106,-638,-87,-591,-69,-544,-52,-497,-38,-451,-24,-404,-11,-353,-1,-303,5,-271,14,-256", "-297,-981,-275,-956,-249,-913,-223,-870,-198,-826,-175,-782,-152,-738,-131,-694,-111,-648,-91,-601,-72,-554,-56,-507,-41,-461,-27,-415,-14,-364,-3,-314,3,-281,13,-266", "-303,-989,-281,-964,-255,-923,-229,-879,-203,-835,-180,-791,-157,-747,-136,-703,-115,-658,-95,-611,-76,-564,-59,-517,-44,-471,-30,-425,-16,-374,-5,-324,1,-292,11,-277", "-309,-998,-287,-973,-260,-932,-234,-888,-209,-844,-185,-800,-162,-756,-140,-713,-120,-668,-99,-621,-80,-574,-63,-527,-47,-481,-33,-435,-19,-385,-7,-335,-1,-302,9,-287", "-314,-1007,-293,-982,-266,-941,-240,-898,-214,-854,-190,-810,-167,-766,-145,-722,-124,-678,-103,-631,-84,-584,-66,-537,-50,-490,-35,-445,-22,-396,-9,-345,-3,-312,8,-298", "-320,-1016,-298,-991,-271,-949,-245,-907,-219,-863,-195,-819,-171,-775,-149,-731,-128,-687,-108,-641,-88,-594,-70,-547,-53,-500,-38,-454,-25,-407,-12,-356,-5,-323,6,-308", "-326,-1024,-304,-1000,-277,-958,-251,-916,-225,-872,-200,-829,-176,-785,-154,-741,-133,-697,-112,-651,-92,-604,-74,-557,-57,-510,-41,-464,-28,-418,-14,-367,-7,-333,3,-319", "-332,-1033,-310,-1008,-283,-967,-256,-925,-230,-882,-205,-838,-181,-794,-158,-750,-137,-706,-117,-661,-96,-614,-77,-567,-60,-520,-45,-474,-31,-428,-17,-378,-9,-344,1,-330", "-338,-1042,-316,-1017,-289,-976,-262,-934,-236,-891,-210,-847,-186,-803,-163,-759,-142,-715,-121,-671,-100,-624,-81,-577,-64,-530,-48,-484,-33,-438,-20,-389,-12,-355,-1,-340", "-345,-1050,-322,-1026,-294,-985,-268,-943,-241,-900,-216,-857,-191,-813,-168,-769,-146,-725,-125,-681,-105,-634,-85,-587,-67,-540,-51,-493,-36,-448,-23,-399,-14,-365,-3,-351", "-351,-1059,-328,-1034,-300,-993,-273,-952,-247,-910,-221,-866,-196,-822,-173,-778,-151,-734,-130,-690,-109,-644,-89,-597,-71,-550,-54,-503,-39,-457,-26,-410,-17,-376,-6,-362", "-357,-1068,-334,-1043,-306,-1002,-279,-961,-253,-919,-226,-875,-201,-831,-178,-787,-155,-743,-134,-700,-113,-654,-93,-607,-75,-560,-58,-513,-42,-467,-29,-421,-19,-387,-9,-373", "-363,-1076,-340,-1052,-312,-1011,-285,-970,-258,-928,-232,-885,-207,-841,-183,-797,-160,-753,-138,-709,-118,-664,-97,-617,-78,-570,-61,-523,-46,-477,-32,-431,-22,-398,-11,-384", "-370,-1085,-346,-1060,-318,-1020,-290,-979,-264,-937,-237,-894,-212,-850,-188,-806,-165,-762,-143,-718,-122,-674,-102,-627,-82,-580,-65,-533,-49,-487,-34,-441,-25,-409,-14,-395", "-376,-1093,-353,-1069,-324,-1028,-296,-987,-269,-946,-243,-903,-217,-859,-193,-816,-169,-772,-147,-728,-127,-684,-106,-637,-86,-590,-68,-543,-52,-496,-37,-450,-28,-420,-17,-406", "-382,-1102,-359,-1078,-330,-1037,-302,-996,-275,-955,-249,-913,-223,-869,-198,-825,-174,-781,-152,-737,-131,-693,-110,-647,-90,-600,-72,-553,-55,-506,-40,-460,-31,-430,-20,-416", "-389,-1110,-365,-1086,-336,-1046,-308,-1005,-281,-964,-254,-922,-228,-878,-203,-834,-179,-790,-157,-746,-135,-702,-115,-657,-95,-610,-76,-563,-59,-516,-43,-470,-34,-440,-23,-426", "-395,-1119,-372,-1095,-342,-1054,-314,-1014,-286,-972,-260,-931,-234,-887,-208,-844,-184,-800,-161,-756,-140,-712,-119,-668,-99,-620,-80,-573,-62,-526,-46,-480,-37,-449,-25,-436", "-402,-1127,-378,-1103,-348,-1063,-320,-1022,-292,-981,-265,-940,-239,-897,-214,-853,-189,-809,-166,-765,-144,-721,-124,-677,-103,-630,-84,-583,-66,-536,-50,-490,-40,-459,-28,-445", "-408,-1136,-384,-1112,-355,-1072,-326,-1031,-298,-990,-271,-949,-245,-906,-219,-862,-194,-818,-171,-774,-149,-730,-128,-687,-107,-640,-88,-593,-69,-546,-53,-499,-43,-469,-31,-455", "-415,-1144,-391,-1120,-361,-1080,-332,-1040,-304,-999,-277,-958,-250,-915,-224,-872,-199,-828,-176,-784,-153,-740,-132,-696,-112,-650,-92,-603,-73,-556,-56,-509,-46,-478,-34,-465"]
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HUDController1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './AnimUtils.ts', './gfHUDController.ts', './FishManager1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Button, Vec3, tween, Animation, Sprite, gfBaseEvents, v3f, fadeTo, stopAllActions, gfEventEmitter, registerEvent, removeEvents, EventCode, DataStore1988, Config1988, setOpacity, GfHUDController, FishManager1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Button = module.Button;
      Vec3 = module.Vec3;
      tween = module.tween;
      Animation = module.Animation;
      Sprite = module.Sprite;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      v3f = module.v3f;
      fadeTo = module.fadeTo;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      GfHUDController = module.GfHUDController;
    }, function (module) {
      FishManager1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "18f72MpyEdEbqHKrsXwPXw/", "HUDController1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_SHOW_HIDE = 0.15;
      var HUDController1988 = exports('HUDController1988', (_dec = ccclass('HUDController1988'), _dec2 = property(Node), _dec3 = property(Button), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfHUDController) {
        _inheritsLoose(HUDController1988, _GfHUDController);

        function HUDController1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfHUDController.call.apply(_GfHUDController, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeSkill", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnSkill", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listNodeAuto", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fxShowSkill", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isShow", false);

          return _this;
        }

        var _proto = HUDController1988.prototype;

        _proto.onLoad = function onLoad() {
          _GfHUDController.prototype.onLoad.call(this);

          this._scaleFactor = 1;
          this._posButton = [new Vec3(-90, 90, 1), new Vec3(90, 90, 1), new Vec3(0, 120, 1), new Vec3(0, 90, 1)];
          this.resetAllState();
          DataStore1988.instance.setIsCompoButtonAutoShow(false);
        };

        _proto.initEvents = function initEvents() {
          _GfHUDController.prototype.initEvents.call(this);

          registerEvent(EventCode.GAME_LAYER.CLOSE_ALL_MENU, this.onClose, this);
        };

        _proto.onClose = function onClose() {
          if (!DataStore1988.instance.getIsCompoButtonAutoShow()) return;else {
            this.onAnimHide();
          }
        };

        _proto.onButtonSkillClick = function onButtonSkillClick() {
          var _this2 = this;

          this.stopAllNodeAction();
          gfEventEmitter.instance.emit(EventCode.SOUND.OPEN_COMPO_AUTO);
          tween(this.nodeSkill).call(function () {
            _this2.btnSkill.enabled = true;
          }).parallel(tween().to(TIME_SHOW_HIDE / 2, {
            position: new Vec3(0, this.nodeSkill.position.y - 40, 1),
            scale: v3f(0.5)
          }), tween().then(fadeTo(TIME_SHOW_HIDE / 2, 100))).call(function () {
            setOpacity(_this2.nodeSkill, 0);
            _this2.nodeSkill.active = false;

            _this2.onAnimShow();
          }).start();
        };

        _proto.targetButtonOn = function targetButtonOn(type) {
          if (!DataStore1988.instance.getOldTarget()) return;

          if (this.fxBtnBelow && !this.fxBtnBelow.active) {
            this.fxBtnBelow.active = true;
          }

          this.listTextBtn[type - 1].active = false;
          this.listNodeAuto[type - 1].active = true;
          setOpacity(this.listNodeAuto[type - 1], 255);
          this.listButton[type - 1].getComponent(Button).interactable = true;
          this.nodeSkill.active = false;
        };

        _proto.targetButtonsOff = function targetButtonsOff() {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
          this.fishNotifyImg.active = false;

          if (this.fxBtnBelow) {
            this.fxBtnBelow.active = false;
          }

          this.listTextBtn.forEach(function (item) {
            item.active = true;
          });
          this.listButton.forEach(function (button) {
            button.getComponent(Button).interactable = true;
          });
        };

        _proto.onClickTargetBtn = function onClickTargetBtn(event, data) {
          gfEventEmitter.instance.emit(EventCode.SOUND.SELECT_AUTO_MODE);

          if (this._isShow) {
            this.onAnimHide(data);
          } else {
            this.onAnimShow();
            this.changeStatusGroupButton(parseInt(data));
          }
        };

        _proto.onAnimShow = function onAnimShow() {
          var _this3 = this;

          if (this._isShow) return;
          this._isShow = true;
          this.stopAllNodeAction();

          var _loop = function _loop(i) {
            var node = _this3.listNodeAuto[i];
            node.active = true;
            tween(node).call(function () {
              _this3.listButton[i].getComponent(Button).interactable = false;
            }).parallel(tween().to(TIME_SHOW_HIDE * 1.5, {
              position: _this3._posButton[i],
              scale: v3f(1)
            }), tween().then(fadeTo(TIME_SHOW_HIDE * 1.5, 255))).call(function () {
              _this3.listButton[i].getComponent(Button).interactable = true;
              DataStore1988.instance.setIsCompoButtonAutoShow(true);
            }).start();
          };

          for (var i = 0; i < this.listNodeAuto.length; i++) {
            _loop(i);
          }

          tween(this.fxShowSkill).to(TIME_SHOW_HIDE * 1.5, {
            scale: v3f(1)
          }).call(function () {
            _this3.fxShowSkill.getComponent(Animation).play();
          }).start();
        };

        _proto.onAnimHide = function onAnimHide(idButton) {
          var _this4 = this;

          if (idButton === void 0) {
            idButton = Config1988.instance.TARGET_LOCK.NONE;
          }

          if (!this._isShow) return;
          DataStore1988.instance.setIsCompoButtonAutoShow(false);
          this.stopAllNodeAction();

          if (idButton == Config1988.instance.TARGET_LOCK.NONE) {
            this.nodeSkill.active = true;
            tween(this.nodeSkill).parallel(tween().to(TIME_SHOW_HIDE, {
              position: this._posButton[this._posButton.length - 1],
              scale: v3f(1)
            }), tween().then(fadeTo(TIME_SHOW_HIDE, 255))).call(function () {
              _this4.btnSkill.enabled = true;
            }).start();
          }

          var _loop2 = function _loop2(i) {
            var node = _this4.listNodeAuto[i];
            var ignorHide = +idButton == i + 1 ? true : false;
            var scale = ignorHide ? 1 : 0.5;
            var opacity = ignorHide ? 255 : 100;
            _this4.listButton[i].getComponent(Button).interactable = false;
            tween(node).parallel(tween().to(TIME_SHOW_HIDE, {
              position: _this4._posButton[_this4._posButton.length - 1],
              scale: v3f(scale)
            }), tween().then(fadeTo(TIME_SHOW_HIDE, opacity))).call(function () {
              if (!ignorHide) {
                tween(node).then(fadeTo(TIME_SHOW_HIDE, 0)).start();
                node.active = false;
              } else {
                _this4.changeStatusGroupButton(parseInt(idButton));
              }

              _this4.listButton[i].getComponent(Button).interactable = true;
            }).start();
          };

          for (var i = 0; i < this.listNodeAuto.length; i++) {
            _loop2(i);
          }

          this._isShow = false;
          this.fxBtnBelow.active = false;
          this.fxShowSkill.getComponent(Animation).stop();
          tween(this.fxShowSkill).to(TIME_SHOW_HIDE / 2, {
            scale: new Vec3(0, 1, 1)
          }).start();
        };

        _proto.resetAllState = function resetAllState() {
          for (var i = 0; i < this.listNodeAuto.length; i++) {
            stopAllActions(this.listNodeAuto[i]);
            this.listNodeAuto[i].setPosition(this._posButton[this._posButton.length - 1]);
            this.listNodeAuto[i].active = false;
          }

          this._isShow = false;
          DataStore1988.instance.setIsCompoButtonAutoShow(false);
          this.nodeSkill.active = true;
          setOpacity(this.nodeSkill, 255);
          this.nodeSkill.setScale(new Vec3(1, 1, 1));
          this.nodeSkill.setPosition(this._posButton[this._posButton.length - 1]);
          this.btnSkill.enabled = true;
          this.btnSkill.interactable = true;
          this.fxBtnBelow.active = false;
          this.fxShowSkill.setScale(new Vec3(0, 1, 1));
          this.fxShowSkill.getComponent(Animation).stop();
          DataStore1988.instance.setDataStore({
            targetState: Config1988.instance.TARGET_LOCK.NONE,
            currentTargetState: Config1988.instance.TARGET_LOCK.NONE
          });
        };

        _proto.onAutoTargetOne = function onAutoTargetOne() {
          var selfInfo = DataStore1988.instance.getSelfInfo();

          if (selfInfo.LockFishKind > -1) {
            if (!selfInfo.LockFish || !selfInfo.LockFish.isAvailable()) {
              DataStore1988.instance.setSelfInfo({
                LockFish: FishManager1988.instance.getFishByType(selfInfo.LockFishKind)
              });
            }

            if (selfInfo.LockFish && selfInfo.LockFish.isAvailable()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
                point: selfInfo.LockFish.node.position,
                lockFishID: selfInfo.LockFish._FishID
              });
            } else {
              this.resetAllState();
              this.changeStatusGroupButton(Config1988.instance.TARGET_LOCK.NONE);
            }
          }
        };

        _proto.stopAllNodeAction = function stopAllNodeAction() {
          stopAllActions(this.nodeSkill);
          stopAllActions(this.fxBtnAbove);
          stopAllActions(this.fxShowSkill);

          for (var i = 0; i < this.listNodeAuto.length; i++) {
            stopAllActions(this.listNodeAuto[i]);
          }
        };

        _proto.updateLockFishImg = function updateLockFishImg(fishKind) {
          if (fishKind === void 0) {
            fishKind = 0;
          }

          _GfHUDController.prototype.updateLockFishImg.call(this, fishKind);

          gfEventEmitter.instance.emit(EventCode.SOUND.TARGET_LOCK_ONE);
        };

        _proto.interactableHUD = function interactableHUD(interactable) {
          if (interactable === void 0) {
            interactable = true;
          }

          _GfHUDController.prototype.interactableHUD.call(this, interactable);

          this.stateNodeSkill(interactable);
        };

        _proto.stateNodeSkill = function stateNodeSkill(interactable) {
          this.btnSkill.interactable = interactable;
          this.nodeSkill.children.forEach(function (child) {
            return child.getComponent(Sprite).grayscale = !interactable;
          });
        };

        _proto.resetOnExit = function resetOnExit() {
          _GfHUDController.prototype.resetOnExit.call(this);

          this.resetLockFish();
          this.resetAllState();
        };

        _proto.onDestroy = function onDestroy() {
          _GfHUDController.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return HUDController1988;
      }(GfHUDController), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeSkill", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnSkill", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listNodeAuto", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fxShowSkill", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfstDropDownListBox.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Node, UITransform, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "19117QkU8RGo75suQUSb+iM", "gfstDropDownListBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfstDropDownListBox = exports('GfstDropDownListBox', (_dec = ccclass('GfstDropDownListBox'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfstDropDownListBox, _Component);

        function GfstDropDownListBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "isFull", false);

          _initializerDefineProperty(_assertThisInitialized(_this), "minSize", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fullSize", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfstDropDownListBox.prototype;

        _proto.start = function start() {
          this.node.on(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
        };

        _proto._onUserEndTouch = function _onUserEndTouch() {
          if (!this.isFull) {
            this.isFull = true;
            this.node.getComponent(UITransform).height = this.fullSize;
          }
        };

        _proto.onItemClicked = function onItemClicked() {
          this.node.getComponent(UITransform).height = this.minSize;
        };

        return GfstDropDownListBox;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "minSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 40;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fullSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 250;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Bullet1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './Config1985.ts', './gfNode.ts', './EnemyBullet.ts', './SpineFish1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Collider2D, Contact2DType, UITransform, gfBaseEvents, gfEventEmitter, EventsCode1985, Config1985, gfNode, EnemyBullet, SpineFish1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      UITransform = module.UITransform;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      EnemyBullet = module.EnemyBullet;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "1956flfbbZDtpUfLJe83w0i", "Bullet1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Bullet1985 = exports('Bullet1985', (_dec = ccclass('Bullet1985'), _dec(_class = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(Bullet1985, _gfNode);

        function Bullet1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_BulletMultiple", 0);

          _defineProperty(_assertThisInitialized(_this), "_DeskStation", null);

          _defineProperty(_assertThisInitialized(_this), "_BulletID", null);

          _defineProperty(_assertThisInitialized(_this), "_isMe", false);

          _defineProperty(_assertThisInitialized(_this), "_isDie", false);

          _defineProperty(_assertThisInitialized(_this), "_isFreezed", false);

          _defineProperty(_assertThisInitialized(_this), "_FireType", 0);

          _defineProperty(_assertThisInitialized(_this), "_isFake", false);

          return _this;
        }

        var _proto = Bullet1985.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        };

        _proto.initAssets = function initAssets(config) {};

        _proto.initData = function initData(data) {
          this.node.setPosition(data.position);
          this._BulletMultiple = data.BulletMultiple;
          this._DeskStation = data.DeskStation;
          this._BulletID = data.BulletID;
          this._isMe = data.isMe;
          this._isFake = data.isBulletFake;
          this._isFreezed = data.isFreezed;
          this._FireType = data.FireType;
        };

        _proto.update = function update(dt) {
          if (this._isDie) {
            this.onDie();
            return;
          }

          this.updatePosition(dt);
          this.checkBeyondScreenLimit();
        };

        _proto.checkBeyondScreenLimit = function checkBeyondScreenLimit() {
          var _this$node$getCompone = this.node.getComponent(UITransform),
              width = _this$node$getCompone.width;

          var point = this.node.position.y - width / 2;

          if (point > Config1985.instance.realSize.Height) {
            this._isDie = true;
          }
        };

        _proto.updatePosition = function updatePosition(dt) {
          var delta = dt * Config1985.instance.BulletSpeed;
          var _this$node$position = this.node.position,
              x = _this$node$position.x,
              y = _this$node$position.y;
          y += delta;
          this.node.setPosition(x, y, 0);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          if (this._isDie) return;
          if (other.getComponent(EnemyBullet)) return;
          var fish = other.getComponent(SpineFish1985) || other.node.parent.getComponent(SpineFish1985) || other.node.parent.parent.getComponent(SpineFish1985);
          if (!fish || fish.checkDie()) return;
          this.onHit(fish);
        };

        _proto.onHit = function onHit(fish) {
          var data = this.makeBulletCollisionData(fish);
          fish.onHit(data);

          if (!this._isFake) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, data);
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, data);
          }

          var idImpact = fish.payTable < 40 ? 1 : 2;
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.IMPACT, idImpact);
          this._isDie = true;
        };

        _proto.makeBulletCollisionData = function makeBulletCollisionData(fish) {
          var data = {
            bullet: this,
            position: this.node.position,
            FishID: fish.getId(),
            FishKind: fish.getKind(),
            BulletMultiple: this._BulletMultiple,
            isMe: this._isMe,
            BulletID: this._BulletID,
            isFreezed: this._isFreezed,
            DeskStation: this._DeskStation,
            FireType: this._FireType
          };
          return data;
        };

        _proto.checkDie = function checkDie() {
          return this._isDie;
        };

        _proto.isAvailable = function isAvailable() {
          return !this.checkDie();
        };

        _proto.onDie = function onDie() {
          this.returnPool();
        } //Called whenever object is get from Object Pool
        ;

        _proto.reuse = function reuse(poolMng) {
          _gfNode.prototype.reuse.call(this, poolMng);
        };

        _proto.unuse = function unuse() {
          this._BulletMultiple = 0;
          this._DeskStation = null;
          this._BulletID = null;
          this._isMe = false;
          this._isDie = false;

          _gfNode.prototype.unuse.call(this);
        };

        return Bullet1985;
      }(gfNode), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyMessage.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './gfLocalize.ts', './gfNotifyComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, tween, Tween, Layout, UITransform, gfBaseConfig, deepCopy, formatString, gfDataStore, gfLocalize, GfNotifyComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      tween = module.tween;
      Tween = module.Tween;
      Layout = module.Layout;
      UITransform = module.UITransform;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      deepCopy = module.deepCopy;
      formatString = module.formatString;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "1978dkyay5KYKZ2rPUEufhY", "gfNotifyMessage", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfNotifyMessage = exports('GfNotifyMessage', (_dec = ccclass('GfNotifyMessage'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfNotifyComponent) {
        _inheritsLoose(GfNotifyMessage, _GfNotifyComponent);

        function GfNotifyMessage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfNotifyComponent.call.apply(_GfNotifyComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "speed", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfNotifyMessage.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.show = function show(data) {
          if (!gfBaseConfig.instance.NOTIFY_MESSAGE.position[gfDataStore.instance.getCurrentSceneName()] || !this.validateData(data)) return;
          this.sortDataMessage();

          if (!this._isShow) {
            this.runAnimShow();
          }
        };

        _proto.hide = function hide() {
          var _this2 = this;

          this._isShow = false;
          var scaleHide = new Vec3(this.node.getScale().x, 0, this.node.getScale().z);
          tween(this.node).to(0.5, {
            scale: scaleHide
          }).call(function () {
            _this2.node.active = false;
          }).start();
        };

        _proto.runAnimShow = function runAnimShow() {
          var _this3 = this;

          var _GameConfig$instance$ = gfBaseConfig.instance.NOTIFY_MESSAGE.position[gfDataStore.instance.getCurrentSceneName()],
              x = _GameConfig$instance$.x,
              y = _GameConfig$instance$.y;
          this.node.setPosition(x, y, 0);
          this._isShow = true;
          this.node.active = true;
          this.node.setScale(this.node.getScale().x, 0);
          Tween.stopAllByTarget(this.node);
          var scaleShow = new Vec3(this.node.getScale().x, 1, this.node.getScale().z);
          tween(this.node).to(0.5, {
            scale: scaleShow
          }).call(function () {
            _this3.onStackMessage();
          }).start();
        };

        _proto.play = function play(data) {
          var _this4 = this;

          var json = this.getStringDataNotify(data).replace(/'/g, '"');
          var objMessage = JSON.parse(json);
          this.createNotifyMessage(objMessage);
          this.contentNode.getComponent(Layout).updateLayout();
          var dX = (this.contentNode.getComponent(UITransform).width + this.node.getComponent(UITransform).width) / 2;
          this.contentNode.setPosition(dX, this.contentNode.position.y, 0);
          Tween.stopAllByTarget(this.contentNode);
          tween(this.node).delay(0).call(function () {
            var timer = 2 * dX / _this4.speed;
            var positionEndContent = new Vec3(-dX, _this4.contentNode.position.y, _this4.contentNode.position.z);
            tween(_this4.contentNode).to(timer, {
              position: positionEndContent
            }).delay(0.5).call(function () {
              _this4.onStackMessage();
            }).start();
          }).start();
        };

        _proto.validateData = function validateData(data) {
          var json = this.getStringDataNotify(data).replace(/'/g, '"');

          try {
            var result = !!JSON.parse(json);

            if (result) {
              this._lstMessage.push(data);
            }

            return result;
          } catch (e) {
            return false;
          }
        };

        _proto.getStringDataNotify = function getStringDataNotify(dataInput) {
          if (!gfLocalize || !gfLocalize.instance) return;
          var data = dataInput.data,
              message = dataInput.message,
              type = dataInput.type;
          var str = "";

          if (type >= 0) {
            var configTxtNotify = gfLocalize.instance.txtNotify;
            var _GameConfig$instance = gfBaseConfig.instance,
                NOTIFY_CONFIG = _GameConfig$instance.NOTIFY_CONFIG,
                NOTIFY_TYPE = _GameConfig$instance.NOTIFY_TYPE;

            switch (type) {
              case NOTIFY_TYPE.MESSAGE_BIG_FISH:
                // big fish
                str = deepCopy(configTxtNotify.big_fish);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind].toString(), data[NOTIFY_CONFIG[type].multiple].toString(), data[NOTIFY_CONFIG[type].goldReward].toString()]);
                break;

              case NOTIFY_TYPE.MESSAGE_SPECIAL_SKILL:
                // special skill
                str = deepCopy(configTxtNotify.special_skill[data[NOTIFY_CONFIG[type].subID]]);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_DRAGON_BALL:
                str = deepCopy(configTxtNotify.dragon_balls);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].countBall], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_KILL_MINIBOSS:
                str = deepCopy(configTxtNotify.kill_miniboss);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_DROP_ITEM_MINIBOSS:
                str = deepCopy(configTxtNotify.drop_item_miniboss);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].fishKind], data[NOTIFY_CONFIG[type].itemID], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              case NOTIFY_TYPE.MESSAGE_EVENT:
                str = deepCopy(configTxtNotify.event);
                str = formatString(str, [data[NOTIFY_CONFIG[type].userName], data[NOTIFY_CONFIG[type].goldReward]]);
                break;

              default:
                // normal message
                str = deepCopy(configTxtNotify.message);
                str = formatString(str, [message]);
                break;
            }
          }

          return str;
        };

        _proto.sortDataMessage = function sortDataMessage() {
          var _this5 = this;

          this._lstMessage.sort(function (a, b) {
            return a.type === 0 && b.type !== 0 ? -1 : a.type !== 0 && b.type === 0 ? 1 : 0;
          });

          this._lstMessage.sort(function (a, b) {
            var _a = {
              type: null,
              amount: null
            };
            _a.type = a.type;

            if (_a.type > 0) {
              _a.amount = _this5.replaceAmountData(a);
            }

            var _b = {
              type: null,
              amount: null
            };
            _b.type = b.type;

            if (_b.type > 0) {
              _b.amount = _this5.replaceAmountData(b);
            }

            if (_a.type !== 0 && _b.type !== 0) {
              if (_a.amount > _b.amount) return -1;
              if (_a.amount < _b.amount) return 1;
            }

            return 0;
          });

          this._lstMessage = this._lstMessage.slice(0, gfBaseConfig.instance.NOTIFY_MESSAGE.limited_stack_size);
        };

        _proto.replaceAmountData = function replaceAmountData(data) {
          var notifyConfig = gfBaseConfig.instance.NOTIFY_CONFIG[data.type];
          return Number(data.data[notifyConfig.goldReward].replace(/[^0-9.-]+/g, ""));
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          _GfNotifyComponent.prototype.onBeforeSceneChange.call(this);

          this.node.setScale(this.node.getScale().x, 0);
        };

        return GfNotifyMessage;
      }(GfNotifyComponent), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 320;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLogo.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, loadConfigAsync;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "197f4TTNgtGs71sl9ECWnVm", "GameLogo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameLogo = exports('GameLogo', (_dec = ccclass('GameLogo'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameLogo, _Component);

        function GameLogo() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GameLogo.prototype;

        _proto.onLoad = function onLoad() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            this.node.active = false;
          }
        };

        return GameLogo;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScene1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './Config1988.ts', './gfLoadingScene.ts', './AssetBundle1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Node, sys, Config1988, gfLoadingScene, AssetBundle1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      sys = module.sys;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      gfLoadingScene = module.gfLoadingScene;
    }, function (module) {
      AssetBundle1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "19bbdaEwZZIPZoJxLtwB6pg", "LoadingScene1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingScene1988 = exports('LoadingScene1988', (_dec = ccclass('LoadingScene1988'), _dec2 = property(Label), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfLoadingScene) {
        _inheritsLoose(LoadingScene1988, _gfLoadingScene);

        function LoadingScene1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfLoadingScene.call.apply(_gfLoadingScene, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "loadingText", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectLoading", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingScene1988.prototype;

        _proto.onLoad = function onLoad() {
          _gfLoadingScene.prototype.onLoad.call(this);

          if (sys.isNative) {
            this.effectLoading.active = false;
          }
        };

        _proto.initGameConfig = function initGameConfig() {
          if (!Config1988.instance) {
            new Config1988();
          }
        };

        _proto.initAssetBundle = function initAssetBundle() {
          if (!AssetBundle1988.instance) {
            new AssetBundle1988();
          }
        };

        _proto.updateLoadingProgressDisplay = function updateLoadingProgressDisplay() {
          var percent = Math.min(100, Math.floor(this._currentProgress * 100));

          if (percent < 1) {
            this.loadingText.string = '01%';
          } else if (percent < 10) {
            this.loadingText.string = '0' + percent + '%';
          } else {
            this.loadingText.string = percent + '%';
          }
        };

        return LoadingScene1988;
      }(gfLoadingScene), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "loadingText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "effectLoading", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnvObject1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfDataStore.ts', './Config1985.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, SetZIndex, gfDataStore, Config1985, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "19f783JtF1BnYkUJ8fude08", "EnvObject1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnvObject1985 = exports('EnvObject1985', (_dec = ccclass('EnvObject1985'), _dec(_class = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(EnvObject1985, _gfNode);

        function EnvObject1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "zIndex", 0);

          return _this;
        }

        var _proto = EnvObject1985.prototype;

        _proto.initAssets = function initAssets(config) {
          //this.updateZIndex(config.zIndex);
          this.node.getComponent(Sprite).spriteFrame = config.asset;
        };

        _proto.initData = function initData(data) {
          this.setPosition(data);
        };

        _proto.updateZIndex = function updateZIndex(zIndex) {
          if (zIndex != undefined) {
            this.zIndex = zIndex;
            SetZIndex(this.node, zIndex);
          }
        };

        _proto.setPosition = function setPosition(data) {
          var y = Config1985.instance.AppSize.MaxHeight + Config1985.instance.ISLAND_OFFSET;

          if (data.isResume) {
            var timeSpent = Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000);
            y += timeSpent * Config1985.instance.BackgroundSpeed;
          }

          this.node.setPosition(data.PosX, y, 0);
        };

        _proto.update = function update(dt) {
          this.updatePosition(dt);
        };

        _proto.updatePosition = function updatePosition(dt) {
          var _this$node$getPositio = this.node.getPosition(),
              x = _this$node$getPositio.x,
              y = _this$node$getPositio.y;

          this.node.setPosition(x, y + Config1985.instance.BackgroundSpeed * dt, 0);

          if (this.node.position.y < -Config1985.instance.ISLAND_OFFSET) {
            this.returnPool();
          }
        };

        return EnvObject1985;
      }(gfNode), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PageView1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './NoiseTransition1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, _createClass, cclegacy, _decorator, SpriteFrame, Node, UITransform, ScrollView, Component, NoiseTransition1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      UITransform = module.UITransform;
      ScrollView = module.ScrollView;
      Component = module.Component;
    }, function (module) {
      NoiseTransition1985 = module.NoiseTransition1985;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "1b3cdgBBthORqN0m+jAGV0W", "PageView1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PageView1985 = exports('PageView1985', (_dec = ccclass('PageView1985'), _dec2 = property(SpriteFrame), _dec3 = property(Node), _dec4 = property(NoiseTransition1985), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PageView1985, _Component);

        function PageView1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrSpriteFrameInfo", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "scrollViewContent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pageFX", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "activeIndex", 0);

          return _this;
        }

        var _proto = PageView1985.prototype;

        _proto.resetTo = function resetTo(pageIndex) {
          this.activeIndex = 0;
          this.pageFX[this.top].setSpriteFrame(this.arrSpriteFrameInfo[pageIndex]);
          this.scrollViewContent.getComponent(UITransform).height = this.pageFX[this.top].node.getComponent(UITransform).height;
          this.pageFX[this.top].show();
          this.pageFX[this.bot].hide();
        };

        _proto.scrollToPage = function scrollToPage(pageIndex) {
          this.pageFX[this.bot].setSpriteFrame(this.arrSpriteFrameInfo[pageIndex]);
          this.playTransition();
          this.scrollViewContent.getComponent(UITransform).height = this.pageFX[this.bot].node.getComponent(UITransform).height;
          this.getComponent(ScrollView).stopAutoScroll();
          this.getComponent(ScrollView).scrollToTop(0);
          this.flipActiveIndex();
        };

        _proto.playTransition = function playTransition() {
          this.pageFX[this.bot].fadeIn(0.35);
          this.pageFX[this.top].fadeOut(0.35);
        };

        _proto.flipActiveIndex = function flipActiveIndex() {
          this.activeIndex = 1 - this.activeIndex;
        };

        _createClass(PageView1985, [{
          key: "top",
          get: function get() {
            return this.activeIndex;
          }
        }, {
          key: "bot",
          get: function get() {
            return 1 - this.activeIndex;
          }
        }]);

        return PageView1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrSpriteFrameInfo", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scrollViewContent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageFX", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptSavedList.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfptSavedItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, Node, ScrollView, v2, Component, instantiate, GfptSavedItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      ScrollView = module.ScrollView;
      v2 = module.v2;
      Component = module.Component;
      instantiate = module.instantiate;
    }, function (module) {
      GfptSavedItem = module.GfptSavedItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "1ba88rioZhO+rfRstgkCbXh", "gfptSavedList", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptSavedList = exports('GfptSavedList', (_dec = ccclass('GfptSavedList'), _dec2 = property(Prefab), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptSavedList, _Component);

        function GfptSavedList() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "itemPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "content", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "selectedIndex", 0);

          _defineProperty(_assertThisInitialized(_this), "MAX_VALUE", void 0);

          _defineProperty(_assertThisInitialized(_this), "drawBoardWidth", 0);

          _defineProperty(_assertThisInitialized(_this), "drawBoardHeight", 0);

          _defineProperty(_assertThisInitialized(_this), "itemHeight", 50);

          return _this;
        }

        var _proto = GfptSavedList.prototype;

        _proto.start = function start() {
          this.node.getComponent(ScrollView).verticalScrollBar && this.node.getComponent(ScrollView).verticalScrollBar.show();
          this.node.on("ITEM_CLICKED", this.onItemClicked, this);
        };

        _proto.setItemHeight = function setItemHeight(height) {
          if (height === void 0) {
            height = 50;
          }

          this.itemHeight = height;
        };

        _proto.initBaseValues = function initBaseValues(MAX_VALUE, width, height) {
          this.MAX_VALUE = MAX_VALUE;
          this.drawBoardHeight = height;
          this.drawBoardWidth = width;
        };

        _proto.updateContent = function updateContent(data) {
          var _this2 = this;

          this.content.destroyAllChildren();
          this.content.removeAllChildren();
          if (data.length == 0) return;

          var _loop = function _loop(i) {
            var item = instantiate(_this2.itemPrefab).getComponent(GfptSavedItem);

            _this2.content.addChild(item.node);

            item.setLabel(i, data[i].name);
            item.setHeight(_this2.itemHeight);

            _this2.scheduleOnce(function () {
              //push to next frame, wait for widget resize
              item.setData(data[i], _this2.MAX_VALUE, _this2.drawBoardWidth, _this2.drawBoardHeight);
            }, 0);
          };

          for (var i = 0; i < data.length; ++i) {
            _loop(i);
          }

          this.clearHighLight();
        };

        _proto.addContent = function addContent(node) {
          this.content.addChild(node);
        };

        _proto.selectLast = function selectLast() {
          this.select(this.content.children.length - 1);
        };

        _proto.onItemClicked = function onItemClicked(e) {
          this.clearHighLight();
          this.selectedIndex = e.data.index;
        };

        _proto.clearHighLight = function clearHighLight() {
          this.content.children.forEach(function (e) {
            e.getComponent(GfptSavedItem).enableHighLight(false);
          });
        };

        _proto.select = function select(index) {
          this.clearHighLight();

          if (index >= 0 && index < this.content.children.length) {
            this.selectedIndex = index;
            this.updateHighLight();
          }

          this.node.getComponent(ScrollView).scrollTo(v2(0, 1.0 - (this.selectedIndex + 1) / this.content.children.length), 0.1);
        };

        _proto.updateHighLight = function updateHighLight() {
          this.content.children[this.selectedIndex].getComponent(GfptSavedItem).enableHighLight(true);
        };

        return GfptSavedList;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomType.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomEnum.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, _createClass, cclegacy, _decorator, Prefab, Node, sp, Label, AudioClip, AudioSource, SpriteFrame, Button, CCString, CCFloat, Vec3, UITransform, Size, Vec2, Event, getOpacity, setOpacity, WalletType, SlotSceneType, TutorialCommandType, TutorialTriggerType, SlotGameMode, HorizontalExpandDirection, VerticalExpandDirection;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      sp = module.sp;
      Label = module.Label;
      AudioClip = module.AudioClip;
      AudioSource = module.AudioSource;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      CCString = module.CCString;
      CCFloat = module.CCFloat;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Size = module.Size;
      Vec2 = module.Vec2;
      Event = module.Event;
    }, function (module) {
      getOpacity = module.getOpacity;
      setOpacity = module.setOpacity;
    }, function (module) {
      WalletType = module.WalletType;
      SlotSceneType = module.SlotSceneType;
      TutorialCommandType = module.TutorialCommandType;
      TutorialTriggerType = module.TutorialTriggerType;
      SlotGameMode = module.SlotGameMode;
      HorizontalExpandDirection = module.HorizontalExpandDirection;
      VerticalExpandDirection = module.VerticalExpandDirection;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class4, _class5, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _temp2, _dec12, _dec13, _class7, _class8, _descriptor10, _descriptor11, _temp3, _dec14, _dec15, _dec16, _class10, _class11, _descriptor12, _descriptor13, _temp4, _dec17, _dec18, _dec19, _class13, _class14, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _temp5, _dec20, _dec21, _class16, _class17, _descriptor22, _descriptor23, _temp6, _dec22, _dec23, _class19, _class20, _descriptor24, _descriptor25, _temp7, _dec24, _dec25, _class22, _class23, _descriptor26, _descriptor27, _temp8, _dec26, _dec27, _class25, _class26, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _temp9, _dec28, _class28, _class29, _descriptor33, _descriptor34, _temp10, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _class31, _class32, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _descriptor53, _descriptor54, _descriptor55, _descriptor56, _descriptor57, _descriptor58, _descriptor59, _descriptor60, _descriptor61, _temp11, _dec57, _dec58, _dec59, _class34, _class35, _descriptor62, _descriptor63, _descriptor64, _descriptor65, _temp12;

      cclegacy._RF.push({}, "1c110+n0e5MbLjlzZh6IZ/D", "CustomType", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          integer = _decorator.integer;
      var PoolPrefab = exports('PoolPrefab', (_dec = ccclass('PoolPrefab'), _dec2 = property({
        displayName: 'Prefab Name',
        visible: true
      }), _dec3 = property({
        type: Prefab,
        displayName: 'Prefab',
        visible: true
      }), _dec4 = property({
        displayName: 'Initial Count',
        visible: true
      }), _dec(_class = (_class2 = (_temp = function PoolPrefab() {
        _initializerDefineProperty(this, "prefabName", _descriptor, this);

        _initializerDefineProperty(this, "prefab", _descriptor2, this);

        _initializerDefineProperty(this, "initialCount", _descriptor3, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "prefabName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "prefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "initialCount", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      })), _class2)) || _class));
      var RotatingObject = exports('RotatingObject', (_dec5 = ccclass('RotatingObject'), _dec6 = property({
        type: Node,
        displayName: 'Node to rotate',
        visible: true
      }), _dec7 = property({
        displayName: 'Rotating Speed'
      }), _dec8 = property({
        displayName: 'Rotating Speed Variance'
      }), _dec9 = property({
        displayName: 'Clockwise = 1, Counter Clockwise = -1'
      }), _dec10 = property({
        displayName: 'Min Angle'
      }), _dec11 = property({
        displayName: 'Max Angle'
      }), _dec5(_class4 = (_class5 = (_temp2 = function RotatingObject() {
        _initializerDefineProperty(this, "node", _descriptor4, this);

        _initializerDefineProperty(this, "speed", _descriptor5, this);

        _initializerDefineProperty(this, "speedVar", _descriptor6, this);

        _initializerDefineProperty(this, "clockwise", _descriptor7, this);

        _initializerDefineProperty(this, "minAngle", _descriptor8, this);

        _initializerDefineProperty(this, "maxAngle", _descriptor9, this);
      }, _temp2), (_descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "node", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "speed", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "speedVar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 5;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "clockwise", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "minAngle", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "maxAngle", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      })), _class5)) || _class4));
      var SlotCustomDataType = exports('SlotCustomDataType', (_dec12 = ccclass('SlotCustomDataType'), _dec13 = property({
        type: sp.SkeletonData
      }), _dec12(_class7 = (_class8 = (_temp3 = function SlotCustomDataType() {
        _initializerDefineProperty(this, "spineName", _descriptor10, this);

        _initializerDefineProperty(this, "spineData", _descriptor11, this);
      }, _temp3), (_descriptor10 = _applyDecoratedDescriptor(_class8.prototype, "spineName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class8.prototype, "spineData", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class8)) || _class7));
      var WalletString = exports('WalletString', (_dec14 = ccclass('WalletString'), _dec15 = property({
        type: WalletType
      }), _dec16 = property({
        type: Label
      }), _dec14(_class10 = (_class11 = (_temp4 = function WalletString() {
        _initializerDefineProperty(this, "walletType", _descriptor12, this);

        _initializerDefineProperty(this, "displayString", _descriptor13, this);
      }, _temp4), (_descriptor12 = _applyDecoratedDescriptor(_class11.prototype, "walletType", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return WalletType.NORMAL;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class11.prototype, "displayString", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class11)) || _class10));
      var CustomAudioClip = exports('CustomAudioClip', (_dec17 = ccclass('CustomAudioClip'), _dec18 = property({
        type: AudioClip
      }), _dec19 = property({
        type: AudioSource,
        visible: false
      }), _dec17(_class13 = (_class14 = (_temp5 = function CustomAudioClip() {
        _initializerDefineProperty(this, "isMusic", _descriptor14, this);

        _initializerDefineProperty(this, "isEffect", _descriptor15, this);

        _initializerDefineProperty(this, "destroyedOnSwitchMode", _descriptor16, this);

        _initializerDefineProperty(this, "soundId", _descriptor17, this);

        _initializerDefineProperty(this, "maxCount", _descriptor18, this);

        _initializerDefineProperty(this, "ignorCheckMaxChannel", _descriptor19, this);

        _initializerDefineProperty(this, "audioFile", _descriptor20, this);

        _initializerDefineProperty(this, "audioSource", _descriptor21, this);
      }, _temp5), (_descriptor14 = _applyDecoratedDescriptor(_class14.prototype, "isMusic", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class14.prototype, "isEffect", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class14.prototype, "destroyedOnSwitchMode", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class14.prototype, "soundId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class14.prototype, "maxCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor19 = _applyDecoratedDescriptor(_class14.prototype, "ignorCheckMaxChannel", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class14.prototype, "audioFile", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor21 = _applyDecoratedDescriptor(_class14.prototype, "audioSource", [_dec19], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class14)) || _class13));
      var JackpotType = exports('JackpotType', (_dec20 = ccclass('JackpotType'), _dec21 = property({
        type: SpriteFrame
      }), _dec20(_class16 = (_class17 = (_temp6 = function JackpotType() {
        _initializerDefineProperty(this, "jpName", _descriptor22, this);

        _initializerDefineProperty(this, "image", _descriptor23, this);
      }, _temp6), (_descriptor22 = _applyDecoratedDescriptor(_class17.prototype, "jpName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor23 = _applyDecoratedDescriptor(_class17.prototype, "image", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class17)) || _class16));
      var JackpotObject = exports('JackpotObject', (_dec22 = ccclass("JackpotObject"), _dec23 = property({
        type: Node
      }), _dec22(_class19 = (_class20 = (_temp7 = function JackpotObject() {
        _initializerDefineProperty(this, "jpType", _descriptor24, this);

        _initializerDefineProperty(this, "jpNode", _descriptor25, this);
      }, _temp7), (_descriptor24 = _applyDecoratedDescriptor(_class20.prototype, "jpType", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor25 = _applyDecoratedDescriptor(_class20.prototype, "jpNode", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class20)) || _class19));
      var ScenePrefab = exports('ScenePrefab', (_dec24 = ccclass("ScenePrefab"), _dec25 = property({
        type: SlotSceneType
      }), _dec24(_class22 = (_class23 = (_temp8 = function ScenePrefab() {
        _initializerDefineProperty(this, "sceneType", _descriptor26, this);

        _initializerDefineProperty(this, "prefabPath", _descriptor27, this);
      }, _temp8), (_descriptor26 = _applyDecoratedDescriptor(_class23.prototype, "sceneType", [_dec25], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotSceneType.Other;
        }
      }), _descriptor27 = _applyDecoratedDescriptor(_class23.prototype, "prefabPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class23)) || _class22));
      var CustomEvent = exports('CustomEvent', /*#__PURE__*/function (_Event) {
        _inheritsLoose(CustomEvent, _Event);

        function CustomEvent(name, bubbles, details) {
          var _this;

          _this = _Event.call(this, name, bubbles) || this;

          _defineProperty(_assertThisInitialized(_this), "details", null);

          _this.details = details;
          return _this;
        }

        return CustomEvent;
      }(Event));
      var AssetPathConfig = exports('AssetPathConfig', (_dec26 = ccclass("AssetPathConfig"), _dec27 = property(Node), _dec26(_class25 = (_class26 = (_temp9 = function AssetPathConfig() {
        _initializerDefineProperty(this, "id", _descriptor28, this);

        _initializerDefineProperty(this, "path", _descriptor29, this);

        _initializerDefineProperty(this, "parentNode", _descriptor30, this);

        _initializerDefineProperty(this, "lazyLoadOnWeb", _descriptor31, this);

        _initializerDefineProperty(this, "lazyLoadOnNative", _descriptor32, this);
      }, _temp9), (_descriptor28 = _applyDecoratedDescriptor(_class26.prototype, "id", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      }), _descriptor29 = _applyDecoratedDescriptor(_class26.prototype, "path", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor30 = _applyDecoratedDescriptor(_class26.prototype, "parentNode", [_dec27], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor31 = _applyDecoratedDescriptor(_class26.prototype, "lazyLoadOnWeb", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor32 = _applyDecoratedDescriptor(_class26.prototype, "lazyLoadOnNative", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class26)) || _class25));
      var NodeAddress = exports('NodeAddress', (_dec28 = ccclass("NodeAddress"), _dec28(_class28 = (_class29 = (_temp10 = function NodeAddress() {
        _initializerDefineProperty(this, "rootPath", _descriptor33, this);

        _initializerDefineProperty(this, "name", _descriptor34, this);
      }, _temp10), (_descriptor33 = _applyDecoratedDescriptor(_class29.prototype, "rootPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor34 = _applyDecoratedDescriptor(_class29.prototype, "name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      })), _class29)) || _class28));
      var TutorialStep = exports('TutorialStep', (_dec29 = ccclass("TutorialStep"), _dec30 = property({
        type: TutorialCommandType
      }), _dec31 = property({
        visible: false
      }), _dec32 = property({
        visible: false
      }), _dec33 = property({
        type: Node,
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.ShowObject, TutorialCommandType.HideObject, TutorialCommandType.SetScale, TutorialCommandType.SetPosition, TutorialCommandType.SetRotation, TutorialCommandType.HighlightObject, TutorialCommandType.RevertHighlightObject, TutorialCommandType.SetSiblingIndex, TutorialCommandType.SetOpacity]);
        }
      }), _dec34 = property({
        type: NodeAddress,
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.HighlightObjectByName]);
        }
      }), _dec35 = property({
        type: Node,
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.MoveTo, TutorialCommandType.MoveFromTo]);
        }
      }), _dec36 = property({
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.MoveFromTo]);
        }
      }), _dec37 = property({
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.MoveTo, TutorialCommandType.MoveFromTo]);
        }
      }), _dec38 = property({
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.MoveTo, TutorialCommandType.MoveFromTo]);
        }
      }), _dec39 = property({
        type: Button,
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.DisableButton, TutorialCommandType.EnableButton]);
        }
      }), _dec40 = property({
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.AddFlag, TutorialCommandType.RemoveFlag]);
        }
      }), _dec41 = property({
        type: TutorialTriggerType,
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.WaitForTrigger]);
        }
      }), _dec42 = property({
        type: Label,
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.EditDialog]);
        }
      }), _dec43 = property({
        type: CCString,
        multiline: true,
        tooltip: "Set up per label in dialogLabel list to per text in dialogText list",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.EditDialog]);
        }
      }), _dec44 = property({
        type: CCFloat,
        tooltip: "Set up per node in target list to an opacity value",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.SetOpacity]);
        }
      }), _dec45 = property({
        type: Vec3,
        tooltip: "Set up per node in target list to per element in scale list",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.ShowObject, TutorialCommandType.SetScale]);
        }
      }), _dec46 = property({
        type: Vec3,
        tooltip: "Set up per node in target list to per pos in target pos list",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.ShowObject, TutorialCommandType.SetPosition]);
        }
      }), _dec47 = property({
        type: UITransform,
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.SetContentSize]);
        }
      }), _dec48 = property({
        type: Size,
        tooltip: "Set up content size of node in ui transform target list to per content size in target content size list",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.SetContentSize]);
        }
      }), _dec49 = property({
        type: Vec3,
        tooltip: "Set up per node rotation in target list to per rotation in Euler Angle in target rot list",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.ShowObject, TutorialCommandType.SetRotation]);
        }
      }), _dec50 = property({
        type: Vec2,
        tooltip: "Symbols with Row and Col in table to highlight",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.HighlightSymbol]);
        }
      }), _dec51 = property({
        type: SlotGameMode,
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.PauseAction]);
        }
      }), _dec52 = property({
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.PauseAction]);
        }
      }), _dec53 = property({
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.PauseAction]);
        }
      }), _dec54 = property({
        type: CCFloat,
        tooltip: "Set up per node in target list to an sibling index",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.SetSiblingIndex]);
        }
      }), _dec55 = property({
        tooltip: "Custom command to run",
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.Custom]);
        }
      }), _dec56 = property({
        visible: function visible() {
          return this.getVisible(this.commandType, [TutorialCommandType.HighlightObject, TutorialCommandType.HighlightObjectByName, TutorialCommandType.HighlightSymbol]);
        }
      }), _dec29(_class31 = (_class32 = (_temp11 = /*#__PURE__*/function () {
        function TutorialStep() {
          _initializerDefineProperty(this, "stepName", _descriptor35, this);

          _initializerDefineProperty(this, "priority", _descriptor36, this);

          _initializerDefineProperty(this, "commandType", _descriptor37, this);

          _initializerDefineProperty(this, "targets", _descriptor38, this);

          _initializerDefineProperty(this, "targetsByName", _descriptor39, this);

          _initializerDefineProperty(this, "movingTarget", _descriptor40, this);

          _initializerDefineProperty(this, "fromPosition", _descriptor41, this);

          _initializerDefineProperty(this, "toPosition", _descriptor42, this);

          _initializerDefineProperty(this, "movingTime", _descriptor43, this);

          _initializerDefineProperty(this, "buttons", _descriptor44, this);

          _initializerDefineProperty(this, "flagName", _descriptor45, this);

          _initializerDefineProperty(this, "triggerTypes", _descriptor46, this);

          _initializerDefineProperty(this, "dialogLabels", _descriptor47, this);

          _initializerDefineProperty(this, "dialogTexts", _descriptor48, this);

          _initializerDefineProperty(this, "targetOpacities", _descriptor49, this);

          _initializerDefineProperty(this, "targetScales", _descriptor50, this);

          _initializerDefineProperty(this, "targetPositions", _descriptor51, this);

          _initializerDefineProperty(this, "transformTargets", _descriptor52, this);

          _initializerDefineProperty(this, "targetContentSizes", _descriptor53, this);

          _initializerDefineProperty(this, "targetRotations", _descriptor54, this);

          _initializerDefineProperty(this, "symbolPositions", _descriptor55, this);

          _initializerDefineProperty(this, "GameMode", _descriptor56, this);

          _initializerDefineProperty(this, "actionName", _descriptor57, this);

          _initializerDefineProperty(this, "commandName", _descriptor58, this);

          _initializerDefineProperty(this, "targetSiblingIndices", _descriptor59, this);

          _initializerDefineProperty(this, "customCommand", _descriptor60, this);

          _initializerDefineProperty(this, "unHighlightPreviousObjects", _descriptor61, this);

          _defineProperty(this, "_isStarted", false);

          _defineProperty(this, "_isCompleted", false);

          _defineProperty(this, "_originEnableStates", []);

          _defineProperty(this, "_originPositions", []);

          _defineProperty(this, "_originRotations", []);

          _defineProperty(this, "_originScales", []);

          _defineProperty(this, "_originSizes", []);

          _defineProperty(this, "_originOpacities", []);

          _defineProperty(this, "_originActiveStates", []);

          _defineProperty(this, "_originTexts", []);

          _defineProperty(this, "_movingObjOriginPos", new Vec3(0, 0, 0));
        }

        var _proto = TutorialStep.prototype;

        _proto.getVisible = function getVisible(command, targetTypes) {
          var res = false;

          for (var i = 0; i < targetTypes.length; i++) {
            var targetType = targetTypes[i];

            if (command === targetType) {
              res = true;
              break;
            }
          }

          return res;
        };

        _proto.checkForTrigger = function checkForTrigger(trigger) {
          var res = this.triggerTypes.indexOf(trigger);
          return res >= 0;
        };

        _proto.resetStep = function resetStep() {
          this._isStarted = false;
          this._isCompleted = false;

          this._loadOriginalStatus();
        };

        _proto.startStep = function startStep() {
          this._isStarted = true;
          this._isCompleted = false;

          this._saveOriginalStatus();
        };

        _proto.finishStep = function finishStep() {
          this._isCompleted = true;
        };

        _proto._saveOriginalStatus = function _saveOriginalStatus() {
          switch (this.commandType) {
            case TutorialCommandType.EnableButton:
              this._saveOriginalEnableStates();

              break;

            case TutorialCommandType.DisableButton:
              this._saveOriginalEnableStates();

              break;

            case TutorialCommandType.SetPosition:
              this._saveOriginalPositions();

              break;

            case TutorialCommandType.MoveTo:
              this._saveMovingObjOriginalPositions();

              break;

            case TutorialCommandType.MoveFromTo:
              this._saveMovingObjOriginalPositions();

              break;

            case TutorialCommandType.SetRotation:
              this._saveOriginalRotations();

              break;

            case TutorialCommandType.SetScale:
              this._saveOriginalScales();

              break;

            case TutorialCommandType.SetContentSize:
              this._saveOriginalContentSizes();

              break;

            case TutorialCommandType.SetOpacity:
              this._saveOriginalOpacities();

              break;

            case TutorialCommandType.ShowObject:
              this._saveOriginalActiveStates();

              break;

            case TutorialCommandType.HideObject:
              this._saveOriginalActiveStates();

              break;

            case TutorialCommandType.EditDialog:
              this._saveOriginalDialogs();

              break;
          }
        };

        _proto._loadOriginalStatus = function _loadOriginalStatus() {
          switch (this.commandType) {
            case TutorialCommandType.EnableButton:
              this._loadOriginalEnableStates();

              break;

            case TutorialCommandType.DisableButton:
              this._loadOriginalEnableStates();

              break;

            case TutorialCommandType.SetPosition:
              this._loadOriginalPositions();

              break;

            case TutorialCommandType.MoveTo:
              this._loadMovingObjOriginalPositions();

              break;

            case TutorialCommandType.MoveFromTo:
              this._loadMovingObjOriginalPositions();

              break;

            case TutorialCommandType.SetRotation:
              this._loadOriginalRotations();

              break;

            case TutorialCommandType.SetScale:
              this._loadOriginalScales();

              break;

            case TutorialCommandType.SetContentSize:
              this._loadOriginalContentSizes();

              break;

            case TutorialCommandType.SetOpacity:
              this._loadOriginalOpacities();

              break;

            case TutorialCommandType.ShowObject:
              this._loadOriginalActiveStates();

              break;

            case TutorialCommandType.HideObject:
              this._loadOriginalActiveStates();

              break;

            case TutorialCommandType.EditDialog:
              this._loadOriginalDialogs();

              break;
          }
        };

        _proto._saveOriginalPositions = function _saveOriginalPositions() {
          this._originPositions = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var pos = target.position.clone();

              this._originPositions.push(pos);
            }
          }
        };

        _proto._saveMovingObjOriginalPositions = function _saveMovingObjOriginalPositions() {
          this._movingObjOriginPos = this.movingTarget.position.clone();
        };

        _proto._saveOriginalRotations = function _saveOriginalRotations() {
          this._originRotations = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var rot = target.eulerAngles.clone();

              this._originRotations.push(rot);
            }
          }
        };

        _proto._saveOriginalScales = function _saveOriginalScales() {
          this._originScales = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var scal = target.scale.clone();

              this._originScales.push(scal);
            }
          }
        };

        _proto._saveOriginalOpacities = function _saveOriginalOpacities() {
          this._originOpacities = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var opa = getOpacity(target);

              this._originOpacities.push(opa);
            }
          }
        };

        _proto._saveOriginalActiveStates = function _saveOriginalActiveStates() {
          this._originActiveStates = [];

          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];

            if (target) {
              var _active = target.active;

              this._originActiveStates.push(_active);
            }
          }
        };

        _proto._saveOriginalEnableStates = function _saveOriginalEnableStates() {
          this._originEnableStates = [];

          for (var i = 0; i < this.buttons.length; i++) {
            var button = this.buttons[i];

            if (button) {
              var enable = button.interactable;

              this._originEnableStates.push(enable);
            }
          }
        };

        _proto._saveOriginalContentSizes = function _saveOriginalContentSizes() {
          this._originSizes = [];

          for (var i = 0; i < this.transformTargets.length; i++) {
            var transform = this.transformTargets[i];

            if (transform) {
              var size = transform.contentSize.clone();

              this._originSizes.push(size);
            }
          }
        };

        _proto._saveOriginalDialogs = function _saveOriginalDialogs() {
          this._originTexts = [];

          for (var i = 0; i < this.dialogLabels.length; i++) {
            var label = this.dialogLabels[i];

            if (label) {
              var text = label.string;

              this._originTexts.push(text);
            }
          }
        };

        _proto._loadOriginalPositions = function _loadOriginalPositions() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var pos = this._originPositions[i];

            if (target && pos) {
              target.setPosition(pos);
            }
          }

          this._originPositions = [];
        };

        _proto._loadOriginalRotations = function _loadOriginalRotations() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var rot = this._originRotations[i];

            if (target && rot) {
              target.setRotationFromEuler(rot);
            }
          }

          this._originRotations = [];
        };

        _proto._loadOriginalScales = function _loadOriginalScales() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var scale = this._originScales[i];

            if (target && scale) {
              target.scale = scale;
            }
          }

          this._originScales = [];
        };

        _proto._loadOriginalOpacities = function _loadOriginalOpacities() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var opa = this._originOpacities[i];

            if (target) {
              setOpacity(target, opa);
            }
          }

          this._originOpacities = [];
        };

        _proto._loadOriginalActiveStates = function _loadOriginalActiveStates() {
          for (var i = 0; i < this.targets.length; i++) {
            var target = this.targets[i];
            var active = this._originActiveStates[i];

            if (target) {
              target.active = active;
            }
          }

          this._originActiveStates = [];
        };

        _proto._loadOriginalEnableStates = function _loadOriginalEnableStates() {
          for (var i = 0; i < this.buttons.length; i++) {
            var button = this.buttons[i];
            var enable = this._originEnableStates[i];

            if (button) {
              button.interactable = enable;
            }
          }

          this._originEnableStates = [];
        };

        _proto._loadOriginalContentSizes = function _loadOriginalContentSizes() {
          for (var i = 0; i < this.transformTargets.length; i++) {
            var transform = this.transformTargets[i];
            var size = this._originSizes[i];

            if (transform && size) {
              transform.setContentSize(size);
            }
          }

          this._originSizes = [];
        };

        _proto._loadOriginalDialogs = function _loadOriginalDialogs() {
          for (var i = 0; i < this.dialogLabels.length; i++) {
            var label = this.dialogLabels[i];
            var text = this._originTexts[i];

            if (label && text) {
              label.string = text;
            }
          }

          this._originTexts = [];
        };

        _proto._loadMovingObjOriginalPositions = function _loadMovingObjOriginalPositions() {
          this.movingTarget.setPosition(this._movingObjOriginPos);
        };

        _createClass(TutorialStep, [{
          key: "isStarted",
          get: function get() {
            return this._isStarted;
          }
        }, {
          key: "isCompleted",
          get: function get() {
            return this._isCompleted;
          }
        }]);

        return TutorialStep;
      }(), _temp11), (_descriptor35 = _applyDecoratedDescriptor(_class32.prototype, "stepName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor36 = _applyDecoratedDescriptor(_class32.prototype, "priority", [integer], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor37 = _applyDecoratedDescriptor(_class32.prototype, "commandType", [_dec30], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return TutorialCommandType.Custom;
        }
      }), _applyDecoratedDescriptor(_class32.prototype, "isStarted", [_dec31], Object.getOwnPropertyDescriptor(_class32.prototype, "isStarted"), _class32.prototype), _applyDecoratedDescriptor(_class32.prototype, "isCompleted", [_dec32], Object.getOwnPropertyDescriptor(_class32.prototype, "isCompleted"), _class32.prototype), _descriptor38 = _applyDecoratedDescriptor(_class32.prototype, "targets", [_dec33], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor39 = _applyDecoratedDescriptor(_class32.prototype, "targetsByName", [_dec34], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor40 = _applyDecoratedDescriptor(_class32.prototype, "movingTarget", [_dec35], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor41 = _applyDecoratedDescriptor(_class32.prototype, "fromPosition", [_dec36], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 0);
        }
      }), _descriptor42 = _applyDecoratedDescriptor(_class32.prototype, "toPosition", [_dec37], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Vec3(0, 0, 0);
        }
      }), _descriptor43 = _applyDecoratedDescriptor(_class32.prototype, "movingTime", [_dec38], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor44 = _applyDecoratedDescriptor(_class32.prototype, "buttons", [_dec39], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor45 = _applyDecoratedDescriptor(_class32.prototype, "flagName", [_dec40], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "";
        }
      }), _descriptor46 = _applyDecoratedDescriptor(_class32.prototype, "triggerTypes", [_dec41], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor47 = _applyDecoratedDescriptor(_class32.prototype, "dialogLabels", [_dec42], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor48 = _applyDecoratedDescriptor(_class32.prototype, "dialogTexts", [_dec43], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor49 = _applyDecoratedDescriptor(_class32.prototype, "targetOpacities", [_dec44], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor50 = _applyDecoratedDescriptor(_class32.prototype, "targetScales", [_dec45], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor51 = _applyDecoratedDescriptor(_class32.prototype, "targetPositions", [_dec46], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor52 = _applyDecoratedDescriptor(_class32.prototype, "transformTargets", [_dec47], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor53 = _applyDecoratedDescriptor(_class32.prototype, "targetContentSizes", [_dec48], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor54 = _applyDecoratedDescriptor(_class32.prototype, "targetRotations", [_dec49], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor55 = _applyDecoratedDescriptor(_class32.prototype, "symbolPositions", [_dec50], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor56 = _applyDecoratedDescriptor(_class32.prototype, "GameMode", [_dec51], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return SlotGameMode.NormalGame;
        }
      }), _descriptor57 = _applyDecoratedDescriptor(_class32.prototype, "actionName", [_dec52], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor58 = _applyDecoratedDescriptor(_class32.prototype, "commandName", [_dec53], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor59 = _applyDecoratedDescriptor(_class32.prototype, "targetSiblingIndices", [_dec54], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor60 = _applyDecoratedDescriptor(_class32.prototype, "customCommand", [_dec55], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor61 = _applyDecoratedDescriptor(_class32.prototype, "unHighlightPreviousObjects", [_dec56], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class32)) || _class31));
      var ExpandingConfig = exports('ExpandingConfig', (_dec57 = ccclass("ExpandingConfig"), _dec58 = property({
        type: HorizontalExpandDirection
      }), _dec59 = property({
        type: VerticalExpandDirection
      }), _dec57(_class34 = (_class35 = (_temp12 = function ExpandingConfig() {
        _initializerDefineProperty(this, "expandWidth", _descriptor62, this);

        _initializerDefineProperty(this, "expandHeight", _descriptor63, this);

        _initializerDefineProperty(this, "expandDirectionHorizontal", _descriptor64, this);

        _initializerDefineProperty(this, "expandDirectionVertical", _descriptor65, this);
      }, _temp12), (_descriptor62 = _applyDecoratedDescriptor(_class35.prototype, "expandWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 200;
        }
      }), _descriptor63 = _applyDecoratedDescriptor(_class35.prototype, "expandHeight", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 200;
        }
      }), _descriptor64 = _applyDecoratedDescriptor(_class35.prototype, "expandDirectionHorizontal", [_dec58], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return HorizontalExpandDirection.LeftToRight;
        }
      }), _descriptor65 = _applyDecoratedDescriptor(_class35.prototype, "expandDirectionVertical", [_dec59], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return VerticalExpandDirection.BottomToTop;
        }
      })), _class35)) || _class34));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyStack.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfNotifyComponent.ts', './gfNotifyItemStack.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, SpriteAtlas, Font, BitmapFont, Prefab, instantiate, tween, warn, stopAllActions, GfNotifyComponent, gfNotifyItemStack;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      Font = module.Font;
      BitmapFont = module.BitmapFont;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      tween = module.tween;
      warn = module.warn;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }, function (module) {
      gfNotifyItemStack = module.gfNotifyItemStack;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "1ccabEZJ5ZP3JktQNMP0iu5", "gfNotifyStack", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfNotifyStack = exports('GfNotifyStack', (_dec = ccclass('GfNotifyStack'), _dec2 = property({
        type: Node,
        override: true,
        visible: false
      }), _dec3 = property({
        type: SpriteAtlas,
        override: true,
        visible: false
      }), _dec4 = property({
        override: true,
        visible: false
      }), _dec5 = property({
        type: Font,
        override: true,
        visible: false
      }), _dec6 = property({
        type: BitmapFont,
        override: true,
        visible: false
      }), _dec7 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfNotifyComponent) {
        _inheritsLoose(GfNotifyStack, _GfNotifyComponent);

        function GfNotifyStack() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfNotifyComponent.call.apply(_GfNotifyComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "contentNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "atlasFishNotify", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "defaultFontSize", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "defaultFont", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "moneyFont", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "itemPrefab", _descriptor6, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_listItem", []);

          _defineProperty(_assertThisInitialized(_this), "CONFIG_HIDE", void 0);

          _defineProperty(_assertThisInitialized(_this), "NOTIFY_FORMAT", void 0);

          _defineProperty(_assertThisInitialized(_this), "NOTIFY_TYPE", void 0);

          _defineProperty(_assertThisInitialized(_this), "NOTIFY_CONFIG", void 0);

          return _this;
        }

        var _proto = GfNotifyStack.prototype;

        _proto.onLoad = function onLoad() {
          var _this$NOTIFY_FORMAT;

          _GfNotifyComponent.prototype.onLoad.call(this);

          this.NOTIFY_CONFIG = {
            STACK_SIZE: 25,
            IDLE_TIME: 1.5,
            TIME_MOVE: 0.25,
            MAX_ITEM: 3
          };
          this.NOTIFY_TYPE = {
            BIG_FISH: 2,
            SPECIAL_SKILL: 3,
            DRAGON_BALL: 4,
            KILL_MINI_BOSS: 5,
            DROP_ITEM_MINI_BOSS: 6
          };
          this.NOTIFY_FORMAT = (_this$NOTIFY_FORMAT = {}, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.BIG_FISH] = {
            userName: 0,
            itemKind: 1,
            goldReward: 2
          }, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.SPECIAL_SKILL] = {
            userName: 0,
            itemKind: 1,
            goldReward: 2
          }, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.DRAGON_BALL] = {
            userName: 0,
            itemKind: 1,
            goldReward: 2
          }, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.KILL_MINI_BOSS] = {
            userName: 0,
            itemKind: 1,
            goldReward: 3
          }, _this$NOTIFY_FORMAT[this.NOTIFY_TYPE.DROP_ITEM_MINI_BOSS] = {
            userName: 0,
            itemKind: 1,
            childItem: 2,
            goldReward: 3
          }, _this$NOTIFY_FORMAT);
          this.CONFIG_HIDE = {
            IDLE_TIME: 1.5,
            TIME_MOVE: 0.25
          };

          for (var i = 0; i <= this.NOTIFY_CONFIG.MAX_ITEM; i++) {
            var item = instantiate(this.itemPrefab).getComponent(gfNotifyItemStack);
            item.node.setParent(this.node);
            item.initObj(i);

            this._listItem.push(item);
          }

          this.extendInit();
        };

        _proto.extendInit = function extendInit() {// Override here
        };

        _proto.show = function show(data) {
          if (!this.formatData(data)) return;
          this.updateListMessage(data);
          if (this._isShow) return;
          stopAllActions(this.node);
          this._isShow = true;
          this.node.active = true;
          this.onStackMessage();
        };

        _proto.play = function play(data) {
          var _this2 = this;

          var IDLE_TIME = this.NOTIFY_CONFIG.IDLE_TIME;
          stopAllActions(this.node);
          tween(this.node).call(function () {
            var mainItem = null;
            var listChildItem = [];

            _this2._listItem.forEach(function (item) {
              if (item.getIndex() == _this2._listItem.length - 1) {
                mainItem = item;
              } else {
                listChildItem.push(item);
              }
            });

            mainItem.showItem(data);

            _this2.moveDownChildItem(listChildItem);
          }).delay(IDLE_TIME).call(function () {
            _this2.onStackMessage();
          }).start();
        };

        _proto.moveDownChildItem = function moveDownChildItem(listItem) {
          var _this3 = this;

          if (listItem === void 0) {
            listItem = [];
          }

          listItem.forEach(function (item) {
            var currentIndex = item.getIndex();
            var lastItem = false;

            if (currentIndex == _this3._listItem.length - 2) {
              lastItem = true;
            }

            item.moveToIndex(currentIndex + 1, lastItem);
          });
        };

        _proto.hide = function hide() {
          var _this4 = this;

          this._isShow = false;
          stopAllActions(this.node);
          var _this$CONFIG_HIDE = this.CONFIG_HIDE,
              IDLE_TIME = _this$CONFIG_HIDE.IDLE_TIME,
              TIME_MOVE = _this$CONFIG_HIDE.TIME_MOVE;
          var countShow = 0;

          this._listItem.forEach(function (item) {
            if (item.checkShow()) countShow = countShow + 1;
          });

          var timeHide = 0;

          var _loop = function _loop(i) {
            var item = _this4._listItem.find(function (obj) {
              return obj.getIndex() === i;
            });

            var data = {
              idleTime: i === countShow - 1 ? 0 : (countShow - (i + 1)) * (IDLE_TIME + TIME_MOVE),
              timeMove: TIME_MOVE
            };
            timeHide = timeHide + data.idleTime + data.timeMove;
            item.hideAfterDeltaTime(data);
          };

          for (var i = 0; i < countShow; i++) {
            _loop(i);
          }

          tween(this.node).delay(timeHide).call(function () {
            _this4.node.active = false;
          }).start();
        };

        _proto.updateListMessage = function updateListMessage(data) {
          if (this._lstMessage.length >= this.NOTIFY_CONFIG.STACK_SIZE) {
            this._lstMessage.shift();
          }

          this._lstMessage.push(data);

          this.sortDataMessage(this._lstMessage);
        };

        _proto.formatData = function formatData(dataInput) {
          if (dataInput.formatted) return true;
          var data = dataInput.data,
              message = dataInput.message,
              type = dataInput.type;
          var format = this.NOTIFY_FORMAT[type];

          if (format) {
            var keys = Object.keys(format);
            var newData = {};
            keys.forEach(function (key) {
              newData[key] = data[format[key]];
            });
            dataInput.data = newData;
            dataInput.formatted = true;
            return true;
          }

          warn('Invalid message:', dataInput);
          return false;
        };

        _proto.sortDataMessage = function sortDataMessage(lstMessage) {
          var _this5 = this;

          lstMessage.sort(function (a, b) {
            return a.type === 0 && b.type !== 0 ? -1 : a.type !== 0 && b.type === 0 ? 1 : 0;
          });
          lstMessage.sort(function (a, b) {
            var _a = {};
            _a.type = a.type;

            if (_a.type > 0) {
              _a.amount = _this5.replaceAmountData(a);
            }

            var _b = {};
            _b.type = b.type;

            if (_b.type > 0) {
              _b.amount = _this5.replaceAmountData(b);
            }

            if (_a.type !== 0 && _b.type !== 0) {
              if (_a.amount > _b.amount) return -1;
              if (_a.amount < _b.amount) return 1;
            }

            return 0;
          });
          return lstMessage;
        };

        _proto.replaceAmountData = function replaceAmountData(data) {
          return Number(data.data.goldReward.replace(/[^0-9.-]+/g, ""));
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          stopAllActions(this.node);

          this._listItem.forEach(function (item) {
            item.reset();
          });
        };

        return GfNotifyStack;
      }(GfNotifyComponent), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "contentNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "atlasFishNotify", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultFontSize", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 32;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "defaultFont", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyFont", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "itemPrefab", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, instantiate, isValid, Component, convertAssetArrayToObject, gfBaseEvents, gfBaseConfig, SetZIndex, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "1d7bcUxjolBO5vxnSUWWlQw", "gfCutSceneLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfCutSceneLayer = exports('gfCutSceneLayer', (_dec = ccclass('gfCutSceneLayer'), _dec2 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfCutSceneLayer, _Component);

        function gfCutSceneLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listCutScene", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_listNodeCutScene", []);

          _defineProperty(_assertThisInitialized(_this), "cutSceneAssets", null);

          return _this;
        }

        var _proto = gfCutSceneLayer.prototype;

        _proto.onLoad = function onLoad() {
          this.setZIndex();
          this.cutSceneAssets = convertAssetArrayToObject(this.listCutScene);
          this.initEvents();
        };

        _proto.setZIndex = function setZIndex() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.CUTSCENE);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
          registerEvent(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, this.showCutScene, this);
          registerEvent(gfBaseEvents.CUT_SCENE.HIDE_CUT_SCENE, this.hideCutScene, this);
          registerEvent(gfBaseEvents.CUT_SCENE.HIDE_ALL_CUT_SCENE, this.hideAllCutScene, this);
        };

        _proto.showCutScene = function showCutScene(name, content, callback) {
          if (name === void 0) {
            name = "";
          }

          if (content === void 0) {
            content = null;
          }

          var cutScenePrefab = this.cutSceneAssets[name];
          if (!cutScenePrefab) return;
          var cutSceneItem = instantiate(cutScenePrefab);
          cutSceneItem.parent = this.node;
          cutSceneItem.show(content, callback);

          this._listNodeCutScene.push(cutSceneItem);
        };

        _proto.hideCutScene = function hideCutScene(name) {
          if (name === void 0) {
            name = "";
          } //TODO: implement later


          var cutscene = this.getCutSceneByName(name);
          if (!cutscene) return;
          cutscene.hide();
          this._listNodeCutScene = this._listNodeCutScene.filter(function (cutscene) {
            return cutscene.name !== name;
          });
        };

        _proto.hideAllCutScene = function hideAllCutScene() {
          this._listNodeCutScene.forEach(function (item) {
            if (isValid(item)) {
              item.resetOnExit();
              item.destroy();
            }
          });

          this._listNodeCutScene.length = 0;
        };

        _proto.getCutSceneByName = function getCutSceneByName(name) {
          return this._listNodeCutScene.find(function (cutscene) {
            return cutscene.name === name;
          });
        };

        _proto.resetOnExit = function resetOnExit() {
          this.hideAllCutScene();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfCutSceneLayer;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listCutScene", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup02.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1da7c0SU4tOao1KO+bAFaFN", "gfFishGroup02", undefined);

      var gfFishGroup2 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup2() {}

        gfFishGroup2.createGroup2SmallFish = function createGroup2SmallFish(_ref) {
          var count = _ref.count,
              moveUp = _ref.moveUp;
          var distantsBorder = 185;
          var flip = gfFishGroupData.isFlipped();
          var offsetX = gfBaseConfig.instance.realSize.Width / count;
          var height = gfBaseConfig.instance.AppSize.Height;
          moveUp = flip ? moveUp : !moveUp;
          var stopY = moveUp ? height - distantsBorder : distantsBorder;
          var endY = moveUp ? -distantsBorder : height + distantsBorder;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var fishOffset = flip ? count - i : i;
            var startX = 10 + gfBaseConfig.instance.SceneBox.Left + fishOffset * offsetX;
            var startY = moveUp ? height + Math.random() * 100 : Math.random() * 100 * -1;
            var moveInTime = 2;
            var stayTime = 40;
            var moveOutTime = 4;
            fishInfo.moveAction = new FishMoveActions(v2(startX, startY), endY > startY ? 90 : -90);
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: moveInTime,
              x: startX,
              y: stopY
            });
            fishInfo.moveAction.appendAction(FISH_ACTION.Delay, {
              time: stayTime
            });
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: moveOutTime,
              x: startX,
              y: endY
            });
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup2.createGroup2BigFish = function createGroup2BigFish(_ref2) {
          var count = _ref2.count,
              upperLine = _ref2.upperLine,
              startX = _ref2.startX,
              endX = _ref2.endX;
          var distantsBorderMore = 255;
          upperLine = gfFishGroupData.isFlipped() ? !upperLine : upperLine;
          var startY = upperLine ? distantsBorderMore : gfBaseConfig.instance.AppSize.Height - distantsBorderMore;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var delay = i * 5;
            var defaultMoveTime = 17;
            var moveAction = new FishMoveActions(v2(startX, startY));
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: defaultMoveTime,
              x: endX,
              y: startY
            });
            fishInfo.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup2.create = function create() {
          // Two queues move in and wait
          var left = gfBaseConfig.instance.SceneBox.Left - 300;
          var right = gfBaseConfig.instance.SceneBox.Right + 300;
          this.createGroup2SmallFish({
            count: 60,
            moveUp: false
          });
          this.createGroup2SmallFish({
            count: 60,
            moveUp: true
          });
          this.createGroup2BigFish({
            count: 7,
            upperLine: false,
            startX: right,
            endX: left
          });
          this.createGroup2BigFish({
            count: 7,
            upperLine: true,
            startX: left,
            endX: right
          });
        };

        return gfFishGroup2;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ActionHelperForTest.ts", ['cc', './utilsForTest.ts'], function (exports) {
  'use strict';

  var cclegacy, tween, UIOpacity, math, v3, Tween, bezier, v2, misc, setOpacity;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      math = module.math;
      v3 = module.v3;
      Tween = module.Tween;
      bezier = module.bezier;
      v2 = module.v2;
      misc = module.misc;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "218ed8CsdJOaYM16xbcJW9h", "ActionHelperForTest", undefined);

      var fadeOut = exports('fadeOut', function fadeOut(time, easing) {
        return fadeTo(time, 0, easing);
      });
      var fadeIn = exports('fadeIn', function fadeIn(time, easing) {
        return fadeTo(time, 255, easing);
      });
      var fadeTo = exports('fadeTo', function fadeTo(time, opacity, easing) {
        if (opacity < 0 || opacity > 255) {
          opacity = 0;
        }

        var currentOpacity = 0;
        return tween().to(time, null, {
          easing: easing,
          onStart: function onStart(target) {
            var uiProps = target.getComponent(UIOpacity);

            if (!uiProps) {
              uiProps = target.addComponent(UIOpacity);
            }

            currentOpacity = uiProps.opacity;
          },
          onUpdate: function onUpdate(target, ratio) {
            var newOpacity = math.lerp(currentOpacity, opacity, ratio);
            setOpacity(target, newOpacity);
          }
        });
      });
      var delay = exports('delay', function delay(time) {
        return tween().delay(time);
      });
      var scaleTo = exports('scaleTo', function scaleTo(time, x, y, easing) {
        if (y == undefined) {
          y = x;
        }

        return tween().to(time, {
          scale: v3(x, y, 1)
        }, {
          easing: easing
        });
      });
      var rotateTo = exports('rotateTo', function rotateTo(time, angle, easing) {
        var startAngle = null;
        var realAngle = null;
        return tween().to(time, null, {
          easing: easing,
          onStart: function onStart(target) {
            startAngle = target.angle % 360;
            realAngle = angle - startAngle;
            if (realAngle > 180) realAngle -= 360;
            if (realAngle < -180) realAngle += 360;
          },
          onUpdate: function onUpdate(target, ratio) {
            target.angle = startAngle + realAngle * ratio;
          }
        });
      });
      var rotateBy = exports('rotateBy', function rotateBy(time, a, easing) {
        return tween().by(time, {
          angle: a
        }, {
          easing: easing
        });
      });
      var call = exports('call', function call(callFunc) {
        return tween().call(callFunc);
      });
      var v3f = exports('v3f', function v3f(f) {
        return v3(f, f, f);
      });
      var stopAllActions = exports('stopAllActions', function stopAllActions(target) {
        Tween.stopAllByTarget(target);
      });
      var moveTo = exports('moveTo', function moveTo(dur, x, y, z, easing) {
        if (y === void 0) {
          y = 0;
        }

        if (z === void 0) {
          z = 0;
        }

        return tween().to(dur, {
          position: v3(x, y, z)
        }, {
          easing: easing
        });
      });
      var moveBy = exports('moveBy', function moveBy(dur, x, y, z, easing) {
        if (y === void 0) {
          y = 0;
        }

        if (z === void 0) {
          z = 0;
        }

        return tween().by(dur, {
          position: v3(x, y, z)
        }, {
          easing: easing
        });
      });
      var bezierTo = exports('bezierTo', function bezierTo(dur, points, easing) {
        var start = v3(0, 0, 0);
        return tween().to(dur, null, {
          easing: easing,
          onStart: function onStart(target) {
            start = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var x = bezier(start.x, points[0].x, points[1].x, points[2].x, ratio);
            var y = bezier(start.y, points[0].y, points[1].y, points[2].y, ratio);
            target.setPosition(x, y, start.z);
          }
        });
      });
      var gfMoveBy = exports('gfMoveBy', function gfMoveBy(duration, x, y, timeSkipped, easing) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          easing: easing,
          onStart: function onStart(target) {
            startPos = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * x;
            var py = startPos.y + dt * y;
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfMoveTo = exports('gfMoveTo', function gfMoveTo(duration, x, y, timeSkipped, easing) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          easing: easing,
          onStart: function onStart(target) {
            startPos = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * (x - startPos.x);
            var py = startPos.y + dt * (y - startPos.y);
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfMoveByDistance = exports('gfMoveByDistance', function gfMoveByDistance(duration, distance, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        var deltaPos = v2(0, 0);
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            var node = target;
            startPos = node.getPosition();
            var angle = misc.degreesToRadians(node.angle);
            deltaPos = v2(distance * Math.cos(angle), distance * Math.sin(angle));
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * deltaPos.x;
            var py = startPos.y + dt * deltaPos.y;
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfCircleBy = exports('gfCircleBy', function gfCircleBy(duration, center, radius, angle, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        var baseAngle = 0;
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            var node = target;
            startPos = node.getPosition();
            baseAngle = Math.atan2(startPos.y - center.y, startPos.x - center.x);
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var radian = baseAngle + misc.degreesToRadians(angle) * dt;
            var x = radius * Math.cos(radian);
            var y = radius * Math.sin(radian);
            target.setPosition(x + center.x, y + center.y, startPos.z);
          }
        });
      });
      var gfBezierBy = exports('gfBezierBy', function gfBezierBy(duration, points, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var start = v3(0, 0, 0);
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            start = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var x = bezier(start.x, start.x + points[0].x, start.x + points[1].x, start.x + points[2].x, dt);
            var y = bezier(start.y, start.y + points[0].y, start.y + points[1].y, start.y + points[2].y, dt);
            target.setPosition(x, y, start.z);
          }
        });
      });
      var shake = exports('shake', function shake(pos, duration, delay) {
        if (delay === void 0) {
          delay = 0;
        }

        var timeFrame = duration / 11;
        var posX = pos.x;
        var posY = pos.y;
        return tween().to(timeFrame, {
          position: v3(posX - 1, posY - 2, 0),
          angle: -1
        }) //10%
        .to(timeFrame, {
          position: v3(posX - 3, posY + 0, 0),
          angle: 1
        }) //20%
        .to(timeFrame, {
          position: v3(posX + 3, posY + 2, 0),
          angle: 0
        }) //30%
        .to(timeFrame, {
          position: v3(posX + 1, posY - 1, 0),
          angle: 1
        }) //40%
        .to(timeFrame, {
          position: v3(posX - 1, posY + 2, 0),
          angle: -1
        }) //50%
        .to(timeFrame, {
          position: v3(posX - 3, posY + 1, 0),
          angle: 0
        }) //60%
        .to(timeFrame, {
          position: v3(posX + 3, posY + 1, 0),
          angle: -1
        }) //70%
        .to(timeFrame, {
          position: v3(posX - 1, posY - 1, 0),
          angle: 1
        }) //80%
        .to(timeFrame, {
          position: v3(posX + 1, posY + 2, 0),
          angle: 0
        }) //90%
        .to(timeFrame, {
          position: v3(posX + 1, posY - 2, 0),
          angle: -1
        }) //100%
        .to(timeFrame, {
          position: v3(posX, posY, 0),
          angle: 0
        }) //100%
        .delay(delay);
      });
      var blink = exports('blink', function blink(duration, times, finalOpacity) {
        if (finalOpacity === void 0) {
          finalOpacity = 255;
        }

        var slice = 1.0 / times;
        return tween().to(duration, null, {
          onUpdate: function onUpdate(target, ratio) {
            var m = ratio % slice;
            setOpacity(target, m > slice / 2 ? 255 : 0);
          },
          onComplete: function onComplete(target) {
            setOpacity(target, finalOpacity);
          }
        });
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/packet-manager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2208fmEbN9EhoAPZMJuKRLJ", "packet-manager", undefined);

      var PacketManager = exports('PacketManager', /*#__PURE__*/function () {
        function PacketManager(maxRetry) {
          if (maxRetry === void 0) {
            maxRetry = 3;
          }

          _defineProperty(this, "maxRetry", void 0);

          _defineProperty(this, "_ackPacket", {});

          _defineProperty(this, "_ids", 0);

          this.maxRetry = maxRetry;
        }

        var _proto = PacketManager.prototype;

        _proto.hasPacket = function hasPacket() {
          return Object.keys(this._ackPacket).length > 0;
        };

        _proto.addNew = function addNew(message) {
          var packetId = this._ids++;
          this._ackPacket[packetId] = {
            counter: 0,
            message: message
          };
          return packetId;
        };

        _proto.removeSendingMessage = function removeSendingMessage(checkRemoveMessageFn) {
          var _this = this;

          Object.keys(this._ackPacket).forEach(function (packetId) {
            var message = _this._ackPacket[packetId].message;

            if (checkRemoveMessageFn(message)) {
              delete _this._ackPacket[packetId];
            }
          });
        };

        _proto.iteratePacket = function iteratePacket(availableMsgCb, invalidMsgCb) {
          var _this2 = this;

          var packet;
          Object.keys(this._ackPacket).forEach(function (packetId) {
            packet = _this2._ackPacket[packetId];

            if (packet.counter == 0) {
              packet.counter++;
            } else if (packet.counter < _this2.maxRetry) {
              availableMsgCb(packetId, packet.message, packet.counter);
              packet.counter++;
            } else {
              delete _this2._ackPacket[packetId];
              invalidMsgCb(packetId, packet.message);
            }
          });
        };

        _proto.ackPacket = function ackPacket(packetId) {
          var packet = this._ackPacket[packetId];
          delete this._ackPacket[packetId];
          return packet ? packet.message : null;
        };

        _proto.updateAllCounter = function updateAllCounter(counter) {
          var _this3 = this;

          Object.keys(this._ackPacket).forEach(function (packetId) {
            _this3._ackPacket[packetId].counter = counter;
          });
        };

        _proto.updateCounter = function updateCounter(packetId, counter) {
          this._ackPacket[packetId].counter = counter;
        };

        _proto.clearAll = function clearAll() {
          this._ackPacket = {};
        };

        return PacketManager;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBubbleTransition.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UIOpacity, tween, v3, Component, fadeOut;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "226f1XJTa1IH4OFwpGBBGUO", "gfBubbleTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBubbleTransition = exports('GfBubbleTransition', (_dec = ccclass('GfBubbleTransition'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBubbleTransition, _Component);

        function GfBubbleTransition() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfBubbleTransition.prototype;

        _proto.start = function start() {
          var _this = this;

          this.node.setScale(0, 0, 0);
          this.node.getComponent(UIOpacity).opacity = 255;
          var offset = 5;
          var shakeTime = 0.5;
          tween(this.node).to(shakeTime, {
            position: v3(-offset, 0, this.node.position.z)
          }).to(shakeTime, {
            position: v3(offset, 0, this.node.position.z)
          }).repeatForever().start();
          tween(this.node).parallel(tween().to(0.5, {
            scale: v3(0.5, 1, this.node.scale.z)
          }), tween().then(fadeOut(1))).removeSelf().call(function () {
            _this.node.destroy();
          }).start();
        };

        return GfBubbleTransition;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfNode.ts', './gfBaseFish.ts', './gfFishManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Collider2D, Contact2DType, Sprite, BoxCollider2D, misc, gfBaseEvents, gfEventEmitter, gfBaseConfig, SetZIndex, getRotation, v2Distance, gfNode, gfBaseFish, gfFishManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      Sprite = module.Sprite;
      BoxCollider2D = module.BoxCollider2D;
      misc = module.misc;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      getRotation = module.getRotation;
      v2Distance = module.v2Distance;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      gfFishManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "24803oDDQRJLLLvpEqor32O", "gfBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBullet = exports('gfBullet', (_dec = ccclass('gfBullet'), _dec(_class = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfBullet, _gfNode);

        function gfBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_BulletMultiple", 0);

          _defineProperty(_assertThisInitialized(_this), "_LockedFish", null);

          _defineProperty(_assertThisInitialized(_this), "_DeskStation", null);

          _defineProperty(_assertThisInitialized(_this), "_BulletID", null);

          _defineProperty(_assertThisInitialized(_this), "_isMe", false);

          _defineProperty(_assertThisInitialized(_this), "_lastPos", null);

          _defineProperty(_assertThisInitialized(_this), "_vectorX", 0);

          _defineProperty(_assertThisInitialized(_this), "_vectorY", 0);

          _defineProperty(_assertThisInitialized(_this), "_isDie", false);

          _defineProperty(_assertThisInitialized(_this), "_isFreezed", false);

          _defineProperty(_assertThisInitialized(_this), "_FireType", 0);

          _defineProperty(_assertThisInitialized(_this), "_isFake", false);

          return _this;
        }

        var _proto = gfBullet.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        };

        _proto.initAssets = function initAssets(config) {
          this.node.getComponent(Sprite).spriteFrame = config.asset;
          var box = this.node.getComponent(BoxCollider2D);
          box.offset.x = config.BoxCollider.x;
          box.offset.y = config.BoxCollider.y;
          box.size.width = config.BoxCollider.width;
          box.size.height = config.BoxCollider.height;
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.BULLET);
        };

        _proto.initData = function initData(data) {
          this.node.setPosition(data.position);
          this.node.angle = data.Angle;
          this._BulletMultiple = data.BulletMultiple;
          this._LockedFish = gfFishManager.instance.getFishById(data.LockedFishID);
          this._DeskStation = data.DeskStation;
          this._BulletID = data.BulletID;
          this._isMe = data.isMe;
          this._isFake = data.isBulletFake;
          this._isFreezed = data.isFreezed;
          this._FireType = data.FireType;
          this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
          this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
        };

        _proto.update = function update(dt) {
          if (this._isDie) {
            this.onDie();
            return;
          }

          if (this._LockedFish) {
            if (this._isFake) {
              if (this._LockedFish.checkDie()) {
                this._LockedFish = null;
                this.onDie();
                return;
              }
            } else {
              if (!this._LockedFish.isAvailable()) {
                this._LockedFish = null;
              }
            }
          }

          if (this._lastPos) {
            this.updatePosition(dt);
            this.limitPositionForTarget();
            this.node.angle = getRotation(this.node.getPosition(), this._lastPos);
          }

          this._lastPos = this.node.getPosition();
        };

        _proto.updatePosition = function updatePosition(dt) {
          var delta = dt * gfBaseConfig.instance.BulletSpeed;
          var x = this.node.position.x,
              y = this.node.position.y;

          if (this._LockedFish) {
            this.node.angle = getRotation(this._LockedFish.getLockPositionByNodeSpace(this.node.parent), this._lastPos);
            this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
            this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
          } else {
            var SceneBox = gfBaseConfig.instance.SceneBox;

            if (x > SceneBox.Right) {
              this._vectorX *= -1;
              x = SceneBox.Right;
            } else if (x < SceneBox.Left) {
              this._vectorX *= -1;
              x = SceneBox.Left;
            }

            if (y > SceneBox.Top) {
              this._vectorY *= -1;
              y = SceneBox.Top;
            } else if (y < SceneBox.Bottom) {
              this._vectorY *= -1;
              y = SceneBox.Bottom;
            }
          }

          x += this._vectorX * delta;
          y += this._vectorY * delta;
          this.node.setPosition(x, y, 0);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          if (this._isDie) return;
          var fish = other.getComponent(gfBaseFish) || other.node.parent.getComponent(gfBaseFish);
          if (!fish || fish.checkDie()) return;

          if (this._LockedFish) {
            if (fish.getId() != this._LockedFish._FishID) {
              return;
            }
          }

          this.onHit(fish);
        };

        _proto.limitPositionForTarget = function limitPositionForTarget() {
          if (this._LockedFish) {
            var fishPos = this._LockedFish.getLockPositionByNodeSpace(this.node.parent);

            if (v2Distance(this.node.position, this._lastPos) > v2Distance(this._lastPos, fishPos)) {
              this.node.position = fishPos;
              this.onHit(this._LockedFish);
            }
          }
        };

        _proto.onHit = function onHit(fish) {
          var data = this.makeBulletCollisionData(fish);
          fish.onHit(data);

          if (!this._isFake) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, data);
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, data);
          }

          this._isDie = true;
        };

        _proto.makeBulletCollisionData = function makeBulletCollisionData(fish) {
          var data = {
            bullet: this,
            position: this.node.position,
            FishID: fish.getId(),
            FishKind: fish.getKind(),
            BulletMultiple: this._BulletMultiple,
            isMe: this._isMe,
            BulletID: this._BulletID,
            isFreezed: this._isFreezed,
            DeskStation: this._DeskStation,
            FireType: this._FireType
          };
          return data;
        };

        _proto.onDie = function onDie() {
          this.returnPool();
        };

        _proto.checkDie = function checkDie() {
          return this._isDie;
        };

        _proto.isAvailable = function isAvailable() {
          return !this.checkDie();
        };

        _proto.isFake = function isFake() {
          return this._isFake;
        };

        _proto.getPosition = function getPosition() {
          return this.node.getPosition();
        };

        _proto.getAngle = function getAngle() {
          return this.node.angle;
        } //Called whenever object is get from Object Pool
        ;

        _proto.reuse = function reuse(poolMng) {
          _gfNode.prototype.reuse.call(this, poolMng);
        } //Called whenever object is returned to Object Pool
        ;

        _proto.unuse = function unuse() {
          this._BulletMultiple = 0;
          this._LockedFish = null;
          this._DeskStation = null;
          this._BulletID = null;
          this._isMe = false;
          this._lastPos = undefined;
          this._vectorX = 0;
          this._vectorY = 0;
          this._isDie = false;

          _gfNode.prototype.unuse.call(this);
        };

        return gfBullet;
      }(gfNode), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLobbyLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './animateNumberLabel.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './loadConfigAsync.ts', './gfNetworkParser.ts', './gameCommonUtils.ts', './gfMainFSM.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Label, Sprite, SpriteAtlas, log, warn, Component, formatMoney, AnimateNumberLabel, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, removeEvents, formatUserName, gfReferenceManager, gfDataStore, loadConfigAsync, gfNetworkParser, gameCommonUtils, gfMainFSM;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteAtlas = module.SpriteAtlas;
      log = module.log;
      warn = module.warn;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
      formatUserName = module.formatUserName;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;

      cclegacy._RF.push({}, "24e87bN5TRKIZg3pbMUlK0r", "gfLobbyLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLobbyLayer = exports('gfLobbyLayer', (_dec = ccclass('gfLobbyLayer'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Sprite), _dec7 = property(SpriteAtlas), _dec8 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfLobbyLayer, _Component);

        function gfLobbyLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnBack", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtJackpot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtUserName", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtWallet", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "avatarSprite", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "avatarAtlas", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtVersion", _descriptor7, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "startCallback", void 0);

          return _this;
        }

        var _proto = gfLobbyLayer.prototype;

        _proto.onLoad = function onLoad() {
          gfReferenceManager.instance.setData({
            CurrentScene: this.node
          });
          gfDataStore.instance.setDataStore({
            currentSceneName: gfBaseConfig.instance.SceneName.Lobby
          });
          this.initEvents();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.INIT_SCENE, this.node);

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          if (LOGIN_IFRAME) {
            this.btnBack.active = gameCommonUtils.checkConditionCloseGameIframe();
          } else {
            this.btnBack.active = true;
          }

          if (this.txtVersion) {
            this.txtVersion.string = gfBaseConfig.instance.GameVersion;
          }
        };

        _proto.setStartCallback = function setStartCallback(callback) {
          this.startCallback = callback;
        };

        _proto.start = function start() {
          if (this.startCallback) {
            this.startCallback();
            this.startCallback = null;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.LOBBY, true);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CHECK_SHOW_POPUP_EVENT);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.UPDATE_JACKPOT, this.onUpdateLobbyJackpot, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO, this.onUpdateInfo, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_WALLET, this.onUpdateLobbyWallet, this);
        };

        _proto.onDestroy = function onDestroy() {
          if (gfBaseConfig.instance && !gfBaseConfig.instance.LoadGameByPrefab && !gfMainFSM.instance.isStateLoadGame() && !!gfEventEmitter.instance && !gfMainFSM.instance.isStateWaitExit()) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          }

          removeEvents(this);
        };

        _proto.onUpdateLobbyJackpot = function onUpdateLobbyJackpot(amount) {
          if (!this.txtJackpot) return;
          var newJP = parseInt(amount);

          if (this.txtJackpot.getComponent(AnimateNumberLabel).currentValue === undefined) {
            this.txtJackpot.getComponent(AnimateNumberLabel).currentValue = amount;
          }

          this.txtJackpot.onUpdateValue(newJP, 3000);
          this.txtJackpot.getComponent(Label).updateRenderData(true);
        };

        _proto.onBtnJPHistoryClick = function onBtnJPHistoryClick() {
          log("::LobbyLayer:: onBtnJPHistoryClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onBtnInfoClick = function onBtnInfoClick() {
          log("::LobbyLayer:: onBtnInfoClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_INFO);
        };

        _proto.onBtnSettingClick = function onBtnSettingClick() {
          log("::LobbyLayer:: onBtnSettingClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_SETTING);
        };

        _proto.onBtnBackClick = function onBtnBackClick() {
          log("::LobbyLayer:: onBtnBackClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE); // gameCommonUtils.handleCloseGameIframe();
        };

        _proto.onRoomNormalClick = function onRoomNormalClick() {
          log("::LobbyLayer:: onRoomNormalClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfDataStore.instance.setDataStore({
            currentRoom: gfBaseConfig.instance.RoomKind.Normal
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, gfBaseConfig.instance.RoomKind.Normal);
        };

        _proto.onRoomVipClick = function onRoomVipClick() {
          log("::LobbyLayer:: onRoomVipClick");
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfDataStore.instance.setDataStore({
            currentRoom: gfBaseConfig.instance.RoomKind.VIP
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, gfBaseConfig.instance.RoomKind.VIP);
        };

        _proto.onUpdateInfo = function onUpdateInfo() {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          this.txtUserName.string = formatUserName(selfInfo.Username);
          this.txtWallet.string = formatMoney(selfInfo.Wallet);

          if (this.avatarAtlas) {
            var frameAvatar = this.avatarAtlas.getSpriteFrame(selfInfo.Avatar);

            if (!frameAvatar) {
              frameAvatar = this.avatarAtlas.getSpriteFrame(gfBaseConfig.instance.DEFAULT_AVATAR);
            }

            this.avatarSprite.spriteFrame = frameAvatar;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_EVENT_STATUS, selfInfo);
        };

        _proto.onUpdateLobbyWallet = function onUpdateLobbyWallet(data) {
          this.txtWallet.string = formatMoney(data);
          this.txtWallet.updateRenderData(true);
        };

        return gfLobbyLayer;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtJackpot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txtUserName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "txtWallet", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "avatarSprite", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "avatarAtlas", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "txtVersion", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayAndDestroy.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "25430KmEBxJHY0rVIsXD4d+", "gfPlayAndDestroy", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPlayAndDestroy = exports('gfPlayAndDestroy', (_dec = ccclass('gfPlayAndDestroy'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfPlayAndDestroy, _Component);

        function gfPlayAndDestroy() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfPlayAndDestroy.prototype;

        _proto.onLoad = function onLoad() {
          var _this = this;

          var spine = this.node.getComponent(sp.Skeleton);
          spine.setCompleteListener(function () {
            _this.node.removeFromParent();

            _this.node.destroy();
          });
        };

        return gfPlayAndDestroy;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMainController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './gfNetworkGameEvent.ts', './serviceRest.ts', './loadConfigAsync.ts', './gfNetworkParser.ts', './gameCommonUtils.ts', './gfLocalize.ts', './gfMainFSM.ts', './mock.ts', './gfLobbyLayer.ts', './gfGameLayer.ts', './gfAssetBundle.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, sys, log, game, Game, systemEvent, warn, instantiate, director, error, view, macro, StencilManager, gfBaseEvents, gfEventEmitter, gfBaseConfig, addHtmlCursor, registerEvent, removeEvents, removeCursorInHtml, gfDataStore, gfNetworkGameEvent, apiObject, loadConfigAsync, gfNetworkParser, gameCommonUtils, gfLocalize, gfMainFSM, mock, gfLobbyLayer, GfGameLayer, gfAssetBundle;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
      game = module.game;
      Game = module.Game;
      systemEvent = module.systemEvent;
      warn = module.warn;
      instantiate = module.instantiate;
      director = module.director;
      error = module.error;
      view = module.view;
      macro = module.macro;
      StencilManager = module.StencilManager;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      addHtmlCursor = module.addHtmlCursor;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
      removeCursorInHtml = module.removeCursorInHtml;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      mock = module.mock;
    }, function (module) {
      gfLobbyLayer = module.gfLobbyLayer;
    }, function (module) {
      GfGameLayer = module.GfGameLayer;
    }, function (module) {
      gfAssetBundle = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2615edDXbRNUYD1XT4g99wj", "gfMainController", undefined);

      var getUrlParam = gameCommonUtils.getUrlParam,
          handleCloseGameIframe = gameCommonUtils.handleCloseGameIframe,
          handleFlowOutGame = gameCommonUtils.handleFlowOutGame;
      var gfMainController = exports('default', /*#__PURE__*/function () {
        function gfMainController() {
          _defineProperty(this, "_onHideGameBinding", void 0);

          _defineProperty(this, "_onShowGameBinding", void 0);

          _defineProperty(this, "isLoadingLobbyScene", void 0);

          _defineProperty(this, "needLoadGameScene", void 0);

          _defineProperty(this, "_isGameHide", void 0);

          _defineProperty(this, "originalInitFrameSizeFunc", void 0);

          _defineProperty(this, "originalAutoMergeBatchesFunc", void 0);

          _defineProperty(this, "_timeHide", null);

          _defineProperty(this, "_timeOutDupLogin", void 0);

          gfMainController.instance = this; // EMIT FUNC

          this._onHideGameBinding = this.onHideGame.bind(this);
          this._onShowGameBinding = this.onShowGame.bind(this);
          this.initEvents();
          this.initGame();
          this.initSentry();
          this.overrideInitFrameSize();
          this.overrideAutoMergeBatches();
        }

        var _proto = gfMainController.prototype;

        _proto.initSentry = function initSentry() {
          loadConfigAsync.setUpSentry();

          if (typeof globalThis.Sentry !== 'undefined') {
            globalThis.Sentry.configureScope(function (scope) {
              scope.setExtra("gameVersion", gfBaseConfig.instance.GameVersion);
            });
          }
        };

        _proto.initToken = function initToken() {
          var _this = this;

          var CONFIG = loadConfigAsync.getConfig();
          var LOGIN_IFRAME = CONFIG.LOGIN_IFRAME,
              URL_TOKEN = CONFIG.URL_TOKEN,
              USER_TOKEN = CONFIG.USER_TOKEN,
              DEV_ENV = CONFIG.DEV_ENV,
              TOKEN_VALUE = CONFIG.TOKEN_VALUE,
              IS_FINISHED_REMOTE = CONFIG.IS_FINISHED_REMOTE,
              API_URL = CONFIG.API_URL,
              FISH_ROOM_VERSION = CONFIG.FISH_ROOM_VERSION;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this.initToken();
            }, 100);
            return;
          }

          gfBaseConfig.instance.IsDevMode = DEV_ENV != null && DEV_ENV == true;
          gfBaseConfig.instance.IPMaster = CONFIG[gfBaseConfig.instance.IPMasterName];
          var token = '';
          var clientType = '';
          var defaultClientType = "1";
          var environmentType = '';

          if (LOGIN_IFRAME) {
            gfBaseConfig.instance.GameId = getUrlParam('gameId') ? getUrlParam('gameId') : gfBaseConfig.instance.GameId;
            gfBaseConfig.instance.ClientType = gfBaseConfig.instance.ClientType ? gfBaseConfig.instance.ClientType : "|" + defaultClientType;
            environmentType = "|" + gfBaseConfig.instance.ENVIRONMENT_CONFIG.IFRAME;
            clientType = getUrlParam('clientType') ? "|" + getUrlParam('clientType') : "|" + defaultClientType;
          } else {
            clientType = gfBaseConfig.instance.ClientType ? gfBaseConfig.instance.ClientType : clientType;

            if (sys.isNative) {
              environmentType = "|" + gfBaseConfig.instance.ENVIRONMENT_CONFIG.NATIVE_APP;
            } else {
              environmentType = "|" + gfBaseConfig.instance.ENVIRONMENT_CONFIG.WEB_APP;
            }
          }

          if (LOGIN_IFRAME && getUrlParam('version')) {
            gfBaseConfig.instance.RoomVersion = "|" + getUrlParam('version');
          } else if (FISH_ROOM_VERSION) {
            gfBaseConfig.instance.RoomVersion = FISH_ROOM_VERSION;
          }

          if (!gfBaseConfig.instance.IsDevMode) {
            if (clientType == '') {
              clientType = gfBaseConfig.instance.ClientType ? gfBaseConfig.instance.ClientType : defaultClientType;
            }

            if (!sys.isNative && LOGIN_IFRAME) {
              if (URL_TOKEN) token = getUrlParam(URL_TOKEN);
            } else {
              token = sys.localStorage.getItem(USER_TOKEN);
              if (!token && TOKEN_VALUE) token = TOKEN_VALUE;
            }

            gfBaseConfig.instance.userToken = token;
            token += gfBaseConfig.instance.RoomVersion + clientType + environmentType;
            gfBaseConfig.instance.token4Master = token;

            gfMainFSM.instance._fsm.goLoginLobby();
          } else {
            // const { userText, pwText } = require('mock');
            var dataPost = {
              userName: mock.userText,
              password: mock.pwText,
              fingerPrint: 'test'
            }; // const serviceRest = require('serviceRest');

            apiObject.post({
              url: 'auth/login',
              apiUrl: API_URL,
              data: dataPost,
              callback: function callback(_ref) {
                var data = _ref.data;
                gfBaseConfig.instance.token4Master = data.data.token + gfBaseConfig.instance.RoomVersion + environmentType;

                gfMainFSM.instance._fsm.goLoginLobby();
              }
            });
          }
        };

        _proto.initGame = function initGame() {
          this._isGameHide = true; // Trick to handle bug from hideGame on LoadingScene

          if (window) ;else {
            console.error("window not support!");
          }
          addHtmlCursor();

          if (gfBaseConfig.instance.GameVersion) {
            log('GameVersion : ', gfBaseConfig.instance.GameVersion);
          }
        };

        _proto.initEvents = function initEvents() {
          // NETWORK EVENT
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.NETWORK_EVENT, this.onNetworkState.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_LOGIN, this.onLoginLobby.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_MESSAGE, this.onSystemMessage.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_GET_ROOM_INFO, this.onJoinGame.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LOGIN, this.onLoginGame.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_JACKPOT, this.onUpdateJackpot.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_UPDATE_MY_GOLD, this.onUpdateLobbyWallet.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_GET_BOT_SETTING, this.onGetBotSetting.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_USER_FIRE, this.onUserFire.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CREATE_FISH, this.onCreateListFish.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CATCH_FISH, this.onCatchFish.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CATCH_FISH_SKILL, this.onCatchFishSkill.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_FISH_FREEZE, this.onFishFreeze.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CREATE_FISH_GROUP_NEW, this.onCreateFishGroup.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_ROOM_DATA, this.onDataJoinRoom.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LISTUSER_BOARD, this.onListUserOnBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_JACKPOT, this.onUpdateJackpot.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PLAYER_ENTER_BOARD, this.onPlayerEnterBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_KICK, this.onGameKick.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_MESSAGE, this.onSystemMessage.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_USER_EXIT, this.onPlayerExitBoard.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_WALLET, this.onPlayerUpdateWallet.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CHANGE_ROUND, this.onGameChangeRound.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.LOBBY_NOTIFY, this.onNotify.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_NOTIFY, this.onNotify.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_LIST_ITEM, this.onUpdateListItem.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_ACTIVE_FREEZE_GUN, this.onActiveFreezeGun.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_STOP_FREEZE_GUN, this.onStopFreezeGun.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_DRAGON_END, this.onDragonStateEnd.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_DRAGON_BALL_DROPPED, this.onDragonBallDropped.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_DRAGON_WARNING, this.onDragonWarning.bind(this)); // EMIT EVENT

          registerEvent(gfBaseEvents.COMMON.GO_LOBBY, this.goLobby, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.bulletCollideFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_GUN_FIRE, this.sendGunFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_ACTIVE_FREEZE_GUN, this.sendActiveFreezeGun, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_FIRE_LASER, this.sendFireLaser, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SEND_FIRE_DRILL, this.sendFireDrill, this);
          registerEvent(gfBaseEvents.COMMON.REFRESH_PAGE, this.refreshPage, this);
          registerEvent(gfBaseEvents.POPUP.GET_BOT_SETTING, this.sendGetBotSetting, this);
          registerEvent(gfBaseEvents.POPUP.SET_BOT_SETTING, this.sendSetBotSetting, this);
          registerEvent(gfBaseEvents.AUTO_BOT.SEND_STOP_BOT, this.sendStopBot, this);
          registerEvent(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, this.onShowGameLayer, this);
          registerEvent(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER, this.sendExitGameServer, this);
          registerEvent(gfBaseEvents.LOBBY_LAYER.LOBBY_GET_ROOM_INFO, this.sendGetRoomInfo, this);
          registerEvent(gfBaseEvents.COMMON.CONNECT_MASTER, this.connectMaster, this);
          registerEvent(gfBaseEvents.COMMON.CONNECT_GAME, this.connectGame, this);
          game.on(Game.EVENT_HIDE, this._onHideGameBinding);
          game.on(Game.EVENT_SHOW, this._onShowGameBinding);
          systemEvent.on('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);

          if (!sys.isNative) {
            window.addEventListener('beforeunload', this.onCloseTab.bind(this));
          }
        };

        _proto.handleDuplicatedLogin = function handleDuplicatedLogin() {
          var _this2 = this;

          this._timeOutDupLogin = setTimeout(function () {
            clearTimeout(_this2._timeOutDupLogin);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_ALL);
            handleCloseGameIframe();
          }, 3000);
          var callback = {
            confirmCallback: function confirmCallback() {
              clearTimeout(_this2._timeOutDupLogin);
              handleCloseGameIframe();
            }
          };
          var data = {
            customMsg: gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN],
            customCallbacks: callback
          };
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, data);
        };

        _proto.onCloseTab = function onCloseTab() {
          if (gfDataStore.instance && gfBaseConfig.instance) {
            if (gfDataStore.instance.getCurrentSceneName() == gfBaseConfig.instance.SceneName.Game) {
              this.sendRegisterExit();
            }
          }
        };

        _proto.sendRegisterExit = function sendRegisterExit() {
          gfNetworkParser.instance.sendRegisterExit();
        } // NETWORK FUNCTION
        ;

        _proto.onNetworkState = function onNetworkState(data) {
          if (!gfDataStore.instance || !gfEventEmitter.instance) {
            warn('game already destroyed or either not initialized');
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.NETWORK_STATUS_INFO, data);

          switch (data.EventID) {
            case gfNetworkGameEvent.PINGPONG:
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_PING, data.EventData.data);
              break;

            case gfNetworkGameEvent.NETWORK_CONNECT:
              if (gfMainFSM.instance.isStateLoginGameRoom() || gfMainFSM.instance.isStateGameRoom()) {
                // Emitter.instance.emit(EventCode.POPUP.CLOSE_ALL);
                gfNetworkParser.instance.sendJoinDesk(selfInfo.DeskId);
              }

              break;

            case gfNetworkGameEvent.NETWORK_WAITING:
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
              break;

            case gfNetworkGameEvent.NETWORK_ERROR:
              /** Show popup network poor* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_ERROR);
              break;

            case gfNetworkGameEvent.NETWORK_CLOSE:
              /** Show close socket hay làm gì đó* */
              break;

            case gfNetworkGameEvent.NETWORK_POOR:
              /** Show popup network poor* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_POOR);
              break;

            case gfNetworkGameEvent.NETWORK_DIE:
              /** Show popup refesh* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.NETWORK_DIE);
              break;

            case gfNetworkGameEvent.AUTHEN_FAIL:
              if (gfDataStore.instance.getCurrentSceneName() == gfBaseConfig.instance.SceneName.Game) {
                this.goLobby();
              } else {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
                /** Show popup login fail* */

                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.AUTHEN_FAIL);
              }

              break;

            case gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE:
              /** Show popup thiết bị khác* */
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE);
              break;

            case gfNetworkGameEvent.NETWORK_RECONNECT:
              this.onReconnect();
              break;
          }
        };

        _proto.onReconnect = function onReconnect() {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_ALL);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          if (gfDataStore.instance.getCurrentSceneName() == gfBaseConfig.instance.SceneName.Lobby) ;else {
            gfNetworkParser.instance.sendJoinDesk(selfInfo.DeskId);
          }
        };

        _proto.goLobby = function goLobby() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);

          gfMainFSM.instance._fsm.goLoginLobby();
        };

        _proto.onLoginLobby = function onLoginLobby(data) {
          data.DeskId = null;
          gfDataStore.instance.setSelfInfo(data);
          gfDataStore.instance.clearOldTarget();

          if (data.BetConfig) {
            gfDataStore.instance.listJackpotBet = globalThis._(data.BetConfig).values().join('-');
          }

          if (!data.isUserInGame) {
            if (gfDataStore.instance.getCurrentSceneName() !== gfBaseConfig.instance.SceneName.Lobby) {
              this.loadScene(gfBaseConfig.instance.SceneName.Lobby, function () {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.LOADING_TRANSITION);

                gfMainFSM.instance._fsm.goLobby();
              });
            } else {
              if (gfMainFSM.instance._fsm.can('goLobby')) {
                gfMainFSM.instance._fsm.goLobby();
              } else {
                gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO);
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_JACKPOT, gfDataStore.instance.getJackpotValue());
              }
            }
          }
        };

        _proto.onJoinGame = function onJoinGame(data) {
          gfBaseConfig.instance.parseJoinGame(data);

          if (data.KindID) {
            gfDataStore.instance.setCurrentRoom(data.KindID);
          }

          this.loadGameScene();
        };

        _proto.loadGameScene = function loadGameScene() {
          var _this3 = this;

          if (gfDataStore.instance.getCurrentSceneName() !== gfBaseConfig.instance.SceneName.Game) {
            gfMainFSM.instance._fsm.goLoadGame();

            this.loadScene(gfBaseConfig.instance.SceneName.Game, function () {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.LOADING_TRANSITION);
              log('::LOAD GAME SCENE SUCCESSFULLY::');

              if (gfMainFSM.instance.isStateWaitExit()) {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              } else if (_this3.checkNeedRefresh()) {
                handleFlowOutGame();
              } else {
                gfMainFSM.instance._fsm.goLoginGameRoom();
              }
            });
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_SHOW);

            gfMainFSM.instance._fsm.goLoginGameRoom();
          }
        };

        _proto.checkNeedRefresh = function checkNeedRefresh() {
          return !gfEventEmitter || !gfEventEmitter.instance;
        };

        _proto.onLoginGame = function onLoginGame(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfDataStore.instance.parseLoginGame(data);

          gfMainFSM.instance._fsm.goGameRoom();
        };

        _proto.onSystemMessage = function onSystemMessage(data) {
          var Code = data.Code,
              message = data.message;

          if (Code == gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING, true);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY);
          } else if (Code == gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);

            if (gfDataStore.instance.isAutoBot()) {
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_BOT.END_AUTO_BOT);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.SHOW_POPUP_NO_MONEY);
          } else if (Code == gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN);
          } else if (Code > 0) {
            if (Code == gfNetworkGameEvent.MSG_CODE.CANT_FIND_ROOM) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, data);
          } else if (message) {
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, message);
          }
        };

        _proto.onUpdateLobbyWallet = function onUpdateLobbyWallet(data) {
          var newWallet = parseInt(data.Wallet);
          gfDataStore.instance.setSelfInfo({
            Wallet: newWallet
          });
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_WALLET, newWallet);
        };

        _proto.onGetBotSetting = function onGetBotSetting(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.UPDATE_BOT_SETTING, data);
        };

        _proto.sendGetBotSetting = function sendGetBotSetting(roomKind) {
          gfNetworkParser.instance.getBotSetting(roomKind);
        };

        _proto.sendSetBotSetting = function sendSetBotSetting(data) {
          var arrFkd = data.arrFkd,
              duration = data.duration,
              roomKind = data.roomKind;
          gfNetworkParser.instance.setBotSetting(arrFkd, duration, roomKind);
        };

        _proto.sendStopBot = function sendStopBot() {
          gfNetworkParser.instance.stopBot();
        } // {"DeskStation":0,"Angle":29.43551555743798,"BulletMultiple":1000,"LockedFishID":0}
        ;

        _proto.onUserFire = function onUserFire(data) {
          if (data.DeskStation == gfDataStore.instance.getSelfDeskStation()) return;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_OTHER_PLAYER_FIRE, data);
        };

        _proto.onActiveFreezeGun = function onActiveFreezeGun(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_ACTIVE_FREEZE_GUN, data);
        };

        _proto.onStopFreezeGun = function onStopFreezeGun(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_STOP_FREEZE_GUN, data);
        };

        _proto.onUpdateListItem = function onUpdateListItem(data) {
          gfDataStore.instance.parseListItemConfig(data);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM, data);
        };

        _proto.onCreateListFish = function onCreateListFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH, data);
        };

        _proto.onCatchFish = function onCatchFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CATCH_FISH, data);
        };

        _proto.onCatchFishSkill = function onCatchFishSkill(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, data);
        };

        _proto.onFishFreeze = function onFishFreeze(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FREEZE_FISH, data);
        };

        _proto.onCreateFishGroup = function onCreateFishGroup(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, data);
          data.isFishGroupToNormal = false;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, data);
        };

        _proto.onDataJoinRoom = function onDataJoinRoom(data) {
          log("onDataJoinRoom", data);
        };

        _proto.onListUserOnBoard = function onListUserOnBoard(data) {
          if (this._isGameHide) {
            this.onHideGame();
            return;
          }

          gfDataStore.instance.updateDeltaTime(data.ServerTime);
          var targetState = gfDataStore.instance.getTargetState();

          if (targetState === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_EVENT_STATUS, data);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM);

          if (data.RoomData) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, data.RoomData); // PopupController.instance.onJoinGame();
          }

          if (data.ListUser) {
            gfDataStore.instance.setSelfInfo({
              isReadyToPlay: true
            });
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, data.ListUser);
          }

          if (targetState === gfBaseConfig.instance.TARGET_LOCK.AUTO_BOT) {
            gfEventEmitter.instance.emit(gfBaseEvents.AUTO_BOT.RESUME);
          }

          if (targetState === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
          }
        };

        _proto.onUpdateJackpot = function onUpdateJackpot(data) {
          gfDataStore.instance.setDataStore({
            jackpotValue: data.amount
          });
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_JACKPOT, data.amount);
        };

        _proto.onPlayerEnterBoard = function onPlayerEnterBoard(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, data);
        };

        _proto.onPlayerExitBoard = function onPlayerExitBoard(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, data);

          if (data.DeskStation === gfDataStore.instance.getSelfDeskStation()) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);
            gfDataStore.instance.setSelfInfo({
              DeskId: null
            });

            gfMainFSM.instance._fsm.goLoginLobby();
          }
        };

        _proto.onPlayerUpdateWallet = function onPlayerUpdateWallet(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.GAME_UPDATE_WALLET, data);
        };

        _proto.onNotify = function onNotify(data) {
          if (!gfDataStore.instance.getCurrentSceneName()) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_NOTIFY, data);
        };

        _proto.sendActiveFreezeGun = function sendActiveFreezeGun() {
          gfNetworkParser.instance.sendActiveFreezeGun();
        };

        _proto.onGameChangeRound = function onGameChangeRound(data) {
          data.isFishGroupToNormal = true;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, data);
        } // EMIT FUNCTION
        //= ===============================
        ;

        _proto.onShowGameLayer = function onShowGameLayer(isShow) {
          if (isShow === void 0) {
            isShow = false;
          }

          if (isShow) {
            this.onShowGame();
          } else {
            this.onHideGame();
          }
        };

        _proto.onShowGame = function onShowGame() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_SHOW);
          this._isGameHide = false;
          gfDataStore.instance.setDataStore({
            timeHide: Date.now() - this._timeHide
          });

          if (gfNetworkParser.instance) {
            log("GAME SHOW");
            gfNetworkParser.instance.notifyShowGame();
          }

          if (gfDataStore.instance.isAutoPaused() || gfDataStore.instance.getOldTarget().targetState) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
          }
        };

        _proto.onHideGame = function onHideGame() {
          gfDataStore.instance.setSelfInfo({
            isReadyToPlay: false
          });
          this._isGameHide = true;
          this._timeHide = Date.now();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GAME_HIDE);

          if (!gfDataStore.instance.isAutoPaused()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE);
          }

          if (gfNetworkParser.instance) {
            log("GAME HIDE");
            gfNetworkParser.instance.sendIdleMessage();
          }
        };

        _proto.loadScene = function loadScene(sceneName, callback) {
          var _this4 = this;

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.CLOSE_SCENE);

          if (gfBaseConfig.instance.LoadGameByPrefab) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE);
            var currentNode = gfBaseConfig.instance.MainGameNode.children[0];
            currentNode.removeFromParent();

            if (!currentNode.getComponent(gfLobbyLayer) && !currentNode.getComponent(GfGameLayer)) {
              // loading scene
              gfAssetBundle.instance.releaseLoadingAssets();
            }

            log('destroy: ' + currentNode.name);
            currentNode.destroy();
            var newNode = instantiate(gfBaseConfig.instance.ScenePrefabs[sceneName]);

            if (newNode) {
              var mainComponent = newNode.getComponent(gfLobbyLayer);

              if (!mainComponent) {
                mainComponent = newNode.getComponent(GfGameLayer);

                if (gfDataStore.instance.getCurrentRoom() === gfBaseConfig.instance.RoomKind.VIP) {
                  gfAssetBundle.instance.loadVipRoomAssets(function () {
                    mainComponent.setStartCallback(callback);
                    newNode.parent = gfBaseConfig.instance.MainGameNode;
                    newNode.setSiblingIndex(0);
                  });
                  return;
                } else {
                  gfAssetBundle.instance.releaseVipRoomAssets();
                }
              }

              mainComponent.setStartCallback(callback);
              newNode.parent = gfBaseConfig.instance.MainGameNode;
              newNode.setSiblingIndex(0);
            } else {
              warn('Fail to run scene ' + sceneName);
              handleFlowOutGame();
            }
          } else {
            director.loadScene(sceneName, function (err) {
              if (err) {
                warn(err.message, err.stack);
                handleFlowOutGame();
              } else {
                _this4._isGameHide = false;

                if (callback && typeof callback === 'function') {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SCENE_LOAD_DONE);
                  callback();
                }
              }
            });
          }
        };

        _proto.refreshPage = function refreshPage() {
          if (gfMainFSM.instance.isStateLoadGame()) {
            gfMainFSM.instance._fsm.goWaitExit();

            return;
          }

          error("refreshPage!!!");
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.BLOCK_ALL_BUTTON_WHEN_REFRESH);

          if (gfDataStore.instance.getCurrentSceneName() === gfBaseConfig.instance.SceneName.Game) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME_ROOM);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.EXIT_GAME);
          gfNetworkParser.instance.cleanup(); // Todo: Stop all sound

          gfMainFSM.instance._fsm.goExitGame();

          this.destroy();
        };

        _proto.destroy = function destroy() {
          this.restoreInitFrameSize();
          this.restoreAutoMergeBatches();
          removeEvents(this);
          removeCursorInHtml();
          game.off(Game.EVENT_HIDE, this._onHideGameBinding);
          game.off(Game.EVENT_SHOW, this._onShowGameBinding);
          systemEvent.off('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);
          handleCloseGameIframe();
        };

        _proto.sendExitGameServer = function sendExitGameServer() {
          gfNetworkParser.instance.sendExitGameServer();
        };

        _proto.connectMaster = function connectMaster() {
          gfNetworkParser.instance.connectMaster(gfBaseConfig.instance.IPMaster, gfBaseConfig.instance.token4Master);
        };

        _proto.connectGame = function connectGame() {
          gfNetworkParser.instance.connectGame(gfBaseConfig.instance.IPGame, gfBaseConfig.instance.token4Game);
        };

        _proto.sendGetRoomInfo = function sendGetRoomInfo(roomKind) {
          gfNetworkParser.instance.sendGetInfoGameRoom(roomKind);
        };

        _proto.sendGunFire = function sendGunFire(data) {
          gfNetworkParser.instance.sendGunFire(data);
        };

        _proto.sendFireLaser = function sendFireLaser(data) {
          if (gfDataStore.instance.getIsReadyToPlay()) {
            gfNetworkParser.instance.sendCatchFishSkill(data);
          }
        };

        _proto.sendFireDrill = function sendFireDrill(data) {
          gfNetworkParser.instance.sendCatchFishSkill(data);
        };

        _proto.bulletCollideFish = function bulletCollideFish(data) {
          if (data.isMe) {
            gfNetworkParser.instance.sendCatchFish(data.FishID, data.BulletMultiple, data.BulletID, data.FireType);
          }
        };

        _proto.onDragonStateEnd = function onDragonStateEnd(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.ON_END, data);
        };

        _proto.onDragonBallDropped = function onDragonBallDropped(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.ON_BALL_DROPPED, data);
        };

        _proto.onDragonWarning = function onDragonWarning() {
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.WARNING);
        };

        _proto.onDestroy = function onDestroy() {
          systemEvent.off('LOGGED_IN_OTHER_DEVICE', this.handleDuplicatedLogin, this);
          this.refreshPage();
        };

        _proto.onGameKick = function onGameKick() {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_ACTION); // Emitter.instance.emit(EventCode.COMMON.GO_LOBBY);
        };

        _proto.onUpdateEventStatus = function onUpdateEventStatus(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_EVENT_STATUS, data);
        };

        _proto.onUpdateEventTray = function onUpdateEventTray(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_EVENT_TRAY, data);
        };

        _proto.overrideInitFrameSize = function overrideInitFrameSize() {
          var isIOSBrowser = sys.os === sys.OS.IOS && sys.isBrowser && sys.isMobile;
          if (!isIOSBrowser) return;
          this.originalInitFrameSizeFunc = view['_initFrameSize'];

          view['_initFrameSize'] = function () {
            var locFrameSize = view['_frameSize'];
            var w = game.frame.clientWidth;
            var h = game.frame.clientHeight;
            var isLandscape = w >= h;

            if (!sys.isMobile || isLandscape && view['_orientation'] & macro.ORIENTATION_LANDSCAPE || !isLandscape && view['_orientation'] & macro.ORIENTATION_PORTRAIT) {
              locFrameSize.width = window.innerWidth;
              locFrameSize.height = window.innerHeight;
              game.container.style['-webkit-transform'] = 'rotate(0deg)';
              game.container.style.transform = 'rotate(0deg)';
              view['_isRotated'] = false;
            } else {
              locFrameSize.width = h;
              locFrameSize.height = w;
              game.container.style['-webkit-transform'] = 'rotate(90deg)';
              game.container.style.transform = 'rotate(90deg)';
              game.container.style['-webkit-transform-origin'] = '0px 0px 0px';
              game.container.style.transformOrigin = '0px 0px 0px';
              view['_isRotated'] = true;
              game.canvas.style['-webkit-transform'] = 'translateZ(0px)';
              game.canvas.style.transform = 'translateZ(0px)';
            }

            if (view['_orientationChanging']) {
              setTimeout(function () {
                view['_orientationChanging'] = false;
              }, 1000);
            }
          };
        };

        _proto.restoreInitFrameSize = function restoreInitFrameSize() {
          if (this.originalInitFrameSizeFunc) {
            view['_initFrameSize'] = this.originalInitFrameSizeFunc;
            this.originalInitFrameSizeFunc = null;
          }
        };

        _proto.overrideAutoMergeBatches = function overrideAutoMergeBatches() {
          if (!sys.isNative) return;
          this.originalAutoMergeBatchesFunc = director.root.batcher2D.autoMergeBatches;

          director.root.batcher2D.autoMergeBatches = function (renderComp) {
            var buffer = this.currBufferBatch;
            var ia = buffer === null || buffer === void 0 ? void 0 : buffer.recordBatch();
            var mat = this._currMaterial;

            if (!ia || !mat || !buffer) {
              return;
            }

            var blendState;
            var depthStencil;
            var dssHash = 0;
            var bsHash = 0;

            if (renderComp) {
              blendState = renderComp.blendHash === -1 ? null : renderComp.getBlendState();
              bsHash = renderComp.blendHash;

              if (renderComp.customMaterial !== null) {
                depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage, mat);
              } else {
                depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage);
              }

              dssHash = StencilManager.sharedManager.getStencilHash(renderComp.stencilStage);
            }

            var curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
            curDrawBatch.renderScene = this._currScene;
            curDrawBatch.visFlags = this._currLayer;
            curDrawBatch.bufferBatch = buffer;
            curDrawBatch.texture = this._currTexture;
            curDrawBatch.sampler = this._currSampler;
            curDrawBatch.inputAssembler = ia;
            curDrawBatch.useLocalData = this._currTransform;
            curDrawBatch.textureHash = this._currTextureHash;
            curDrawBatch.samplerHash = this._currSamplerHash;
            curDrawBatch.fillPasses(mat, depthStencil, dssHash, blendState, bsHash, null);

            this._batches.push(curDrawBatch);

            buffer.vertexStart = buffer.vertexOffset;
            buffer.indicesStart = buffer.indicesOffset;
            buffer.byteStart = buffer.byteOffset;
            this._currMeshBuffer = null;
          };
        };

        _proto.restoreAutoMergeBatches = function restoreAutoMergeBatches() {
          if (this.originalAutoMergeBatchesFunc) {
            director.root.batcher2D.autoMergeBatches = this.originalAutoMergeBatchesFunc;
          }
        };

        return gfMainController;
      }());

      _defineProperty(gfMainController, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishFreezeEffect.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Color, UITransform, Component, gfBaseFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "282dc7SenBOBpeOflfOHsd6", "gfFishFreezeEffect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfFishFreezeEffect = exports('gfFishFreezeEffect', (_dec = ccclass('gfFishFreezeEffect'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfFishFreezeEffect, _Component);

        function gfFishFreezeEffect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "ICE_COLOR", new Color(0, 175, 255, 255));

          _defineProperty(_assertThisInitialized(_this), "baseFish", null);

          _defineProperty(_assertThisInitialized(_this), "freezeTime", void 0);

          _defineProperty(_assertThisInitialized(_this), "_isFreezed", false);

          return _this;
        }

        var _proto = gfFishFreezeEffect.prototype;

        _proto.initIceEffect = function initIceEffect(TimeRemainFreeze) {
          this.baseFish = this.node.parent.getComponent(gfBaseFish);
          this.node.active = !!TimeRemainFreeze;

          if (this.node.active) {
            this.onFreezeFish(TimeRemainFreeze);
          }

          this.updateScale();
        };

        _proto.updateScale = function updateScale() {
          var fishSize = Math.min(this.baseFish.getVisibleSize().x, this.baseFish.getVisibleSize().y);
          var scale = Math.min(1.5, fishSize / this.node.getComponent(UITransform).width);
          this.node.setScale(scale, scale, 1);
        };

        _proto.onFreezeFish = function onFreezeFish(TimeRemainFreeze) {
          if (TimeRemainFreeze === void 0) {
            TimeRemainFreeze = 3000;
          }

          this.freezeTime = TimeRemainFreeze / 1000;

          if (!this._isFreezed) {
            this._isFreezed = true;

            if (this.baseFish.moveAction) {
              this.baseFish.moveAction.setSpeed(0.5);
            }

            this.node.active = true;
            this.baseFish.changeAnimationSpeed(0.5);
            this.baseFish.setColor(this.ICE_COLOR);
          }
        };

        _proto.update = function update(dt) {
          if (this._isFreezed) {
            this.freezeTime -= dt;

            if (this.freezeTime <= 0) {
              this.reset();
            }
          }
        };

        _proto.isFreezed = function isFreezed() {
          return this._isFreezed;
        };

        _proto.reset = function reset() {
          this._isFreezed = false;
          this.node.active = false;

          if (this.baseFish.moveAction) {
            this.baseFish.moveAction.setSpeed(1);
          }

          this.baseFish.changeAnimationSpeed(2);
          this.baseFish.resetColor();
        };

        return gfFishFreezeEffect;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptDrawPanel.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfptDataType.ts', './gfptSavedList.ts', './gfptDot.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Prefab, Graphics, Button, EditBox, UITransform, instantiate, v3, BoxCollider2D, clamp, Label, Component, gfEventEmitter, VALUE_TYPE, getMaxNumber, Round, gData, gEvent, GfptSavedList, GfptDot;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Graphics = module.Graphics;
      Button = module.Button;
      EditBox = module.EditBox;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      v3 = module.v3;
      BoxCollider2D = module.BoxCollider2D;
      clamp = module.clamp;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      VALUE_TYPE = module.VALUE_TYPE;
      getMaxNumber = module.getMaxNumber;
      Round = module.Round;
      gData = module.gData;
      gEvent = module.gEvent;
    }, function (module) {
      GfptSavedList = module.GfptSavedList;
    }, function (module) {
      GfptDot = module.GfptDot;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _temp;

      cclegacy._RF.push({}, "2851ayVQ4NFdL3PkuskEq1g", "gfptDrawPanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptDrawPanel = exports('GfptDrawPanel', (_dec = ccclass('GfptDrawPanel'), _dec2 = property(Node), _dec3 = property(Prefab), _dec4 = property(Graphics), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Button), _dec13 = property(Button), _dec14 = property(Button), _dec15 = property(EditBox), _dec16 = property(GfptSavedList), _dec17 = property(EditBox), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptDrawPanel, _Component);

        function GfptDrawPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "logicBoard", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "dotPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "graphics", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "drawBoard", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "dotHolder", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnModeCurve", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnModeLinear", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnUndo", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnRedo", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnOverride", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnDelete", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnSave", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnClear", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "valueEditBox", _descriptor14, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "savedListView", _descriptor15, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "savedNameEB", _descriptor16, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "linearValue", _descriptor17, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "MAX_VALUE", _descriptor18, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "EditMode", VALUE_TYPE.Linear);

          _defineProperty(_assertThisInitialized(_this), "originalPos", void 0);

          _defineProperty(_assertThisInitialized(_this), "savedList", void 0);

          _defineProperty(_assertThisInitialized(_this), "savedSelectedIndex", 0);

          _defineProperty(_assertThisInitialized(_this), "dotList", []);

          _defineProperty(_assertThisInitialized(_this), "undoList", []);

          _defineProperty(_assertThisInitialized(_this), "exportName", "");

          return _this;
        }

        var _proto = GfptDrawPanel.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("ON_DOT_UPDATE_POSITION", this.onDotUpdatePosition, this);
          this.node.on("ITEM_CLICKED", this.onSavedItemClicked, this);
          this.clear();
          this.setEnableCurveMode(this.EditMode == VALUE_TYPE.Curve);

          if (this.valueEditBox) {
            this.updateLinearLine();
            this.updateLinearLabel();
          }

          this.originalPos = this.node.getPosition();

          var _this$logicBoard$getC = this.logicBoard.getComponent(UITransform),
              width = _this$logicBoard$getC.width,
              height = _this$logicBoard$getC.height;

          this.savedListView.initBaseValues(this.MAX_VALUE, width, height);
        };

        _proto.setSavedListItemHeight = function setSavedListItemHeight(height) {
          if (height === void 0) {
            height = 50;
          }

          this.savedListView.setItemHeight(height);
        };

        _proto.onMouseTouch = function onMouseTouch(uiPos) {
          if (this.EditMode == VALUE_TYPE.Curve) {
            var dot = instantiate(this.dotPrefab).getComponent(GfptDot);
            this.dotList.push(dot);
            this.dotHolder.addChild(dot.node);
            dot.node.worldPosition = v3(uiPos.x, uiPos.y, 0);
            this.updateBezier();

            if (this.valueEditBox) {
              var pos = this.logicBoard.getComponent(UITransform).convertToNodeSpaceAR(dot.node.worldPosition);
              this.valueEditBox.string = this.convertCoordToLogic(pos.y).toString();
            }
          } else {
            this.updateLinearValueByPos(uiPos);
          }
        };

        _proto.onMouseMove = function onMouseMove(uiPos) {
          if (this.EditMode == VALUE_TYPE.Linear) {
            this.updateLinearValueByPos(uiPos);
          }
        };

        _proto.getDrawBoardBox = function getDrawBoardBox() {
          return this.drawBoard.getComponent(BoxCollider2D);
        };

        _proto.onBtnUndoClicked = function onBtnUndoClicked() {
          if (this.dotList.length == 0) return;
          var lastDot = this.dotList.pop();
          this.undoList.push(lastDot);
          lastDot.node.removeFromParent();
          this.updateBezier();
        };

        _proto.onBtnRedoClicked = function onBtnRedoClicked() {
          if (this.undoList.length == 0) return;
          var dot = this.undoList.pop();
          this.dotHolder.addChild(dot.node);
          this.dotList.push(dot);
          this.updateBezier();
        };

        _proto.getExportData = function getExportData() {
          var now = Date.now().toString();
          var name = this.exportName + " " + getMaxNumber(this.savedList);

          if (this.EditMode == VALUE_TYPE.Linear) {
            var _this$logicBoard$getC2 = this.logicBoard.getComponent(UITransform),
                height = _this$logicBoard$getC2.height;

            var value = this.MAX_VALUE > 0 ? this.convertCoordToLogic(this.linearValue * height) : this.linearValue;
            return {
              id: now,
              name: name,
              type: this.EditMode,
              value: value
            };
          }

          var yellows = [],
              blues = [];

          for (var i = 0; i < this.dotList.length; ++i) {
            var yellow = this.logicBoard.getComponent(UITransform).convertToNodeSpaceAR(this.getYellowDot(i).worldPosition);
            yellows.push({
              x: this.convertCoordToLogic(yellow.x),
              y: this.convertCoordToLogic(yellow.y)
            });
            var blue = this.logicBoard.getComponent(UITransform).convertToNodeSpaceAR(this.getBlueDot(i).worldPosition);
            blues.push({
              x: this.convertCoordToLogic(blue.x),
              y: this.convertCoordToLogic(blue.y)
            });
          }

          return {
            id: now,
            name: name,
            type: this.EditMode,
            pts: {
              pts1: yellows,
              pts2: blues
            }
          };
        };

        _proto.importListData = function importListData(data) {
          this.savedList.length = 0;

          for (var i = 0; i < data.length; ++i) {
            this.savedList.push(data[i]);
          }

          this.reloadData();
        };

        _proto.reloadData = function reloadData() {
          if (this.savedList.length == 0) return;
          this.savedListView.updateContent(this.savedList);
          this.savedSelectedIndex = this.savedList.length - 1;
          this.savedListView.select(this.savedSelectedIndex);
          this.importData(this.savedList[this.savedSelectedIndex]);
        };

        _proto.importData = function importData(exportData, replaceName) {
          if (replaceName === void 0) {
            replaceName = true;
          }

          this.clear();

          if (replaceName) {
            this.savedNameEB.string = exportData.name;
          }

          this.setEnableCurveMode(exportData.type == VALUE_TYPE.Curve);

          if (exportData.type == VALUE_TYPE.Curve) {
            this.dotHolder.destroyAllChildren();
            this.dotHolder.removeAllChildren();
            this.undoList.length = 0;
            this.dotList.length = 0;
            var yellows = exportData.pts.pts1;
            var blues = exportData.pts.pts2;
            var uiComponent = this.logicBoard.getComponent(UITransform);

            for (var i = 0; i < yellows.length; ++i) {
              var dot = instantiate(this.dotPrefab);
              this.dotHolder.addChild(dot);
              this.dotList.push(dot.getComponent(GfptDot));
              dot.worldPosition = uiComponent.convertToWorldSpaceAR(v3(this.convertLogicToCoord(yellows[i].x), this.convertLogicToCoord(yellows[i].y), 0));
              var blue = dot.getChildByName('blue');
              blue.worldPosition = uiComponent.convertToWorldSpaceAR(v3(this.convertLogicToCoord(blues[i].x), this.convertLogicToCoord(blues[i].y), 0));
            }

            this.updateAllLine();
            this.updateBezier();
          } else {
            var _this$logicBoard$getC3 = this.logicBoard.getComponent(UITransform),
                height = _this$logicBoard$getC3.height;

            this.linearValue = this.convertLogicToCoord(exportData.value) / height;
            this.updateLinearLabel();
            this.updateLinearLine();
          }
        };

        _proto.convertCoordToLogic = function convertCoordToLogic(y) {
          if (this.MAX_VALUE > 0) {
            var _this$logicBoard$getC4 = this.logicBoard.getComponent(UITransform),
                height = _this$logicBoard$getC4.height;

            return Round(y / height * this.MAX_VALUE);
          }

          return Round(y);
        };

        _proto.convertLogicToCoord = function convertLogicToCoord(y) {
          if (this.MAX_VALUE > 0) {
            var _this$logicBoard$getC5 = this.logicBoard.getComponent(UITransform),
                height = _this$logicBoard$getC5.height;

            return Round(y * height / this.MAX_VALUE);
          }

          return y;
        };

        _proto.updateAllLine = function updateAllLine() {
          for (var i = 0; i < this.dotList.length; ++i) {
            this.dotList[i].updateLine();
          }
        };

        _proto.getBlueDot = function getBlueDot(i) {
          return this.dotList[i].node.getChildByName('blue');
        };

        _proto.getYellowDot = function getYellowDot(i) {
          return this.dotList[i].node.getChildByName('yellow');
        };

        _proto.onDotUpdatePosition = function onDotUpdatePosition(e) {
          e.propagationStopped = true;
          this.updateBezier();
          if (!this.valueEditBox) return;
          var pos = this.logicBoard.getComponent(UITransform).convertToNodeSpaceAR(e.data.pos);
          this.valueEditBox.string = this.convertCoordToLogic(pos.y).toString();
        };

        _proto.updateBezier = function updateBezier() {
          this.graphics.clear();
          if (this.dotList.length < 2) return;

          for (var i = 0; i < this.dotList.length - 1; ++i) {
            this.drawBezierBy2Dot(i, i + 1);
          }

          this.graphics.close();
        };

        _proto.drawBezierBy2Dot = function drawBezierBy2Dot(i, j) {
          var p0 = this.graphics.node.getComponent(UITransform).convertToNodeSpaceAR(this.getYellowDot(i).worldPosition);
          var p1 = this.graphics.node.getComponent(UITransform).convertToNodeSpaceAR(this.getBlueDot(i).worldPosition);
          var p2 = this.graphics.node.getComponent(UITransform).convertToNodeSpaceAR(this.getBlueDot(j).worldPosition);
          var p3 = this.graphics.node.getComponent(UITransform).convertToNodeSpaceAR(this.getYellowDot(j).worldPosition); //symmetric point

          p2.x = 2 * p3.x - p2.x;
          p2.y = 2 * p3.y - p2.y;
          this.graphics.moveTo(p0.x, p0.y);
          this.graphics.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
          this.graphics.stroke();
        };

        _proto.getPathData = function getPathData() {
          return this.getExportData();
        };

        _proto.onBtnCurveClicked = function onBtnCurveClicked() {
          this.clear();
          this.setEnableCurveMode(true);
        };

        _proto.onBtnLinearClicked = function onBtnLinearClicked() {
          this.clear();
          this.setEnableCurveMode(false);
          this.updateLinearLabel();
          this.updateLinearLine();
        };

        _proto.setEnableCurveMode = function setEnableCurveMode(enable) {
          if (enable === void 0) {
            enable = true;
          }

          if (!this.BtnModeCurve) return;
          this.BtnModeLinear.interactable = enable;
          this.BtnModeCurve.interactable = !enable;
          this.EditMode = enable ? VALUE_TYPE.Curve : VALUE_TYPE.Linear;
          this.BtnUndo.node.active = enable;
          this.BtnRedo.node.active = enable;
          this.BtnClear.node.active = enable;
        };

        _proto.updateLinearValueByPos = function updateLinearValueByPos(uiPos) {
          var _this$drawBoard$getCo = this.drawBoard.getComponent(UITransform),
              height = _this$drawBoard$getCo.height,
              anchorY = _this$drawBoard$getCo.anchorY;

          var bottom = this.drawBoard.worldPosition.y - height * anchorY;
          this.linearValue = clamp(Round((uiPos.y - bottom) / height), 0, 1);
          this.updateLinearLine();
          this.updateLinearLabel();
        };

        _proto.updateLinearLine = function updateLinearLine() {
          var _this$drawBoard$getCo2 = this.drawBoard.getComponent(UITransform),
              width = _this$drawBoard$getCo2.width,
              height = _this$drawBoard$getCo2.height,
              anchorX = _this$drawBoard$getCo2.anchorX,
              anchorY = _this$drawBoard$getCo2.anchorY;

          var pos = this.graphics.node.getComponent(UITransform).convertToNodeSpaceAR(this.drawBoard.worldPosition);
          var x0 = pos.x - width * anchorX;
          var x1 = pos.x + width * (1 - anchorX);
          var yPos = pos.y + height * (this.linearValue - anchorY);
          this.graphics.clear();
          this.graphics.moveTo(x0, yPos);
          this.graphics.lineTo(x1, yPos);
          this.graphics.stroke();
          this.graphics.close();
        };

        _proto.updateLinearLabel = function updateLinearLabel() {
          var _this$drawBoard$getCo3 = this.drawBoard.getComponent(UITransform),
              height = _this$drawBoard$getCo3.height;

          this.valueEditBox.string = (this.MAX_VALUE > 0 ? this.convertCoordToLogic(this.linearValue * height) : this.linearValue).toString();
        };

        _proto.clear = function clear() {
          this.dotHolder.destroyAllChildren();
          this.dotHolder.removeAllChildren();
          this.dotList.length = 0;
          this.undoList.length = 0;
          this.graphics.clear();
        };

        _proto.onBtnZoomClicked = function onBtnZoomClicked(evt) {
          if (this.node.scale.x == 1) {
            this.node.setScale(2, 2, 1);
            this.node.setPosition(0, 0, 0);
            this.node.setSiblingIndex(999);
            evt.target.getChildByName('Label').getComponent(Label).string = '-';
          } else {
            this.node.setScale(1, 1, 1);
            this.node.setPosition(this.originalPos);
            evt.target.getChildByName('Label').getComponent(Label).string = '+';
          }
        };

        _proto.onLinearEditBoxTextChange = function onLinearEditBoxTextChange(evt) {
          if (isNaN(parseFloat(this.valueEditBox.string))) return;

          var _this$logicBoard$getC6 = this.logicBoard.getComponent(UITransform),
              height = _this$logicBoard$getC6.height;

          this.linearValue = clamp(this.convertLogicToCoord(parseFloat(this.valueEditBox.string) / height), 0, 1);
          this.updateLinearLine();
          this.updateLinearLabel();
        };

        _proto.onBtnSaveClicked = function onBtnSaveClicked() {
          var newItem = this.getExportData();
          this.savedList.push(newItem);
          this.savedListView.updateContent(this.savedList);
          this.savedSelectedIndex = this.savedList.length - 1;
          this.savedListView.select(this.savedSelectedIndex);
          this.savedNameEB.string = newItem.name;
          console.log(gData.path);
          console.log(gData.scale);
          console.log(gData.speed);
          console.log(gData.formation);
        };

        _proto.onSavedItemClicked = function onSavedItemClicked(e) {
          e.propagationStopped = true;
          var index = e.data.index;
          this.clear();
          this.importData(this.savedList[index]);
          this.savedSelectedIndex = index;
        };

        _proto.onBtnOverrideClicked = function onBtnOverrideClicked() {
          var exportData = this.getExportData();
          exportData.id = this.savedList[this.savedSelectedIndex].id;
          exportData.name = this.savedNameEB.string;
          this.savedList[this.savedSelectedIndex] = exportData;
          this.savedListView.updateContent(this.savedList);
          this.savedListView.select(this.savedSelectedIndex);
        };

        _proto.onBtnDeleteClicked = function onBtnDeleteClicked() {
          if (this.savedSelectedIndex == 0) return;
          this.savedList.splice(this.savedSelectedIndex, 1);
          this.clear();
          this.savedListView.updateContent(this.savedList);

          if (this.savedSelectedIndex > 0) {
            --this.savedSelectedIndex;
          }

          if (this.savedList.length > 0) {
            this.savedListView.select(this.savedSelectedIndex);
            this.importData(this.savedList[this.savedSelectedIndex]);
          }
        };

        _proto.onBtnExportClicked = function onBtnExportClicked() {
          gfEventEmitter.instance.emit(gEvent.EXPORT_ONE_DATA, this.getExportData(), this.exportName);
        };

        return GfptDrawPanel;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "logicBoard", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "dotPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "drawBoard", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "dotHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "BtnModeCurve", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "BtnModeLinear", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "BtnUndo", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "BtnRedo", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "BtnOverride", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "BtnDelete", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "BtnSave", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "BtnClear", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "valueEditBox", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "savedListView", [_dec16], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "savedNameEB", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "linearValue", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "MAX_VALUE", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/crypto-core.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "28fa8SvM8xEGLnNgEyetyJC", "crypto-core", undefined);
      /* eslint-disable no-prototype-builtins */

      /* globals , globalThis*/

      /**
       * CryptoJS core components.
       */
      // eslint-disable-next-line no-shadow-restricted-names


      var CryptoJS = exports('default', function (Math, undefined$1) {
        // if (typeof window !== 'undefined' && window.crypto) {
        //     crypto = window.crypto;
        // }
        // // Native crypto in web worker (Browser)
        // if (typeof self !== 'undefined' && self.crypto) {
        //     crypto = self.crypto;
        // }
        // // Native crypto from worker
        // if (typeof globalThis !== 'undefined' && globalThis.crypto) {
        //     crypto = globalThis.crypto;
        // }
        // // Native (experimental IE 11) crypto from window (Browser)
        // if (!crypto && typeof window !== 'undefined' && window.msCrypto) {
        //     crypto = window.msCrypto;
        // }
        // // Native crypto from global (NodeJS)
        // if (!crypto && typeof global !== 'undefined' && global.crypto) {
        //     crypto = global.crypto;
        // }
        // // Native crypto import via require (NodeJS)
        // if (!crypto && typeof require === 'function') {
        //     try {
        //         crypto = require('crypto');
        //     } catch (err) {
        //         //
        //     }
        // }

        /*
         * Cryptographically secure pseudorandom number generator
         *
         * As Math.random() is cryptographically not safe to use
         */
        var cryptoSecureRandomInt = function cryptoSecureRandomInt() {
          throw new Error('Native crypto module could not be used to get secure random number.');
        };
        /*
         * Local polyfill of Object.create
          */


        var create = Object.create || function () {
          function F() {}

          return function (obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        /**
         * CryptoJS namespace.
         */


        var C = {};
        /**
         * Library namespace.
         */

        var C_lib = C.lib = {};
        /**
         * Base object for prototypal inheritance.
         */

        var Base = C_lib.Base = function () {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function extend(overrides) {
              // Spawn
              var subtype = create(this); // Augment

              if (overrides) {
                subtype.mixIn(overrides);
              } // Create default initializer
              // eslint-disable-next-line no-prototype-builtins


              if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                subtype.init = function () {
                  subtype.$super.init.apply(this, arguments);
                };
              } // Initializer's prototype is the subtype object


              subtype.init.prototype = subtype; // Reference supertype

              subtype.$super = this;
              return subtype;
            },

            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function create() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },

            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function init() {},

            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function mixIn(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              } // IE won't copy toString using the loop above


              if (properties.hasOwnProperty('toString')) {
                this.toString = properties.toString;
              }
            },

            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function clone() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        /**
         * An array of 32-bit words.
         *
         * @property {Array} words The array of 32-bit words.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */


        var WordArray = C_lib.WordArray = Base.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function init(words, sigBytes) {
            words = this.words = words || [];

            if (sigBytes != undefined$1) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words.length * 4;
            }
          },

          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function toString(encoder) {
            return (encoder || Hex).stringify(this);
          },

          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function concat(wordArray) {
            // Shortcuts
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes; // Clamp excess bits

            this.clamp(); // Concat

            if (thisSigBytes % 4) {
              // Copy one byte at a time
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              // Copy one word at a time
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }

            this.sigBytes += thatSigBytes; // Chainable

            return this;
          },

          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function clamp() {
            // Shortcuts
            var words = this.words;
            var sigBytes = this.sigBytes; // Clamp

            words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
            words.length = Math.ceil(sigBytes / 4);
          },

          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function clone() {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone;
          },

          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function random(nBytes) {
            var words = [];

            for (var i = 0; i < nBytes; i += 4) {
              words.push(cryptoSecureRandomInt());
            }

            return new WordArray.init(words, nBytes);
          }
        });
        /**
         * Encoder namespace.
         */

        var C_enc = C.enc = {};
        /**
         * Hex encoding strategy.
         */

        var Hex = C_enc.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function stringify(wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes; // Convert

            var hexChars = [];

            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 0x0f).toString(16));
            }

            return hexChars.join('');
          },

          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function parse(hexStr) {
            // Shortcut
            var hexStrLength = hexStr.length; // Convert

            var words = [];

            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }

            return new WordArray.init(words, hexStrLength / 2);
          }
        };
        /**
         * Latin1 encoding strategy.
         */

        var Latin1 = C_enc.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function stringify(wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes; // Convert

            var latin1Chars = [];

            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
              latin1Chars.push(String.fromCharCode(bite));
            }

            return latin1Chars.join('');
          },

          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function parse(latin1Str) {
            // Shortcut
            var latin1StrLength = latin1Str.length; // Convert

            var words = [];

            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
            }

            return new WordArray.init(words, latin1StrLength);
          }
        };
        /**
         * UTF-8 encoding strategy.
         */

        var Utf8 = C_enc.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function stringify(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error('Malformed UTF-8 data');
            }
          },

          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function parse(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        /**
         * Abstract buffered block algorithm template.
         *
         * The property blockSize must be implemented in a concrete subtype.
         *
         * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
         */

        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function reset() {
            // Initial values
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },

          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function _append(data) {
            // Convert string to WordArray, else assume WordArray already
            if (typeof data == 'string') {
              data = Utf8.parse(data);
            } // Append


            this._data.concat(data);

            this._nDataBytes += data.sigBytes;
          },

          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function _process(doFlush) {
            var processedWords; // Shortcuts

            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4; // Count blocks ready

            var nBlocksReady = dataSigBytes / blockSizeBytes;

            if (doFlush) {
              // Round up to include partial blocks
              nBlocksReady = Math.ceil(nBlocksReady);
            } else {
              // Round down to include only full blocks,
              // less the number of blocks that must remain in the buffer
              nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
            } // Count words ready


            var nWordsReady = nBlocksReady * blockSize; // Count bytes ready

            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes); // Process blocks

            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                // Perform concrete-algorithm logic
                this._doProcessBlock(dataWords, offset);
              } // Remove processed words


              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            } // Return processed words


            return new WordArray.init(processedWords, nBytesReady);
          },

          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function clone() {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone;
          },
          _minBufferSize: 0
        });
        /**
         * Abstract hasher template.
         *
         * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
         */
        // eslint-disable-next-line no-unused-vars

        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           */
          cfg: Base.extend(null),

          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function init(cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg); // Set initial values

            this.reset();
          },

          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function reset() {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this); // Perform concrete-hasher logic

            this._doReset();
          },

          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function update(messageUpdate) {
            // Append
            this._append(messageUpdate); // Update the hash


            this._process(); // Chainable


            return this;
          },

          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function finalize(messageUpdate) {
            // Final message update
            if (messageUpdate) {
              this._append(messageUpdate);
            } // Perform concrete-hasher logic


            var hash = this._doFinalize();

            return hash;
          },
          blockSize: 512 / 32,

          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function _createHelper(hasher) {
            return function (message, cfg) {
              return new hasher.init(cfg).finalize(message);
            };
          },

          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function _createHmacHelper(hasher) {
            return function (message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message);
            };
          }
        });
        /**
         * Algorithm namespace.
         */

        var C_algo = C.algo = {};
        return C;
      }(Math));
      /**
       * Cipher core components.
       */
      // eslint-disable-next-line no-shadow-restricted-names

      CryptoJS.lib.Cipher || function () {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc; // eslint-disable-next-line no-unused-vars

        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        /**
         * Abstract base cipher template.
         *
         * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
         * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
         * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
         * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
         */

        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: Base.extend(),

          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function createEncryptor(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },

          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function createDecryptor(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },

          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function init(xformMode, key, cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg); // Store transform mode and key

            this._xformMode = xformMode;
            this._key = key; // Set initial values

            this.reset();
          },

          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function reset() {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic

            this._doReset();
          },

          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function process(dataUpdate) {
            // Append
            this._append(dataUpdate); // Process available blocks


            return this._process();
          },

          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function finalize(dataUpdate) {
            // Final data update
            if (dataUpdate) {
              this._append(dataUpdate);
            } // Perform concrete-cipher logic


            var finalProcessedData = this._doFinalize();

            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,

          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: function () {
            function selectCipherStrategy(key) {
              if (typeof key == 'string') {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }

            return function (cipher) {
              return {
                encrypt: function encrypt(message, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
                },
                decrypt: function decrypt(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        /**
         * Abstract base stream cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
         */
        // eslint-disable-next-line no-unused-vars

        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function _doFinalize() {
            // Process partial blocks
            var finalProcessedBlocks = this._process(!!'flush');

            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        /**
         * Mode namespace.
         */

        var C_mode = C.mode = {};
        /**
         * Abstract base block cipher mode template.
         */

        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function createEncryptor(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },

          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function createDecryptor(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },

          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function init(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        /**
         * Cipher Block Chaining mode.
         */

        var CBC = C_mode.CBC = function () {
          /**
           * Abstract base CBC mode.
           */
          var CBC = BlockCipherMode.extend();
          /**
           * CBC encryptor.
           */

          CBC.Encryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize; // XOR and encrypt

              xorBlock.call(this, words, offset, blockSize);
              cipher.encryptBlock(words, offset); // Remember this block to use with next block

              this._prevBlock = words.slice(offset, offset + blockSize);
            }
          });
          /**
           * CBC decryptor.
           */

          CBC.Decryptor = CBC.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function processBlock(words, offset) {
              // Shortcuts
              var cipher = this._cipher;
              var blockSize = cipher.blockSize; // Remember this block to use with next block

              var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR

              cipher.decryptBlock(words, offset);
              xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block

              this._prevBlock = thisBlock;
            }
          });

          function xorBlock(words, offset, blockSize) {
            var block; // Shortcut

            var iv = this._iv; // Choose mixing block

            if (iv) {
              block = iv; // Remove IV for subsequent blocks

              this._iv = undefined;
            } else {
              block = this._prevBlock;
            } // XOR blocks


            for (var i = 0; i < blockSize; i++) {
              words[offset + i] ^= block[i];
            }
          }

          return CBC;
        }();
        /**
         * Padding namespace.
         */


        var C_pad = C.pad = {};
        /**
         * PKCS #5/7 padding strategy.
         */

        var Pkcs7 = C_pad.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function pad(data, blockSize) {
            // Shortcut
            var blockSizeBytes = blockSize * 4; // Count padding bytes

            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word

            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding

            var paddingWords = [];

            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }

            var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding

            data.concat(padding);
          },

          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function unpad(data) {
            // Get number of padding bytes from last byte
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding

            data.sigBytes -= nPaddingBytes;
          }
        };
        /**
         * Abstract base block cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
         */
        // eslint-disable-next-line no-unused-vars

        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function reset() {
            var modeCreator; // Reset cipher

            Cipher.reset.call(this); // Shortcuts

            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode; // Reset block mode

            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else
              /* if (this._xformMode == this._DEC_XFORM_MODE) */
              {
                modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding

                this._minBufferSize = 1;
              }

            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function _doProcessBlock(words, offset) {
            this._mode.processBlock(words, offset);
          },
          _doFinalize: function _doFinalize() {
            var finalProcessedBlocks; // Shortcut

            var padding = this.cfg.padding; // Finalize

            if (this._xformMode == this._ENC_XFORM_MODE) {
              // Pad data
              padding.pad(this._data, this.blockSize); // Process final blocks

              finalProcessedBlocks = this._process(!!'flush');
            } else
              /* if (this._xformMode == this._DEC_XFORM_MODE) */
              {
                // Process final blocks
                finalProcessedBlocks = this._process(!!'flush'); // Unpad data

                padding.unpad(finalProcessedBlocks);
              }

            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        /**
         * A collection of cipher parameters.
         *
         * @property {WordArray} ciphertext The raw ciphertext.
         * @property {WordArray} key The key to this ciphertext.
         * @property {WordArray} iv The IV used in the ciphering operation.
         * @property {WordArray} salt The salt used with a key derivation function.
         * @property {Cipher} algorithm The cipher algorithm.
         * @property {Mode} mode The block mode used in the ciphering operation.
         * @property {Padding} padding The padding scheme used in the ciphering operation.
         * @property {number} blockSize The block size of the cipher.
         * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
         */

        var CipherParams = C_lib.CipherParams = Base.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function init(cipherParams) {
            this.mixIn(cipherParams);
          },

          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function toString(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        /**
         * Format namespace.
         */

        var C_format = C.format = {};
        /**
         * OpenSSL formatting strategy.
         */

        var OpenSSLFormatter = C_format.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function stringify(cipherParams) {
            var wordArray; // Shortcuts

            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt; // Format

            if (salt) {
              wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }

            return wordArray.toString(Base64);
          },

          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function parse(openSSLStr) {
            var salt; // Parse base64

            var ciphertext = Base64.parse(openSSLStr); // Shortcut

            var ciphertextWords = ciphertext.words; // Test for salt

            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
              // Extract salt
              salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext

              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }

            return CipherParams.create({
              ciphertext: ciphertext,
              salt: salt
            });
          }
        };
        /**
         * A cipher wrapper that returns ciphertext as a serializable cipher params object.
         */

        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),

          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function encrypt(cipher, message, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Encrypt

            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message); // Shortcut

            var cipherCfg = encryptor.cfg; // Create and return serializable cipher params

            return CipherParams.create({
              ciphertext: ciphertext,
              key: key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },

          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function decrypt(cipher, ciphertext, key, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Convert string to CipherParams

            ciphertext = this._parse(ciphertext, cfg.format); // Decrypt

            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },

          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function _parse(ciphertext, format) {
            if (typeof ciphertext == 'string') {
              return format.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        /**
         * Key derivation function namespace.
         */

        var C_kdf = C.kdf = {};
        /**
         * OpenSSL key derivation function.
         */

        var OpenSSLKdf = C_kdf.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function execute(password, keySize, ivSize, salt) {
            // Generate random salt
            if (!salt) {
              salt = WordArray.random(64 / 8);
            } // Derive key and IV


            var key = EvpKDF.create({
              keySize: keySize + ivSize
            }).compute(password, salt); // Separate key and IV

            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4; // Return params

            return CipherParams.create({
              key: key,
              iv: iv,
              salt: salt
            });
          }
        };
        /**
         * A serializable cipher wrapper that derives the key from a password,
         * and returns ciphertext as a serializable cipher params object.
         */

        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),

          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function encrypt(cipher, message, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Derive key and other params

            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config

            cfg.iv = derivedParams.iv; // Encrypt

            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params

            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },

          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function decrypt(cipher, ciphertext, password, cfg) {
            // Apply config defaults
            cfg = this.cfg.extend(cfg); // Convert string to CipherParams

            ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params

            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config

            cfg.iv = derivedParams.iv; // Decrypt

            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FlowerPoison1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfEventEmitter.ts', './EventsCode1988.ts', './SpineFish1988.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, fadeOut, gfEventEmitter, EventCode, SpineFish1988;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      SpineFish1988 = module.SpineFish1988;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "291f3uu+HtDG7lo/U+zcisl", "FlowerPoison1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FlowerPoison1988 = exports('FlowerPoison1988', (_dec = ccclass('FlowerPoison1988'), _dec(_class = /*#__PURE__*/function (_SpineFish) {
        _inheritsLoose(FlowerPoison1988, _SpineFish);

        function FlowerPoison1988() {
          return _SpineFish.apply(this, arguments) || this;
        }

        var _proto = FlowerPoison1988.prototype;

        _proto.initFishData = function initFishData(data) {
          _SpineFish.prototype.initFishData.call(this, data);

          this.setOpacity(255);
        };

        _proto.onCatch = function onCatch(data) {
          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.processItemInCatchFish(data);
          this.onPlayEffectWinInCatchFish(data);
          this.stopAllActions();
          this.resetColor();
          this.setDie(true);
          gfEventEmitter.instance.emit(EventCode.FISH_LAYER.FLOWER_DIE, this.node.position);
          this.playDieAnimation();
          gfEventEmitter.instance.emit(EventCode.SOUND.FLOWER_DIE);
        };

        _proto.playDieAnimation = function playDieAnimation() {
          var _this = this;

          tween(this.node).then(fadeOut(0.4)).call(function () {
            _this.onDie();
          }).start();
        };

        return FlowerPoison1988;
      }(SpineFish1988)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TutorialControl.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './CustomEnum.ts', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, _createClass, cclegacy, _decorator, Node, log, warn, find, UITransform, tween, Component, setOpacity, changeParent, TutorialTriggerType, TutorialCommandType, TutorialStep;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      log = module.log;
      warn = module.warn;
      find = module.find;
      UITransform = module.UITransform;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      changeParent = module.changeParent;
    }, function (module) {
      TutorialTriggerType = module.TutorialTriggerType;
      TutorialCommandType = module.TutorialCommandType;
    }, function (module) {
      TutorialStep = module.TutorialStep;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _temp;

      cclegacy._RF.push({}, "298a1+E1gxLoq1d0whK7WLk", "TutorialControl", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var TutorialControl = exports('TutorialControl', (_dec = ccclass('TutorialControl'), _dec2 = property({
        type: TutorialStep
      }), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property({
        type: Node
      }), _dec8 = property({
        type: TutorialStep
      }), _dec(_class = executeInEditMode(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TutorialControl, _Component);

        function TutorialControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "tutorialSteps", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "skipButton", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "overlayBlock", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "touchBlock", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "onTopHolder", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "jackpot", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "delayToStart", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "insertedSteps", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "insertedIndex", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "deletedStepCount", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "deletedIndex", _descriptor11, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_disableButtons", []);

          _defineProperty(_assertThisInitialized(_this), "_hiddenNodes", []);

          _defineProperty(_assertThisInitialized(_this), "_highlightNodes", []);

          _defineProperty(_assertThisInitialized(_this), "_waitForStart", false);

          _defineProperty(_assertThisInitialized(_this), "_currentStepIndex", 0);

          _defineProperty(_assertThisInitialized(_this), "_currentStep", null);

          _defineProperty(_assertThisInitialized(_this), "_storedFlags", []);

          _defineProperty(_assertThisInitialized(_this), "_currentTween", null);

          _defineProperty(_assertThisInitialized(_this), "_isFinished", false);

          _defineProperty(_assertThisInitialized(_this), "_isSortedByPriority", false);

          _defineProperty(_assertThisInitialized(_this), "_isShowing", false);

          _defineProperty(_assertThisInitialized(_this), "trialJpl", []);

          _defineProperty(_assertThisInitialized(_this), "jackpotReset", false);

          _defineProperty(_assertThisInitialized(_this), "_insertStep", false);

          _defineProperty(_assertThisInitialized(_this), "_deleteStep", false);

          _defineProperty(_assertThisInitialized(_this), "_isChangingSteps", false);

          return _this;
        }

        var _proto = TutorialControl.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.sortStepByPriority = function sortStepByPriority() {
          this.tutorialSteps.sort(function (a, b) {
            return a.priority - b.priority;
          });
        };

        _proto.exitTrialMode = function exitTrialMode() {
          if (this.jackpot) this.jackpot.active = false;
        };

        _proto.skipTutorial = function skipTutorial() {
          var mainDirector = this.node.mainDirector;

          if (mainDirector) {
            mainDirector.skipTutorialMode();
          }

          this.resetTutorial();
          this.finishTutorial();

          this._resumeCurrentScript(true);
        };

        _proto.onTutorialClick = function onTutorialClick() {
          this.onTrigger(TutorialTriggerType.TutorialClick);
        };

        _proto.onSpinClicked = function onSpinClicked() {
          this.onTrigger(TutorialTriggerType.SpinClicked);
        };

        _proto.activeTutorial = function activeTutorial() {
          var _this2 = this;

          var mainDirector = this.node.mainDirector;

          if (mainDirector) {
            mainDirector.currentGameMode.emit("SPIN_DISABLE");
          }

          if (this._waitForStart) return;
          this._waitForStart = true;
          this.initJackpot();
          setOpacity(this.jackpot, 255);

          if (this.touchBlock) {
            this.touchBlock.active = true;
          }

          this.scheduleOnce(function () {
            _this2.resetTutorial();

            _this2._isFinished = _this2._waitForStart = false;
            _this2._isShowing = true;
            if (_this2.skipButton) _this2.skipButton.active = true;

            _this2.runTutorial();

            if (mainDirector) {
              mainDirector.currentGameMode.emit("SPIN_ENABLE");
            }
          }, this.delayToStart);
        };

        _proto.initJackpot = function initJackpot() {
          if (this.jackpot) {
            this.jackpot.active = true;
            this.jackpot.emit('INIT_JACKPOT', this.node.config.DEFAULT_TRIAL_JACKPOT);
          }
        };

        _proto.onStateUpdate = function onStateUpdate(data) {
          if (data.trialJpl) {
            if (data.jackpotInfo) {
              if (data.trialJplWin && data.trialJplWin.length) {
                var trialJpl = data.trialJpl,
                    trialJplWin = data.trialJplWin;
                var isTutorialData = data.trialJplWin.length > 1;
                this.trialJpl = isTutorialData ? data.trialJplWin : this.getLatestJackpot(trialJpl, trialJplWin);
                this.runJackpot();
              }

              this.trialJpl = data.trialJpl;
              this.jackpotReset = true;
            } else {
              this.trialJpl = data.trialJpl;
              this.runJackpot();
            }
          }

          if (data.isFinishedTutorial) {
            log("[TutorialController] TUTORIAL DATA IS FINISHED");
          }
        };

        _proto.runTutorial = function runTutorial() {
          this._currentStep = this.tutorialSteps[this._currentStepIndex];

          if (!this._currentStep) {
            log("[TutorialController] Something Wrong!!!");
            return;
          }

          if (!this._currentStep.isStarted) {
            this._currentStep.startStep();

            this._doCommand(this._currentStep);
          }
        };

        _proto.onTrigger = function onTrigger(triggerType) {
          if (this._currentStep && this._currentStep.checkForTrigger(triggerType)) {
            if (triggerType === TutorialTriggerType.TutorialClick) {
              this.touchBlock.active = false;
            }

            this.goNext();
          }

          if (triggerType === TutorialTriggerType.OnCutsceneClose && this.jackpotReset) {
            this.resetJackpot();
            this.jackpotReset = false;
          }
        };

        _proto.goNext = function goNext() {
          if (this._currentStep) {
            this._currentStep.finishStep();
          }

          this._currentStepIndex++;

          if (this._currentStepIndex >= this.tutorialSteps.length) {
            this.finishTutorial();
          } else {
            this.runTutorial();
          }
        };

        _proto.resetTutorial = function resetTutorial() {
          for (var i = 0; i < this._disableButtons.length; i++) {
            var button = this._disableButtons[i];

            if (button) {
              button.interactable = true;
            }
          }

          this._disableButtons = [];

          for (var _i = 0; _i < this._hiddenNodes.length; _i++) {
            var hiddenNode = this._hiddenNodes[_i];

            if (hiddenNode) {
              hiddenNode.active = true;
            }
          }

          this._hiddenNodes = [];

          this._revertAllHighlightObjects();

          if (this.overlayBlock) {
            this.overlayBlock.active = true;
          }

          if (this.touchBlock) {
            this.touchBlock.active = false;
          }

          this._highlightNodes = [];
          this._storedFlags = [];
          this._currentStepIndex = 0;
          this._currentStep = null;

          for (var _i2 = this.tutorialSteps.length - 1; _i2 >= 0; _i2--) {
            if (this.tutorialSteps[_i2].isStarted) this.tutorialSteps[_i2].resetStep();
          }

          if (this._currentTween) {
            this._currentTween.stop();

            this._currentTween = null;
          }
        };

        _proto.isContainFlag = function isContainFlag(flag) {
          return this._storedFlags.indexOf(flag) > -1;
        };

        _proto.finishTutorial = function finishTutorial() {
          if (this.overlayBlock) {
            this.overlayBlock.active = false;
          }

          this._isFinished = true;
          this._isShowing = false;
          if (this.skipButton) this.skipButton.active = false;
          warn('Finshed Tutorial');
        };

        _proto.getLatestJackpot = function getLatestJackpot(trialJpl, trialJplWin) {
          var jackpotName = trialJplWin[0].split(';')[0];
          return trialJpl.map(function (item) {
            return item.includes(jackpotName) ? trialJplWin[0] : item;
          });
        };

        _proto.runJackpot = function runJackpot() {
          this.jackpot.emit('UPDATE_JACKPOT', this.getUpdatedJackpot());
        };

        _proto.resetJackpot = function resetJackpot() {
          this.jackpot.emit('RESUME_JACKPOT', this.getUpdatedJackpot());
        };

        _proto.getUpdatedJackpot = function getUpdatedJackpot() {
          var updatedJackpot = {};
          this.trialJpl.forEach(function (jp) {
            var data = jp.split(';');
            updatedJackpot[data[0]] = Number(data[1]);
          });
          return updatedJackpot;
        };

        _proto._doCommand = function _doCommand(step) {
          log("[TutorialController] RUN TUTORIAL COMMAND: " + step.stepName + " " + this._currentStepIndex);

          switch (step.commandType) {
            case TutorialCommandType.EnableButton:
              if (step.buttons) {
                this._enableButtons(step.buttons, true);
              }

              break;

            case TutorialCommandType.DisableButton:
              if (step.buttons) {
                this._enableButtons(step.buttons, false);
              }

              break;

            case TutorialCommandType.HighlightObject:
              if (step.unHighlightPreviousObjects) {
                this._revertAllHighlightObjects(true);
              }

              if (step.targets) {
                this._highlightObjects(step.targets);
              }

              break;

            case TutorialCommandType.HighlightObjectByName:
              if (step.targetsByName) {
                this._highlightObjectsByName(step.targetsByName);
              }

              break;

            case TutorialCommandType.RevertHighlightObject:
              if (step.targets) {
                this._revertHighlightObjects(step.targets);
              }

              break;

            case TutorialCommandType.RevertAllHighlightObject:
              if (step.targets) {
                this._revertAllHighlightObjects(true);
              }

              break;

            case TutorialCommandType.SetPosition:
              if (step.targets && step.targetPositions) {
                this._setObjectPosition(step.targets, step.targetPositions);
              }

              break;

            case TutorialCommandType.SetRotation:
              if (step.targets && step.targetRotations) {
                this._setObjectRotationInEulerAngle(step.targets, step.targetRotations);
              }

              break;

            case TutorialCommandType.SetScale:
              if (step.targets && step.targetScales) {
                this._setObjectScale(step.targets, step.targetScales);
              }

              break;

            case TutorialCommandType.SetContentSize:
              if (step.transformTargets && step.targetContentSizes) {
                this._setObjectContentSize(step.transformTargets, step.targetContentSizes);
              }

              break;

            case TutorialCommandType.SetOpacity:
              if (step.targets && step.targetOpacities) {
                this._setObjectOpacity(step.targets, step.targetOpacities);
              }

              break;

            case TutorialCommandType.ShowObject:
              if (step.targets) {
                this._showObjects(step.targets);

                if (step.targetPositions) {
                  this._setObjectPosition(step.targets, step.targetPositions, true);
                }

                if (step.targetRotations) {
                  this._setObjectRotationInEulerAngle(step.targets, step.targetRotations, true);
                }

                if (step.targetScales) {
                  this._setObjectScale(step.targets, step.targetScales, true);
                }
              }

              break;

            case TutorialCommandType.HideObject:
              if (step.targets) {
                this._showObjects(step.targets, false);
              }

              break;

            case TutorialCommandType.AddFlag:
              if (step.flagName && step.flagName !== '') {
                this._addFlag(step.flagName);
              }

              break;

            case TutorialCommandType.RemoveFlag:
              if (step.flagName && step.flagName !== '') {
                this._removeFlag(step.flagName);
              }

              break;

            case TutorialCommandType.BlockTouch:
              this._blockTouchInput();

              break;

            case TutorialCommandType.UnBlockTouch:
              this._blockTouchInput(false);

              break;

            case TutorialCommandType.WaitForTrigger:
              this._waitForTrigger(step.triggerTypes);

              break;

            case TutorialCommandType.EditDialog:
              if (step.dialogLabels && step.dialogTexts) {
                this._setDialogContents(step.dialogLabels, step.dialogTexts);
              }

              break;

            case TutorialCommandType.MoveTo:
              if (step.movingTarget && step.toPosition) {
                this._moveObjectTo(step.movingTarget, step.toPosition, step.movingTime);
              }

              break;

            case TutorialCommandType.MoveFromTo:
              if (step.movingTarget && step.fromPosition && step.toPosition) {
                this._moveObjectFromTo(step.movingTarget, step.fromPosition, step.toPosition, step.movingTime);
              }

              break;

            case TutorialCommandType.ResumeCurrentScript:
              this._resumeCurrentScript();

              break;

            case TutorialCommandType.PauseAction:
              this._pauseAction(step.GameMode, step.actionName, step.commandName);

              break;

            case TutorialCommandType.ResumeActions:
              this._resumeActions();

              break;

            case TutorialCommandType.SetSiblingIndex:
              this._setSiblingIndex(step.targets, step.targetSiblingIndices);

              break;

            case TutorialCommandType.Custom:
              if (step.customCommand) {
                this._doCustomCommand(step.customCommand);
              }

              break;
          }
        };

        _proto._enableButtons = function _enableButtons(buttons, isEnable) {
          for (var i = 0; i < buttons.length; i++) {
            var button = buttons[i];

            if (button) {
              button.interactable = isEnable;

              var index = this._disableButtons.indexOf(button);

              if (isEnable) {
                if (index > -1) {
                  this._disableButtons.slice(index, 0);
                }
              } else {
                if (index < 0) {
                  this._disableButtons.push(button);
                }
              }
            }
          }

          this.goNext();
        };

        _proto._highlightObjects = function _highlightObjects(nodes) {
          for (var i = 0; i < nodes.length; i++) {
            var _node = nodes[i];

            if (_node) {
              _node.oldParrent = _node.parent;
              _node.oldActive = _node.active;
              _node.oldLPos = _node.position;
              _node.oldIndex = _node.getSiblingIndex();
              changeParent(_node, this.onTopHolder);

              _node.setSiblingIndex(this.onTopHolder.children.length + 1);

              this._highlightNodes.push(_node);
            }
          }

          setOpacity(this.overlayBlock, 150);
          this.goNext();
        };

        _proto._highlightObjectsByName = function _highlightObjectsByName(targetAddresses) {
          for (var i = 0; i < targetAddresses.length; i++) {
            var _nodeName = targetAddresses[i].name;
            var path = targetAddresses[i].rootPath + _nodeName;
            var mainDirector = this.node.mainDirector;

            if (mainDirector) {
              var _node = find(path, mainDirector.node);

              if (_node) {
                _node.oldParrent = _node.parent;
                _node.oldActive = _node.active;
                _node.oldLPos = _node.position;
                _node.oldIndex = _node.getSiblingIndex(); // const transform = _node.getComponent(UITransform);
                // if(transform){
                //     (_node as any).oldPriotity = transform.priority;
                // }

                changeParent(_node, this.onTopHolder); // if(transform){
                //     transform.priority = 0;
                // }

                _node.setSiblingIndex(this.onTopHolder.children.length + 1);

                this._highlightNodes.push(_node);
              }
            }
          }

          setOpacity(this.overlayBlock, 150);
          this.goNext();
        };

        _proto._revertHighlightObjects = function _revertHighlightObjects(nodes) {
          for (var i = 0; i < nodes.length; i++) {
            var _node = nodes[i];

            if (_node) {
              changeParent(_node, _node.oldParrent);

              _node.setSiblingIndex(_node.oldIndex); // const transform = _node.getComponent(UITransform);
              // if(transform && (_node as any).oldPriotity!== undefined){
              //     transform.priority = (_node as any).oldPriotity;
              // }


              var index = this._highlightNodes.indexOf(_node);

              if (index > -1) {
                this._highlightNodes.splice(index, 1);
              }
            }
          }

          setOpacity(this.overlayBlock, 0);
          this.goNext();
        };

        _proto._revertAllHighlightObjects = function _revertAllHighlightObjects(goToNext) {
          if (goToNext === void 0) {
            goToNext = false;
          }

          for (var i = 0; i < this._highlightNodes.length; i++) {
            var _node = this._highlightNodes[i];

            if (_node) {
              changeParent(_node, _node.oldParrent);

              _node.setSiblingIndex(_node.oldIndex);

              var transform = _node.getComponent(UITransform);

              if (transform && _node.oldPriotity !== undefined) {
                transform.priority = _node.oldPriotity;
              }

              _node.active = _node.oldActive;
            }
          }

          setOpacity(this.overlayBlock, 0);
          this._highlightNodes = [];

          if (goToNext) {
            this.goNext();
          }
        };

        _proto._setObjectPosition = function _setObjectPosition(nodes, positions, byShowObject) {
          if (byShowObject === void 0) {
            byShowObject = false;
          }

          var count = nodes.length <= positions.length ? nodes.length : positions.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var pos = positions[i];

            if (node && pos) {
              node.setPosition(pos);
            }
          }

          if (!byShowObject) this.goNext();
        };

        _proto._setObjectScale = function _setObjectScale(nodes, scales, byShowObject) {
          if (byShowObject === void 0) {
            byShowObject = false;
          }

          var count = nodes.length <= scales.length ? nodes.length : scales.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var scale = scales[i];

            if (node && scale) {
              node.setScale(scale);
            }
          }

          if (!byShowObject) this.goNext();
        };

        _proto._setObjectRotationInEulerAngle = function _setObjectRotationInEulerAngle(nodes, angles, byShowObject) {
          if (byShowObject === void 0) {
            byShowObject = false;
          }

          var count = nodes.length <= angles.length ? nodes.length : angles.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var angle = angles[i];

            if (node && angle) {
              node.setRotationFromEuler(angle);
            }
          }

          if (!byShowObject) this.goNext();
        };

        _proto._setObjectContentSize = function _setObjectContentSize(transforms, contentSizes) {
          var count = transforms.length <= contentSizes.length ? transforms.length : contentSizes.length;

          for (var i = 0; i < count; i++) {
            var tran = transforms[i];
            var size = contentSizes[i];

            if (tran && size) {
              tran.setContentSize(size);
            }
          }

          this.goNext();
        };

        _proto._setObjectOpacity = function _setObjectOpacity(nodes, opacities) {
          var count = nodes.length <= opacities.length ? nodes.length : opacities.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var opacity = opacities[i];

            if (node) {
              setOpacity(node, opacity);
            }
          }

          this.goNext();
        };

        _proto._showObjects = function _showObjects(nodes, isActive) {
          if (isActive === void 0) {
            isActive = true;
          }

          for (var i = 0; i < nodes.length; i++) {
            var node = nodes[i];

            if (node) {
              node.active = isActive;

              var index = this._hiddenNodes.indexOf(node);

              if (isActive) {
                if (index > -1) {
                  this._hiddenNodes.splice(index, 1);
                }
              } else {
                if (index < 0) {
                  this._hiddenNodes.push(node);
                }
              }
            }
          }

          if (!isActive) setOpacity(this.overlayBlock, 0);
          this.goNext();
        };

        _proto._addFlag = function _addFlag(flagName) {
          this._storedFlags.push(flagName);

          this.goNext();
        };

        _proto._removeFlag = function _removeFlag(flagName) {
          var index = this._storedFlags.indexOf(flagName);

          this._storedFlags.splice(index, 1);

          this.goNext();
        };

        _proto._blockTouchInput = function _blockTouchInput(isBlock) {
          if (isBlock === void 0) {
            isBlock = true;
          }

          if (this.touchBlock) this.touchBlock.active = isBlock;
          this.goNext();
        };

        _proto._waitForTrigger = function _waitForTrigger(triggers) {
          for (var i = 0; i < triggers.length; i++) {
            var trigger = triggers[i];

            if (trigger === TutorialTriggerType.TutorialClick) {
              this.touchBlock.active = true;
            }
          }
        };

        _proto._pauseAction = function _pauseAction(gameMode, actionName, scriptName) {
          var baseDirector = this.node.mainDirector.gameModes[gameMode].getComponent('BaseDirector');
          baseDirector.setPauseTrigger(actionName, scriptName);
          this.goNext();
        };

        _proto._resumeActions = function _resumeActions() {
          var baseDirector = this.node.mainDirector.currentGameMode.getComponent('BaseDirector');
          baseDirector.resumeActions();
          this.goNext();
        };

        _proto._setSiblingIndex = function _setSiblingIndex(nodes, siblingIndices) {
          var count = nodes.length <= siblingIndices.length ? nodes.length : siblingIndices.length;

          for (var i = 0; i < count; i++) {
            var node = nodes[i];
            var siblingIndex = siblingIndices[i];

            if (node) {
              node.setSiblingIndex(siblingIndex);
            }
          }

          this.goNext();
        };

        _proto._setDialogContents = function _setDialogContents(dialogLabels, contents) {
          var count = dialogLabels.length <= contents.length ? dialogLabels.length : contents.length;

          for (var i = 0; i < count; i++) {
            var label = dialogLabels[i];
            var content = contents[i];

            if (label && content) {
              label.string = content;
            }
          }

          setOpacity(this.overlayBlock, 150);
          this.goNext();
        };

        _proto._moveObjectTo = function _moveObjectTo(node, toPos, movingTime, isAsync) {
          var _this3 = this;

          if (isAsync === void 0) {
            isAsync = false;
          }

          if (node.movingTween) {
            node.movingTween.stop();
          }

          this._currentTween = node.movingTween = tween(node).to(movingTime, {
            position: toPos
          }).call(function () {
            _this3._currentTween = node.movingTween = null;

            if (!isAsync) {
              _this3.goNext();
            }
          });
          node.movingTween.start();
          if (isAsync) this.goNext();
        };

        _proto._moveObjectFromTo = function _moveObjectFromTo(node, fromPos, toPos, movingTime) {
          node.setPosition(fromPos);

          this._moveObjectTo(node, toPos, movingTime);
        };

        _proto._doCustomCommand = function _doCustomCommand(customCmd) {
          if (this[customCmd] && typeof this[customCmd] === 'function') {
            this[customCmd]();
          }

          this.goNext();
        };

        _proto._resumeCurrentScript = function _resumeCurrentScript(bySkip) {
          if (bySkip === void 0) {
            bySkip = false;
          }

          var mainDirector = this.node.mainDirector;

          if (mainDirector) {
            mainDirector.currentGameMode.emit("RUN_CONTINUE_SCRIPT");
          }

          if (!bySkip) this.goNext();
        };

        _proto._insertTutorialSteps = function _insertTutorialSteps(insertSteps, startIndex) {
          this._isChangingSteps = true;

          if (this.tutorialSteps && insertSteps && insertSteps.length > 0) {
            var _this$tutorialSteps;

            (_this$tutorialSteps = this.tutorialSteps).splice.apply(_this$tutorialSteps, [startIndex, 0].concat(insertSteps));
          }
        };

        _proto._removeTutorialSteps = function _removeTutorialSteps(deletedCount, startIndex) {
          this._isChangingSteps = true;

          if (this.tutorialSteps && deletedCount > 0) {
            this.tutorialSteps.splice(startIndex, deletedCount);
          }
        };

        _proto._resetInsertedStepsFromInspector = function _resetInsertedStepsFromInspector() {
          this.insertedIndex = 0;
          this.insertedSteps = [];
          this._isChangingSteps = false;
        };

        _proto._resetDeletedStepsFromInspector = function _resetDeletedStepsFromInspector() {
          this.deletedIndex = 0;
          this.deletedStepCount = 0;
          this._isChangingSteps = false;
        };

        _createClass(TutorialControl, [{
          key: "IsSortedByPriority",
          get: function get() {
            return this._isSortedByPriority;
          },
          set: function set(value) {
            this._isSortedByPriority = value;

            if (value) {
              this.sortStepByPriority();
            }
          }
        }, {
          key: "IsFinished",
          get: function get() {
            return this._isFinished;
          }
        }, {
          key: "IsShowing",
          get: function get() {
            return this._isShowing;
          }
        }, {
          key: "insertStep",
          get: function get() {
            return this._insertStep;
          },
          set: function set(value) {
            this._insertStep = value;
            console.log("[TutorialControl] >>> insertStep: " + value);
          }
        }, {
          key: "deleteStep",
          get: function get() {
            return this._deleteStep;
          },
          set: function set(value) {
            this._deleteStep = value;
            console.log("[TutorialControl] >>> deleteStep: " + value);
          }
        }]);

        return TutorialControl;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tutorialSteps", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "IsSortedByPriority", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "IsSortedByPriority"), _class2.prototype), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skipButton", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "overlayBlock", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "touchBlock", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "onTopHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "jackpot", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "delayToStart", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "IsFinished", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "IsFinished"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "IsShowing", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "IsShowing"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "insertStep", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "insertStep"), _class2.prototype), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "insertedSteps", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "insertedIndex", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _applyDecoratedDescriptor(_class2.prototype, "deleteStep", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "deleteStep"), _class2.prototype), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "deletedStepCount", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "deletedIndex", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup09.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "29ebfOKP2tFapzOl76NmwDa", "gfFishGroup09", undefined);

      var gfFishGroup9 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup9() {}

        gfFishGroup9.create = function create() {
          var fishCount = [30, 16, 1, 1];
          var AppSize = gfBaseConfig.instance.AppSize;
          var midY = AppSize.Height / 2;
          var offsetX = 200;
          var offsetX2 = 250;
          var radius1 = 250;
          var radius2 = 170;
          var center1 = v2(AppSize.Width * 0.75, midY);
          var center2 = v2(AppSize.Width * 0.25, midY);
          this.createFish9Line(fishCount[0] / 2, v2(-offsetX, midY + radius1), center1, 0.65);
          this.createFish9Line(fishCount[0] / 2, v2(AppSize.Width + offsetX, midY - radius1), center2, 0.65);
          this.createFish9Line(fishCount[1] / 2, v2(-offsetX2, midY + radius2), center1, 1.2);
          this.createFish9Line(fishCount[1] / 2, v2(AppSize.Width + offsetX2, midY - radius2), center2, 1.2);
          this.createBigFish9(v2(-offsetX, midY), center2, v2(AppSize.Width + offsetX, midY));
          this.createBigFish9(v2(AppSize.Width + offsetX, midY), center1, v2(-offsetX, midY));
        };

        gfFishGroup9.createFish9Line = function createFish9Line(fishCount, startPos, center, delay) {
          startPos = FishGroupHelper.convertFlipCoordinate(startPos);
          center = FishGroupHelper.convertFlipCoordinate(center);
          var fishSpeed = 120;
          var radius = Math.abs(center.y - startPos.y);
          var circleTime = 9.75; //2 * Math.PI * radius / fishSpeed;

          var circleCount = 3;
          var moveInTime = Math.abs(center.x - startPos.x) / fishSpeed;
          var delayEach = delay;
          var dir = center.x > startPos.x ? 1 : -1;

          for (var i = 0; i < fishCount; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;

            var _delay = i * delayEach;

            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: _delay
            });
            data.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: center.x - startPos.x,
              y: 0
            });
            data.moveAction.appendAction(FISH_ACTION.CircleBy, {
              time: circleTime * circleCount,
              center: center,
              radius: radius,
              angle: -360 * circleCount
            });
            data.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: dir * moveInTime * fishSpeed,
              y: 0
            });
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        gfFishGroup9.createBigFish9 = function createBigFish9(startPos, standPos, endPos) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          startPos = FishGroupHelper.convertFlipCoordinate(startPos);
          standPos = FishGroupHelper.convertFlipCoordinate(standPos);
          endPos = FishGroupHelper.convertFlipCoordinate(endPos);
          var fishSpeed = 120;
          var moveInTime = Math.abs(standPos.x - startPos.x) / fishSpeed;
          var moveOutTime = Math.abs(endPos.x - standPos.x) / fishSpeed;
          data.moveAction = new FishMoveActions(startPos, standPos.x - startPos.x > 0 ? 0 : 180);
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveInTime,
            x: standPos.x - startPos.x,
            y: 0
          });
          data.moveAction.appendAction(FISH_ACTION.Delay, {
            time: 40
          });
          data.moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveOutTime,
            x: endPos.x - standPos.x,
            y: 0
          });
          FishGroupHelper.createFishWithDelay(data);
        };

        return gfFishGroup9;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGameLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfFishManager.ts', './gfGameScheduler.ts', './gfMainFSM.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, tween, Tween, Component, getPostionInOtherNode, gfBaseEvents, stopAllActions, moveTo, gfEventEmitter, gfBaseConfig, registerEvent, getRotation, removeEvents, gfReferenceManager, gfDataStore, gfFishManager, gfGameScheduler, gfMainFSM;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      moveTo = module.moveTo;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getRotation = module.getRotation;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "2a83a9h2WJEPJCdDX+zBaLY", "gfGameLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfGameLayer = exports('GfGameLayer', (_dec = ccclass('GfGameLayer'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfGameLayer, _Component);

        function GfGameLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "startCallback", void 0);

          return _this;
        }

        var _proto = GfGameLayer.prototype;

        _proto.onLoad = function onLoad() {
          gfReferenceManager.instance.setData({
            CurrentScene: this.node
          });
          gfReferenceManager.instance.setData({
            GameLayer: this.node
          });
          gfDataStore.instance.setDataStore({
            currentSceneName: gfBaseConfig.instance.SceneName.Game
          });
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.INIT_SCENE, this.node);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, false);
          this.initEvents();
          gfGameScheduler.initInstance();
        };

        _proto.setStartCallback = function setStartCallback(callback) {
          this.startCallback = callback;
        };

        _proto.start = function start() {
          if (!gfMainFSM.instance.isStateExit()) {
            if (this.startCallback) {
              this.startCallback();
              this.startCallback = null;
            }

            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SHOW_GAME_LAYER, true);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME, true);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EVENT_JOIN_GAME);
            gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CHECK_SHOW_POPUP_EVENT);
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, this.sendDataPlayerFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_OTHER_PLAYER_FIRE, this.onOtherPlayerFire, this);
          registerEvent(gfBaseEvents.COMMON.SHAKE_SCREEN, this.shakeScreen, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_JACKPOT_INFO, this.updateJackpotInfo, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
        };

        _proto.onOtherPlayerFire = function onOtherPlayerFire(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (player && player.index > 1) data.Angle += 180;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, data);
        };

        _proto._updateAngle = function _updateAngle(angle) {
          if (angle < 0 && angle > -90) {
            return 0;
          }

          if (angle < -90 && angle > -180) {
            return -180;
          }

          return angle;
        };

        _proto.sendDataPlayerFire = function sendDataPlayerFire(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

          if (player && player.checkUpdateGunByWallet()) {
            var outData = this.calculateDataPlayerFire(data);

            if (!gfDataStore.instance.isReachMaxNumBullet()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_GUN_FIRE, outData);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, outData);
          }
        };

        _proto.calculateDataPlayerFire = function calculateDataPlayerFire(data) {
          var point = data.point,
              lockFishID = data.lockFishID;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());
          var fish = gfFishManager.instance.getFishById(lockFishID);
          var startPos = getPostionInOtherNode(this.node, player.gun);
          var angle = 0;

          if (fish) {
            var endPos = fish.getLockPositionByNodeSpace(this.node);
            angle = getRotation(endPos, startPos);
          } else {
            angle = getRotation(point, player.gun.worldPosition);
          }

          angle = this._updateAngle(angle);
          var outData = {
            BulletMultiple: player._gunValue,
            BulletID: Date.now(),
            Angle: angle,
            DeskStation: gfDataStore.instance.getSelfDeskStation(),
            isMe: true,
            LockedFishID: lockFishID
          };
          return outData;
        };

        _proto.shakeScreen = function shakeScreen(_ref) {
          var timeOneStep = _ref.timeOneStep,
              amplitude = _ref.amplitude,
              _ref$countStep = _ref.countStep,
              countStep = _ref$countStep === void 0 ? 4 : _ref$countStep,
              _ref$shakeStyle = _ref.shakeStyle,
              shakeStyle = _ref$shakeStyle === void 0 ? gfBaseConfig.instance.SHAKE_SCREEN_STYLE.VERTICAL : _ref$shakeStyle;
          this.node.setPosition(0, 0, 0);
          stopAllActions(this.node);
          var action = tween(this.node);

          for (var i = 0; i < countStep; i++) {
            this.setupAnimShake(action, timeOneStep, amplitude, shakeStyle);
          }

          action.then(moveTo(timeOneStep, 0, 0, 0));
          action.start();
        };

        _proto.setupAnimShake = function setupAnimShake(arrAnim, timeOneStep, amplitude, shakeStyle) {
          var SHAKE_SCREEN_STYLE = gfBaseConfig.instance.SHAKE_SCREEN_STYLE;

          switch (shakeStyle) {
            case SHAKE_SCREEN_STYLE.VERTICAL:
              arrAnim.then(moveTo(timeOneStep, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep, 0, 0));
              arrAnim.then(moveTo(timeOneStep, 0, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.HORIZONTAL:
              arrAnim.then(moveTo(timeOneStep, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep, 0, 0));
              arrAnim.then(moveTo(timeOneStep, -amplitude, 0));
              break;

            case SHAKE_SCREEN_STYLE.CROSS_1:
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, 0, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.CROSS_2:
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, -amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 2, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 2, amplitude, -amplitude));
              break;

            case SHAKE_SCREEN_STYLE.FULL:
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, -amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, -amplitude, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, amplitude));
              arrAnim.then(moveTo(timeOneStep / 4, 0, 0));
              arrAnim.then(moveTo(timeOneStep / 4, 0, -amplitude));
              break;
          }
        };

        _proto.updateJackpotInfo = function updateJackpotInfo() {
          if (gfDataStore.instance.getCurrentRoom() === gfBaseConfig.instance.RoomKind.VIP) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SHOW_JACKPOT_INFO, {
              isShow: true,
              amount: gfDataStore.instance.getJackpotValue()
            });
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SHOW_JACKPOT_INFO, {
              isShow: false
            });
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          Tween.stopAllByTarget(this.node);
        };

        _proto.onDestroy = function onDestroy() {
          this.resetOnExit();
          gfGameScheduler.destroy();

          if (gfBaseConfig.instance && !gfBaseConfig.instance.LoadGameByPrefab && !gfMainFSM.instance.isStateLoginLobby() && gfEventEmitter.instance) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
          }

          removeEvents(this);
        };

        _proto.onBtnExitClicked = function onBtnExitClicked(evt) {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.unscheduleAllCallbacks();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
        };

        return GfGameLayer;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLockFish1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts', './gfEffectLockFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfBaseEvents, registerEvent, gfEffectLockFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      gfEffectLockFish = module.gfEffectLockFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2d52cCWOFFK37TsPhxWLTFZ", "EffectLockFish1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectLockFish1988 = exports('EffectLockFish1988', (_dec = ccclass('EffectLockFish1988'), _dec(_class = /*#__PURE__*/function (_gfEffectLockFish) {
        _inheritsLoose(EffectLockFish1988, _gfEffectLockFish);

        function EffectLockFish1988() {
          return _gfEffectLockFish.apply(this, arguments) || this;
        }

        var _proto = EffectLockFish1988.prototype;

        _proto.onLoad = function onLoad() {
          _gfEffectLockFish.prototype.onLoad.call(this);

          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          _gfEffectLockFish.prototype.initEvents.call(this);

          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE, this.resume, this);
        };

        _proto.resume = function resume() {
          this._canPlayEffect = false;
        };

        return EffectLockFish1988;
      }(gfEffectLockFish)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMiniBossGuardFish.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfSpineFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfSpineFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfSpineFish = module.gfSpineFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "2f4d6Q+KhhGpY9QpH/JDGe3", "gfMiniBossGuardFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfMiniBossGuardFish = exports('gfMiniBossGuardFish', (_dec = ccclass('gfMiniBossGuardFish'), _dec(_class = /*#__PURE__*/function (_gfSpineFish) {
        _inheritsLoose(gfMiniBossGuardFish, _gfSpineFish);

        function gfMiniBossGuardFish() {
          return _gfSpineFish.apply(this, arguments) || this;
        }

        return gfMiniBossGuardFish;
      }(gfSpineFish)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEventEmitter.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './events.js', './events.mjs_cjs=&original=.js'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _cjsExports;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      _cjsExports = module.default;
    }, null],
    execute: function () {
      cclegacy._RF.push({}, "2f583X/Zc5F2JpcA+eFNRHo", "gfEventEmitter", undefined);

      var gfEventEmitter = exports('default', /*#__PURE__*/function () {
        function gfEventEmitter() {
          _defineProperty(this, "_emiter", void 0);

          gfEventEmitter.instance = this;
          this._emiter = new _cjsExports();

          this._emiter.setMaxListeners(100);
        }

        var _proto = gfEventEmitter.prototype;

        _proto.emit = function emit() {
          var _this$_emiter; // console.log("[" + new Date().toLocaleTimeString() + "]gfEventEmitter.Emit " + (args.length > 0 ? JSON.stringify(args): args));


          (_this$_emiter = this._emiter).emit.apply(_this$_emiter, arguments);
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emiter.on(event, listener);
        };

        _proto.removeEvent = function removeEvent(event, listener) {
          this._emiter.removeListener(event, listener);
        };

        _proto.destroy = function destroy() {
          this._emiter.removeAllListeners();

          this._emiter = null;
          gfEventEmitter.instance = null;
        };

        return gfEventEmitter;
      }()); // gfEventEmitter.instance = null;

      _defineProperty(gfEventEmitter, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLuckyFish.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, BoxCollider2D, Vec3, Component, gfBaseEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      BoxCollider2D = module.BoxCollider2D;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "305ddiA5gZAI7Kz+hXQuWzN", "gfLuckyFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfLuckyFish = exports('GfLuckyFish', (_dec = ccclass('GfLuckyFish'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfLuckyFish, _Component);

        function GfLuckyFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "luckyEffect", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_multiplier", 1);

          return _this;
        }

        var _proto = GfLuckyFish.prototype;

        _proto.initLuckyEffect = function initLuckyEffect(data) {
          var multiplier = data.multiplier;
          this._multiplier = multiplier;

          if (this.luckyEffect) {
            this.luckyEffect.active = this._multiplier > 1;
            var scaleSize = Math.min(2, this.node.getComponent(BoxCollider2D).size.width * this.node.scale.x / 50);
            this.luckyEffect.setScale(new Vec3(scaleSize, scaleSize, 1));
          }
        };

        _proto.onPlayEffectWinLuckfyFishInCatchFish = function onPlayEffectWinLuckfyFishInCatchFish(data) {
          if (this._multiplier > 1) {
            this.luckyEffect.active = false;
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.LUCKY_EFFECT_FISH, {
              data: data,
              fishKind: data.fishKind,
              fishPos: data.fishPos,
              Multiplier: this._multiplier
            });
          }
        };

        _proto.getMultiplier = function getMultiplier() {
          return this._multiplier;
        };

        return GfLuckyFish;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "luckyEffect", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupPrompt.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfNetworkGameEvent.ts', './loadConfigAsync.ts', './gfPopupBase.ts', './gfLocalize.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Node, isValid, gfBaseEvents, gfEventEmitter, gfBaseConfig, gfNetworkGameEvent, loadConfigAsync, GfPopupBase, gfLocalize;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      isValid = module.isValid;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfLocalize = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "30ac7WFJ2lP9bxNIsxQRL3V", "gfPopupPrompt", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupPrompt = exports('GfPopupPrompt', (_dec = ccclass('GfPopupPrompt'), _dec2 = property(Label), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupPrompt, _GfPopupBase);

        function GfPopupPrompt() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "txtMessage", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnYes", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnNo", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_currData", null);

          _defineProperty(_assertThisInitialized(_this), "_dataCallback", null);

          return _this;
        }

        var _proto = GfPopupPrompt.prototype;

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.notice);
        };

        _proto.show = function show(data) {
          if (!this.txtMessage) return;

          if (data) {
            this._currData = data;
          }

          var _this$onPromptHandler = this.onPromptHandler(this._currData),
              msg = _this$onPromptHandler.msg,
              type = _this$onPromptHandler.type,
              callbacks = _this$onPromptHandler.callbacks;

          this.txtMessage.string = msg;
          this._dataCallback = null;

          if (callbacks) {
            this._dataCallback = callbacks;
          }

          switch (type) {
            case gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON:
              this.btnYes.setPosition(0, this.btnYes.position.y);
              this.btnYes.active = true;
              this.btnNo.active = false;
              this.btnClose.active = false;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.CONFIRM_AND_REJECT_BUTTON:
              this.btnYes.setPosition(-150, this.btnYes.position.y);
              this.btnNo.setPosition(150, this.btnNo.position.y);
              this.btnNo.active = true;
              this.btnYes.active = true;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.CONFIRM_AND_CLOSE_BUTTON:
              this.btnYes.setPosition(0, this.btnYes.position.y);
              this.btnYes.active = true;
              this.btnNo.active = false;
              this.btnClose.active = true;
              break;

            case gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON:
              this.btnYes.active = false;
              this.btnNo.active = false;
              this.btnClose.active = false;
              break;

            default:
              this.btnYes.active = false;
              this.btnNo.active = false;
              this.btnClose.active = false;
              break;
          }

          _GfPopupBase.prototype.show.call(this);
        };

        _proto.onConfirmClick = function onConfirmClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.onClose();

          if (this._dataCallback && this._dataCallback.confirmCallback) {
            this._dataCallback.confirmCallback();
          }

          this._currData = null;
        };

        _proto.onRejectClick = function onRejectClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.onClose();

          if (this._dataCallback && this._dataCallback.rejectCallback) {
            this._dataCallback.rejectCallback();
          }

          this._currData = null;
        };

        _proto.onResetState = function onResetState() {
          if (!isValid(this.node)) return;

          _GfPopupBase.prototype.onResetState.call(this);

          this.btnYes.setPosition(0, this.btnYes.position.y);
          this.btnNo.active = false;
          this.btnYes.active = false;
          this.btnClose.active = false;
          this.setCallback(null);
        };

        _proto.onPromptHandler = function onPromptHandler(eventData) {
          var _this2 = this;

          var customMsg = eventData.customMsg,
              customType = eventData.customType,
              customCallbacks = eventData.customCallbacks,
              Code = eventData.Code;
          var eventCode = customMsg || Code || eventData;
          var msg = null;
          var type = null;
          var callbacks = null;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          switch (eventCode) {
            case gfNetworkGameEvent.NETWORK_ERROR:
            case gfNetworkGameEvent.NETWORK_DIE:
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_DIE;
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.AUTHEN_FAIL:
              msg = gfLocalize.instance.NETWORK_MESSAGE.AUTHEN_FAIL;
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE:
              msg = gfLocalize.instance.NETWORK_MESSAGE.LOGIN_IN_OTHER_DEVICE;
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.NETWORK_POOR:
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_POOR;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN:
            case gfNetworkGameEvent.MSG_CODE.IG_DUPLICATE_LOGIN:
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.CANT_FIND_ROOM:
            case gfNetworkGameEvent.MSG_CODE.ROOM_FULL:
              msg = gfLocalize.instance.MessagesSystem[eventCode];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.OWN_LASER:
              msg = gfLocalize.instance.MessagesSystem[eventCode];
              msg = msg.replace("xxx", gfLocalize.instance.txtGameMode[eventData.roomCode]);
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY:
              if (LOGIN_IFRAME && typeof ingameDeposit === 'function') {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.CHARGE_MONEY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    ingameDeposit();
                  }
                };
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              }

              break;

            case gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME:
              if (LOGIN_IFRAME && typeof ingameDeposit === 'function') {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.CHARGE_MONEY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    ingameDeposit();
                  }
                };
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    // Emitter.instance.emit(EventCode.COMMON.GO_LOBBY);
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
                  }
                };
              }

              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
              break;

            case gfNetworkGameEvent.MSG_CODE.NO_ACTION:
              this.scheduleOnce(this.goToLobby, 4);
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_ACTION];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  _this2.unschedule(_this2.goToLobby);

                  _this2.goToLobby();
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN:
              this.scheduleOnce(this.goToLobby, 2);
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  _this2.unschedule(_this2.goToLobby);

                  _this2.goToLobby();
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.WAITING_TIMEOUT:
              this.scheduleOnce(function () {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              }, 2);
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_DIE;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              break;

            default:
              msg = eventCode;
              type = customType || gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;

              if (customCallbacks) {
                callbacks = customCallbacks;
              }

          }

          return {
            msg: msg,
            type: type,
            callbacks: callbacks
          };
        };

        _proto.goToLobby = function goToLobby() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GO_LOBBY);
        };

        return GfPopupPrompt;
      }(GfPopupBase), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnYes", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnNo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLocalize.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, warn, log;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      log = module.log;
    }],
    execute: function () {
      cclegacy._RF.push({}, "30f18qQbtpKMLZJevACOyOw", "gfLocalize", undefined);

      var gfLocalize = exports('default', /*#__PURE__*/function () {
        function gfLocalize() {
          gfLocalize.instance = this;
          log('::Init Localization::');
        }

        var _proto = gfLocalize.prototype;

        _proto.initLocalizeConfig = function initLocalizeConfig(jsonLocalize) {
          var localize = jsonLocalize;

          if (!localize) {
            warn('Localize file failed');
            return;
          } // this._localize = {};


          for (var key in localize) {
            gfLocalize.instance[key] = localize[key];
          }
        };

        _proto.destroy = function destroy() {
          gfLocalize.instance = null;
        };

        return gfLocalize;
      }());

      _defineProperty(gfLocalize, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CurvePoint1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, bezier, v2, getRotationByRad;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      bezier = module.bezier;
      v2 = module.v2;
    }, function (module) {
      getRotationByRad = module.getRotationByRad;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "3257baqh6ZIMJeFJ31T6is+", "CurvePoint1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CurvePoint1985 = exports('CurvePoint1985', (_dec = ccclass('CurvePoint1985'), _dec(_class = (_temp = /*#__PURE__*/function () {
        function CurvePoint1985() {
          _defineProperty(this, "listPoint", []);
        }

        var _proto = CurvePoint1985.prototype;

        _proto.setData = function setData(data) {
          this.listPoint.length = 0;

          for (var i = 0; i < data.pts1.length - 1; ++i) {
            var _p = data.pts1[i];
            var _p2 = data.pts2[i];
            var _p3 = data.pts2[i + 1];
            var _p4 = data.pts1[i + 1]; //symmetric point

            var _P = {
              x: 2 * _p4.x - _p3.x,
              y: 2 * _p4.y - _p3.y
            };

            for (var t = 0; t < 1; t += 0.01) {
              var _x = bezier(_p.x, _p2.x, _P.x, _p4.x, t);

              var _y = bezier(_p.y, _p2.y, _P.y, _p4.y, t);

              this.listPoint.push(v2(_x, _y));
            }
          } //add final point


          var _final = data.pts1.length - 2;

          var p0 = data.pts1[_final];
          var p1 = data.pts2[_final];
          var p2 = data.pts2[_final + 1];
          var p3 = data.pts1[_final + 1];
          var P2 = {
            x: 2 * p3.x - p2.x,
            y: 2 * p3.y - p2.y
          };
          var x = bezier(p0.x, p1.x, P2.x, p3.x, 1);
          var y = bezier(p0.y, p1.y, P2.y, p3.y, 1);
          this.listPoint.push(v2(x, y));
        };

        _proto.getPoint = function getPoint(step) {
          if (step >= this.listPoint.length) return null;
          return this.listPoint[step];
        };

        _proto.getMaxStep = function getMaxStep() {
          return this.listPoint.length;
        };

        _proto.getLastPoint = function getLastPoint() {
          return this.listPoint[this.listPoint.length - 1];
        };

        _proto.applyOffset = function applyOffset(baseOffset) {
          var baseAngle = getRotationByRad(this.listPoint[1], this.listPoint[0]) + Math.PI / 2;
          var offSetX = baseOffset.x * Math.cos(baseAngle) - baseOffset.y * Math.sin(baseAngle);
          var offSetY = baseOffset.x * Math.sin(baseAngle) + baseOffset.y * Math.cos(baseAngle);

          for (var i = 0; i < this.getMaxStep(); ++i) {
            this.listPoint[i].x += offSetX;
            this.listPoint[i].y += offSetY;
          }
        };

        _proto.applySpace = function applySpace(space) {
          var baseAngle = getRotationByRad(this.listPoint[0], this.listPoint[1]) - Math.PI / 2;
          var offSetX = Math.cos(baseAngle) - Math.sin(baseAngle);
          var offSetY = Math.sin(baseAngle) + Math.cos(baseAngle);
          this.listPoint[0].x += offSetX * space;
          this.listPoint[0].y += offSetY * space;
        };

        return CurvePoint1985;
      }(), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptAirSpine.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "32fd7ymTE5CjY0ivh5p8wGa", "gfptAirSpine", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptAirSpine = exports('GfptAirSpine', (_dec = ccclass('GfptAirSpine'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptAirSpine, _Component);

        function GfptAirSpine() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "isHolding", void 0);

          return _this;
        }

        return GfptAirSpine;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSessionTime.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Component, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "337cf27q/5FIpVe+p1wKu/L", "gfSessionTime", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfSessionTime = exports('GfSessionTime', (_dec = ccclass('GfSessionTime'), _dec2 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfSessionTime, _Component);

        function GfSessionTime() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "label", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "maxTime", 300);

          _defineProperty(_assertThisInitialized(_this), "currentTime", 0);

          return _this;
        }

        var _proto = GfSessionTime.prototype;

        _proto.onLoad = function onLoad() {
          this.label.node.active = false;
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_SESSION_TIME, this.updateSessionTime, this);
        };

        _proto.start = function start() {};

        _proto.updateSessionTime = function updateSessionTime(sessionTime) {
          this.label.node.active = true;
          this.currentTime = sessionTime.CurrentTime;
          this.maxTime = sessionTime.MaxTime;
        };

        _proto.update = function update(dt) {
          this.currentTime += dt;

          while (this.currentTime > this.maxTime) {
            this.currentTime -= this.maxTime;
          }

          this.updateLabel();
        };

        _proto.updateLabel = function updateLabel() {
          this.label.string = Math.floor(this.currentTime) + "/" + this.maxTime;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfSessionTime;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfItemFreeze.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Animation, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "35053uwVEVKa4x7D5jHJAt5", "gfItemFreeze", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfItemFreeze = exports('gfItemFreeze', (_dec = ccclass('gfItemFreeze'), _dec2 = property(Animation), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfItemFreeze, _gfNode);

        function gfItemFreeze() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "anim", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfItemFreeze.prototype;

        _proto.initAssets = function initAssets() {
          this.anim.play(this.anim.clips[0].name);
        };

        return gfItemFreeze;
      }(gfNode), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "anim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLayer1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './gfDataStore.ts', './DataStore1985.ts', './gfGameLayer.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, setBetValue, EventsCode1985, ReferenceManager1985, gfDataStore, DataStore1985, GfGameLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      setBetValue = module.setBetValue;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      GfGameLayer = module.GfGameLayer;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "35561LeJohNpY93SDO0P5su", "GameLayer1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameLayer1985 = exports('GameLayer1985', (_dec = ccclass('GameLayer1985'), _dec(_class = (_temp = /*#__PURE__*/function (_GfGameLayer) {
        _inheritsLoose(GameLayer1985, _GfGameLayer);

        function GameLayer1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfGameLayer.call.apply(_GfGameLayer, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_bulletMultiple", 0);

          return _this;
        }

        var _proto = GameLayer1985.prototype;

        _proto.onLoad = function onLoad() {
          _GfGameLayer.prototype.onLoad.call(this);

          registerEvent(EventsCode1985.GAME_LAYER.UPDATE_BULLET, this.updateBulletMultiple, this);
          registerEvent(EventsCode1985.GAME_LAYER.GET_PLAYER_UPDATE_POSITION, this.playerUpdatePosition, this);
          registerEvent(EventsCode1985.GAME_LAYER.PLAYER_MOVE, this.playerMove, this);
        };

        _proto.sendDataPlayerFire = function sendDataPlayerFire(data) {
          var betHandler = ReferenceManager1985.instance.getHUDControllerLayer().getBetHandler();

          if (betHandler && betHandler.checkUpdateGunByWallet(data)) {
            var outData = this.calculateDataPlayerFire();
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_GUN_FIRE, outData);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, outData);
            setBetValue(gfBaseConfig.instance.GameId, gfDataStore.instance.getCurrentRoom(), outData.BulletMultiple);
          }

          return;
        };

        _proto.calculateDataPlayerFire = function calculateDataPlayerFire() {
          var BulletMultiple = DataStore1985.instance.getGunValue();
          var outData = {
            BulletMultiple: BulletMultiple[this._bulletMultiple],
            BulletID: 0,
            //Date.now(), do not need bulletID
            DeskStation: DataStore1985.instance.getSelfDeskStation(),
            isMe: true
          };
          return outData;
        };

        _proto.updateBulletMultiple = function updateBulletMultiple(data) {
          this._bulletMultiple = data.index;
        };

        _proto.playerUpdatePosition = function playerUpdatePosition(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.SHIP_MOVE, data);
        };

        _proto.playerMove = function playerMove(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.SEND_PLAYER_UPDATE_POSITION, data);
        };

        return GameLayer1985;
      }(GfGameLayer), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyJackpot.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfUtilities.ts', './gfLocalize.ts', './gfNotifyComponent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, UIOpacity, Color, Tween, tween, Layout, gfBaseConfig, deepCopy, formatString, gfLocalize, GfNotifyComponent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      UIOpacity = module.UIOpacity;
      Color = module.Color;
      Tween = module.Tween;
      tween = module.tween;
      Layout = module.Layout;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      deepCopy = module.deepCopy;
      formatString = module.formatString;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      GfNotifyComponent = module.GfNotifyComponent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _temp, _dec3, _dec4, _dec5, _class4, _class5, _descriptor3, _descriptor4, _temp2;

      cclegacy._RF.push({}, "35cacSvDjRDY7UMGG0j/89Q", "gfNotifyJackpot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JPNotifySpineData = exports('JPNotifySpineData', (_dec = ccclass('JPNotifySpineData'), _dec2 = property(sp.SkeletonData), _dec(_class = (_class2 = (_temp = function JPNotifySpineData() {
        _initializerDefineProperty(this, "type", _descriptor, this);

        _initializerDefineProperty(this, "static", _descriptor2, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "type", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "static", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));
      var GfNotifyJackpot = exports('GfNotifyJackpot', (_dec3 = ccclass('GfNotifyJackpot'), _dec4 = property(sp.Skeleton), _dec5 = property(JPNotifySpineData), _dec3(_class4 = (_class5 = (_temp2 = /*#__PURE__*/function (_GfNotifyComponent) {
        _inheritsLoose(GfNotifyJackpot, _GfNotifyComponent);

        function GfNotifyJackpot() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfNotifyComponent.call.apply(_GfNotifyComponent, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "mainAnim", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "jpNotifySpineData", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_animAppear", "animation");

          _defineProperty(_assertThisInitialized(_this), "_animIdle", "animation2");

          _defineProperty(_assertThisInitialized(_this), "_type", -1);

          _defineProperty(_assertThisInitialized(_this), "_compOpacity", null);

          return _this;
        }

        var _proto = GfNotifyJackpot.prototype;

        _proto.onLoad = function onLoad() {
          this._compOpacity = this.node.getComponent(UIOpacity);
        };

        _proto.setOpacity = function setOpacity(opacity) {
          this._compOpacity.opacity = opacity;
          this.mainAnim.color = new Color(255, 255, 255, opacity);
        };

        _proto.show = function show(data) {
          if (!this.validateData(data)) return;

          if (this._lstMessage.length < gfBaseConfig.instance.NOTIFY_JACKPOT.limited_stack_size) {
            this._lstMessage.push(data);
          }

          if (!this._isShow) {
            this._isShow = true;
            this.onStackMessage();
          }
        };

        _proto.setupSpineAnim = function setupSpineAnim(type) {
          if (this._type !== type) {
            this._type = type;
            var spineData = this.getJPNotifySkeletonDataByType(this._type);
            this.mainAnim.skeletonData = spineData && spineData.isValid ? spineData : this.mainAnim.skeletonData;
          }
        };

        _proto.play = function play(dataInput) {
          var _this2 = this;

          var data = dataInput.data,
              type = dataInput.type;
          this.node.active = true;
          Tween.stopAllByTarget(this.node);
          Tween.stopAllByTarget(this.contentNode);
          this.setOpacity(255);
          this.setupSpineAnim(type);
          this.contentNode.getComponent(UIOpacity).opacity = 0;
          this.mainAnim.setAnimation(0, this._animAppear, false);
          var compOpacityContent = this.contentNode.getComponent(UIOpacity);
          var tweenShowRichText = tween(compOpacityContent).to(0.15, {
            opacity: 255
          });
          var _GameConfig$instance = gfBaseConfig.instance,
              NOTIFY_CONFIG = _GameConfig$instance.NOTIFY_CONFIG,
              NOTIFY_TYPE = _GameConfig$instance.NOTIFY_TYPE;
          var str = deepCopy(gfLocalize.instance.txtJPNotify);
          var jackpotConfig = NOTIFY_CONFIG[NOTIFY_TYPE.JACKPOT];
          str = formatString(str, [data[jackpotConfig.userName], data[jackpotConfig.goldReward]]);
          str = str.replace(/'/g, '"');
          var objMessage = JSON.parse(str);
          this.createNotifyMessage(objMessage);
          this.contentNode.getComponent(Layout).updateLayout();
          this.mainAnim.setAnimation(1, this._animIdle, true);
          this.mainAnim.setCompleteListener(function (trackEntry) {
            _this2.mainAnim.setCompleteListener(function () {});

            tweenShowRichText.start();

            var compOpacity = _this2.node.getComponent(UIOpacity);

            tween(compOpacity).delay(3).call(function () {
              _this2.mainAnim.clearTrack(0);
            }).to(0.5, {
              opacity: 0
            }).call(function () {
              _this2.onStackMessage();
            }).start();
          });
        };

        _proto.validateData = function validateData(dataInput) {
          var data = dataInput.data;
          var _GameConfig$instance2 = gfBaseConfig.instance,
              NOTIFY_CONFIG = _GameConfig$instance2.NOTIFY_CONFIG,
              NOTIFY_TYPE = _GameConfig$instance2.NOTIFY_TYPE;
          var str = deepCopy(gfLocalize.instance.txtJPNotify);
          var jackpotConfig = NOTIFY_CONFIG[NOTIFY_TYPE.JACKPOT];
          str = formatString(str, [data[jackpotConfig.userName], data[jackpotConfig.goldReward]]);
          str = str.replace(/'/g, '"');

          try {
            return !!JSON.parse(str);
          } catch (e) {
            return false;
          }
        };

        _proto.hide = function hide() {
          this._isShow = false;
          this.node.active = false;
        };

        _proto.getJPNotifySkeletonDataByType = function getJPNotifySkeletonDataByType(type) {
          for (var index = 0; index < this.jpNotifySpineData.length; index++) {
            var spineData = this.jpNotifySpineData[index];

            if (spineData.type === type) {
              return spineData["static"];
            }
          }

          return null;
        };

        return GfNotifyJackpot;
      }(GfNotifyComponent), _temp2), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "mainAnim", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "jpNotifySpineData", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupSetting1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './gfDataStore.ts', './DataStore1985.ts', './Config1985.ts', './gfPopupSettingSlider.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Label, Animation, sys, Toggle, KeyCode, systemEvent, SystemEvent, Tween, tween, Slider, Vec3, Button, setOpacity, gfBaseEvents, fadeOut, fadeTo, fadeIn, gfEventEmitter, refreshButtonState, EventsCode1985, gfDataStore, DataStore1985, Config1985, GfPopupSettingSlider;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Animation = module.Animation;
      sys = module.sys;
      Toggle = module.Toggle;
      KeyCode = module.KeyCode;
      systemEvent = module.systemEvent;
      SystemEvent = module.SystemEvent;
      Tween = module.Tween;
      tween = module.tween;
      Slider = module.Slider;
      Vec3 = module.Vec3;
      Button = module.Button;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeTo = module.fadeTo;
      fadeIn = module.fadeIn;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      refreshButtonState = module.refreshButtonState;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      GfPopupSettingSlider = module.GfPopupSettingSlider;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _temp;

      cclegacy._RF.push({}, "369e7E3RtRB9b+RbJ9BOdyF", "PopupSetting1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var arrWordReplace = {
        'KEY_': '',
        'DIGIT_': '',
        'ARROW_': '',
        'NUM_MULTIPLY': '*',
        'NUM_PLUS': '+',
        'NUM_SUBTRACT': '-',
        'NUM_DECIMAL': '.',
        'NUM_DIVIDE': '/',
        'SEMICOLON': ';',
        'EQUAL': '=',
        'COMMA': ',',
        'DASH': '-',
        'PERIOD': '.',
        'SLASH': '/',
        'BACK_QUOTE': '`',
        'BRACKET_LEFT': '[',
        'BACKSLASH': '\\',
        'BRACKET_RIGHT': ']',
        'ESCAPE': 'ESC'
      };
      var PopupSetting1985 = exports('PopupSetting1985', (_dec = ccclass('PopupSetting1985'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Label), _dec8 = property(Node), _dec9 = property({
        type: Node,
        override: true,
        visible: false
      }), _dec10 = property(Node), _dec11 = property(Node), _dec12 = property(Animation), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupSettingSlider) {
        _inheritsLoose(PopupSetting1985, _GfPopupSettingSlider);

        function PopupSetting1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupSettingSlider.call.apply(_GfPopupSettingSlider, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "swapModeNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "swapModeCheckBox", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "PC_Layout", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "Mobile_Layout", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeOverlay", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "arrLabelHotKey", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "arrNodeSettingHotkey", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "overlay", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "highlight", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "arrNodeWarning", _descriptor10, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_currentIndexLabelHotKey", null);

          _initializerDefineProperty(_assertThisInitialized(_this), "showHideAnim", _descriptor11, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "ANIM_NAME", {
            Show: "SettingShow",
            Hide: "SettingHide"
          });

          return _this;
        }

        var _proto = PopupSetting1985.prototype;
        /**
         * show
         */

        _proto.show = function show() {
          _GfPopupSettingSlider.prototype.show.call(this);

          this.isSysMobile(sys.isNative || sys.isMobile);
          this.swapModeCheckBox.getComponent(Toggle).isChecked = DataStore1985.instance.isSwitchHUDSkillToLeft ? true : false;
          gfEventEmitter.instance.emit(EventsCode1985.HUD.PAUSE_LISTENER_KEY_EVENT);
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.SHOW_BUTTON_CLICK);
          this.showHideAnim.play(this.ANIM_NAME.Show);
        };

        _proto.initObj = function initObj() {
          var _this2 = this;

          _GfPopupSettingSlider.prototype.initObj.call(this);

          this.onLoadConfig();
          this.swapModeCheckBox.off('toggle');
          this.swapModeCheckBox.on('toggle', this.onSwapModeCheckBoxTouch.bind(this), this);
          this.handlerBgm.off(Node.EventType.TOUCH_END);
          this.handlerBgm.off(Node.EventType.TOUCH_CANCEL);
          this.handlerSfx.off(Node.EventType.TOUCH_END);
          this.handlerSfx.off(Node.EventType.TOUCH_CANCEL);
          this.handlerBgm.on(Node.EventType.TOUCH_END, function () {
            _this2.onBtnMusicClick();
          });
          this.handlerBgm.on(Node.EventType.TOUCH_CANCEL, function () {
            _this2.onBtnMusicClick();
          });
          this.handlerSfx.on(Node.EventType.TOUCH_END, function () {
            _this2.onBtnEffectClick();
          });
          this.handlerSfx.on(Node.EventType.TOUCH_CANCEL, function () {
            _this2.onBtnEffectClick();
          });
          this.bgmSliderNode.off(Node.EventType.TOUCH_END);
          this.bgmSliderNode.off(Node.EventType.TOUCH_CANCEL);
          this.sfxSliderNode.off(Node.EventType.TOUCH_END);
          this.sfxSliderNode.off(Node.EventType.TOUCH_CANCEL);
          this.bgmSliderNode.on(Node.EventType.TOUCH_END, function () {
            _this2.onBtnMusicClick();
          });
          this.bgmSliderNode.on(Node.EventType.TOUCH_CANCEL, function () {
            _this2.onBtnMusicClick();
          });
          this.sfxSliderNode.on(Node.EventType.TOUCH_END, function () {
            _this2.onBtnEffectClick();
          });
          this.sfxSliderNode.on(Node.EventType.TOUCH_CANCEL, function () {
            _this2.onBtnEffectClick();
          });
        };

        _proto.updateSlider = function updateSlider() {
          _GfPopupSettingSlider.prototype.updateSlider.call(this);

          this.checkIsOffSFX(gfDataStore.instance.getCurrentSFXVolume());
          this.checkIsOffBGM(gfDataStore.instance.getCurrentBGMVolume());
        };

        _proto.isSysMobile = function isSysMobile(isMobile) {
          this.PC_Layout.active = !isMobile;
          this.Mobile_Layout.active = isMobile;
        };

        _proto.onLoadConfig = function onLoadConfig() {
          //first load at local store
          this.arrLabelHotKey[0].string = this.formatKeyName(KeyCode[Config1985.instance.Controller.AUTO_FIRE.defaultHotkey]);
          this.arrLabelHotKey[1].string = this.formatKeyName(KeyCode[Config1985.instance.Controller.SPECIAL_SKILL.defaultHotkey]);
          this.arrLabelHotKey[2].string = this.formatKeyName(KeyCode[Config1985.instance.Controller.INCREASE_BET.defaultHotkey]);
          this.arrLabelHotKey[3].string = this.formatKeyName(KeyCode[Config1985.instance.Controller.DECREASE_BET.defaultHotkey]);
          this.arrLabelHotKey[4].string = this.formatKeyName(KeyCode[Config1985.instance.Controller.OPEN_MENU.defaultHotkey]);
          return;
        };

        _proto.onSwapModeCheckBoxTouch = function onSwapModeCheckBoxTouch() {
          if (!this.getInitialized()) {
            return;
          }

          DataStore1985.instance.isSwitchHUDSkillToLeft = this.swapModeCheckBox.getComponent(Toggle).isChecked;
          gfEventEmitter.instance.emit(EventsCode1985.HUD.UPDATE_POSITION_HUD_SKILL);
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
        };

        _proto.onMoveModeCheckBoxTouch = function onMoveModeCheckBoxTouch() {
          if (!this.getInitialized()) {
            return;
          }

          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
        };

        _proto.onSliderSFX = function onSliderSFX(event) {
          _GfPopupSettingSlider.prototype.onSliderSFX.call(this, event);

          this.checkIsOffSFX(event.progress);
        };

        _proto.onSliderBGM = function onSliderBGM(event) {
          _GfPopupSettingSlider.prototype.onSliderBGM.call(this, event);

          this.checkIsOffBGM(event.progress);
        };

        _proto.onButtonChangeKeyClick = function onButtonChangeKeyClick(event, index) {
          this.nodeOverlay.active = true;
          this.onUpdateHighlight(index);
          systemEvent.on(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
          this._currentIndexLabelHotKey = index;
        };

        _proto.onKeyDown = function onKeyDown(event) {
          systemEvent.off(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
          this.nodeOverlay.active = false;
          this.highlight.active = false;
          this.checkDuplicateHotKey(event.keyCode);
          this.arrLabelHotKey[this._currentIndexLabelHotKey].string = this.formatKeyName(KeyCode[event.keyCode].toString());

          if (this.arrLabelHotKey[this._currentIndexLabelHotKey].string == "") {
            var nodeWarning = this.arrNodeWarning[this._currentIndexLabelHotKey];
            nodeWarning.active = true;
            this.onTweenFadeInOutForeverNode(nodeWarning);
          } else {
            var _nodeWarning = this.arrNodeWarning[this._currentIndexLabelHotKey];
            Tween.stopAllByTarget(_nodeWarning);
            _nodeWarning.active && (_nodeWarning.active = false);
          }

          gfEventEmitter.instance.emit(EventsCode1985.HOT_KEY_EVENT.UPDATE_HOT_KEY, this._currentIndexLabelHotKey, event.keyCode);
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
          DataStore1985.instance.Controller[this._currentIndexLabelHotKey].Hotkey = event.keyCode;
          this._currentIndexLabelHotKey = null;
        };

        _proto.formatKeyName = function formatKeyName(keyName) {
          for (var key in arrWordReplace) {
            if (keyName.includes(key)) {
              keyName = keyName.replace(key, arrWordReplace[key]);
              break;
            }
          }

          return keyName == "NONE" ? "" : keyName;
        };

        _proto.checkDuplicateHotKey = function checkDuplicateHotKey(keyCode) {
          var _this3 = this;

          var strKeyCode = this.formatKeyName(KeyCode[keyCode]);
          this.arrLabelHotKey.forEach(function (label, index) {
            if (label.string == strKeyCode) {
              label.string = '';
              gfEventEmitter.instance.emit(EventsCode1985.HOT_KEY_EVENT.UPDATE_HOT_KEY, index, KeyCode.NONE);
              DataStore1985.instance.Controller[index].Hotkey = KeyCode.NONE;
              var nodeWarning = _this3.arrNodeWarning[index];
              nodeWarning.active = true;

              _this3.onTweenFadeInOutForeverNode(nodeWarning);
            }
          });
        };

        _proto.checkIsOffSFX = function checkIsOffSFX(progress) {
          if (progress <= 0) {
            this.handlerSfx.getChildByName("btn_sound_off").active = true;
          } else {
            this.handlerSfx.getChildByName("btn_sound_off").active = false;
          }
        };

        _proto.checkIsOffBGM = function checkIsOffBGM(progress) {
          if (progress <= 0) {
            this.handlerBgm.getChildByName("btn_music_off").active = true;
          } else {
            this.handlerBgm.getChildByName("btn_music_off").active = false;
          }
        };

        _proto.onResetState = function onResetState() {
          _GfPopupSettingSlider.prototype.onResetState.call(this);

          gfEventEmitter.instance.emit(EventsCode1985.HUD.RESUME_LISTENER_KEY_EVENT);

          if (this.nodeOverlay.active) {
            this.nodeOverlay.active = false;
            systemEvent.off(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
          }

          if (this.highlight.active) {
            this.highlight.active = false;
          }

          this.arrNodeWarning.forEach(function (node) {
            Tween.stopAllByTarget(node);
            node.active && (node.active = false);
          });
        };

        _proto.onUpdateHighlight = function onUpdateHighlight(index) {
          if (!this.highlight.active) {
            this.highlight.active = true;
          }

          var _this$highlight$posit = this.highlight.position,
              x = _this$highlight$posit.x,
              z = _this$highlight$posit.z;
          this.highlight.setPosition(x, this.arrNodeSettingHotkey[index].getPosition().y, z);
        };

        _proto.onTweenFadeInOutForeverNode = function onTweenFadeInOutForeverNode(node) {
          Tween.stopAllByTarget(node);
          tween(node).repeatForever(tween().then(fadeOut(0.5)).then(fadeTo(0.5, 150))).start();
        };

        _proto.onBtnMusicClick = function onBtnMusicClick() {
          if (sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.bgmSliderNode.getComponent(Slider).progress);
          }

          gfEventEmitter.instance.emit(EventsCode1985.SOUND.SLIDE_BUTTON_CLICK);
        };

        _proto.onBtnEffectClick = function onBtnEffectClick() {
          if (sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.sfxSliderNode.getComponent(Slider).progress);
          }

          gfEventEmitter.instance.emit(EventsCode1985.SOUND.SLIDE_BUTTON_CLICK);
        };

        _proto.showWithEffect = function showWithEffect() {
          setOpacity(this.contents, 0);
          this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
          tween(this.contents).then(fadeIn(0.1)).start();
        };

        _proto.onClose = function onClose(evt) {
          if (evt === void 0) {
            evt = null;
          }

          _GfPopupSettingSlider.prototype.onClose.call(this);

          refreshButtonState(evt.target.getComponent(Button));
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
          this.showHideAnim.play(this.ANIM_NAME.Hide);
        };

        return PopupSetting1985;
      }(GfPopupSettingSlider), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "swapModeNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "swapModeCheckBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "PC_Layout", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Mobile_Layout", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "nodeOverlay", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "arrLabelHotKey", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "arrNodeSettingHotkey", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "highlight", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "arrNodeWarning", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "showHideAnim", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCuSceneJackpotWin.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './gf3DParticle.ts', './gfCutSceneItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, _createClass, cclegacy, _decorator, Component, Label, Node, v3, tween, Button, gfBaseEvents, fadeOut, stopAllActions, gfEventEmitter, gfBaseConfig, formatCoin, gfDataStore, gf3DParticle, gfCutSceneItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
      Label = module.Label;
      Node = module.Node;
      v3 = module.v3;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      formatCoin = module.formatCoin;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfCutSceneItem = module.gfCutSceneItem;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "36a4cPBh6pHfrE6FP8Gk35n", "gfCuSceneJackpotWin", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfCuSceneJackpotWin = exports('GfCuSceneJackpotWin', (_dec = ccclass('GfCuSceneJackpotWin'), _dec2 = property(Component), _dec3 = property(Label), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfCutSceneItem) {
        _inheritsLoose(GfCuSceneJackpotWin, _gfCutSceneItem);

        function GfCuSceneJackpotWin() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfCutSceneItem.call.apply(_gfCutSceneItem, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "blackLayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtCoin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "particleCoin", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "animNode", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "winFrame", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "tweenCoin", void 0);

          _defineProperty(_assertThisInitialized(_this), "_coinValue", 0);

          _defineProperty(_assertThisInitialized(_this), "winValue", 0);

          _defineProperty(_assertThisInitialized(_this), "_duration", 9);

          return _this;
        }

        var _proto = GfCuSceneJackpotWin.prototype;

        _proto.extendShow = function extendShow(content, callback) {
          this.setWinValue(content.jackpotAmount);
          this.start();
        };

        _proto.setWinValue = function setWinValue(value) {
          this.winValue = value;
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.txtCoin.string = formatCoin(this._coinValue);
        };

        _proto.start = function start() {
          var _this2 = this;

          this.txtCoin.string = "0";
          this.winFrame.active = false;
          this.animNode.scale.set(v3(0, 0, 1));
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BIG_WIN);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN);
          this.particleCoin.active = true;
          this.particleCoin.getComponent(gf3DParticle).startAnimation();
          this.winFrame.active = true;
          this.winFrame.scale.set(1, 0.2);
          tween(this.winFrame).to(0.1, {
            scale: v3(1, 1, 1)
          }).start();
          tween(this.animNode).to(0.25, {
            scale: v3(1, 1, 1)
          }).start();
          this.scheduleOnce(function () {
            _this2.winFrame.getComponent(Button).interactable = true;
          }, 0.65);

          this._tweenCoin();
        };

        _proto._tweenCoin = function _tweenCoin() {
          var _this3 = this;

          var superValue = this.winValue * 0.75;
          var megaValue = this.winValue * 0.5;
          this.tweenCoin = tween(this).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = ratio * megaValue;
            }
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _this3.coinValue + ratio * (superValue - _this3.coinValue);
            }
          }).to(this._duration / 3, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _this3.coinValue + (_this3.winValue - _this3.coinValue) * ratio;
            }
          }).call(function () {
            _this3.hide();
          });
          this.tweenCoin.start();
        };

        _proto.quickShow = function quickShow() {
          var _this4 = this;

          if (this.coinValue === this.winValue) {
            return;
          }

          this.winFrame.active = false;
          this.blackLayer.getComponent(Button).interactable = false;
          this.tweenCoin.stop();
          this.tweenCoin = tween(this).to(1, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this4.coinValue = _this4.coinValue + (_this4.winValue - _this4.coinValue) * ratio;
            }
          }).delay(1).call(function () {
            _this4.hide();
          }).start();
        };

        _proto.hide = function hide() {
          var _this5 = this;

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
          gfDataStore.instance.curBGMusic = null;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          tween(this.node).delay(.5).then(fadeOut(0.5)).call(function () {
            _this5.particleCoin.getComponent(gf3DParticle).stopAnimation();

            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.JACKPOT_WINAMOUNT_POPUP_CLOSE);
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CHECK_QUEUE_ANIM);

            _gfCutSceneItem.prototype.hide.call(_this5);
          }).removeSelf().start();
        };

        _proto.onDestroy = function onDestroy() {
          stopAllActions(this.node);

          if (this.tweenCoin) {
            gfDataStore.instance.curBGMusic = null;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
            this.tweenCoin.stop();
          }
        };

        _createClass(GfCuSceneJackpotWin, [{
          key: "coinValue",
          get: function get() {
            return this._coinValue;
          },
          set: function set(value) {
            this._coinValue = value;

            this._updateCoinWin();
          }
        }]);

        return GfCuSceneJackpotWin;
      }(gfCutSceneItem), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "blackLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "particleCoin", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "winFrame", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PageViewLobbyComponent1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Button, Node, PageView, Animation, tween, v3, Component, gfEventEmitter, EventsCode1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      PageView = module.PageView;
      Animation = module.Animation;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "376cd7+iWZK9qnIOF5diRzr", "PageViewLobbyComponent1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PageViewLobbyComponent1985 = exports('PageViewLobbyComponent1985', (_dec = ccclass('PageViewLobbyComponent1985'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PageViewLobbyComponent1985, _Component);

        function PageViewLobbyComponent1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnNext", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnPrev", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "FXLobby", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "mapMission", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "missionPoints", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnSelect", _descriptor6, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_pageViewComp", null);

          _defineProperty(_assertThisInitialized(_this), "_pageIndex", 0);

          _defineProperty(_assertThisInitialized(_this), "_pageViewEvent", null);

          return _this;
        }

        var _proto = PageViewLobbyComponent1985.prototype;

        _proto.onLoad = function onLoad() {
          this.initPage();
        };

        _proto.initPage = function initPage() {
          this._pageViewEvent = this.pageViewEvent.bind(this);
          this.node.on('page-turning', this._pageViewEvent.bind(this));
          this._pageViewComp = this.node.getComponent(PageView);
          this.FXLobby.active = true;
          this.FXLobby.setPosition(this.missionPoints[this._pageIndex].getPosition());
          this.missionPoints[this._pageIndex].active = false;
          this.updateButtons();
          this.mapMission.setPosition(this.getMapPosition());
        };

        _proto.pageViewEvent = function pageViewEvent(pageView) {
          this._pageIndex = pageView._curPageIdx;
          this.updateButtons();
          this.updatePosFXLobby();
        };

        _proto._getMaxItemPerPage = function _getMaxItemPerPage() {
          return this._pageViewComp.content.children.length;
        };

        _proto.getPageIndex = function getPageIndex() {
          return this._pageIndex;
        };

        _proto.updateButtons = function updateButtons() {
          var btnPrev = this.btnPrev,
              btnNext = this.btnNext,
              _pageIndex = this._pageIndex;

          var numberItemPerPage = this._getMaxItemPerPage();

          numberItemPerPage--;

          if (numberItemPerPage === 0) {
            btnPrev.node.active = false;
            btnNext.node.active = false;
            this.setStateButtonSelect(false);
          } else if (_pageIndex === 0) {
            btnPrev.node.active = false;
            btnNext.node.active = true;
            this.setStateButtonSelect(false);
          } else if (_pageIndex === numberItemPerPage) {
            btnPrev.node.active = true;
            btnNext.node.active = false;
            this.setStateButtonSelect(true);
          } else {
            btnPrev.node.active = true;
            btnNext.node.active = true;
            this.setStateButtonSelect(true);
          }
        };

        _proto.setStateButtonSelect = function setStateButtonSelect(state) {
          this.btnSelect.getComponent(Button).interactable = !state;
          this.btnSelect.children.forEach(function (child) {
            return child.active = !state;
          });
        };

        _proto.onNext = function onNext() {
          var numberItemPerPage = this._getMaxItemPerPage();

          numberItemPerPage--;

          if (this._pageIndex >= numberItemPerPage) {
            this._pageIndex = numberItemPerPage;
            return;
          }

          this._pageIndex++;

          this._pageViewComp.scrollToPage(this._pageIndex);

          this.updateButtons();
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.CHANGE_LOCATION);
        };

        _proto.onPreview = function onPreview() {
          if (this._pageIndex <= 0) {
            this._pageIndex = 0;
            return;
          }

          this._pageIndex--;

          this._pageViewComp.scrollToPage(this._pageIndex);

          this.updateButtons();
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.CHANGE_LOCATION);
        };

        _proto.updatePosFXLobby = function updatePosFXLobby() {
          var _this2 = this;

          this.btnPrev.interactable = false;
          this.btnNext.interactable = false;
          this.FXLobby.getComponent(Animation).stop();
          this.missionPoints.forEach(function (index) {
            return index.active = true;
          });
          tween(this.FXLobby).to(0.15, {
            scale: v3(0, 0, 0)
          }).delay(0.15).call(function () {
            _this2.FXLobby.setPosition(_this2.missionPoints[_this2._pageIndex].getPosition());

            if (_this2._pageIndex != 0) {
              _this2.FXLobby.getChildByName("checkpoint2").active = false;
              _this2.FXLobby.getChildByName("checkpoint_ship").active = false;
              _this2.missionPoints[_this2._pageIndex].active = true;
            } else {
              gfEventEmitter.instance.emit(EventsCode1985.SOUND.CHANGE_HOLOGRAM);
              _this2.FXLobby.getChildByName("checkpoint2").active = true;
              _this2.FXLobby.getChildByName("checkpoint_ship").active = true;
              _this2.missionPoints[_this2._pageIndex].active = false;
            }
          }).to(0.15, {
            scale: v3(1, 1, 1)
          }).delay(0.15).call(function () {
            _this2.btnNext.interactable = true;
            _this2.btnPrev.interactable = true;

            _this2.FXLobby.getComponent(Animation).play();
          }).start();
          var mapPosition = this.getMapPosition();
          tween(this.mapMission).to(0.2, {
            position: mapPosition
          }).start();
        };

        _proto.getMapPosition = function getMapPosition() {
          var _this$missionPoints$t = this.missionPoints[this._pageIndex].position,
              x = _this$missionPoints$t.x,
              y = _this$missionPoints$t.y;
          return v3(-x, -y, 0);
        };

        return PageViewLobbyComponent1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnPrev", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "FXLobby", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "mapMission", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "missionPoints", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnSelect", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayerLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfPlayer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, SpriteAtlas, Component, convertAssetArrayToObject, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, gfReferenceManager, gfDataStore, gfPlayer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      SpriteAtlas = module.SpriteAtlas;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfPlayer = module.gfPlayer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "37a30WpvLFGmIqvZRPer6t7", "gfPlayerLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPlayerLayer = exports('gfPlayerLayer', (_dec = ccclass('gfPlayerLayer'), _dec2 = property(gfPlayer), _dec3 = property(Node), _dec4 = property(SpriteFrame), _dec5 = property(SpriteAtlas), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfPlayerLayer, _Component);

        function gfPlayerLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listPlayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listWaiting", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listGunSprite", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "avatarAtlas", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectIsMe", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectMaxGun", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfPlayerLayer.prototype;

        _proto.onLoad = function onLoad() {
          this.node['getPlayerByDeskStation'] = this.getPlayerByDeskStation.bind(this);
          this.node['getPlayerByIndex'] = this.getPlayerByIndex.bind(this);
          this.initEvents();
          this.configAllPlayer();
          this.hideAllPlayer();
          gfReferenceManager.instance.setData({
            PlayerLayer: this.node
          });
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.GAME_UPDATE_WALLET, this.playerUpdateWallet, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.HIDE_IS_ME, this.hideIsMe, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.playerCatchFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, this.playerCatchFishBySkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, this.playerFire, this);
          registerEvent(gfBaseEvents.DRAGON.WARNING, this.onDragonWarning, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_ALL_BIGWIN, this.hideBallTray, this);
          registerEvent(gfBaseEvents.DRAGON.CREATE, this.onDragonCreated, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_BALL_DROP, this.onBallDropDone, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, this.onReceiveLaser, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.SHOW_POPUP_NO_MONEY, this.playerShowPopupNoMoney, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.hideAllPlayer, this);
        };

        _proto.configAllPlayer = function configAllPlayer() {
          for (var i = 0; i < this.listPlayer.length; i++) {
            this.listPlayer[i].gunSprite = convertAssetArrayToObject(this.listGunSprite);
            this.listPlayer[i].avatarAtlas = this.avatarAtlas;
            this.listPlayer[i].waitingText = this.listWaiting[i];
            this.listPlayer[i].index = i;
            this.listPlayer[i].effectIsMe = this.effectIsMe;
            this.listPlayer[i].effectMaxGun = this.effectMaxGun;
          }
        };

        _proto.onReceiveLaser = function onReceiveLaser(DeskStation) {
          var player = this.getPlayerByDeskStation(DeskStation);

          if (player && player.isMe) {
            player.lockBet(true);
          }
        };

        _proto.playerShowPopupNoMoney = function playerShowPopupNoMoney() {
          var player = this.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

          if (player) {
            player.showPopupNoMoney();
          }
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          for (var i = 0; i < data.length; i++) {
            var userInfo = data[i];
            var player = this.getPlayerByDeskStation(userInfo.DeskStation);

            if (player) {
              player.resetUserId();
              player.initObj(userInfo);
            }
          } //Make sure init position after init all player


          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_TUTORIAL);
        };

        _proto.playerJoinBoard = function playerJoinBoard(userInfo) {
          if (userInfo === void 0) {
            userInfo = null;
          }

          var player = this.getPlayerByDeskStation(userInfo.DeskStation);

          if (player) {
            player.initObj(userInfo);
            player.waitingText.active = false;
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(data) {
          if (data === void 0) {
            data = null;
          }

          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            player.resetOnExit();
            player.waitingText.active = true;

            if (!player.isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.REMOVE_BALL, data);
            }
          }
        };

        _proto.playerFire = function playerFire(data) {
          if (data === void 0) {
            data = null;
          }

          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            player.onUserFire(data);
          }
        };

        _proto.playerUpdateWallet = function playerUpdateWallet(data) {
          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            player.updateWallet(data.Wallet);
          }
        };

        _proto.hideIsMe = function hideIsMe() {
          this.effectIsMe.active = false;
        };

        _proto.playerCatchFish = function playerCatchFish(data) {
          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player && !player.isMe) {
            if (data.Wallet || data.Wallet === 0) {
              player.updateWallet(data.Wallet);
            }
          }
        };

        _proto.playerCatchFishBySkill = function playerCatchFishBySkill(data) {
          var player = this.getPlayerByDeskStation(data.DeskStation);

          if (player && !player.isMe) {
            if (data.Wallet || data.Wallet === 0) {
              player.updateWallet(data.Wallet);
            }
          }
        };

        _proto.getPlayerByIndex = function getPlayerByIndex(index) {
          return this.listPlayer[index];
        };

        _proto.getPlayerByDeskStation = function getPlayerByDeskStation(deskStation) {
          if (!this.listPlayer) return null;
          var index = deskStation;

          if (gfDataStore.instance.getSelfDeskStation() >= 2) {
            index = [2, 3, 0, 1][deskStation];
          }

          return this.listPlayer[index];
        };

        _proto.onDragonWarning = function onDragonWarning() {
          this.listPlayer.forEach(function (player) {
            if (player.isActive()) {
              player.showBallTray();
            }
          });
        };

        _proto.onDragonCreated = function onDragonCreated() {
          this.listPlayer.forEach(function (player) {
            if (player.isActive()) {
              player.checkHaveBallTrayOnActived();
            }
          });
        };

        _proto.hideBallTray = function hideBallTray() {
          this.listPlayer.forEach(function (player) {
            if (player.isActive()) {
              player.hideBallTray();
            }
          });
        };

        _proto.hideAllPlayer = function hideAllPlayer() {
          for (var i = 0; i < this.listPlayer.length; ++i) {
            this.listPlayer[i].resetOnExit && this.listPlayer[i].resetOnExit();
            this.listPlayer[i].waitingText.active = true;
          }

          this.effectIsMe.active = false;
        };

        _proto.onBallDropDone = function onBallDropDone(deskStation) {
          var player = this.getPlayerByDeskStation(deskStation);

          if (player) {
            player.onBallDropDone();
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfPlayerLayer;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPlayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listWaiting", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listGunSprite", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "avatarAtlas", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "effectIsMe", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "effectMaxGun", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MainController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './gfNetworkGameEvent.ts', './DataStore1985.ts', './Config1985.ts', './gfNetworkParser.ts', './gfMainController.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, EventsCode1985, gfNetworkGameEvent, DataStore1985, Config1985, gfNetworkParser, gfMainController;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfMainController = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "386cfyh3Q9BHIzeMSJESRYp", "MainController1985", undefined);

      var ccclass = _decorator.ccclass;
      var MainController1985 = exports('default', (_dec = ccclass('MainController1985'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfMainController) {
        _inheritsLoose(MainController1985, _gfMainController);

        function MainController1985() {
          var _this;

          _this = _gfMainController.call(this) || this;
          MainController1985.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = MainController1985.prototype;

        _proto.initEvents = function initEvents() {
          _gfMainController.prototype.initEvents.call(this);

          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PLAYER_UPDATE_POSITION, this.onGetPlayerUpdatePosition.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_UPDATE_STREAK_INFO, this.onGetStreakInfo.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_ENEMY_FIRE_BULLET, this.onEnemyFireBullet.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PLAYER_DIE, this.onPlayerDie.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PLAYER_UPDATE_SHIELD, this.onPlayerUpdateShield.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_PLAYER_SEND_PIECE_ENERGY, this.onGetPieceEnergyInfo.bind(this));
          gfNetworkParser.instance.registerEvent(gfNetworkGameEvent.GAME_CREATE_ENV_OBJECT, this.onCreateEnvObject.bind(this));
          registerEvent(EventsCode1985.GAME_LAYER.SEND_PLAYER_UPDATE_POSITION, this.onSendPlayerUpdatePosition, this);
          registerEvent(EventsCode1985.GAME_LAYER.PLAYER_LOWER_SHIELD, this.onSendPlayerLowerShield, this);
          registerEvent(EventsCode1985.GAME_LAYER.PLAYER_SEND_PIECE_ENERGY, this.onSendPlayerPieceEnergy, this);
          registerEvent(EventsCode1985.GAME_LAYER.PLAYER_SEND_ACTIVE_SKILL_ULTIMATE, this.sendFireSkillUltimate, this);
        };

        _proto.initSentry = function initSentry() {};

        _proto.onGetPlayerUpdatePosition = function onGetPlayerUpdatePosition(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.GET_PLAYER_UPDATE_POSITION, data);
        };

        _proto.onGetStreakInfo = function onGetStreakInfo(data) {
          gfEventEmitter.instance.emit(EventsCode1985.HUD.UPDATE_STREAK_INFO, data);
        };

        _proto.onSendPlayerUpdatePosition = function onSendPlayerUpdatePosition(data) {
          var x = data.x,
              y = data.y;
          gfNetworkParser.instance.sendPlayerPositionMessage(x, y);
        };

        _proto.onEnemyFireBullet = function onEnemyFireBullet(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.ENEMY_FIRE_BULLET, data);
        };

        _proto.onPlayerDie = function onPlayerDie(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.AIRCRAFT_DIE, data);
        };

        _proto.onSendPlayerLowerShield = function onSendPlayerLowerShield(data) {
          gfNetworkParser.instance.sendPlayerLowerShieldMessage(data);
        };

        _proto.onPlayerUpdateShield = function onPlayerUpdateShield(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.PLAYER_UPDATE_SHIELD, data);
        };

        _proto.onSendPlayerPieceEnergy = function onSendPlayerPieceEnergy(data) {
          gfNetworkParser.instance.sendPlayerPieceEnergy(data);
        };

        _proto.onGetPieceEnergyInfo = function onGetPieceEnergyInfo(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.PLAYER_PICK_PIECE_ENERGY, data);
        };

        _proto.sendFireSkillUltimate = function sendFireSkillUltimate(data) {
          gfNetworkParser.instance.sendCatchFishSkill(data);
        };

        _proto.onListUserOnBoard = function onListUserOnBoard(data) {
          if (this._isGameHide) {
            this.onHideGame();
            return;
          }

          DataStore1985.instance.updateDeltaTime(data.ServerTime);
          var targetState = DataStore1985.instance.getTargetState();

          if (targetState === Config1985.instance.TARGET_LOCK.TARGET_ONE) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_EVENT_STATUS, data);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);

          if (data.RoomData) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, data.RoomData); // PopupController.instance.onJoinGame();
          }

          if (data.ListUser) {
            DataStore1985.instance.setSelfInfo({
              isReadyToPlay: true
            });
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, {
              ListUser: data.ListUser,
              isResume: data.isResume
            });
          }

          if (targetState === Config1985.instance.TARGET_LOCK.AUTO_BOT) {
            gfEventEmitter.instance.emit(gfBaseEvents.AUTO_BOT.RESUME);
          }

          if (data.StreakInfo) {
            gfEventEmitter.instance.emit(EventsCode1985.HUD.RESUME_STREAK_INFO, data.StreakInfo);
          }

          if (data.RoomData.ListEnvObject) {
            gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.CREATE_LIST_ENV_OBJECT, data.RoomData.ListEnvObject);
          }

          if (data.SkillSpecialInfo) {
            gfEventEmitter.instance.emit(EventsCode1985.HUD.RESUME_PERCENT_SKILL_ULTIMATE, data.SkillSpecialInfo);
          }

          if (data.SkillSpecialMilestone) {
            Config1985.instance.updateSkillSpecialMilestone(data.SkillSpecialMilestone);
          }

          if (data.SessionTime) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_SESSION_TIME, data.SessionTime);
          }
        };

        _proto.onCreateEnvObject = function onCreateEnvObject(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.CREATE_ENV_OBJECT, data);
        };

        _proto.destroy = function destroy() {
          _gfMainController.prototype.destroy.call(this);

          removeEvents(this);
        };

        return MainController1985;
      }(gfMainController), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemyEV1Move.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MoveBySpine1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, sp, MoveBySpine1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
    }, function (module) {
      MoveBySpine1985 = module.MoveBySpine1985;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "3880flVQEBIa4zCnV+Y8lhR", "EnemyEV1Move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemyEV1Move = exports('EnemyEV1Move', (_dec = ccclass('EnemyEV1Move'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_MoveBySpine) {
        _inheritsLoose(EnemyEV1Move, _MoveBySpine);

        function EnemyEV1Move() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _MoveBySpine.call.apply(_MoveBySpine, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "posFire", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "boxList", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "pathId", "8.1");

          _defineProperty(_assertThisInitialized(_this), "boxIndex", 0);

          _defineProperty(_assertThisInitialized(_this), "BoneConfig", {
            "8.1": {
              boxIndex: 0,
              boxPath: "root/All/Enemy/enemy_1",
              firePos: ["root/All/Enemy/enemy_1/gun_01/gun/gun_A1", "root/All/Enemy/enemy_1/gun_01/gun/gun_A2", "root/All/Enemy/enemy_1/gun_01/gun/gun_A3"]
            },
            "8.2": {
              boxIndex: 1,
              boxPath: "root/All/Enemy/enemy_1",
              firePos: ["root/All/Enemy/enemy_1/gun_01/gun/gun_A1", "root/All/Enemy/enemy_1/gun_01/gun/gun_A2", "root/All/Enemy/enemy_1/gun_01/gun/gun_A3"]
            },
            "8.3": {
              boxIndex: 2,
              boxPath: "root/All/Enemy/enemy_2",
              firePos: ["root/All/Enemy/enemy_2/move/gun_02/gun_B1", "root/All/Enemy/enemy_2/move/gun_02/gun_B2", "root/All/Enemy/enemy_2/move/gun_02/gun_B3"]
            }
          });

          return _this;
        }

        var _proto = EnemyEV1Move.prototype;

        _proto.setUpMove = function setUpMove(data) {
          _MoveBySpine.prototype.setUpMove.call(this, data);

          this.customBoxCollider(data.PathID);
        };

        _proto.customBoxCollider = function customBoxCollider(pathId) {
          if (pathId === void 0) {
            pathId = "8.1";
          }

          if (this.pathId == pathId) return;
          this.pathId = pathId;
          var boneConfig = this.BoneConfig[pathId];
          this.boxIndex = boneConfig.boxIndex;

          for (var i = 0; i < this.boxList.length; ++i) {
            this.boxList[i].active = false;
          }

          this.boxList[this.boxIndex].active = true;
          this.fishAnim.sockets.length = 0;
          var boxSocket = new sp.SpineSocket(boneConfig.boxPath, this.boxList[this.boxIndex]);
          this.fishAnim.sockets.push(boxSocket);

          for (var _i = 0; _i < this.posFire.length; ++_i) {
            var socket = new sp.SpineSocket(boneConfig.firePos[_i], this.posFire[_i]);
            this.fishAnim.sockets.push(socket);
          }

          this.fishAnim.sockets = this.fishAnim.sockets;
        };

        _proto.getWorldPosition = function getWorldPosition() {
          return this.boxList[this.boxIndex].getWorldPosition();
        };

        return EnemyEV1Move;
      }(MoveBySpine1985), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "posFire", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "boxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameEvent.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Prefab, Node, Label, NodePool, instantiate, Component, formatMoney, customDateFormat, startGameFromEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Label = module.Label;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
      customDateFormat = module.customDateFormat;
      startGameFromEvent = module.startGameFromEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;

      cclegacy._RF.push({}, "3a765ClryJDR75k/7uN4CBN", "GameEvent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameEvent = exports('GameEvent', (_dec = ccclass('GameEvent'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Node
      }), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: Label
      }), _dec8 = property({
        type: Label
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameEvent, _Component);

        function GameEvent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "currentQuest", null);

          _defineProperty(_assertThisInitialized(_this), "eventId", null);

          _defineProperty(_assertThisInitialized(_this), "type", '');

          _initializerDefineProperty(_assertThisInitialized(_this), "questPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "questHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "rewardHolder", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "rewardString", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "eventName", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "eventTime", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "eventPeriod", _descriptor7, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "questPool", null);

          return _this;
        }

        var _proto = GameEvent.prototype;

        _proto.onLoad = function onLoad() {
          this.questPool = new NodePool();
        };

        _proto.getQuest = function getQuest() {
          var quest = this.questPool.get();

          if (!quest) {
            quest = instantiate(this.questPrefab);
          }

          return quest;
        };

        _proto.onDisable = function onDisable() {
          while (this.questHolder.children.length > 0) {
            this.questPool.put(this.questHolder.children[0]);
          }
        };

        _proto.init = function init(data) {
          console.log(data);
          this.currentQuest = null;
          this.eventId = data.eventInfo.id;
          this.type = data.eventInfo.isMission == 1 ? "Mission" : "Event";
          this.eventName.string = this.type + ": " + data.eventInfo.name;
          var loadCurrentQuest = false;

          for (var i = 0; i < data.listQuest.length; i++) {
            var quest = this.getQuest();
            quest.setParent(this.questHolder);
            quest.getComponent('GameQuest').init(data.listQuest[i], data.eventInfo.id);

            if (!loadCurrentQuest && !data.listQuest[i].isComplete) {
              this.currentQuest = data.listQuest[i];
              loadCurrentQuest = true;
            }
          }

          if (data.eventInfo.rewardAmount) {
            this.rewardHolder.active = true;
            this.rewardString.string = formatMoney(data.eventInfo.rewardAmount);
          } else {
            this.rewardHolder.active = false;
          }

          var startDate = new Date(data.eventInfo.startDate);
          var endDate = new Date(data.eventInfo.endDate);
          var startDateStr = customDateFormat(startDate, '#hhhh#:#mm# #DD#-#MM#-#YYYY#');
          var endDataStr = customDateFormat(endDate, '#hhhh#:#mm# #DD#-#MM#-#YYYY#');
          this.eventTime.string = "Th\u1EDDi gian: " + startDateStr + " - " + endDataStr;

          if (data.eventInfo.timePeriod && data.eventInfo.timePeriod.length > 0) {
            var periodString = '';

            for (var _i = 0; _i < data.eventInfo.timePeriod.length; _i++) {
              var period = data.eventInfo.timePeriod[_i];
              periodString += "[" + this.convertHourUTC(period.startTime) + " - " + this.convertHourUTC(period.endTime) + "]";
            }

            this.eventPeriod.string = 'Khung giờ: ' + periodString;
          } else {
            this.eventPeriod.string = 'Khung giờ: Tất Cả';
          }
        };

        _proto.convertHourUTC = function convertHourUTC(time) {
          //to GMT +7
          var timeArray = time.split(':');
          var hour = parseInt(timeArray[0]) + 7;
          hour = hour > 24 ? hour - 24 : hour;
          var result = hour + ":" + timeArray[1];
          if (hour < 10) result = '0' + result;
          return result;
        };

        _proto.playEvent = function playEvent() {
          if (this.currentQuest) {
            var gameId = this.currentQuest.serviceIds[0];
            var eventId = this.eventId;
            startGameFromEvent(gameId, eventId);
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.questPool.clear();
        };

        return GameEvent;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "questPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "questHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "rewardHolder", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "rewardString", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "eventName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "eventTime", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "eventPeriod", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/util.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      var _cjsExports;

      loader.define(module.meta.url, function (exports$1, _require, module, __filename, __dirname) {
        var require = loader.createRequireWithReqMap({}, _require);

        (function () {
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          var exports = {};

          if ("object" == typeof exports && "undefined" != typeof module) {
            module.exports = exports;
          } else if ("function" == typeof define && define.amd) define([], exports);else {
            var r;
            r = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this, r.util = exports;
          }

          var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
            var keys = Object.keys(obj);
            var descriptors = {};

            for (var i = 0; i < keys.length; i++) {
              descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
            }

            return descriptors;
          };

          var formatRegExp = /%[sdj%]/g;

          exports.format = function (f) {
            if (!isString(f)) {
              var objects = [];

              for (var i = 0; i < arguments.length; i++) {
                objects.push(inspect(arguments[i]));
              }

              return objects.join(' ');
            }

            var i = 1;
            var args = arguments;
            var len = args.length;
            var str = String(f).replace(formatRegExp, function (x) {
              if (x === '%%') return '%';
              if (i >= len) return x;

              switch (x) {
                case '%s':
                  return String(args[i++]);

                case '%d':
                  return Number(args[i++]);

                case '%j':
                  try {
                    return JSON.stringify(args[i++]);
                  } catch (_) {
                    return '[Circular]';
                  }

                default:
                  return x;
              }
            });

            for (var x = args[i]; i < len; x = args[++i]) {
              if (isNull(x) || !isObject(x)) {
                str += ' ' + x;
              } else {
                str += ' ' + inspect(x);
              }
            }

            return str;
          }; // Mark that a method should not be used.
          // Returns a modified function which warns once by default.
          // If --no-deprecation is set, then it is a no-op.


          exports.deprecate = function (fn, msg) {
            if (typeof process !== 'undefined' && process.noDeprecation === true) {
              return fn;
            } // Allow for deprecating things in the process of starting up.


            if (typeof process === 'undefined') {
              return function () {
                return exports.deprecate(fn, msg).apply(this, arguments);
              };
            }

            var warned = false;

            function deprecated() {
              if (!warned) {
                if (process.throwDeprecation) {
                  throw new Error(msg);
                } else if (process.traceDeprecation) {
                  console.trace(msg);
                } else {
                  console.error(msg);
                }

                warned = true;
              }

              return fn.apply(this, arguments);
            }

            return deprecated;
          };
          /**
           * Echos the value of a value. Trys to print the value out
           * in the best way possible given the different types.
           *
           * @param {Object} obj The object to print out.
           * @param {Object} opts Optional options object that alters the output.
           */

          /* legacy: obj, showHidden, depth, colors*/


          function inspect(obj, opts) {
            // default options
            var ctx = {
              seen: [],
              stylize: stylizeNoColor
            }; // legacy...

            if (arguments.length >= 3) ctx.depth = arguments[2];
            if (arguments.length >= 4) ctx.colors = arguments[3];

            if (isBoolean(opts)) {
              // legacy...
              ctx.showHidden = opts;
            } else if (opts) {
              // got an "options" object
              exports._extend(ctx, opts);
            } // set default options


            if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
            if (isUndefined(ctx.depth)) ctx.depth = 2;
            if (isUndefined(ctx.colors)) ctx.colors = false;
            if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
            if (ctx.colors) ctx.stylize = stylizeWithColor;
            return formatValue(ctx, obj, ctx.depth);
          }

          exports.inspect = inspect; // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics

          inspect.colors = {
            'bold': [1, 22],
            'italic': [3, 23],
            'underline': [4, 24],
            'inverse': [7, 27],
            'white': [37, 39],
            'grey': [90, 39],
            'black': [30, 39],
            'blue': [34, 39],
            'cyan': [36, 39],
            'green': [32, 39],
            'magenta': [35, 39],
            'red': [31, 39],
            'yellow': [33, 39]
          }; // Don't use 'blue' not visible on cmd.exe

          inspect.styles = {
            'special': 'cyan',
            'number': 'yellow',
            'boolean': 'yellow',
            'undefined': 'grey',
            'null': 'bold',
            'string': 'green',
            'date': 'magenta',
            // "name": intentionally not styling
            'regexp': 'red'
          };

          function stylizeWithColor(str, styleType) {
            var style = inspect.styles[styleType];

            if (style) {
              return "\x1B[" + inspect.colors[style][0] + 'm' + str + "\x1B[" + inspect.colors[style][1] + 'm';
            } else {
              return str;
            }
          }

          function stylizeNoColor(str, styleType) {
            return str;
          }

          function arrayToHash(array) {
            var hash = {};
            array.forEach(function (val, idx) {
              hash[val] = true;
            });
            return hash;
          }

          function formatValue(ctx, value, recurseTimes) {
            // Provide a hook for user-specified inspect functions.
            // Check that value is an object with an inspect function on it
            if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
            value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
            !(value.constructor && value.constructor.prototype === value)) {
              var ret = value.inspect(recurseTimes, ctx);

              if (!isString(ret)) {
                ret = formatValue(ctx, ret, recurseTimes);
              }

              return ret;
            } // Primitive types cannot have properties


            var primitive = formatPrimitive(ctx, value);

            if (primitive) {
              return primitive;
            } // Look up the keys of the object.


            var keys = Object.keys(value);
            var visibleKeys = arrayToHash(keys);

            if (ctx.showHidden) {
              keys = Object.getOwnPropertyNames(value);
            } // IE doesn't make error fields non-enumerable
            // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx


            if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
              return formatError(value);
            } // Some type of object without properties can be shortcutted.


            if (keys.length === 0) {
              if (isFunction(value)) {
                var name = value.name ? ': ' + value.name : '';
                return ctx.stylize('[Function' + name + ']', 'special');
              }

              if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
              }

              if (isDate(value)) {
                return ctx.stylize(Date.prototype.toString.call(value), 'date');
              }

              if (isError(value)) {
                return formatError(value);
              }
            }

            var base = '',
                array = false,
                braces = ['{', '}']; // Make Array say that they are Array

            if (isArray(value)) {
              array = true;
              braces = ['[', ']'];
            } // Make functions say that they are functions


            if (isFunction(value)) {
              var n = value.name ? ': ' + value.name : '';
              base = ' [Function' + n + ']';
            } // Make RegExps say that they are RegExps


            if (isRegExp(value)) {
              base = ' ' + RegExp.prototype.toString.call(value);
            } // Make dates with properties first say the date


            if (isDate(value)) {
              base = ' ' + Date.prototype.toUTCString.call(value);
            } // Make error with message first say the error


            if (isError(value)) {
              base = ' ' + formatError(value);
            }

            if (keys.length === 0 && (!array || value.length == 0)) {
              return braces[0] + base + braces[1];
            }

            if (recurseTimes < 0) {
              if (isRegExp(value)) {
                return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
              } else {
                return ctx.stylize('[Object]', 'special');
              }
            }

            ctx.seen.push(value);
            var output;

            if (array) {
              output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
            } else {
              output = keys.map(function (key) {
                return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
              });
            }

            ctx.seen.pop();
            return reduceToSingleString(output, base, braces);
          }

          function formatPrimitive(ctx, value) {
            if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');

            if (isString(value)) {
              var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
              return ctx.stylize(simple, 'string');
            }

            if (isNumber(value)) return ctx.stylize('' + value, 'number');
            if (isBoolean(value)) return ctx.stylize('' + value, 'boolean'); // For some reason typeof null is "object", so special case here.

            if (isNull(value)) return ctx.stylize('null', 'null');
          }

          function formatError(value) {
            return '[' + Error.prototype.toString.call(value) + ']';
          }

          function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
            var output = [];

            for (var i = 0, l = value.length; i < l; ++i) {
              if (hasOwnProperty(value, String(i))) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
              } else {
                output.push('');
              }
            }

            keys.forEach(function (key) {
              if (!key.match(/^\d+$/)) {
                output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
              }
            });
            return output;
          }

          function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
            var name, str, desc;
            desc = Object.getOwnPropertyDescriptor(value, key) || {
              value: value[key]
            };

            if (desc.get) {
              if (desc.set) {
                str = ctx.stylize('[Getter/Setter]', 'special');
              } else {
                str = ctx.stylize('[Getter]', 'special');
              }
            } else {
              if (desc.set) {
                str = ctx.stylize('[Setter]', 'special');
              }
            }

            if (!hasOwnProperty(visibleKeys, key)) {
              name = '[' + key + ']';
            }

            if (!str) {
              if (ctx.seen.indexOf(desc.value) < 0) {
                if (isNull(recurseTimes)) {
                  str = formatValue(ctx, desc.value, null);
                } else {
                  str = formatValue(ctx, desc.value, recurseTimes - 1);
                }

                if (str.indexOf('\n') > -1) {
                  if (array) {
                    str = str.split('\n').map(function (line) {
                      return '  ' + line;
                    }).join('\n').substr(2);
                  } else {
                    str = '\n' + str.split('\n').map(function (line) {
                      return '   ' + line;
                    }).join('\n');
                  }
                }
              } else {
                str = ctx.stylize('[Circular]', 'special');
              }
            }

            if (isUndefined(name)) {
              if (array && key.match(/^\d+$/)) {
                return str;
              }

              name = JSON.stringify('' + key);

              if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                name = name.substr(1, name.length - 2);
                name = ctx.stylize(name, 'name');
              } else {
                name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                name = ctx.stylize(name, 'string');
              }
            }

            return name + ': ' + str;
          }

          function reduceToSingleString(output, base, braces) {
            var length = output.reduce(function (prev, cur) {
              if (cur.indexOf('\n') >= 0) ;
              return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
            }, 0);

            if (length > 60) {
              return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
            }

            return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
          }

          function isArray(ar) {
            return Array.isArray(ar);
          }

          exports.isArray = isArray;

          function isBoolean(arg) {
            return typeof arg === 'boolean';
          }

          exports.isBoolean = isBoolean;

          function isNull(arg) {
            return arg === null;
          }

          exports.isNull = isNull;

          function isNullOrUndefined(arg) {
            return arg == null;
          }

          exports.isNullOrUndefined = isNullOrUndefined;

          function isNumber(arg) {
            return typeof arg === 'number';
          }

          exports.isNumber = isNumber;

          function isString(arg) {
            return typeof arg === 'string';
          }

          exports.isString = isString;

          function isSymbol(arg) {
            return typeof arg === 'symbol';
          }

          exports.isSymbol = isSymbol;

          function isUndefined(arg) {
            return arg === void 0;
          }

          exports.isUndefined = isUndefined;

          function isRegExp(re) {
            return isObject(re) && objectToString(re) === '[object RegExp]';
          }

          exports.isRegExp = isRegExp;

          function isObject(arg) {
            return typeof arg === 'object' && arg !== null;
          }

          exports.isObject = isObject;

          function isDate(d) {
            return isObject(d) && objectToString(d) === '[object Date]';
          }

          exports.isDate = isDate;

          function isError(e) {
            return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
          }

          exports.isError = isError;

          function isFunction(arg) {
            return typeof arg === 'function';
          }

          exports.isFunction = isFunction;

          function isPrimitive(arg) {
            return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
            typeof arg === 'undefined';
          }

          exports.isPrimitive = isPrimitive;

          function objectToString(o) {
            return Object.prototype.toString.call(o);
          }

          function pad(n) {
            return n < 10 ? '0' + n.toString(10) : n.toString(10);
          }

          var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // 26 Feb 16:19:34

          function timestamp() {
            var d = new Date();
            var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
            return [d.getDate(), months[d.getMonth()], time].join(' ');
          } // log is just a thin wrapper to console.log that prepends a timestamp


          exports.log = function () {
            console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
          };

          exports._extend = function (origin, add) {
            // Don't do anything if add isn't an object
            if (!add || !isObject(add)) return origin;
            var keys = Object.keys(add);
            var i = keys.length;

            while (i--) {
              origin[keys[i]] = add[keys[i]];
            }

            return origin;
          };

          function hasOwnProperty(obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
          }

          var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

          exports.promisify = function promisify(original) {
            if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');

            if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
              var fn = original[kCustomPromisifiedSymbol];

              if (typeof fn !== 'function') {
                throw new TypeError('The "util.promisify.custom" argument must be of type Function');
              }

              Object.defineProperty(fn, kCustomPromisifiedSymbol, {
                value: fn,
                enumerable: false,
                writable: false,
                configurable: true
              });
              return fn;
            }

            function fn() {
              var promiseResolve, promiseReject;
              var promise = new Promise(function (resolve, reject) {
                promiseResolve = resolve;
                promiseReject = reject;
              });
              var args = [];

              for (var i = 0; i < arguments.length; i++) {
                args.push(arguments[i]);
              }

              args.push(function (err, value) {
                if (err) {
                  promiseReject(err);
                } else {
                  promiseResolve(value);
                }
              });

              try {
                original.apply(this, args);
              } catch (err) {
                promiseReject(err);
              }

              return promise;
            }

            Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
            if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
              value: fn,
              enumerable: false,
              writable: false,
              configurable: true
            });
            return Object.defineProperties(fn, getOwnPropertyDescriptors(original));
          };

          exports.promisify.custom = kCustomPromisifiedSymbol;

          function callbackifyOnRejected(reason, cb) {
            // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
            // Because `null` is a special error value in callbacks which means "no error
            // occurred", we error-wrap so the callback consumer can distinguish between
            // "the promise rejected with null" or "the promise fulfilled with undefined".
            if (!reason) {
              var newReason = new Error('Promise was rejected with a falsy value');
              newReason.reason = reason;
              reason = newReason;
            }

            return cb(reason);
          }

          function callbackify(original) {
            if (typeof original !== 'function') {
              throw new TypeError('The "original" argument must be of type Function');
            } // We DO NOT return the promise as it gives the user a false sense that
            // the promise is actually somehow related to the callback's execution
            // and that the callback throwing will reject the promise.


            function callbackified() {
              var args = [];

              for (var i = 0; i < arguments.length; i++) {
                args.push(arguments[i]);
              }

              var maybeCb = args.pop();

              if (typeof maybeCb !== 'function') {
                throw new TypeError('The last argument must be of type Function');
              }

              var self = this;

              var cb = function cb() {
                return maybeCb.apply(self, arguments);
              }; // In true node style we process the callback on `nextTick` with all the
              // implications (stack, `uncaughtException`, `async_hooks`)


              original.apply(this, args).then(function (ret) {
                process.nextTick(cb.bind(null, null, ret));
              }, function (rej) {
                process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
              });
            }

            Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
            Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));
            return callbackified;
          }

          exports.callbackify = callbackify;
        })();

        _cjsExports = exports('default', module.exports);
      });

      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
    }
  };
});

System.register("chunks:///_virtual/PopupPrompt1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1985.ts', './gfPopupPrompt.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfEventEmitter, EventsCode1985, GfPopupPrompt;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      GfPopupPrompt = module.GfPopupPrompt;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "3bdc3XTeEFC7Yphor5L0vIf", "PopupPrompt1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupPrompt1985 = exports('PopupPrompt1985', (_dec = ccclass('PopupPrompt1985'), _dec(_class = /*#__PURE__*/function (_GfPopupPrompt) {
        _inheritsLoose(PopupPrompt1985, _GfPopupPrompt);

        function PopupPrompt1985() {
          return _GfPopupPrompt.apply(this, arguments) || this;
        }

        var _proto = PopupPrompt1985.prototype;

        _proto.show = function show(data) {
          _GfPopupPrompt.prototype.show.call(this, data);

          gfEventEmitter.instance.emit(EventsCode1985.SOUND.SHOW_BUTTON_CLICK);
        };

        _proto.onClose = function onClose() {
          _GfPopupPrompt.prototype.onClose.call(this);

          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
        };

        return PopupPrompt1985;
      }(GfPopupPrompt)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventListenerManager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "3c085XLolNK4pPd/oLUMOG1", "EventListenerManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EventListenerManager = exports('EventListenerManager', (_dec = ccclass('EventListenerManager'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EventListenerManager, _Component);

        function EventListenerManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "handlers", {});

          return _this;
        }

        var _proto = EventListenerManager.prototype;

        _proto.on = function on(eventName, handler, target) {
          var objHandler = {
            handler: handler,
            target: target
          };
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            handlerList = [];
            this.handlers[eventName] = handlerList;
          }

          for (var i = 0; i < handlerList.length; i++) {
            var existObjHandler = handlerList[i];

            if (!existObjHandler) {
              handlerList[i] = objHandler;
              return i;
            } else {
              if (existObjHandler.handler === handler && existObjHandler.target === target) {
                console.warn("[EventListenerManager] Existing target: " + target + " and its handler: " + handler.name + " were already registered to an event: " + eventName);
                return i;
              }
            }
          }

          handlerList.push(objHandler);
          return handlerList.length;
        };

        _proto.off = function off(eventName, handler, target) {
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (var i = 0; i < handlerList.length; i++) {
            var oldObj = handlerList[i];

            if (oldObj.handler === handler && target === oldObj.target) {
              handlerList.splice(i--, 1);
            }
          }
        };

        _proto.targetOff = function targetOff(target) {
          for (var eventName in this.handlers) {
            var handlerList = this.handlers[eventName];

            if (handlerList) {
              for (var i = 0; i < handlerList.length; i++) {
                if (handlerList[i].target === target) {
                  handlerList.splice(i--, 1);
                }
              }
            }
          }
        };

        _proto.emit = function emit(eventName) {
          var handlerList = this.handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }

          for (var i = 0; i < handlerList.length; i++) {
            var objHandler = handlerList[i];

            if (objHandler && objHandler.handler && objHandler.target) {
              objHandler.handler.apply(objHandler.target, args);
            }
          }
        };

        return EventListenerManager;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/socket-manager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './logger.ts', './packet-manager.ts', './socket.io.js', './socket.io.mjs_cjs=&original=.js'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, logger, PacketManager, _cjsExports;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      PacketManager = module.PacketManager;
    }, function (module) {
      _cjsExports = module.default;
    }, null],
    execute: function () {
      cclegacy._RF.push({}, "3c358SOqTVH3aKWWAP87yO0", "socket-manager", undefined);

      var CLIENT_SOCKET_VERSION = 'v4';
      var SERVER_SOCKET_VERSION_V4 = 'v4';
      var SocketManager = exports('SocketManager', /*#__PURE__*/function () {
        /**
         * @param {*} otp : {
         *     url,
         *     token,
         * 
         *     numberRetrySendingMessage,
         * 
         *     forceNew,
         *     transports
         * 
         *     reconnectionDelay
         *     reconnectionDelayMax
         *     reconnectionAttempts
         * 
         *     nextTickIn //ms
         * }
         */
        function SocketManager(opt) {
          _defineProperty(this, "_opt", void 0);

          _defineProperty(this, "_emitter", void 0);

          _defineProperty(this, "_packetManager", void 0);

          _defineProperty(this, "_status", void 0);

          _defineProperty(this, "_subscribeChannelList", []);

          _defineProperty(this, "_pendingSubscribeChannelList", []);

          _defineProperty(this, "_countPingOverTime", 0);

          _defineProperty(this, "_serverSocketVersion", 'v3');

          _defineProperty(this, "_latency", {
            listLastLatency: [],
            maxLastLatency: 5,
            currentLatencyIdx: -1,
            averageLatency: 150
          });

          _defineProperty(this, "_reconnect_attempt", 0);

          _defineProperty(this, "_socket", null);

          this._opt = this._defaultOption(opt);
          this._emitter = new EventEmitter();
          this._packetManager = new PacketManager(this._opt.numberRetrySendingMessage);
          this._status = SocketManager.STATUS_INIT; //STATUS_INIT >>> STATUS_ALIVE >>> STATUS_KILLED

          this._initNewConnection();
        }

        var _proto = SocketManager.prototype;

        _proto._buildSocketUrlQueryParam = function _buildSocketUrlQueryParam() {
          return "token=" + this._opt.token + "&refreshToken=" + this._opt.refreshToken + "&sv=" + CLIENT_SOCKET_VERSION + "&env=" + this._opt.env + "&games=" + this._opt.games;
        };

        _proto._initNewConnection = function _initNewConnection() {
          var _this = this; // clear socket io cache.


          Object.keys(_cjsExports.managers).forEach(function (key) {
            delete _cjsExports.managers[key];
          });

          if (this._status == SocketManager.STATUS_KILLED) {
            logger.debug("SocketManager status KILLED, not init new connection!");
            return;
          }

          this._socket = _cjsExports(this._opt.url + "/?" + this._buildSocketUrlQueryParam(), {
            transports: this._opt.transports,
            reconnection: true,
            forceNew: this._opt.forceNew,
            reconnectionAttempts: this._opt.reconnectionAttempts || 10,
            reconnectionDelay: this._opt.reconnectionDelay || 500,
            randomizationFactor: 0,
            rememberUpgrade: true,
            timestampRequests: true
          });
          this._reconnect_attempt = 0;

          this._handleReponseMessage(this._socket);

          this._handleConnectionStatus(this._socket);

          this._subscribeChannelList.forEach(function (channelName) {
            _this._subscribe(channelName);
          });

          logger.debug("SocketManager - Init new connection!!!");
        };

        _proto._defaultOption = function _defaultOption(opt) {
          if (opt === void 0) {
            opt = {};
          }

          var defaultOpt = {}; //require opt

          defaultOpt.url = opt.url;
          defaultOpt.token = opt.token;
          defaultOpt.numberRetrySendingMessage = opt.numberRetrySendingMessage || 2; // times

          defaultOpt.forceNew = opt.forceNew || false;
          defaultOpt.transports = opt.transports || ['websocket'];
          defaultOpt.reconnectionDelay = opt.reconnectionDelay || 1000;
          defaultOpt.reconnectionDelayMax = opt.reconnectionDelayMax || 3000;
          defaultOpt.reconnectionAttempts = opt.reconnectionAttempts || 3;
          defaultOpt.nextTickIn = opt.nextTickIn || 200;
          defaultOpt.pingTimeoutWarning = 600;
          defaultOpt.env = opt.env || 'portal';
          defaultOpt.games = opt.games || 'all';
          return defaultOpt;
        };

        _proto._handleReponseMessage = function _handleReponseMessage(socket) {
          var _this2 = this;

          socket.on(SocketManager.SOCKET_RESPONSE_EVENT, function (message, ack) {
            if (ack) {
              ack();
            }
            /*
            message = {messageId : '', data : { event : '', data}};
            */


            if (message) {
              //logger.debug("SocketManagerNewMessage: %j", message);
              if (message.v == SERVER_SOCKET_VERSION_V4) {
                message = {
                  messageId: message.id,
                  data: {
                    event: message.da.ev,
                    svt: message.da.svt,
                    serviceId: message.da.sid,
                    eventId: message.da.eid,
                    data: message.da.da,
                    channelType: message.da.ch
                  },
                  version: message.v
                };
              }

              _this2._emitter.emit(SocketManager.NEW_MESSAGE_EVENT, message);
            }
          });
          socket.on("chat-event", function (chatMessage) {
            /*
                chatMessage = {messageId : "",  data : {serviceId : "", groupId : "", content : "", sender : "", time : 0}}
            */
            if (chatMessage) {
              logger.debug("SocketManager - chat-event: %j", chatMessage);

              _this2._emitter.emit(SocketManager.NEW_MESSAGE_EVENT, {
                messageId: chatMessage.messageId,
                data: {
                  event: "chat-event",
                  eventId: chatMessage.messageId,
                  serviceId: chatMessage.data.serviceId,
                  channelType: "presence",
                  data: chatMessage.data
                }
              });
            }
          });
          socket.on("socket-info", function (_ref) {
            var server = _ref.server;
            _this2._serverSocketVersion = server;
          });
          socket.on("update-token", function (_ref2) {
            var token = _ref2.token;

            _this2._emitter.emit(SocketManager.UPDATE_TOKEN, {
              token: token
            });

            _this2.updateToken(token);
          });
        };

        _proto._handleConnectionStatus = function _handleConnectionStatus(socket) {
          var _this3 = this;
          /* new approach */


          var intervalSendMessageId; // store current interval's id for sending message.

          var timeoutWarningDisconnected; // store current timeout's id for check disconnect network to show toast slow connection.

          var timeoutPopupDisconnected; // store current timeout's id for show popup disconnect

          var initIntervalSendingMessage = function initIntervalSendingMessage() {
            var hasInvalidMessage = false;
            var listMessageIdCanNotBeSent = [];

            _this3._packetManager.iteratePacket(function (packetId, message, counter) {
              // available message callback
              _this3._sendPacket(packetId, message, counter);
            }, function (packetId, message) {
              // not available message callback.
              listMessageIdCanNotBeSent.push(message.messageId);
              hasInvalidMessage = true;
            });

            if (hasInvalidMessage) {
              listMessageIdCanNotBeSent.forEach(function (messageId) {
                logger.debug("SocketManager - CAN_NOT_SEND_MESSAGE_EVENT : %s.", messageId);

                _this3._emitter.emit(SocketManager.CAN_NOT_SEND_MESSAGE_EVENT, messageId);
              });
            }

            if (_this3._packetManager.hasPacket()) {
              window.bufferLatecy = window.bufferLatecy || 5;
              var timeoutAck = _this3._latency.averageLatency * (100 + window.bufferLatecy) / 100;
              intervalSendMessageId = setTimeout(function () {
                initIntervalSendingMessage();
              }, timeoutAck);
            } else {
              intervalSendMessageId = setTimeout(function () {
                initIntervalSendingMessage();
              }, 150);
            }
          };

          var pauseIntervalSendingMessage = function pauseIntervalSendingMessage() {
            logger.debug('SocketManager - Pause interval sending message!');
            clearTimeout(intervalSendMessageId);
          };

          var clearIntervalSendingMessage = function clearIntervalSendingMessage() {
            logger.debug("SocketManager - Clear interval sending message!");
            clearTimeout(intervalSendMessageId);
            clearTimeout(timeoutWarningDisconnected);
            clearTimeout(timeoutPopupDisconnected);

            _this3._packetManager.clearAll();
          };
          /* end new approach */


          socket.on("connect", function () {
            _this3._status = SocketManager.STATUS_ALIVE;
            _this3._countPingOverTime = 0;

            if (_this3._pendingSubscribeChannelList.length > 0) {
              _this3._pendingSubscribeChannelList.forEach(function (channelName) {
                _this3.subscribe(channelName);
              });
            }

            _this3._pendingSubscribeChannelList = [];
            initIntervalSendingMessage();
            clearTimeout(timeoutWarningDisconnected);
            clearTimeout(timeoutPopupDisconnected);
            logger.debug("SockerManager - health-check CONNECTED!");

            _this3._emitter.emit(SocketManager.CONNECTED_EVENT);
          });
          socket.on("disconnect", function () {
            logger.debug("SocketManager - DISCONNECTED.");
            pauseIntervalSendingMessage();
            timeoutWarningDisconnected = setTimeout(function () {
              _this3._emitter.emit(SocketManager.DISCONNECTED_CONNECTION);
            }, 10000);
            timeoutPopupDisconnected = setTimeout(function () {
              _this3._emitter.emit(SocketManager.POPUP_DISCONNECTED_EVENT);
            }, 15000);
          });
          socket.on('reconnecting', function (attempt) {
            _this3._reconnect_attempt = attempt;
          });
          socket.on('reconnect_error', function (error) {
            // eslint-disable-line
            logger.debug("SockerManager - reconnect_error in " + _this3._reconnect_attempt + " times. " + _this3._opt.reconnectionAttempts);

            if (_this3._reconnect_attempt >= _this3._opt.reconnectionAttempts) {
              _this3._close();

              _this3._status = SocketManager.STATUS_KILLED;
              clearIntervalSendingMessage();
              logger.debug("SockerManager - emit event can-not-connect!");

              _this3._emitter.emit(SocketManager.CAN_NOT_CONNECT_EVENT);
            } else {
              _this3._emitter.emit(SocketManager.POOR_CONNECTION);
            }
          });
          socket.on('force-disconnect', function (message) {
            // eslint-disable-line
            logger.debug("SocketManager - force-disconnect >>> close connect!");

            _this3._close();

            _this3._status = SocketManager.STATUS_KILLED;
            clearIntervalSendingMessage();
            logger.debug("SocketManager - emit event can-not-connect!");

            _this3._emitter.emit(SocketManager.CAN_NOT_CONNECT_EVENT);
          });
          socket.on('ping', function () {
            logger.debug("ping");
          });
          socket.on('pong', function (latency) {
            if (latency > _this3._opt.pingTimeoutWarning) {
              _this3._countPingOverTime++;
            } else {
              _this3._countPingOverTime = 0;
            }

            if (_this3._countPingOverTime >= 5) {
              _this3._emitter.emit(SocketManager.POOR_CONNECTION);

              _this3._countPingOverTime = 0;
            } // calculate avagate latency


            _this3._latency.currentLatencyIdx = ++_this3._latency.currentLatencyIdx % _this3._latency.maxLastLatency;
            _this3._latency.listLastLatency[_this3._latency.currentLatencyIdx] = latency;
            _this3._latency.averageLatency = _this3._latency.listLastLatency.reduce(function (accumulator, currentValue) {
              return accumulator + currentValue;
            }, 0) / _this3._latency.listLastLatency.length;

            if (_this3._latency.averageLatency < 150) {
              _this3._latency.averageLatency = 150;
            }

            logger.debug("pong - latency: %s, avarage latency: %s", latency, _this3._latency.averageLatency);

            _this3._emitter.emit(SocketManager.PONG_EVENT, {
              latency: latency,
              averageLatency: _this3._latency.averageLatency
            });
          });
        };

        _proto._sendPacket = function _sendPacket(packetId, message, counter) {
          var _this4 = this;

          var BINARY_EVENT = 5;
          var NORMAL_EVENT = 2;

          if (this._socket.connected) {
            var sendedMessage = message;
            var event = SocketManager.SOCKET_REQUEST_EVENT_V3;

            if (this._serverSocketVersion === SERVER_SOCKET_VERSION_V4) {
              sendedMessage = {
                id: message.messageId,
                da: {
                  ev: message.data.event,
                  da: message.data.data,
                  v: message.data.version ? message.data.version : 1
                }
              };
              event = SocketManager.SOCKET_REQUEST_EVENT_V4;
            }

            var packet = {
              "type": hasBin.hasBinary(message) ? BINARY_EVENT : NORMAL_EVENT,
              "options": {
                "compress": true
              },
              "id": packetId,
              "data": [event, sendedMessage]
            }; // register ack with this packetId

            this._socket.acks[packetId] = function () {
              var originMessage = _this4._packetManager.ackPacket(packetId);

              if (originMessage) {
                logger.debug("SocketManager - send-message-success: %s", originMessage.messageId);

                _this4._emitter.emit(SocketManager.SEND_MESSAGE_SUCCESS_EVENT, originMessage.messageId);
              }
            }; // send packet.


            logger.debug("SocketManager - send message: counter=%s, messageId=%s", counter, message.messageId);

            this._socket.packet(packet);
          } else {
            this._packetManager.updateCounter(packetId, counter + 1);
          }
        };

        _proto.updateToken = function updateToken(token) {
          if (this._socket) {
            this._opt.token = token;
            this._socket.io.opts.query = this._buildSocketUrlQueryParam();
            this._socket.io.uri = this._opt.url + "/?" + this._buildSocketUrlQueryParam();
          }

          this._opt.token = token;
        }
        /**
         *
         * @param {*} message : {messageId, data: {event, data}}
         */
        ;

        _proto.sendMessage = function sendMessage(message) {
          logger.debug("SocketManager - Add message to queue: %j", message); // send packet immediately.

          var packetId = this._packetManager.addNew(message);

          this._sendPacket(packetId, message, 0);
        };

        _proto.removeSendingMessage = function removeSendingMessage(listMessageId) {
          listMessageId = listMessageId || [];

          this._packetManager.removeSendingMessage(function (message) {
            return listMessageId.includes(message.messageId);
          });
        }
        /**
         *
         * @param {*} chatMessage : {messageId, data : {serviceId, groupId, senderId, content}}
         */
        ;

        _proto.sendChatMessage = function sendChatMessage(chatMessage) {
          logger.debug("SocketManager - sendChatMessage: %j", chatMessage);

          this._socket.emit("chat-emit", chatMessage);
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.removeEvent = function removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        };

        _proto.subscribe = function subscribe(channelName) {
          if (this._subscribeChannelList.includes(channelName)) return;

          if (this._socket.connected) {
            this._subscribeChannelList.push(channelName);

            this._subscribe(channelName);
          } else {
            this._pendingSubscribeChannelList.push(channelName);
          }
        };

        _proto._subscribe = function _subscribe(channelName) {
          var socketNsp = _cjsExports(this._opt.url + "/" + channelName + "?token=" + this._opt.token + "&sv=" + CLIENT_SOCKET_VERSION);

          this._handleReponseMessage(socketNsp);
        };

        _proto.unSubscribe = function unSubscribe(channelName) {
          this._subscribeChannelList.splice(this._subscribeChannelList.indexOf(channelName), 1);

          this._unSubscribe(channelName);
        };

        _proto._unSubscribe = function _unSubscribe(channelName) {
          var socketNsp = this._socket.io.nsps["/" + channelName];

          if (socketNsp) {
            socketNsp.close();
            socketNsp.removeAllListeners();
            delete this._socket.io.nsps["/" + channelName];
          }
        };

        _proto._close = function _close() {
          var _this5 = this;

          Object.keys(this._socket.io.nsps).forEach(function (nsp) {
            var socketNsp = _this5._socket.io.nsps[nsp];

            if (socketNsp) {
              socketNsp.close();
              socketNsp.removeAllListeners();
              delete _this5._socket.io.nsps[nsp];
            }
          });
        };

        _proto.close = function close() {
          this._close();

          this._status = SocketManager.STATUS_KILLED;

          this._emitter.removeAllListeners();

          this._packetManager.clearAll();
        };

        _proto._reconnect = function _reconnect() {
          //logger.debug("SocketManager - Reconnect connection!");
          this._close();

          this._initNewConnection();
        };

        _proto.isAbleSendingData = function isAbleSendingData() {
          return this._status !== SocketManager.STATUS_KILLED;
        };

        _proto.getSocket = function getSocket() {
          return this._socket;
        };

        return SocketManager;
      }());

      _defineProperty(SocketManager, "SOCKET_REQUEST_EVENT", "q");

      _defineProperty(SocketManager, "SOCKET_RESPONSE_EVENT", "p");

      _defineProperty(SocketManager, "SOCKET_REQUEST_EVENT_V3", "q");

      _defineProperty(SocketManager, "SOCKET_REQUEST_EVENT_V4", "q4");

      _defineProperty(SocketManager, "CONNECTED_EVENT", "connected");

      _defineProperty(SocketManager, "CAN_NOT_CONNECT_EVENT", "can-not-connect");

      _defineProperty(SocketManager, "CAN_NOT_SEND_MESSAGE_EVENT", "can-not-send-message");

      _defineProperty(SocketManager, "SEND_MESSAGE_SUCCESS_EVENT", "send-message-success");

      _defineProperty(SocketManager, "NEW_MESSAGE_EVENT", "new-message");

      _defineProperty(SocketManager, "CHAT_MESSAGE_EVENT", "chat-message");

      _defineProperty(SocketManager, "PONG_EVENT", "ping-event");

      _defineProperty(SocketManager, "UPDATE_TOKEN", "update-token");

      _defineProperty(SocketManager, "POOR_CONNECTION", "poor-connection");

      _defineProperty(SocketManager, "POPUP_DISCONNECTED_EVENT", "popup-disconnected-event");

      _defineProperty(SocketManager, "DISCONNECTED_CONNECTION", "disconnected-connection");

      _defineProperty(SocketManager, "STATUS_INIT", "init");

      _defineProperty(SocketManager, "STATUS_ALIVE", "alive");

      _defineProperty(SocketManager, "STATUS_KILLED", "killed");

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/routing-event.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3d1f0d11sFJf45zRmA5H607", "routing-event", undefined);

      var RoutingEvent = exports('RoutingEvent', /*#__PURE__*/function () {
        function RoutingEvent() {
          _defineProperty(this, "_commandHandlerMap", void 0);

          _defineProperty(this, "_eventHandlerMap", void 0);

          this._commandHandlerMap = new HashMap();
          this._eventHandlerMap = new HashMap();
        }
        /**
         * 
         * @param {*} serviceId 
         * @param {*} commandHandler : {onAck(messageId), onCannotSendMessage(messageId)}
         * @param {*} eventHander : {onCannotConnect(), onConnected(), onEvent(event)}
         */


        var _proto = RoutingEvent.prototype;

        _proto.registerGame = function registerGame(serviceId, commandHandler, eventHander) {
          if (serviceId === void 0) {
            serviceId = '';
          } //logger.debug('RoutingEvent %s - registerGame.', serviceId);


          this._commandHandlerMap.set(serviceId, commandHandler);

          this._eventHandlerMap.set(serviceId, eventHander);
        };

        _proto.unregisterGame = function unregisterGame(serviceId) {
          if (serviceId === void 0) {
            serviceId = '';
          } //logger.debug('RoutingEvent %s - unregisterGame.', serviceId);


          this._commandHandlerMap["delete"](serviceId);

          this._eventHandlerMap["delete"](serviceId);
        };

        _proto.onAck = function onAck(serviceId, messageId) {
          if (serviceId === void 0) {
            serviceId = '';
          }

          if (messageId === void 0) {
            messageId = '';
          }

          var handler = this._commandHandlerMap.get(serviceId);

          if (handler && handler.onAck) {
            //logger.debug('RoutingEvent %s - ack: %s.', serviceId, messageId);
            handler.onAck(messageId);
          }
        };

        _proto.onCannotSendMessage = function onCannotSendMessage(serviceId, messageId) {
          if (serviceId === void 0) {
            serviceId = '';
          }

          if (messageId === void 0) {
            messageId = '';
          }

          var handler = this._commandHandlerMap.get(serviceId);

          if (handler) {
            //logger.debug('RoutingEvent %s - cannotSendMessage: %s.', serviceId, messageId);
            handler.onCannotSendMessage(messageId);
          }
        };

        _proto.onCannotConnect = function onCannotConnect() {
          var _this = this;

          this._eventHandlerMap.keys().forEach(function (serviceId) {
            if (serviceId === void 0) {
              serviceId = '';
            }

            var handler = _this._eventHandlerMap.get(serviceId);

            if (handler) {
              //logger.debug('RoutingEvent %s - cannotConnect.', serviceId);
              handler.onCannotConnect();
            }
          });
        };

        _proto.onNetworkStatus = function onNetworkStatus(status) {
          var _this2 = this;

          this._eventHandlerMap.keys().forEach(function (serviceId) {
            if (serviceId === void 0) {
              serviceId = '';
            }

            var handler = _this2._eventHandlerMap.get(serviceId);

            if (handler && handler.onNetworkStatus) {
              //logger.debug('RoutingEvent %s - onNetworkStatus: %s.', serviceId, status);
              handler.onNetworkStatus(status);
            }
          });
        };

        _proto.onNetworkWarning = function onNetworkWarning(status) {
          var _this3 = this;

          this._eventHandlerMap.keys().forEach(function (serviceId) {
            if (serviceId === void 0) {
              serviceId = '';
            }

            var handler = _this3._eventHandlerMap.get(serviceId);

            if (handler && handler.onNetworkWarning) {
              //logger.debug('RoutingEvent %s - onNetworkWarning: %s.', serviceId, status);
              handler.onNetworkWarning(status);
            }
          });
        };

        _proto.onShowPopupDisconnected = function onShowPopupDisconnected() {
          var _this4 = this;

          this._eventHandlerMap.keys().forEach(function (serviceId) {
            if (serviceId === void 0) {
              serviceId = '';
            }

            var handler = _this4._eventHandlerMap.get(serviceId);

            if (handler && handler.onShowPopupDisconnected) {
              //logger.debug('RoutingEvent %s - onShowPopupDisconnected.', serviceId);
              handler.onShowPopupDisconnected();
            }
          });
        };

        _proto.onCannotAuthen = function onCannotAuthen() {
          var _this5 = this;

          this._eventHandlerMap.keys().forEach(function (serviceId) {
            if (serviceId === void 0) {
              serviceId = '';
            }

            var handler = _this5._eventHandlerMap.get(serviceId);

            if (handler) {
              //logger.debug('RoutingEvent %s - onCannotAuthen.', serviceId);
              handler.onCannotAuthen();
            }
          });
        };

        _proto.onConnected = function onConnected() {
          var _this6 = this;

          this._eventHandlerMap.keys().forEach(function (serviceId) {
            if (serviceId === void 0) {
              serviceId = '';
            }

            var handler = _this6._eventHandlerMap.get(serviceId);

            if (handler) {
              //logger.debug('RoutingEvent %s - connected.', serviceId);
              handler.onConnected();
            }
          });
        };

        _proto.onPong = function onPong(data) {
          var _this7 = this;

          this._eventHandlerMap.keys().forEach(function (serviceId) {
            if (serviceId === void 0) {
              serviceId = '';
            }

            var handler = _this7._eventHandlerMap.get(serviceId);

            if (handler && handler.onPong) {
              handler.onPong(data);
            }
          });
        };

        _proto.onEvent = function onEvent(event) {
          var handler = this._eventHandlerMap.get(event.serviceId);

          if (handler) {
            //logger.debug('RoutingEvent %s - event %j', event.serviceId, event);
            handler.onEvent(event);
          }
        };

        _proto.cleanUp = function cleanUp() {
          //logger.debug('RoutingEvent - clean up command handler: %j.', this._commandHandlerMap.keys());
          //logger.debug('RoutingEvent - clean up event handler: %j.', this._eventHandlerMap.keys());
          this._commandHandlerMap.clear();

          this._eventHandlerMap.clear();
        };

        return RoutingEvent;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EV6FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './PoolManager1985.ts', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, getRotation, PoolManager1985, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
    }, function (module) {
      getRotation = module.getRotation;
    }, function (module) {
      PoolManager1985 = module.default;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "3d3e3jpcExP4Yn8KR1h7RAI", "EV6FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EV6FireBullet = exports('EV6FireBullet', (_dec = ccclass('EV6FireBullet'), _dec(_class = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(EV6FireBullet, _EnemyFireBullet);

        function EV6FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "target", null);

          _defineProperty(_assertThisInitialized(_this), "rotateSpeed", 50);

          _defineProperty(_assertThisInitialized(_this), "bulletQueue", []);

          _defineProperty(_assertThisInitialized(_this), "delayBulletFire", 0);

          return _this;
        }

        var _proto = EV6FireBullet.prototype;

        _proto.setupFire = function setupFire(data) {
          _EnemyFireBullet.prototype.setupFire.call(this, data);

          this.target = this.findTarget();
        };

        _proto.updateTimeToFireBullet = function updateTimeToFireBullet(dt) {
          if (this.isDie) return;
          if (this.bulletQueue.length == 0) return;
          this.delayBulletFire += dt;

          while (this.bulletQueue.length > 0 && this.delayBulletFire > this.bulletQueue[0].delay) {
            var _this$bulletQueue$shi = this.bulletQueue.shift(),
                rayIndex = _this$bulletQueue$shi.rayIndex,
                delay = _this$bulletQueue$shi.delay;

            this.fireBullet(rayIndex, delay);
          }
        };

        _proto.fire = function fire(timeLate) {
          if (timeLate === void 0) {
            timeLate = 0;
          }

          if (this.isDie) return;
          this.bulletQueue.length = 0;
          this.delayBulletFire = 0;
          var bulletCount = this.BulletCount;
          var bulletRay = 2;
          var delayTime = 0.06;

          for (var index = 0; index < bulletCount / bulletRay; ++index) {
            for (var ray = 0; ray < bulletRay; ++ray) {
              this.bulletQueue.push({
                delay: index * delayTime - timeLate,
                rayIndex: ray
              });
            }
          }
        };

        _proto.fireBullet = function fireBullet(rayIndex, delay) {
          if (this.isDie) return;
          var bullet = PoolManager1985.instance.getEnemyBullet(BulletConfig.EV6.PoolType);
          bullet.node.setParent(this.node.parent);
          var startPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[rayIndex].getWorldPosition());

          if (!this.target.isActive() || this.target.getIsWaitReborn()) {
            this.target = this.findTarget();
          }

          var angle = this.firePos[rayIndex].getChildByName("Sprite").angle - 90;
          bullet.init(startPos, angle, BulletConfig.EV6.Speed, delay - this.delayBulletFire);
        };

        _proto.rotateToTarget = function rotateToTarget(dt) {
          if (this.isDie) return;

          if (!this.target || !this.target.isActive()) {
            this.target = this.findTarget();
          }

          if (!this.target) return;
          var to = this.target.node.getPosition();
          var scaleX = this.Corner > 1 ? -1 : 1;

          for (var i = 0; i < this.firePos.length; ++i) {
            this.firePos[i].setScale(scaleX, 1, 1);
            var gun = this.firePos[i].getChildByName("Sprite");
            var from = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[i].getWorldPosition());
            var destAngle = getRotation(from, to) - 90;
            var angle = destAngle - gun.angle;
            if (angle > 180) angle -= 360;
            if (angle < -180) angle += 360;
            var sign = angle < 0 ? -1 : 1;
            gun.angle = gun.angle + sign * Math.min(Math.abs(angle), this.rotateSpeed * dt);
          }
        };

        _proto.onDie = function onDie() {
          this.bulletQueue.length = 0;
          this.delayBulletFire = 0;

          _EnemyFireBullet.prototype.onDie.call(this);
        };

        _proto.update = function update(dt) {
          _EnemyFireBullet.prototype.update.call(this, dt);

          this.rotateToTarget(dt);
          this.updateTimeToFireBullet(dt);
        };

        return EV6FireBullet;
      }(EnemyFireBullet), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/base-game-state-mamager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './logger.ts', './event-manager.ts', './message-manager.ts', './command-manager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, logger, EventManager, messageManager, CommandManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      EventManager = module.default;
    }, function (module) {
      messageManager = module.default;
    }, function (module) {
      CommandManager = module.CommandManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3ee66FLNMtEvYCBTiR74pdT", "base-game-state-mamager", undefined);

      var BaseGameStateManager = exports('BaseGameStateManager', /*#__PURE__*/function () {
        function BaseGameStateManager(serviceId, maxConcurrentCommand, playerInfo) {
          if (serviceId === void 0) {
            serviceId = '';
          }

          _defineProperty(this, "serviceId", '');

          _defineProperty(this, "playerInfo", void 0);

          _defineProperty(this, "_commandManager", void 0);

          _defineProperty(this, "_eventManager", void 0);

          _defineProperty(this, "_state", void 0);

          _defineProperty(this, "_emitter", void 0);

          _defineProperty(this, "latestExecuteCommandResult", void 0);

          this.serviceId = serviceId;
          this.playerInfo = playerInfo;
          this._commandManager = new CommandManager(this.serviceId, maxConcurrentCommand);
          this._eventManager = new EventManager();
          messageManager.registerGame(this.serviceId, this._commandManager, this._eventManager);
          this._state = BaseGameStateManager.STATE_INIT;
          this._emitter = new EventEmitter();
          this.joinGame();
          this.handleNetworkStatusEvent();
        }

        var _proto = BaseGameStateManager.prototype;

        _proto.executeCommand = function executeCommand(commandPayload) {
          var commandStrategy = this.buildCommandStrategy();

          var executeCommandResult = this.latestExecuteCommandResult = this._commandManager.executeCommand(commandPayload, commandStrategy);

          if (executeCommandResult.success) {
            var eventStrategy = this.buildEventSratergy();

            this._eventManager.waitForEvent(eventStrategy.timeWaitForEvent, this.verifyExpectedEvent.bind(this), this.timeoutExpectedEventHandler.bind(this));
          } else {
            // TODO
            logger.error("%j", executeCommandResult);
          }
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.cleanUp = function cleanUp() {
          this._commandManager.cleanUp();

          this._eventManager.cleanUp();

          messageManager.unregisterGame(this.serviceId);
        };

        _proto.joinGame = function joinGame() {
          if (this._state == BaseGameStateManager.STATE_INIT) {
            this.executeCommand({
              "data": {
                "serviceId": this.serviceId,
                "token": this.playerInfo.token,
                "delay": 0
              },
              "event": "client-join-game-request"
            });

            this._eventManager.registerEvent('client-join-game-result', this.handleJoinGameEvent.bind(this));
          }
        };

        _proto.handleJoinGameEvent = function handleJoinGameEvent(eventData) {
          if (this._state === BaseGameStateManager.STATE_INIT) {
            this._state = BaseGameStateManager.STATE_NORMAL;
            this.gotoNormalMode();

            this._emitter.emit(BaseGameStateManager.COMMON_EVENT_JOIN_GAME_SUCCESS, eventData.data);
          }
        };

        _proto.handleNetworkStatusEvent = function handleNetworkStatusEvent() {
          var _this = this;

          this._eventManager.registerEvent(EventManager.CAN_NOT_CONNECT, function () {
            _this._emitter.emit(BaseGameStateManager.COMMON_EVENT_NETWORK_PROBLEM);
          });

          this._eventManager.registerEvent(EventManager.CONNECTED, function () {
            _this._emitter.emit(BaseGameStateManager.COMMON_EVENT_NETWORK_CONNECTED);
          });
        };

        _proto.buildCommandStrategy = function buildCommandStrategy() {
          return {
            resendCount: 3,
            shouldWaitForACK: true,
            canBeDuplicated: false
          };
        };

        _proto.buildEventSratergy = function buildEventSratergy() {
          return {
            timeWaitForEvent: 10000
          };
        };

        _proto.verifyExpectedEvent = function verifyExpectedEvent(eventData) {
          if (this._state == BaseGameStateManager.STATE_INIT) {
            if (eventData.event === 'client-join-game-result') {
              var data = eventData.data;
              return data.commandId === this.latestExecuteCommandResult.commandId;
            }
          } else if (this._state === BaseGameStateManager.STATE_NORMAL) {
            if (eventData.event === 'state-updated') {
              var _data = eventData.data[this.serviceId].data;
              return _data.commandId === this.latestExecuteCommandResult.commandId;
            }
          } else if (this._state === BaseGameStateManager.STATE_PANIC) {
            if (eventData.event === 'state-pushed') {
              var _data2 = eventData.data;
              return _data2.commandId === this.latestExecuteCommandResult.commandId;
            }
          }

          return false;
        };

        _proto.timeoutExpectedEventHandler = function timeoutExpectedEventHandler() {
          switch (this._state) {
            case BaseGameStateManager.STATE_INIT:
              this.gotoDieMode();
              break;

            case BaseGameStateManager.STATE_NORMAL:
              this.gotoPanicMode();
              break;

            case BaseGameStateManager.STATE_PANIC:
              this.gotoDieMode();
              break;
          }
        };

        _proto.gotoPanicMode = function gotoPanicMode() {
          logger.debug('BaseGameStateManager gotoPanicMode!');
          this._state == BaseGameStateManager.STATE_PANIC;

          this._eventManager.removeAllEventListeners();

          this._eventManager.removeWaitingQueue();

          this._commandManager.clearRemainingCommand();

          this.handleNetworkStatusEvent();
        };

        _proto.gotoDieMode = function gotoDieMode() {
          logger.debug('BaseGameStateManager gotoDieMode!');
          this._state == BaseGameStateManager.STATE_DIE;
          this.cleanUp();
        };

        _proto.gotoNormalMode = function gotoNormalMode() {
          logger.debug('BaseGameStateManager gotoNormalMode!');
          this._state == BaseGameStateManager.STATE_NORMAL;

          this._eventManager.removeAllEventListeners();

          this._eventManager.removeWaitingQueue();

          this._commandManager.clearRemainingCommand();

          this.handleNetworkStatusEvent();
        };

        return BaseGameStateManager;
      }());

      _defineProperty(BaseGameStateManager, "STATE_INIT", 'INIT');

      _defineProperty(BaseGameStateManager, "STATE_NORMAL", 'NORMAL');

      _defineProperty(BaseGameStateManager, "STATE_PANIC", 'PANIC');

      _defineProperty(BaseGameStateManager, "STATE_RESUME", 'RESUME');

      _defineProperty(BaseGameStateManager, "STATE_DIE", 'DIE');

      _defineProperty(BaseGameStateManager, "COMMON_EVENT_JOIN_GAME_SUCCESS", 'JOIN_GAME_SUCCESS');

      _defineProperty(BaseGameStateManager, "COMMON_EVENT_NETWORK_CONNECTED", 'NETWORK_CONNECTED');

      _defineProperty(BaseGameStateManager, "COMMON_EVENT_NETWORK_PROBLEM", 'NETWORK_PROBLEM');

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfHUDController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfFishManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, SpriteFrame, Vec3, tween, Tween, Button, Sprite, Component, convertAssetArrayToObject, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, removeEvents, gfReferenceManager, gfDataStore, gfFishManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Vec3 = module.Vec3;
      tween = module.tween;
      Tween = module.Tween;
      Button = module.Button;
      Sprite = module.Sprite;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "3ff23aTV/5GFp1JKx+v1hhp", "gfHUDController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfHUDController = exports('GfHUDController', (_dec = ccclass('GfHUDController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(SpriteFrame), _dec7 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfHUDController, _Component);

        function GfHUDController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "fxBtnBelow", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fxBtnAbove", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listTextBtn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fishNotifyImg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listFishNotify", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listButton", _descriptor6, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_posButton", []);

          _defineProperty(_assertThisInitialized(_this), "_scaleFactor", 0.6);

          _defineProperty(_assertThisInitialized(_this), "_targetLockTime", 0);

          return _this;
        }

        var _proto = GfHUDController.prototype;

        _proto.onLoad = function onLoad() {
          this.targetButtonsOff(); //this.node.getBtnFreeze = this.getBtnFreeze.bind(this);

          gfDataStore.instance.setDataStore({
            "": gfBaseConfig.instance.TARGET_LOCK.NONE
          });
          gfReferenceManager.instance.setData({
            HUDLayer: this.node
          });
          this.initEvents();
          this._posButton = [new Vec3(-114, -316, 1), new Vec3(37, -316, 1), new Vec3(-37, -316, 1)];
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_LOCK_FISH_IMAGE, this.updateLockFishImg, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CHOOSE_FISH_BY_POINT, this.chooseFishByPoint, this);
          registerEvent(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, this.interactableHUD, this);
          registerEvent(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE, this.pauseAutoFire, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE, this.resumeAutoFire, this);
          registerEvent(gfBaseEvents.FISH_LAYER.BOSS_ON_GAME, this.changeTargetToBoss, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET, this.resumeOldTarget, this);
        };

        _proto.resumeOldTarget = function resumeOldTarget() {
          var oldTarget = gfDataStore.instance.getOldTarget();
          if (!oldTarget.targetState) return;

          if (oldTarget.targetState === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            if (oldTarget.LockFishKind >= 0) {
              this.updateLockFishImg(oldTarget.LockFishKind);
            } else {
              gfDataStore.instance.clearOldTarget();
              return;
            }
          }

          if (oldTarget.LockFishID) {
            var lockFish = gfFishManager.instance.getFishById(oldTarget.LockFishID);
            var lockFishID = lockFish ? lockFish.getId() : null;
            gfDataStore.instance.setSelfInfo({
              LockFish: lockFish,
              LockFishID: lockFishID
            });
          }

          if (oldTarget.LockFishKind >= 0) {
            gfDataStore.instance.setSelfInfo({
              LockFishKind: oldTarget.LockFishKind
            });
          }

          this.changeStatusGroupButton(oldTarget.targetState);
          gfDataStore.instance.clearOldTarget();
        };

        _proto.pauseAutoFire = function pauseAutoFire() {
          var TARGET_TYPE = gfBaseConfig.instance.TARGET_LOCK;

          if (!gfDataStore.instance.isAutoPaused() && gfDataStore.instance.getTargetState() !== TARGET_TYPE.NONE) {
            gfDataStore.instance.setDataStore({
              targetState: TARGET_TYPE.PAUSE
            });
          }

          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
        };

        _proto.resumeAutoFire = function resumeAutoFire() {
          if (gfDataStore.instance.getSelfInfo().skillLock) return;
          var oldTarget = gfDataStore.instance.getOldTarget();
          var TARGET_TYPE = gfBaseConfig.instance.TARGET_LOCK;
          var currentTargetState = gfDataStore.instance.getCurrentTargetStage();

          if (!currentTargetState && oldTarget.targetState !== TARGET_TYPE.NONE) {
            currentTargetState = oldTarget.targetState;
            gfDataStore.instance.setDataStore({
              targetState: TARGET_TYPE.PAUSE
            });
          }

          if (currentTargetState !== TARGET_TYPE.NONE && gfDataStore.instance.isAutoPaused()) {
            this.changeStatusGroupButton(currentTargetState);
          }
        };

        _proto.onClickAutoBot = function onClickAutoBot() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_AUTO_BOT); // PopupController.instance.showAutoBot();
        };

        _proto.onClickTargetBtn = function onClickTargetBtn(event, data) {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.changeStatusGroupButton(parseInt(data));
        };

        _proto.changeStatusGroupButton = function changeStatusGroupButton(type) {
          if (type === void 0) {
            type = gfBaseConfig.instance.TARGET_LOCK.NONE;
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();
          var TARGET_TYPE = gfBaseConfig.instance.TARGET_LOCK;
          this.unschedule(this.onAutoFire);
          this.unschedule(this.onAutoFireTargetAll);
          this.unschedule(this.onAutoTargetOne);
          this.targetButtonsOff();

          if (gfDataStore.instance.getTargetState() == type) {
            type = TARGET_TYPE.NONE;
          }

          gfDataStore.instance.setDataStore({
            targetState: type,
            currentTargetState: type
          });

          switch (type) {
            case TARGET_TYPE.NONE:
              this.resetLockFish();
              break;

            case TARGET_TYPE.AUTO_FIRE:
              this.targetButtonOn(TARGET_TYPE.AUTO_FIRE);
              this.schedule(this.onAutoFire, gfDataStore.instance.FireSpeed.TURBO);
              this.resetLockFish();
              break;

            case TARGET_TYPE.TARGET_ONE:
              this.targetButtonOn(TARGET_TYPE.TARGET_ONE);
              this.schedule(this.onAutoTargetOne, gfDataStore.instance.FireSpeed.TURBO);

              if (!selfInfo.LockFish && selfInfo.LockFishKind < 0) {
                gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.SHOW_NOTIFY_LOCK_FISH);
              } else {
                this.updateLockFishImg(selfInfo.LockFishKind);
              }

              break;

            case TARGET_TYPE.TARGET_ALL:
              gfDataStore.instance.setSelfInfo({
                isPriorityTargetBoss: true
              });

              if (selfInfo.TargetTime == null) {
                selfInfo.TargetTime = gfDataStore.instance.ChangeTarget;
              }

              this._targetLockTime = selfInfo.TargetTime;
              this.targetButtonOn(TARGET_TYPE.TARGET_ALL);
              this.schedule(this.onAutoFireTargetAll, gfDataStore.instance.FireSpeed.TURBO);
              break;
          }
        };

        _proto.changeTargetToBoss = function changeTargetToBoss() {
          gfDataStore.instance.setSelfInfo({
            isPriorityTargetBoss: true
          });
          this._targetLockTime = 0;
        };

        _proto.isBossKind = function isBossKind(fishKind) {
          return gfFishManager.instance.isBossKind(fishKind);
        };

        _proto.onAutoFire = function onAutoFire() {
          if (gfDataStore.instance.isAutoPaused()) {
            return;
          }

          var point = new Vec3(gfBaseConfig.instance.realSize.Width / 2, gfBaseConfig.instance.realSize.Height / 2, 1);
          var mousePos = gfDataStore.instance.getMousePos();

          if (mousePos) {
            point = mousePos;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
            point: point,
            lockFishID: -1
          });
        };

        _proto.checkChangeTargetCondition = function checkChangeTargetCondition() {
          var _gfDataStore$instance = gfDataStore.instance.getSelfInfo(),
              LockFish = _gfDataStore$instance.LockFish,
              LockFishKind = _gfDataStore$instance.LockFishKind;

          return !LockFish || !LockFish.isAvailable() || !this.isBossKind(LockFishKind) && this._targetLockTime <= 0;
        };

        _proto.onAutoFireTargetAll = function onAutoFireTargetAll() {
          if (gfDataStore.instance.isAutoPaused()) {
            return;
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();
          this._targetLockTime -= gfDataStore.instance.FireSpeed.TURBO;

          if (this.checkChangeTargetCondition()) {
            var lockFish = gfFishManager.instance.GetFishForTargetAll();
            var lockFishID = lockFish ? lockFish.getId() : null;
            gfDataStore.instance.setSelfInfo({
              LockFish: lockFish,
              LockFishID: lockFishID
            });
            this._targetLockTime = selfInfo.TargetTime;
          }

          if (selfInfo.LockFish && selfInfo.LockFish.isAvailable()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
              point: selfInfo.LockFish.node.position,
              lockFishID: selfInfo.LockFish.getId()
            });
          } else {
            this.resetLockFish();
          }
        };

        _proto.onAutoTargetOne = function onAutoTargetOne() {
          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.LockFishKind > -1) {
            if (!selfInfo.LockFish || !selfInfo.LockFish.isAvailable()) {
              var lockFish = gfFishManager.instance.getFishByType(selfInfo.LockFishKind);
              var lockFishID = lockFish ? lockFish.getId() : null;
              gfDataStore.instance.setSelfInfo({
                LockFish: lockFish,
                LockFishID: lockFishID
              });
            }

            if (selfInfo.LockFish && selfInfo.LockFish.isAvailable()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
                point: selfInfo.LockFish.node.position,
                lockFishID: selfInfo.LockFish._FishID
              });
            } else {
              this.changeStatusGroupButton(gfBaseConfig.instance.TARGET_LOCK.NONE);
              this.resetLockFish();
            }
          }
        };

        _proto.chooseFishByPoint = function chooseFishByPoint(point) {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          var fish = gfFishManager.instance.GetFishByPoint(point);
          if (!fish) return;
          gfDataStore.instance.setSelfInfo({
            LockFish: fish,
            LockFishKind: fish.getKind(),
            LockFishID: fish.getId()
          });

          if (gfDataStore.instance.getTargetState() === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
            this.updateLockFishImg(fish.getKind());
          } else if (gfDataStore.instance.getTargetState() === gfBaseConfig.instance.TARGET_LOCK.TARGET_ALL) {
            this._targetLockTime = selfInfo.TargetTime;
            gfDataStore.instance.setSelfInfo({
              isPriorityTargetBoss: this.isBossKind(fish.getKind())
            });
          }
        };

        _proto.resetLockFish = function resetLockFish() {
          gfDataStore.instance.setSelfInfo({
            LockFish: null,
            LockFishKind: -1,
            LockFishID: null
          });
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
        };

        _proto.targetButtonOn = function targetButtonOn(type) {
          if (this.fxBtnBelow) {
            this.fxBtnBelow.active = true;
            this.fxBtnBelow.setPosition(this._posButton[type - 1]);
          }

          if (this.fxBtnAbove) {
            this.fxBtnAbove.active = true;
            tween(this.fxBtnAbove).by(2, {
              angle: 360
            }).repeatForever().start();
            this.fxBtnAbove.setPosition(this._posButton[type - 1]);
          }

          this.listTextBtn[type - 1].active = false;
        };

        _proto.targetButtonsOff = function targetButtonsOff() {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH);
          this.fishNotifyImg.active = false;

          if (this.fxBtnBelow) {
            this.fxBtnBelow.active = false;
          }

          if (this.fxBtnAbove) {
            Tween.stopAllByTarget(this.fxBtnAbove);
            this.fxBtnAbove.active = false;
          }

          this.listTextBtn.forEach(function (item) {
            item.active = true;
          });
          this.listButton.forEach(function (button) {
            button.getComponent(Button).interactable = true;
          });
        };

        _proto.updateLockFishImg = function updateLockFishImg(fishKind) {
          if (fishKind === void 0) {
            fishKind = 0;
          }

          var assetFishes = convertAssetArrayToObject(this.listFishNotify);

          if (assetFishes[fishKind]) {
            this.fishNotifyImg.active = true;
            this.fishNotifyImg.getComponent(Sprite).spriteFrame = assetFishes[fishKind];
            Tween.stopAllByTarget(this.fishNotifyImg);
            tween(this.fishNotifyImg).to(0, {
              scale: new Vec3(this._scaleFactor, this._scaleFactor, this._scaleFactor)
            }).to(0.1, {
              scale: new Vec3(this._scaleFactor + 0.5, this._scaleFactor + 0.5, this._scaleFactor + 0.5)
            }).to(0, {
              scale: new Vec3(this._scaleFactor, this._scaleFactor, this._scaleFactor)
            }).start();
          }
        };

        _proto.interactableHUD = function interactableHUD(interactable) {
          if (interactable === void 0) {
            interactable = true;
          }

          if (!interactable) this.resetOnExit();
          this.listButton.forEach(function (button) {
            button.getComponent(Button).interactable = interactable;
          });
        } // getBtnFreeze() {
        //     return this.btnFreeze.node;
        // },
        ;

        _proto.resetOnExit = function resetOnExit() {
          this.unschedule(this.onAutoFire);
          this.unschedule(this.onAutoFireTargetAll);
          this.unschedule(this.onAutoTargetOne);
          gfDataStore.instance.setSelfInfo({
            LockFish: null,
            LockFishKind: -1,
            LockFishID: null,
            targetState: 0,
            currentTargetState: 0
          });
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH);
          this.targetButtonsOff();
          this.unscheduleAllCallbacks();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfHUDController;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fxBtnBelow", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fxBtnAbove", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listTextBtn", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fishNotifyImg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "listFishNotify", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "listButton", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AudioClipDatabase.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, CustomAudioClip, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "407a4S8Y3ZDSKdNroZdcVMR", "AudioClipDatabase", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AudioClipDatabase = exports('AudioClipDatabase', (_dec = ccclass('AudioClipDatabase'), _dec2 = property(CustomAudioClip), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AudioClipDatabase, _Component);

        function AudioClipDatabase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "audioList", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = AudioClipDatabase.prototype;

        _proto.onEnable = function onEnable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_AUDIO_DATABASE", true, {
            audioList: this.audioList
          }));
        };

        _proto.onDisable = function onDisable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_AUDIO_DATABASE", true, {
            audioList: null
          }));
        };

        return AudioClipDatabase;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "audioList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptFormationMain.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfUtilities.ts', './gfptDataType.ts', './gfptCoordGraphics.ts', './gfptSavedFormationList.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, BoxCollider2D, Prefab, EditBox, Toggle, Label, UITransform, sp, Intersection2D, v2, v3, instantiate, Component, gfEventEmitter, registerEvent, removeEvents, FORMATION_TYPE, ExportName, gEvent, gData, getMaxNumber, GfptCoordGraphics, GfptSavedFormationList;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      BoxCollider2D = module.BoxCollider2D;
      Prefab = module.Prefab;
      EditBox = module.EditBox;
      Toggle = module.Toggle;
      Label = module.Label;
      UITransform = module.UITransform;
      sp = module.sp;
      Intersection2D = module.Intersection2D;
      v2 = module.v2;
      v3 = module.v3;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      FORMATION_TYPE = module.FORMATION_TYPE;
      ExportName = module.ExportName;
      gEvent = module.gEvent;
      gData = module.gData;
      getMaxNumber = module.getMaxNumber;
    }, function (module) {
      GfptCoordGraphics = module.GfptCoordGraphics;
    }, function (module) {
      GfptSavedFormationList = module.GfptSavedFormationList;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _temp;

      cclegacy._RF.push({}, "410da06JupN9a/Vo2bi1FnT", "gfptFormationMain", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptFormationMain = exports('GfptFormationMain', (_dec = ccclass('GfptFormationMain'), _dec2 = property(Node), _dec3 = property(BoxCollider2D), _dec4 = property(Prefab), _dec5 = property(Node), _dec6 = property(EditBox), _dec7 = property(GfptCoordGraphics), _dec8 = property(GfptSavedFormationList), _dec9 = property(Toggle), _dec10 = property(Toggle), _dec11 = property(Label), _dec12 = property(EditBox), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptFormationMain, _Component);

        function GfptFormationMain() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "planeHolder", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "drawArea", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "planePrefab", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "board", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "cellSizeEB", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "coordGraphics", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "savedListView", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "toggleLine", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "toggleShape", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "cellLabel", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "ItemNameEB", _descriptor11, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "selectedPlane", void 0);

          _defineProperty(_assertThisInitialized(_this), "isHolding", false);

          _defineProperty(_assertThisInitialized(_this), "cellSize", 50);

          _defineProperty(_assertThisInitialized(_this), "savedList", void 0);

          _defineProperty(_assertThisInitialized(_this), "savedSelectedIndex", void 0);

          _defineProperty(_assertThisInitialized(_this), "undoList", []);

          _defineProperty(_assertThisInitialized(_this), "currentMode", FORMATION_TYPE.Shape);

          _defineProperty(_assertThisInitialized(_this), "exportName", ExportName.FORMATION);

          return _this;
        }

        var _proto = GfptFormationMain.prototype;

        _proto.start = function start() {
          this.node.on(Node.EventType.TOUCH_START, this.onUserStartTouch, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onUserMoveTouch, this);
          this.node.on(Node.EventType.TOUCH_END, this.onUserEndTouch, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onUserEndTouch, this);
          this.selectedPlane = this.planeHolder.children[0];
          this.node.on("ITEM_CLICKED", this.onItemClicked, this);
          this.importAllFormationData();

          var _this$drawArea$getCom = this.drawArea.getComponent(UITransform),
              width = _this$drawArea$getCom.width,
              height = _this$drawArea$getCom.height;

          this.savedListView.initBaseValues(0, width, height);
          registerEvent(gEvent.IMPORT_DATA, this.importAllFormationData, this);
          registerEvent(gEvent.IMPORT_ONE_DATA, this.importFormation, this);
        };

        _proto.importAllFormationData = function importAllFormationData() {
          this.savedList = gData.formation;

          if (this.savedList.length > 0) {
            this.savedListView.updateContent(this.savedList);
            this.savedSelectedIndex = this.savedList.length - 1;
            this.savedListView.select(this.savedSelectedIndex);
            this.importData(this.savedList[this.savedSelectedIndex]);
          }
        };

        _proto.importFormation = function importFormation(data) {
          var formation = data.formation;

          if (formation) {
            this.importData(formation, false);
          }
        };

        _proto.onBtnExportClicked = function onBtnExportClicked() {
          gfEventEmitter.instance.emit(gEvent.EXPORT_ONE_DATA, this.getExportData(), this.exportName);
        };

        _proto.onItemClicked = function onItemClicked(e) {
          e.propagationStopped = true;

          if (e.data.spineData) {
            this.planeHolder.children.forEach(function (plane) {
              var spine = plane.getChildByName('spine').getComponent(sp.Skeleton);
              spine.skeletonData = e.data.spineData;
              spine.setAnimation(0, 'idle', true);
            });
          } else {
            var index = e.data.index;
            this.clear();
            this.importData(this.savedList[index]);
            this.savedSelectedIndex = index;
          }
        };

        _proto.clear = function clear() {
          this.planeHolder.destroyAllChildren();
          this.planeHolder.removeAllChildren();
          this.board.setScale(1, 1, 1);
          this.selectedPlane = null;
          this.undoList.length = 0;
          this.coordGraphics.redraw(this.cellSize);
        };

        _proto.onUserEndTouch = function onUserEndTouch(e) {
          this.isHolding = false;

          if (this.selectedPlane) {
            this.selectedPlane.getChildByName('Dot').active = false;
          }
        };

        _proto.onUserMoveTouch = function onUserMoveTouch(e) {
          if (this.isHolding) {
            var _e$getUILocation = e.getUILocation(),
                x = _e$getUILocation.x,
                y = _e$getUILocation.y;

            if (Intersection2D.pointInPolygon(v2(x, y), this.drawArea.worldPoints)) {
              var pos = this.drawArea.getComponent(UITransform).convertToNodeSpaceAR(v3(x, y, 0));
              this.selectedPlane.position = v3(this.roundToCell(pos.x), this.roundToCell(pos.y), 0);
            } else {
              this.selectedPlane.worldPosition = v3(x, y, 0);
            }
          }
        };

        _proto.roundToCell = function roundToCell(x) {
          return Math.floor(x / (this.cellSize * this.board.scale.x) + 0.5) * this.cellSize;
        };

        _proto.onUserStartTouch = function onUserStartTouch(e) {
          if (this.currentMode == FORMATION_TYPE.Shape) {
            for (var i = 0; i < this.planeHolder.children.length; ++i) {
              var box = this.planeHolder.children[i].getComponent(BoxCollider2D);

              if (Intersection2D.pointInPolygon(e.getUILocation(), box.worldPoints)) {
                this.selectedPlane = box.node;
                this.selectedPlane.getChildByName('Dot').active = true;
                this.isHolding = true;
                return;
              }
            }
          }
        };

        _proto.onBtnAddClicked = function onBtnAddClicked() {
          this.selectedPlane = instantiate(this.planePrefab);
          this.planeHolder.addChild(this.selectedPlane);

          if (this.currentMode == FORMATION_TYPE.Line) {
            this.arrangeAllToLine();
          } else {
            var lastPos = v3(0, 0, 0);

            if (this.planeHolder.children.length > 1) {
              lastPos = this.planeHolder.children[this.planeHolder.children.length - 2].getPosition();
              lastPos.y += this.cellSize;
            }

            this.selectedPlane.setPosition(lastPos);
            this.isHolding = true;
          }
        };

        _proto.onCellSizeChange = function onCellSizeChange(event) {
          this.cellSize = Math.max(1, parseInt(this.cellSizeEB.string));
          this.cellSizeEB.string = this.cellSize.toString();
          this.coordGraphics.redraw(this.cellSize);

          if (this.currentMode == FORMATION_TYPE.Line) {
            this.arrangeAllToLine();
          }
        };

        _proto.onBtnZoomInClicked = function onBtnZoomInClicked() {
          var x = this.board.scale.x;
          this.board.setScale(x + 0.1, x + 0.1, 0);
          this.coordGraphics.redraw(this.cellSize);
        };

        _proto.onBtnZoomOutClicked = function onBtnZoomOutClicked() {
          var x = this.board.scale.x;
          if (x < 0.19) return;
          this.board.setScale(x - 0.1, x - 0.1, 0);
          this.coordGraphics.redraw(this.cellSize);
        };

        _proto.getExportData = function getExportData() {
          var pos = [];
          var count = this.planeHolder.children.length;
          var now = Date.now().toString();
          var name = this.exportName + " " + getMaxNumber(this.savedList);

          if (this.currentMode == FORMATION_TYPE.Shape) {
            for (var i = 0; i < count; ++i) {
              var position = this.planeHolder.children[i].position;
              pos.push({
                x: position.x,
                y: position.y
              });
            }

            return {
              id: now,
              name: name,
              type: this.currentMode,
              count: count,
              pts: pos
            };
          } else {
            return {
              id: now,
              name: name,
              type: this.currentMode,
              count: count,
              space: this.cellSize
            };
          }
        };

        _proto.importData = function importData(data, replaceName) {
          if (replaceName === void 0) {
            replaceName = true;
          }

          if (replaceName) {
            this.ItemNameEB.string = data.name;
          }

          for (var i = 0; i < data.count; ++i) {
            var plane = instantiate(this.planePrefab);
            this.planeHolder.addChild(plane);

            if (data.type == FORMATION_TYPE.Shape) {
              plane.setPosition(v3(data.pts[i].x, data.pts[i].y, 0));
              this.selectedPlane = this.planeHolder.children[0];
              this.toggleShape.isChecked = true;
            } else {
              this.cellSize = data.space;
              this.cellSizeEB.string = this.cellSize.toString();
              plane.setPosition(v3(0, i * this.cellSize, 0));
              this.toggleLine.isChecked = true;
            }
          }
        };

        _proto.onBtnSavedClicked = function onBtnSavedClicked() {
          var item = this.getExportData();
          this.ItemNameEB.string = item.name;
          this.savedList.push(item);
          this.savedListView.updateContent(this.savedList);
          this.savedSelectedIndex = this.savedList.length - 1;
          this.savedListView.select(this.savedSelectedIndex);
        };

        _proto.onBtnOverrideClicked = function onBtnOverrideClicked() {
          var item = this.getExportData();
          item.name = this.ItemNameEB.string;
          item.id = this.savedList[this.savedSelectedIndex].id;
          this.savedList[this.savedSelectedIndex] = item;
          this.savedListView.updateContent(this.savedList);
          this.savedListView.select(this.savedSelectedIndex);
        };

        _proto.onBtnDeleteClicked = function onBtnDeleteClicked() {
          if (this.savedSelectedIndex == 0) return;
          this.savedList.splice(this.savedSelectedIndex, 1);
          this.clear();
          this.savedListView.updateContent(this.savedList);

          if (this.savedSelectedIndex > 0) {
            --this.savedSelectedIndex;
          }

          if (this.savedList.length > 0) {
            this.savedListView.select(this.savedSelectedIndex);
            this.importData(this.savedList[this.savedSelectedIndex]);
          }
        };

        _proto.onBtnUndoClicked = function onBtnUndoClicked() {
          if (this.planeHolder.children.length == 0) return;
          var plane = this.planeHolder.children.pop();
          this.undoList.push(plane);
          plane.removeFromParent();
        };

        _proto.onBtnRedoClicked = function onBtnRedoClicked() {
          if (this.undoList.length == 0) return;
          var plane = this.undoList.pop();
          this.planeHolder.addChild(plane);
        };

        _proto.onCheckedBtnChanged = function onCheckedBtnChanged(evt) {
          if (evt.target.name == 'Line') {
            this.currentMode = FORMATION_TYPE.Line;
            this.cellLabel.string = "SPACE";
            this.arrangeAllToLine();
          } else {
            this.currentMode = FORMATION_TYPE.Shape;
            this.cellLabel.string = "CELL SIZE";
          }
        };

        _proto.arrangeAllToLine = function arrangeAllToLine() {
          for (var i = 0; i < this.planeHolder.children.length; ++i) {
            this.planeHolder.children[i].setPosition(0, i * this.cellSize, 0);
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfptFormationMain;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "planeHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "drawArea", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "planePrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "board", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "cellSizeEB", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "coordGraphics", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "savedListView", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "toggleLine", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "toggleShape", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "cellLabel", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "ItemNameEB", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfActionHelper.ts", ['cc', './utils.ts'], function (exports) {
  'use strict';

  var cclegacy, tween, UIOpacity, math, v3, Tween, bezier, v2, misc, setOpacity;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      math = module.math;
      v3 = module.v3;
      Tween = module.Tween;
      bezier = module.bezier;
      v2 = module.v2;
      misc = module.misc;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      cclegacy._RF.push({}, "41cdfMfFS5De7ZV3uy8io9a", "gfActionHelper", undefined);

      var fadeOut = exports('fadeOut', function fadeOut(time, easing) {
        return fadeTo(time, 0, easing);
      });
      var fadeIn = exports('fadeIn', function fadeIn(time, easing) {
        return fadeTo(time, 255, easing);
      });
      var fadeTo = exports('fadeTo', function fadeTo(time, opacity, easing) {
        if (opacity < 0 || opacity > 255) {
          opacity = 0;
        }

        var currentOpacity = 0;
        return tween().to(time, null, {
          easing: easing,
          onStart: function onStart(target) {
            var uiProps = target.getComponent(UIOpacity);

            if (!uiProps) {
              uiProps = target.addComponent(UIOpacity);
            }

            currentOpacity = uiProps.opacity;
          },
          onUpdate: function onUpdate(target, ratio) {
            var newOpacity = math.lerp(currentOpacity, opacity, ratio);
            setOpacity(target, newOpacity);
          }
        });
      });
      var delay = exports('delay', function delay(time) {
        return tween().delay(time);
      });
      var scaleTo = exports('scaleTo', function scaleTo(time, x, y, easing) {
        if (y == undefined) {
          y = x;
        }

        return tween().to(time, {
          scale: v3(x, y, 1)
        }, {
          easing: easing
        });
      });
      var rotateTo = exports('rotateTo', function rotateTo(time, angle, easing) {
        var startAngle = null;
        var realAngle = null;
        return tween().to(time, null, {
          easing: easing,
          onStart: function onStart(target) {
            startAngle = target.angle % 360;
            realAngle = angle - startAngle;
            if (realAngle > 180) realAngle -= 360;
            if (realAngle < -180) realAngle += 360;
          },
          onUpdate: function onUpdate(target, ratio) {
            target.angle = startAngle + realAngle * ratio;
          }
        });
      });
      var rotateBy = exports('rotateBy', function rotateBy(time, a, easing) {
        return tween().by(time, {
          angle: a
        }, {
          easing: easing
        });
      });
      var call = exports('call', function call(callFunc) {
        return tween().call(callFunc);
      });
      var v3f = exports('v3f', function v3f(f) {
        return v3(f, f, f);
      });
      var stopAllActions = exports('stopAllActions', function stopAllActions(target) {
        Tween.stopAllByTarget(target);
      });
      var moveTo = exports('moveTo', function moveTo(dur, x, y, z, easing) {
        if (y === void 0) {
          y = 0;
        }

        if (z === void 0) {
          z = 0;
        }

        return tween().to(dur, {
          position: v3(x, y, z)
        }, {
          easing: easing
        });
      });
      var moveBy = exports('moveBy', function moveBy(dur, x, y, z, easing) {
        if (y === void 0) {
          y = 0;
        }

        if (z === void 0) {
          z = 0;
        }

        return tween().by(dur, {
          position: v3(x, y, z)
        }, {
          easing: easing
        });
      });
      var bezierTo = exports('bezierTo', function bezierTo(dur, points, easing) {
        var start = v3(0, 0, 0);
        return tween().to(dur, null, {
          easing: easing,
          onStart: function onStart(target) {
            start = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var x = bezier(start.x, points[0].x, points[1].x, points[2].x, ratio);
            var y = bezier(start.y, points[0].y, points[1].y, points[2].y, ratio);
            target.setPosition(x, y, start.z);
          }
        });
      });
      var gfMoveBy = exports('gfMoveBy', function gfMoveBy(duration, x, y, timeSkipped, easing) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          easing: easing,
          onStart: function onStart(target) {
            startPos = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * x;
            var py = startPos.y + dt * y;
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfMoveTo = exports('gfMoveTo', function gfMoveTo(duration, x, y, timeSkipped, easing) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        return tween().to(duration, null, {
          easing: easing,
          onStart: function onStart(target) {
            startPos = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * (x - startPos.x);
            var py = startPos.y + dt * (y - startPos.y);
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfMoveByDistance = exports('gfMoveByDistance', function gfMoveByDistance(duration, distance, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        var deltaPos = v2(0, 0);
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            var node = target;
            startPos = node.getPosition();
            var angle = misc.degreesToRadians(node.angle);
            deltaPos = v2(distance * Math.cos(angle), distance * Math.sin(angle));
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var px = startPos.x + dt * deltaPos.x;
            var py = startPos.y + dt * deltaPos.y;
            target.setPosition(px, py, startPos.z);
          }
        });
      });
      var gfCircleBy = exports('gfCircleBy', function gfCircleBy(duration, center, radius, angle, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var startPos = v3(0, 0, 0);
        var baseAngle = 0;
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            var node = target;
            startPos = node.getPosition();
            baseAngle = Math.atan2(startPos.y - center.y, startPos.x - center.x);
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var radian = baseAngle + misc.degreesToRadians(angle) * dt;
            var x = radius * Math.cos(radian);
            var y = radius * Math.sin(radian);
            target.setPosition(x + center.x, y + center.y, startPos.z);
          }
        });
      });
      var gfBezierBy = exports('gfBezierBy', function gfBezierBy(duration, points, timeSkipped) {
        if (timeSkipped === void 0) {
          timeSkipped = 0;
        }

        var start = v3(0, 0, 0);
        return tween().to(duration, null, {
          onStart: function onStart(target) {
            start = target.getPosition();
          },
          onUpdate: function onUpdate(target, ratio) {
            var dt = (ratio * duration + timeSkipped) / (duration + timeSkipped);
            var x = bezier(start.x, start.x + points[0].x, start.x + points[1].x, start.x + points[2].x, dt);
            var y = bezier(start.y, start.y + points[0].y, start.y + points[1].y, start.y + points[2].y, dt);
            target.setPosition(x, y, start.z);
          }
        });
      });
      var shake = exports('shake', function shake(pos, duration, delay) {
        if (delay === void 0) {
          delay = 0;
        }

        var timeFrame = duration / 11;
        var posX = pos.x;
        var posY = pos.y;
        return tween().to(timeFrame, {
          position: v3(posX - 1, posY - 2, 0),
          angle: -1
        }) //10%
        .to(timeFrame, {
          position: v3(posX - 3, posY + 0, 0),
          angle: 1
        }) //20%
        .to(timeFrame, {
          position: v3(posX + 3, posY + 2, 0),
          angle: 0
        }) //30%
        .to(timeFrame, {
          position: v3(posX + 1, posY - 1, 0),
          angle: 1
        }) //40%
        .to(timeFrame, {
          position: v3(posX - 1, posY + 2, 0),
          angle: -1
        }) //50%
        .to(timeFrame, {
          position: v3(posX - 3, posY + 1, 0),
          angle: 0
        }) //60%
        .to(timeFrame, {
          position: v3(posX + 3, posY + 1, 0),
          angle: -1
        }) //70%
        .to(timeFrame, {
          position: v3(posX - 1, posY - 1, 0),
          angle: 1
        }) //80%
        .to(timeFrame, {
          position: v3(posX + 1, posY + 2, 0),
          angle: 0
        }) //90%
        .to(timeFrame, {
          position: v3(posX + 1, posY - 2, 0),
          angle: -1
        }) //100%
        .to(timeFrame, {
          position: v3(posX, posY, 0),
          angle: 0
        }) //100%
        .delay(delay);
      });
      var blink = exports('blink', function blink(duration, times, finalOpacity) {
        if (finalOpacity === void 0) {
          finalOpacity = 255;
        }

        var slice = 1.0 / times;
        return tween().to(duration, null, {
          onUpdate: function onUpdate(target, ratio) {
            var m = ratio % slice;
            setOpacity(target, m > slice / 2 ? 255 : 0);
          },
          onComplete: function onComplete(target) {
            setOpacity(target, finalOpacity);
          }
        });
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PathManager1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, _decorator, warn, log;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      log = module.log;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "421232Kv1FPnLvIiOjb1pCe", "PathManager1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PathManager1985 = exports('default', (_dec = ccclass('PathManager1985'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function () {
        function PathManager1985() {
          PathManager1985.instance = this;
          log('::Init Localization::');
        }

        var _proto = PathManager1985.prototype;

        _proto.initPathConfig = function initPathConfig(jsonPathConfig) {
          var pathConfig = jsonPathConfig;

          if (!pathConfig) {
            warn('Localize file failed');
            return;
          }

          for (var key in pathConfig) {
            PathManager1985.instance[key] = pathConfig[key];
          }
        };

        _proto.destroy = function destroy() {
          PathManager1985.instance = null;
        };

        return PathManager1985;
      }(), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishMoveActions.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfFishGroupData.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, tween, v3, error, v2, misc, gfBezierBy, gfCircleBy, gfMoveByDistance, gfMoveBy, gfMoveTo, rotateTo, gfFishGroupData;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      tween = module.tween;
      v3 = module.v3;
      error = module.error;
      v2 = module.v2;
      misc = module.misc;
    }, function (module) {
      gfBezierBy = module.gfBezierBy;
      gfCircleBy = module.gfCircleBy;
      gfMoveByDistance = module.gfMoveByDistance;
      gfMoveBy = module.gfMoveBy;
      gfMoveTo = module.gfMoveTo;
      rotateTo = module.rotateTo;
    }, function (module) {
      gfFishGroupData = module.default;
    }],
    execute: function () {
      exports('FISH_ACTION', void 0);

      cclegacy._RF.push({}, "4259czfmdNJr5sMWVhHKYwG", "gfFishMoveActions", undefined);

      var FISH_ACTION;

      (function (FISH_ACTION) {
        FISH_ACTION[FISH_ACTION["Delay"] = 0] = "Delay";
        FISH_ACTION[FISH_ACTION["gfBezierBy"] = 1] = "gfBezierBy";
        FISH_ACTION[FISH_ACTION["MoveBy"] = 2] = "MoveBy";
        FISH_ACTION[FISH_ACTION["CircleBy"] = 3] = "CircleBy";
        FISH_ACTION[FISH_ACTION["MoveByDistance"] = 4] = "MoveByDistance";
        FISH_ACTION[FISH_ACTION["RotateTo"] = 5] = "RotateTo";
        FISH_ACTION[FISH_ACTION["MoveTo"] = 6] = "MoveTo";
      })(FISH_ACTION || (FISH_ACTION = exports('FISH_ACTION', {})));

      var FishMoveActions = exports('FishMoveActions', /*#__PURE__*/function () {
        function FishMoveActions(startPosition, angle, timeSkipped) {
          if (angle === void 0) {
            angle = 0;
          }

          if (timeSkipped === void 0) {
            timeSkipped = 0;
          }

          _defineProperty(this, "timeSkipped", void 0);

          _defineProperty(this, "moveAction", void 0);

          _defineProperty(this, "startPosition", void 0);

          _defineProperty(this, "startAngle", void 0);

          this.timeSkipped = timeSkipped ? timeSkipped : gfFishGroupData.timeSkipped;
          this.moveAction = [];
          this.startPosition = v2(startPosition);
          this.startAngle = angle;
        }

        var _proto = FishMoveActions.prototype;

        _proto.getActions = function getActions() {
          var actionChain = tween();

          if (this.moveAction.length > 0) {
            for (var i = 0; i < this.moveAction.length; ++i) {
              actionChain.then(this.moveAction[i]);
            }

            return actionChain;
          }

          return actionChain.delay(0);
        };

        _proto.getStartPosition = function getStartPosition() {
          return this.startPosition;
        };

        _proto.getStartPositionV3 = function getStartPositionV3() {
          return v3(this.startPosition.x, this.startPosition.y, 0);
        };

        _proto.getStartAngle = function getStartAngle() {
          return this.startAngle;
        };

        _proto.appendAction = function appendAction(name, prop) {
          switch (name) {
            case FISH_ACTION.Delay:
              this.appendDelay(prop);
              break;

            case FISH_ACTION.gfBezierBy:
              this.appendGfBezierBy(prop);
              break;

            case FISH_ACTION.CircleBy:
              this.appendCircleBy(prop);
              break;

            case FISH_ACTION.MoveByDistance:
              this.appendMoveByDistance(prop);
              break;

            case FISH_ACTION.MoveBy:
              this.appendMoveBy(prop);
              break;

            case FISH_ACTION.MoveTo:
              this.appendMoveTo(prop);
              break;

            case FISH_ACTION.RotateTo:
              this.appendRotateTo(prop);
              break;

            default:
              error('Invalid action');
          }
        };

        _proto.appendDelay = function appendDelay(prop) {
          var time = prop.time;

          if (this.timeSkipped >= time) {
            this.timeSkipped -= time;
          } else {
            this.moveAction.push(tween().delay(time - this.timeSkipped));
            this.timeSkipped = 0;
          }
        };

        _proto.appendGfBezierBy = function appendGfBezierBy(prop) {
          var time = prop.time,
              points = prop.points;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.add(points.pop());
          } else {
            this.moveAction.push(gfBezierBy(time - this.timeSkipped, points, this.timeSkipped));
            this.timeSkipped = 0;
          }
        };

        _proto.appendCircleBy = function appendCircleBy(prop) {
          var time = prop.time,
              center = prop.center,
              radius = prop.radius,
              angle = prop.angle;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            var baseAngle = Math.atan2(this.startPosition.y - center.y, this.startPosition.x - center.x);
            var radian = baseAngle + angle * Math.PI / 180;
            var x = radius * Math.cos(radian);
            var y = radius * Math.sin(radian);
            this.startPosition = v2(x + center.x, y + center.y);
            this.startAngle += misc.radiansToDegrees(radian);
          } else {
            this.moveAction.push(gfCircleBy(time - this.timeSkipped, center, radius, angle, this.timeSkipped));
            this.timeSkipped = 0;
          }
        };

        _proto.appendMoveByDistance = function appendMoveByDistance(prop) {
          var time = prop.time,
              distance = prop.distance;
          var angle = misc.degreesToRadians(this.startAngle);

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            var vDelta = v2(distance * Math.cos(angle), distance * Math.sin(angle));
            this.startPosition = this.startPosition.add(vDelta);
          } else {
            this.moveAction.push(gfMoveByDistance(time - this.timeSkipped, distance, this.timeSkipped));
            this.timeSkipped = 0;
          }
        };

        _proto.appendMoveBy = function appendMoveBy(prop) {
          var time = prop.time,
              x = prop.x,
              y = prop.y,
              motion = prop.motion;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.add(v2(x, y));
          } else {
            var action = gfMoveBy(time - this.timeSkipped, x, y, this.timeSkipped, motion);
            this.moveAction.push(action);
            this.timeSkipped = 0;
          }
        };

        _proto.appendMoveTo = function appendMoveTo(prop) {
          var time = prop.time,
              x = prop.x,
              y = prop.y,
              motion = prop.motion;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.startPosition = this.startPosition.set(x, y);
          } else {
            var action = gfMoveTo(time - this.timeSkipped, x, y, this.timeSkipped, motion);
            this.moveAction.push(action);
            this.timeSkipped = 0;
          }
        };

        _proto.appendRotateTo = function appendRotateTo(prop) {
          var time = prop.time,
              angle = prop.angle;

          if (this.timeSkipped && this.timeSkipped >= time) {
            this.timeSkipped -= time;
            this.moveAction.push(rotateTo(0, angle));
            this.startAngle = angle;
          } else {
            this.moveAction.push(rotateTo(time - this.timeSkipped, angle));
            this.timeSkipped = 0;
          }
        };

        return FishMoveActions;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PanelFrameReward1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1988.ts', './ReferenceManager1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, _createClass, cclegacy, _decorator, Label, tween, v3, Component, fadeIn, fadeOut, gfEventEmitter, formatCoin, EventCode, ReferenceManager1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      formatCoin = module.formatCoin;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "442ect8hHNCxJHIgw2NeigO", "PanelFrameReward1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DURATION_TWEEN_COIN = 2.5;
      var PanelFrameReward1988 = exports('PanelFrameReward1988', (_dec = ccclass('PanelFrameReward1988'), _dec2 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PanelFrameReward1988, _Component);

        function PanelFrameReward1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "labelGoldReward", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isShowing", false);

          _defineProperty(_assertThisInitialized(_this), "_coinValue", 0);

          _defineProperty(_assertThisInitialized(_this), "_winValue", 0);

          _defineProperty(_assertThisInitialized(_this), "_tweenCoin", null);

          _defineProperty(_assertThisInitialized(_this), "_tweenShow", null);

          _defineProperty(_assertThisInitialized(_this), "_tweenHide", null);

          _defineProperty(_assertThisInitialized(_this), "_tweenHideLabel", null);

          _defineProperty(_assertThisInitialized(_this), "_tweenShowLabel", null);

          _defineProperty(_assertThisInitialized(_this), "_index", null);

          _defineProperty(_assertThisInitialized(_this), "_callbackHide", null);

          return _this;
        }

        var _proto = PanelFrameReward1988.prototype;

        _proto.setCallbackHide = function setCallbackHide(callback) {
          this._callbackHide = callback;

          if (!this._isShowing) {
            this._callbackHide && this._callbackHide();
          }
        };

        _proto.show = function show(GoldReward) {
          if (GoldReward <= 0) return;
          this._winValue += GoldReward;

          if (!this._isShowing) {
            //this.reset();
            this._tweenHide && this._tweenHide.stop();
            this._tweenHideLabel && this._tweenHideLabel.stop();
            this._isShowing = true;
            this.setActive(true);
            this.playAnimShow();
          } else {
            this.tweenCoin({
              winAmount: this._winValue
            });
          }
        };

        _proto.setActive = function setActive(isActive) {
          if (isActive === void 0) {
            isActive = false;
          }

          this.node.active = isActive;
          this.labelGoldReward.node.active = isActive;
        };

        _proto.setIndex = function setIndex(index) {
          this._index = index;
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.labelGoldReward.string = formatCoin(this._coinValue);
          this.labelGoldReward.node.angle = 0;
        };

        _proto.playAnimShow = function playAnimShow() {
          var _this2 = this;

          this._tweenShowLabel = tween(this.labelGoldReward.node);

          this._tweenShowLabel.then(fadeIn(0.25));

          this._tweenShowLabel.start();

          this._tweenShow = tween(this.node);

          this._tweenShow.to(0.25, {
            scale: v3(1, 1)
          }).call(function () {
            gfEventEmitter.instance.emit(EventCode.SOUND.START_COUNTING_LOOP);

            _this2.tweenCoin({
              winAmount: _this2._winValue
            });
          });

          this._tweenShow.start();
        };

        _proto.tweenCoin = function tweenCoin(data) {
          var _this3 = this;

          var winAmount = data.winAmount;
          var _coinValue = this.coinValue;

          if (this._tweenCoin) {
            this._tweenCoin.stop();
          }

          var winAmountTemp = winAmount - _coinValue;
          this._tweenCoin = tween(this).to(DURATION_TWEEN_COIN, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _coinValue + winAmountTemp * ratio;
            }
          }).delay(2).call(function () {
            _this3.hideAnimation();
          });

          this._tweenCoin.start();
        };

        _proto.hideAnimation = function hideAnimation() {
          var _this4 = this;

          if (!this._isShowing) {
            if (this.node.active) {
              this.setActive(false);
            }

            return;
          }

          var player = ReferenceManager1988.instance.getPlayerByIndex(this._index);
          this._isShowing = false;
          var winValue = this._winValue;
          this._tweenHideLabel = tween(this.labelGoldReward.node);

          this._tweenHideLabel.then(fadeOut(0.1));

          this._tweenHideLabel.start();

          this._tweenHide = tween(this.node).to(0.3, {
            scale: v3(0, 1)
          }).call(function () {
            gfEventEmitter.instance.emit(EventCode.SOUND.STOP_COUNTING_LOOP);

            if (player.isMe) {
              player.addToDisplayWallet(winValue);
            }

            _this4.finish();

            _this4._callbackHide && _this4._callbackHide();
          }).start();
        };

        _proto.finish = function finish() {
          this.setActive(false);
          this._coinValue = 0;
          this._winValue = 0;
        };

        _proto.reset = function reset() {
          this.labelGoldReward.string = "";
          this.node.scale.set(0, 1);
          this.labelGoldReward.node.active = false;
          this._tweenCoin && this._tweenCoin.stop();
          this._tweenShow && this._tweenShow.stop();
          this._tweenHide && this._tweenHide.stop();
          this._tweenShowLabel && this._tweenShowLabel.stop();
          this._tweenHideLabel && this._tweenHideLabel.stop();
          this._callbackHide = null;
          this._isShowing = false;
        };

        _createClass(PanelFrameReward1988, [{
          key: "coinValue",
          get: function get() {
            return this._coinValue;
          },
          set: function set(value) {
            this._coinValue = value;

            this._updateCoinWin();
          }
        }]);

        return PanelFrameReward1988;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelGoldReward", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetFX1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfNetFX.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, SetZIndex, gfNetFX;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfNetFX = module.gfNetFX;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "44806AOC4NOJ4NUqpp/UuA6", "NetFX1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NetFX1985 = exports('NetFX1985', (_dec = ccclass('NetFX1985'), _dec(_class = /*#__PURE__*/function (_gfNetFX) {
        _inheritsLoose(NetFX1985, _gfNetFX);

        function NetFX1985() {
          return _gfNetFX.apply(this, arguments) || this;
        }

        var _proto = NetFX1985.prototype;

        _proto.onLoad = function onLoad() {
          this._animationName = "animation";

          _gfNetFX.prototype.onLoad.call(this);
        };

        _proto.initAssets = function initAssets(config) {
          var _this = this;

          this.spine.skeletonData = config.asset;
          SetZIndex(this.node, this.zIndex);
          this.spine.setAnimation(0, this._animationName, false);
          this.spine.setCompleteListener(function () {
            _this.returnPool();
          });
        };

        return NetFX1985;
      }(gfNetFX)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNode.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Tween, v3, isValid, warn, UIOpacity, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Tween = module.Tween;
      v3 = module.v3;
      isValid = module.isValid;
      warn = module.warn;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "4488ceONJNEpowcEHtUHDRb", "gfNode", undefined);

      var ccclass = _decorator.ccclass;
      var gfNode = exports('default', (_dec = ccclass('gfNode'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNode, _Component);

        function gfNode() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "poolManager", void 0);

          return _this;
        }

        var _proto = gfNode.prototype;

        _proto.initAssets = function initAssets(config) {} //Called whenever object is get from Object Pool
        ;

        _proto.reuse = function reuse(args) {
          this.poolManager = args[0];
          this.node.active = true;
        };

        _proto.setPoolManager = function setPoolManager(poolMng) {
          this.poolManager = poolMng;
        } //Called whenever object is returned to Object Pool
        ;

        _proto.unuse = function unuse() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          this.setOpacity(255);
          this.node.scale = v3(1, 1, 1);
          this.node.angle = 0;
        };

        _proto.returnPool = function returnPool() {
          if (this.poolManager) {
            this.poolManager.putObj(this.node);
          } else {
            if (isValid(this.node)) this.node.destroy();else warn('non valid obj');
          }
        };

        _proto.setOpacity = function setOpacity(value) {
          var uiOpacity = this.node.getComponent(UIOpacity);
          if (uiOpacity === null) uiOpacity = this.node.addComponent(UIOpacity);
          if (uiOpacity.opacity != value) uiOpacity.opacity = value;
        };

        return gfNode;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBackgroundController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, SpriteFrame, Sprite, tween, Component, gfBaseEvents, fadeOut, fadeIn, gfEventEmitter, registerEvent, removeEvents, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "448e8PVDLlGxICPVN85eBPB", "gfBackgroundController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBackgroundController = exports('GfBackgroundController', (_dec = ccclass('GfBackgroundController'), _dec2 = property(SpriteFrame), _dec3 = property(Sprite), _dec4 = property(Sprite), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBackgroundController, _Component);

        function GfBackgroundController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrDataBackground", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "background1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "background2", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_curBackgroundID", -1);

          return _this;
        }

        var _proto = GfBackgroundController.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.GAME_CHANGE_ROUND, this.onChangeRound, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, this.onInitBackground, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.MINIBOSS_SMASH, this.onSlapTailEffect, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
        };

        _proto.onInitBackground = function onInitBackground(data) {
          var backgroundID = data.SceneKind;
          if (this._curBackgroundID == backgroundID) return;
          this._curBackgroundID = backgroundID;
          this.background1.spriteFrame = this.arrDataBackground[backgroundID];
          this.background2.spriteFrame = this.arrDataBackground[backgroundID];
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INIT_BUBBLE, backgroundID);
        };

        _proto.onChangeRound = function onChangeRound(data) {
          var _this2 = this;

          var backgroundID = data.SceneKind;
          var isFishGroupToNormal = data.isFishGroupToNormal;
          if (this._curBackgroundID == backgroundID) return;
          this._curBackgroundID = backgroundID;
          tween(this.background1.node).delay(1).then(fadeOut(1.5)).call(function () {
            _this2.background1.spriteFrame = _this2.arrDataBackground[_this2._curBackgroundID];
          }).then(fadeIn(0)).start();
          tween(this.background2.node).then(fadeOut(0)).call(function () {
            _this2.background2.spriteFrame = _this2.arrDataBackground[_this2._curBackgroundID];
          }).delay(1).then(fadeIn(1.5)).start();

          if (!isFishGroupToNormal) {
            if (this._curBackgroundID > 2) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION);
            } else {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_FISH_GROUP_TRANSITION, !!(gfDataStore.instance.getSelfDeskStation() > 1));
            }

            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CHANGE_BUBBLE, this._curBackgroundID); //@TODO move out fish
          }
        };

        _proto.onSlapTailEffect = function onSlapTailEffect(data) {// const { nodeSmashTail, scaleX } = data;
          // this.slapTailFX = cc.instantiate(this.slapTailEffect);
          // this.node.addChild(this.slapTailFX);
          // this.slapTailFX.setPosition(getPostionInOtherNode(this.node, nodeSmashTail));
          // this.slapTailFX.scaleX = -scaleX;
          // let animState = this.slapTailFX.getComponent(cc.Animation).play('SlapTailMiniBoss');
          // animState.off('finished');
          // animState.on('finished', () => {
          //     if(cc.isValid(this.slapTailFX)){
          //         this.slapTailFX.destroy();
          //         this.slapTailFX = null;
          //     }
          // });
        };

        _proto.resetOnExit = function resetOnExit() {// if(cc.isValid(this.slapTailFX)){
          //     this.slapTailFX.destroy();
          //     this.slapTailFX = null;
          // }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfBackgroundController;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrDataBackground", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "background1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "background2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemyEV61985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './SpineFish1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, SpineFish1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "449feAAhZVD45LdYpAUtrfO", "EnemyEV61985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemyEV61985 = exports('EnemyEV61985', (_dec = ccclass('EnemyEV61985'), _dec2 = property(Sprite), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_SpineFish) {
        _inheritsLoose(EnemyEV61985, _SpineFish);

        function EnemyEV61985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SpineFish.call.apply(_SpineFish, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listGun", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = EnemyEV61985.prototype;

        _proto.setColor = function setColor(color) {
          _SpineFish.prototype.setColor.call(this, color);

          this.listGun.forEach(function (child) {
            return child.color = color;
          });
        };

        return EnemyEV61985;
      }(SpineFish1985), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listGun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyScene.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, NodePool, resources, JsonAsset, SpriteAtlas, instantiate, director, sys, Component;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      NodePool = module.NodePool;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
      SpriteAtlas = module.SpriteAtlas;
      instantiate = module.instantiate;
      director = module.director;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

      cclegacy._RF.push({}, "45d5dpkekdB2pRnLKF2Wj5o", "LobbyScene", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LobbyScene = exports('LobbyScene', (_dec = ccclass('LobbyScene'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Prefab
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LobbyScene, _Component);

        function LobbyScene() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "iconHolder", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "iconPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gameSelection", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "iconPool", null);

          _defineProperty(_assertThisInitialized(_this), "multiSlotConfig", {});

          return _this;
        }

        var _proto = LobbyScene.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          this.node.on('RQ_PLAY_GAME', this.requestPlayGame.bind(this));
          this.iconPool = new NodePool();
          var loadCount = 0;

          var _completeLoad = function _completeLoad() {
            loadCount++;

            if (loadCount >= 2) {
              _this2.loadProjects();
            }
          };

          resources.load("jsons/LobbyConfig", JsonAsset, function (err, json) {
            LobbyScene.projectConfig = json;
            LobbyScene.projectConfig.addRef();

            _completeLoad();
          });
          resources.load("sprites/iconLobby", SpriteAtlas, function (err, atlas) {
            LobbyScene.iconList = atlas;
            LobbyScene.iconList.addRef();

            _completeLoad();
          });
        };

        _proto.getIcon = function getIcon() {
          var icon = this.iconPool.get();

          if (!icon) {
            icon = instantiate(this.iconPrefab);
          }

          return icon;
        };

        _proto.removeAllIcons = function removeAllIcons() {
          if (this.iconHolder.children) {
            while (this.iconHolder.children.length > 0) {
              this.iconPool.put(this.iconHolder.children[0]);
            }
          }
        };

        _proto.loadProjects = function loadProjects() {
          this.removeAllIcons();

          for (var id in LobbyScene.projectConfig.json) {
            var config = LobbyScene.projectConfig.json[id];

            if (config.displayLobby) {
              var item = this.getIcon();
              item.setParent(this.iconHolder);
              var icon = LobbyScene.iconList.getSpriteFrame(config.iconName);
              var itemScript = item.getComponent('ItemLobby');
              itemScript.setSprite(icon);
              itemScript.setGameConfig(id, config);
            }
          }
        };

        _proto.requestPlayGame = function requestPlayGame(ev) {
          var config = ev.config;

          if (ev.config.isMultiSlot) {
            director.loadScene("MultiSlot", function () {
              var multiSlotComp = director.getScene().getChildByName('Canvas').getChildByName('MultiSlot');

              if (multiSlotComp) {
                multiSlotComp.emit('LOAD_SELECTED_GAME', config.gameId);
              }
            });
          } else {
            director.loadScene(ev.config.startScene);
          }
        };

        _proto.onEnable = function onEnable() {
          if (sys.isNative) {
            sys.garbageCollect();
          }
        };

        _proto.onDestroy = function onDestroy() {
          LobbyScene.projectConfig.decRef();
          LobbyScene.iconList.decRef();
          LobbyScene.projectConfig = null;
          LobbyScene.iconList = null;
          this.removeAllIcons();
          this.iconPool.clear();
        };

        return LobbyScene;
      }(Component), _defineProperty(_class3, "projectConfig", null), _defineProperty(_class3, "iconList", null), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconHolder", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gameSelection", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AlignFullScreenButton.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, sys, Component, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "4607cFKlhRB97qftGoKlR4P", "AlignFullScreenButton", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AlignFullScreenButton = exports('AlignFullScreenButton', (_dec = ccclass('AlignFullScreenButton'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AlignFullScreenButton, _Component);

        function AlignFullScreenButton() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "alignFunc", null);

          _initializerDefineProperty(_assertThisInitialized(_this), "position", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = AlignFullScreenButton.prototype;

        _proto.start = function start() {
          if (sys.isBrowser && sys.isMobile) {
            var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              if (this.position == "TOP_RIGHT") {
                this.alignFunc = this.alignTopRight.bind(this);
              } else if (this.position == "BOT_LEFT") {
                this.alignFunc = this.alignBotLeft.bind(this);
              } //add your align here


              if (this.alignFunc) {
                this.alignFunc();
                window.addEventListener('resize', this.alignFunc);
              }
            }
          }
        };

        _proto.alignTopRight = function alignTopRight() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              enterFullscreen.classList.add("alignTopRight");
              enterFullscreen.classList.remove("alignBotRight");
              exitFullscreen.classList.add("alignTopRight");
              exitFullscreen.classList.remove("alignBotRight");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              enterFullscreen.classList.add("alignBotRight");
              enterFullscreen.classList.remove("alignTopRight");
              exitFullscreen.classList.add("alignBotRight");
              exitFullscreen.classList.remove("alignTopRight");
            }
          }
        };

        _proto.alignBotLeft = function alignBotLeft() {
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (window.innerWidth > window.innerHeight) {
            if (enterFullscreen && exitFullscreen) {
              enterFullscreen.classList.add("alignBotLeft");
              enterFullscreen.classList.remove("alignTopLeft");
              exitFullscreen.classList.add("alignBotLeft");
              exitFullscreen.classList.remove("alignTopLeft");
            }
          } else {
            if (enterFullscreen && exitFullscreen) {
              enterFullscreen.classList.add("alignTopLeft");
              enterFullscreen.classList.remove("alignBotLeft");
              exitFullscreen.classList.add("alignTopLeft");
              exitFullscreen.classList.remove("alignBotLeft");
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isBrowser && sys.isMobile && this.alignFunc) {
            window.removeEventListener('resize', this.alignFunc);
          }
        };

        return AlignFullScreenButton;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "position", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "TOP_RIGHT";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetFX.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, setOpacity, gfBaseConfig, SetZIndex, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "46da2apzGJKgZIuAjhoYrDv", "gfNetFX", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNetFX = exports('gfNetFX', (_dec = ccclass('gfNetFX'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfNetFX, _gfNode);

        function gfNetFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "spine", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_animationName", 'player');

          _defineProperty(_assertThisInitialized(_this), "zIndex", void 0);

          return _this;
        }

        var _proto = gfNetFX.prototype;

        _proto.onLoad = function onLoad() {
          this.spine.setAnimation(0, this._animationName, false);
        };

        _proto.initAssets = function initAssets(config) {
          var _this2 = this;

          this.spine.skeletonData = config.asset;

          if (config.kind == 2) {
            this._animationName = 'NoBang';
            this.zIndex = gfBaseConfig.instance.Z_INDEX.NETFX_ICE;

            if (!config.isMe) {
              setOpacity(this.node, 255 * 0.8);
              this.node.scale.set(0.7, 0.7, 0.7);
            }
          } else if (config.kind == 1) {
            this._animationName = 'animation';
            this.zIndex = gfBaseConfig.instance.Z_INDEX.NETFX_MINIBOSS;
          } else {
            this._animationName = config.isMe ? 'player' : 'user';
            this.zIndex = gfBaseConfig.instance.Z_INDEX.NETFX;
          }

          SetZIndex(this.node, this.zIndex);
          this.spine.setAnimation(0, this._animationName, false);
          this.spine.setCompleteListener(function () {
            _this2.returnPool();
          });
        };

        return gfNetFX;
      }(gfNode), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NavigationEnemyShip1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component, getRotation;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      getRotation = module.getRotation;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "47bc59LJR1DO4oR9QFOrLgF", "NavigationEnemyShip1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ANIM_NAME = {
        idle: "idle",
        side_left: "side_left",
        side_left_b: "side_left_b",
        side_left_idle: "side_left_idle",
        side_right: "side_right",
        side_right_b: "side_right_b",
        side_right_idle: "side_right_idle"
      };
      var NavigationEnemyShip1985 = exports('NavigationEnemyShip1985', (_dec = ccclass('NavigationEnemyShip1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NavigationEnemyShip1985, _Component);

        function NavigationEnemyShip1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "lastPos", void 0);

          _defineProperty(_assertThisInitialized(_this), "oldAngle", void 0);

          _defineProperty(_assertThisInitialized(_this), "curAnim", void 0);

          _defineProperty(_assertThisInitialized(_this), "deviation", 0.3);

          return _this;
        }

        var _proto = NavigationEnemyShip1985.prototype;

        _proto.onLoad = function onLoad() {
          var spine = this.node.getChildByName("mainSpine").getComponent(sp.Skeleton);
        };

        _proto.update = function update(deltaTime) {
          if (this.lastPos) {
            var newAngle = getRotation(this.node.position, this.lastPos);
            var spine = this.node.getChildByName("mainSpine").getComponent(sp.Skeleton);

            if (newAngle > this.oldAngle + this.deviation) {
              if (spine.animation != ANIM_NAME.side_right) {
                this.curAnim = ANIM_NAME.side_right;
                spine.setAnimation(0, this.curAnim, false);
              }
            } else if (newAngle < this.oldAngle - this.deviation) {
              if (spine.animation != ANIM_NAME.side_left) {
                this.curAnim = ANIM_NAME.side_left;
                spine.setAnimation(0, this.curAnim, false);
              }
            } else {
              if (spine.animation != ANIM_NAME.idle) {
                this.curAnim = ANIM_NAME.idle;
                spine.setAnimation(0, this.curAnim, true);
              }
            }

            this.oldAngle = newAngle;
          }

          this.lastPos = this.node.getPosition();
        };

        return NavigationEnemyShip1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CloudMove1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Vec3, UITransform, tween, v3, Component, stopAllActions;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "481efT0cb1Nt7KtLSRceLMb", "CloudMove1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CloudMove1985 = exports('CloudMove1985', (_dec = ccclass('CloudMove1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CloudMove1985, _Component);

        function CloudMove1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "scrollSpeed", 50);

          return _this;
        }

        var _proto = CloudMove1985.prototype;

        _proto.start = function start() {
          this.move();
        };

        _proto.move = function move() {
          var _this2 = this;

          var startPos = new Vec3(this.node.position);
          var distance = this.node.getComponent(UITransform).height + startPos.y;
          var time = distance / this.scrollSpeed;
          tween(this.node).repeatForever(tween().to(time, {
            position: v3(startPos.x, -this.node.getComponent(UITransform).height, 0)
          }).call(function () {
            _this2.node.position = startPos;
          })).start();
        };

        _proto.onDestroy = function onDestroy() {
          stopAllActions(this.node);
        };

        return CloudMove1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolManager1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './gfPoolManager.ts', './NodePoolConfig1988.ts', './ReferenceManager1988.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, instantiate, SetZIndex, POOL_TYPE, gfPoolManager, NodePoolConfig1988, ReferenceManager1988;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      POOL_TYPE = module.POOL_TYPE;
      gfPoolManager = module.default;
    }, function (module) {
      NodePoolConfig1988 = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "487fct/KTpBobZY8JXgCA/e", "PoolManager1988", undefined);

      var POOL_TYPE_EXTEND;

      (function (POOL_TYPE_EXTEND) {
        POOL_TYPE_EXTEND[POOL_TYPE_EXTEND["BorisStatic"] = POOL_TYPE.FINAL_INDEX + 1] = "BorisStatic";
        POOL_TYPE_EXTEND[POOL_TYPE_EXTEND["PoisonEffect"] = POOL_TYPE.FINAL_INDEX + 2] = "PoisonEffect";
      })(POOL_TYPE_EXTEND || (POOL_TYPE_EXTEND = {}));

      var PoolManager1988 = exports('default', /*#__PURE__*/function (_gfPoolManager) {
        _inheritsLoose(PoolManager1988, _gfPoolManager);

        function PoolManager1988(listPrefab) {
          var _this;

          _this = _gfPoolManager.call(this, listPrefab) || this;
          PoolManager1988.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = PoolManager1988.prototype;

        _proto.initPools = function initPools() {
          this.pools = []; //type, prefabName, mainComponent, count

          this.initPool(POOL_TYPE.SpineFish, "SpineFish1988", "SpineFish1988", 25);
          this.initPool(POOL_TYPE.SpriteFish, "SpriteFish1988", "SpriteFish1988", 25);
          this.initPool(POOL_TYPE.Coin, "Coin", "gfCoinFX", 10);
          this.initPool(POOL_TYPE.Bullet, "Bullet", "gfBullet", 10);
          this.initPool(POOL_TYPE.NetFX, "NetFX1988", "NetFX1988", 20);
          this.initPool(POOL_TYPE.LabelCoin, "LabelCoin1988", "CoinLabel1988", 5);
          this.initPool(POOL_TYPE.SmallExplosion, "SmallExplosion", "gfExplosionSpine", 50);
          this.initPool(POOL_TYPE_EXTEND.BorisStatic, "BorisStatic1988", "BorisStatic1988", 10);
          this.initPool(POOL_TYPE_EXTEND.PoisonEffect, "PoisonEffect1988", "PoisonEffect1988", 10); //init done

          this.listPrefab = null;
        };

        _proto.getNetFX = function getNetFX(kind) {
          var config = NodePoolConfig1988.instance.getNetFXConfig(kind.toString());
          if (!config) return null;
          var netfx = this.getObjectMainComponentByType(POOL_TYPE.NetFX);
          config.kind = kind; //netfx.initAssets(config);

          return {
            netFX: netfx,
            config: config
          };
        };

        _proto.getLabelCoin = function getLabelCoin(isMe) {
          if (isMe === void 0) {
            isMe = true;
          }

          var label = this.getObjectMainComponentByType(POOL_TYPE.LabelCoin);
          label.initAssets(isMe);
          return label;
        };

        _proto.createBorisStatic = function createBorisStatic(_ref) {
          var position = _ref.position,
              parent = _ref.parent,
              zIndex = _ref.zIndex,
              _ref$angle = _ref.angle,
              angle = _ref$angle === void 0 ? 0 : _ref$angle,
              _ref$scale = _ref.scale,
              scale = _ref$scale === void 0 ? {
            x: 0.9,
            y: 0.9,
            z: 0.9
          } : _ref$scale;
          var staticBoris = this.getObjectMainComponentByType(POOL_TYPE_EXTEND.BorisStatic);
          staticBoris.node.parent = parent;
          staticBoris.zIndex = zIndex;
          staticBoris.node.setPosition(position.x, position.y, zIndex);
          SetZIndex(staticBoris.node, zIndex);
          staticBoris.node.angle = angle;
          staticBoris.node.scale.x *= scale.x;
          staticBoris.node.scale.y *= scale.y;
          return staticBoris;
        };

        _proto.getPoisonEffect = function getPoisonEffect() {
          var effect = this.getObjectMainComponentByType(POOL_TYPE_EXTEND.PoisonEffect);
          effect.node.setParent(ReferenceManager1988.instance.getFishEffectLayer());
          return effect;
        };

        _proto.instantiateDragon = function instantiateDragon(prefab) {
          if (!this.dragon) {
            this.dragon = instantiate(prefab).getComponent('BossBoris1988');
          }
        };

        return PoolManager1988;
      }(gfPoolManager));

      _defineProperty(PoolManager1988, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha224.ts", ['cc', './crypto-core.ts', './sha256.ts'], function () {
  'use strict';

  var cclegacy, CryptoJS, SHA256;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }, function (module) {
      SHA256 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "493c45OpJJG1IEuQ6YUvsdh", "sha224", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var C_algo = C.algo; // var SHA256: any = C_algo.SHA256;

      /**
       * SHA-224 hash algorithm.
       */

      var SHA224 = C_algo.SHA224 = SHA256.extend({
        _doReset: function _doReset() {
          this._hash = new WordArray.init([0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);
        },
        _doFinalize: function _doFinalize() {
          var hash = SHA256._doFinalize.call(this);

          hash.sigBytes -= 4;
          return hash;
        }
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA224('message');
       *     var hash = CryptoJS.SHA224(wordArray);
       */

      C.SHA224 = SHA256._createHelper(SHA224);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA224(message, key);
       */

      C.HmacSHA224 = SHA256._createHmacHelper(SHA224);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameLayer1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1988.ts', './gfGameScheduler.ts', './gfMainFSM.ts', './gfGameLayer.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfEventEmitter, removeEvents, EventCode, gfGameScheduler, gfMainFSM, GfGameLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      removeEvents = module.removeEvents;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      GfGameLayer = module.GfGameLayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4a099yXe4BAya9ir/RI+B1c", "GameLayer1988", undefined);

      var ccclass = _decorator.ccclass;
      var GameLayer1988 = exports('GameLayer1988', (_dec = ccclass('GameLayer1988'), _dec(_class = /*#__PURE__*/function (_GfGameLayer) {
        _inheritsLoose(GameLayer1988, _GfGameLayer);

        function GameLayer1988() {
          return _GfGameLayer.apply(this, arguments) || this;
        }

        var _proto = GameLayer1988.prototype;

        _proto.start = function start() {
          _GfGameLayer.prototype.start.call(this);

          if (!gfMainFSM.instance.isStateExit()) {
            gfEventEmitter.instance.emit(EventCode.EFFECT_LAYER.PLAY_WAVE_TRANSITION_CUSTOM, true);
          }
        };

        _proto.onDestroy = function onDestroy() {
          this.resetOnExit();
          gfGameScheduler.destroy();
          removeEvents(this);
        } // catchFishBySkill(data) {
        //     const player = ReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
        //     if (player) {
        //         switch (data.SkillID) {
        //         case GameConfig.instance.SkillConfig.LASER:
        //             if (player.index > 1) data.Angle += 180;
        //             player.onPlayerFireLaser(data);
        //             break;
        //         case GameConfig.instance.SkillConfig.FISH_BOMB:
        //             Emitter.instance.emit(EventCode.FISH_LAYER.CATCH_FISH_BY_SKILL, data);
        //             break;
        //         case GameConfig.instance.SkillConfig.DRILL:
        //             if (player.index > 1) data.Angle += 180;
        //             player.onPlayerFireDrill(data);
        //             break;
        //         default:
        //             break;
        //         }
        //     }
        // }
        ;

        return GameLayer1988;
      }(GfGameLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBubble.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Node, Component, tween, gfBaseEvents, fadeOut, fadeIn, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Node = module.Node;
      Component = module.Component;
      tween = module.tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "4b1fapnhTFCyKZzqTCSwxzy", "gfBubble", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var POS_LIST = [[v3(-629, 13, 1), v3(-554, 75, 1), v3(-4, -319, 1), v3(582, 67, 1), v3(513, -275, 1)], //Background 0
      [v3(-620, 69, 1), v3(-333, 249, 1), v3(-500, -321, 1), v3(600, 98, 1), v3(301, -331, 1)], //Background 1
      [v3(-588, 134, 1), v3(-525, 250, 1), v3(-555, -302, 1), v3(572, -36, 1), v3(430, -320, 1)], //Background 2
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-629, 13, 1), v3(-554, 75, 1), v3(-4, -319, 1), v3(582, 67, 1), v3(513, -275, 1)], //Background 0
      [v3(-620, 69, 1), v3(-333, 249, 1), v3(-500, -321, 1), v3(600, 98, 1), v3(301, -331, 1)], //Background 1
      [v3(-588, 134, 1), v3(-525, 250, 1), v3(-555, -302, 1), v3(572, -36, 1), v3(430, -320, 1)], //Background 2
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)], //Background 3
      [v3(-464, 96, 1), v3(579, 78, 1), v3(-587, -259, 1), v3(-200, 184, 1), v3(466, -285, 1)] //Background 3
      ];
      var GfBubble = exports('GfBubble', (_dec = ccclass('GfBubble'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBubble, _Component);

        function GfBubble() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "BubbleNodes", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfBubble.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.INIT_BUBBLE, this.initBubble, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CHANGE_BUBBLE, this.changeBackground, this);
        };

        _proto.initBubble = function initBubble(index) {
          for (var i = 0; i < this.BubbleNodes.length; i++) {
            this.BubbleNodes[i].setPosition(POS_LIST[index][i]);
          }
        };

        _proto.changeBackground = function changeBackground(index) {
          var _this2 = this;

          var _loop = function _loop(i) {
            tween(_this2.BubbleNodes[i]).then(fadeOut(0.5)).delay(0.5).call(function () {
              _this2.BubbleNodes[i].setPosition(POS_LIST[index][i]);
            }).then(fadeIn(1.5)).start();
          };

          for (var i = 0; i < this.BubbleNodes.length; i++) {
            _loop(i);
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfBubble;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "BubbleNodes", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DropSpecialGunFX1998.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfDropSpecialGunFX.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, v3, gfDropSpecialGunFX;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      gfDropSpecialGunFX = module.gfDropSpecialGunFX;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "4b92bB7OAJJaIm8Z4JX++Mb", "DropSpecialGunFX1998", undefined);

      var ccclass = _decorator.ccclass;
      var DropSpecialGunFX1998 = exports('DropSpecialGunFX1998', (_dec = ccclass('DropSpecialGunFX1998'), _dec(_class = /*#__PURE__*/function (_gfDropSpecialGunFX) {
        _inheritsLoose(DropSpecialGunFX1998, _gfDropSpecialGunFX);

        function DropSpecialGunFX1998() {
          return _gfDropSpecialGunFX.apply(this, arguments) || this;
        }

        var _proto = DropSpecialGunFX1998.prototype;

        _proto.onDrop = function onDrop() {
          return tween().delay(.85);
        };

        _proto.onFly = function onFly() {
          return tween().parallel(tween().to(1, {
            position: this.endPosition
          }), tween().to(0.35, {
            scale: v3(2, 2, 2)
          }).to(0.65, {
            scale: v3(1, 1, 1)
          }));
        };

        _proto.onFinish = function onFinish() {
          var _this = this;

          return tween().delay(0.85).call(function () {
            _this.node.removeFromParent();

            _this.node.destroy();

            typeof _this.callBack === 'function' && _this.callBack(_this);
          });
        };

        return DropSpecialGunFX1998;
      }(gfDropSpecialGunFX)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineSkeletonDatabase.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, SlotCustomDataType, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      SlotCustomDataType = module.SlotCustomDataType;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "4c61f5p/VtDmLZpdt7Lvz/p", "SpineSkeletonDatabase", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineSkeletonDatabase = exports('SpineSkeletonDatabase', (_dec = ccclass('SpineSkeletonDatabase'), _dec2 = property({
        type: SlotCustomDataType
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpineSkeletonDatabase, _Component);

        function SpineSkeletonDatabase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "spineDataList", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SpineSkeletonDatabase.prototype;

        _proto.onEnable = function onEnable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_SPINE_DATABASE", true, {
            spineSkeletonDatabase: this
          }));
        };

        _proto.onDisable = function onDisable() {
          this.node.dispatchEvent(new CustomEvent("SET_UP_SPINE_DATABASE", true, {
            spineSkeletonDatabase: null
          }));
        };

        _proto.getSpineSkeletonData = function getSpineSkeletonData(spineName) {
          for (var i = 0; i < this.spineDataList.length; i++) {
            if (this.spineDataList[i].spineName === spineName) {
              return this.spineDataList[i].spineData;
            }
          }

          return null;
        };

        return SpineSkeletonDatabase;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spineDataList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemyFireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './ReferenceManager1985.ts', './DataStore1985.ts', './PoolManager1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, Node, Component, ReferenceManager1985, DataStore1985, PoolManager1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      PoolManager1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "4ccdaZOPP1MyoGCELutR5MO", "EnemyFireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemyFireBullet = exports('EnemyFireBullet', (_dec = ccclass('EnemyFireBullet'), _dec2 = property(Prefab), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EnemyFireBullet, _Component);

        function EnemyFireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "bulletPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "firePos", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "TimeFires", []);

          _defineProperty(_assertThisInitialized(_this), "Targets", []);

          _defineProperty(_assertThisInitialized(_this), "BulletCount", 0);

          _defineProperty(_assertThisInitialized(_this), "timeSpent", 0);

          _defineProperty(_assertThisInitialized(_this), "isDie", false);

          _defineProperty(_assertThisInitialized(_this), "Corner", 0);

          return _this;
        }

        var _proto = EnemyFireBullet.prototype;

        _proto.setupFire = function setupFire(data) {
          var _this2 = this;

          this.isDie = false;
          this.BulletCount = data.BulletCount;
          this.TimeFires = data.TimeFires;
          this.Targets = data.Targets;
          this.timeSpent = 0;

          if (data.isResume) {
            this.timeSpent = Math.max(0, (DataStore1985.instance.getTime() - data.BuildTick) / 1000);
            this.TimeFires.forEach(function (time) {
              if (_this2.timeSpent > _this2.TimeFires[0]) _this2.TimeFires.shift();
            });
          }

          this.Corner = data.Corner;
        };

        _proto.fire = function fire(timeLate) {};

        _proto.createBullet = function createBullet(_ref, srcPos, destPos, delay) {
          var PoolType = _ref.PoolType,
              Speed = _ref.Speed;

          if (delay === void 0) {
            delay = 0;
          }

          var bullet = PoolManager1985.instance.getEnemyBullet(PoolType);
          bullet.node.setParent(this.node.parent);
          bullet.init(srcPos, destPos, Speed, delay);
        };

        _proto.onDie = function onDie() {
          this.isDie = true;
          this.unscheduleAllCallbacks();
        };

        _proto.findTarget = function findTarget() {
          if (!this.Targets) return null;
          var player = null,
              i = 0;

          while ((!player || !player.isActive() || player.getIsWaitReborn()) && i < this.Targets.length) {
            player = ReferenceManager1985.instance.getPlayerByDeskStation(i);
            ++i;
          }

          return player;
        };

        _proto.update = function update(dt) {
          this.updateTimeToFire(dt);
        };

        _proto.updateTimeToFire = function updateTimeToFire(dt) {
          if (this.isDie || !this.TimeFires || this.TimeFires.length == 0) return;
          this.timeSpent += dt;

          if (this.timeSpent >= this.TimeFires[0]) {
            this.fire(this.timeSpent - this.TimeFires[0]);
            this.TimeFires.shift();
          }
        };

        return EnemyFireBullet;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bulletPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "firePos", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EV5FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "4d14b1NSRpOVbFcjVIHCD/T", "EV5FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EV5FireBullet = exports('EV5FireBullet', (_dec = ccclass('EV5FireBullet'), _dec(_class = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(EV5FireBullet, _EnemyFireBullet);

        function EV5FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "target", null);

          return _this;
        }

        var _proto = EV5FireBullet.prototype;

        _proto.setupFire = function setupFire(data) {
          _EnemyFireBullet.prototype.setupFire.call(this, data);

          this.target = this.findTarget();
        };

        _proto.fire = function fire() {
          var _this2 = this;

          var _loop = function _loop(i) {
            _this2.scheduleOnce(function () {
              var finalPosition = _this2.target.node.getPosition();

              var index = i % 2 == 0 ? 0 : 1;

              var startPos = _this2.node.parent.getComponent(UITransform).convertToNodeSpaceAR(_this2.firePos[index].getWorldPosition());

              _this2.createBullet(BulletConfig.EV5, startPos, finalPosition);
            }, i / 2);
          };

          for (var i = 0; i < this.BulletCount; ++i) {
            _loop(i);
          }
        };

        return EV5FireBullet;
      }(EnemyFireBullet), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/player-info-state-manager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './logger.ts', './event-manager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, logger, EventManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      EventManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4dbe85PP89NHaV/qAJ1VLLb", "player-info-state-manager", undefined);

      var PlayerInfoStateManager = /*#__PURE__*/function () {
        function PlayerInfoStateManager() {
          var _this = this;

          _defineProperty(this, "wallet", {
            amount: 0,
            availableAmount: 0,
            version: 0,
            pAmount: 0,
            pAvailableAmount: 0,
            pVersion: 0
          });

          _defineProperty(this, "token", null);

          _defineProperty(this, "userId", null);

          _defineProperty(this, "displayName", null);

          _defineProperty(this, "_eventManager", void 0);

          _defineProperty(this, "_emitter", void 0);

          this._eventManager = new EventManager();
          this._emitter = new EventEmitter();

          this._eventManager.registerEvent('wallet-updated', function (eventData) {
            _this.setWalletBalance(eventData);
          });

          this._eventManager.registerEvent('wud-pAmt', function (eventData) {
            _this.setWalletBalance(eventData);
          });

          this._eventManager.registerEvent('user-logged-out', function (eventData) {
            logger.debug('user-logged-out: %j', eventData);

            _this._emitter.emit(eventData.event, eventData.data);
          });

          this._eventManager.registerEvent('state-pushed', function (eventData) {
            if (eventData.serviceId == 'wallet-service-id') {
              _this.setWalletBalance(eventData);
            }
          });
        }

        var _proto = PlayerInfoStateManager.prototype;

        _proto._registerSystemState = function _registerSystemState(messageManager) {
          var _this2 = this;

          messageManager.registerGame('wallet-service-id', {
            onAck: function onAck() {},
            onCannotSendMessage: function onCannotSendMessage() {}
          }, {
            onConnected: function onConnected() {
              if (_this2.getUserId()) {
                messageManager.sendMessage('wallet-service-id', {
                  event: 'client-state-request',
                  data: {
                    serviceId: 'wallet-service-id',
                    objectId: _this2.getUserId(),
                    stateType: 'wallet-type',
                    token: _this2.getToken(),
                    commandId: Date.now() + ''
                  }
                });
              }
            },
            onCannotConnect: function onCannotConnect() {
              _this2.wallet = {
                amount: 0,
                version: 0
              };
              _this2.token = null;
              _this2.userId = null;
              _this2.displayName = null;
            },
            onCannotAuthen: function onCannotAuthen() {},
            onEvent: this._eventManager.onEvent.bind(this._eventManager)
          });
          messageManager.registerGame('0000', {}, {
            onConnected: function onConnected() {},
            onCannotConnect: function onCannotConnect() {
              _this2._emitter.emit('player-can-not-connect');
            },
            onCannotAuthen: function onCannotAuthen() {
              _this2._emitter.emit('player-can-not-authen');
            },
            onEvent: this._eventManager.onEvent.bind(this._eventManager)
          });
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.removeEvent = function removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        }
        /**
         * 
         * @param data = 
         *  - full: {"amount":30282225,"availableAmount":30282225,"version":1638679567587,"pAmt":9985000,"pAvaiAmt":9985000,"pVer":1638679580229}
         *  - only main: {"amount":30272225,"availableAmount":30272225,"version":1638680030799}
         *  - only promotion: {"pAmt":9975000,"pAvaiAmt":9975000,"pVer":1638679951942}
         */
        ;

        _proto.setWalletBalance = function setWalletBalance(_ref) {
          var data = _ref.data;
          var isUpdated = false;

          if (!isNaN(data.version) && !isNaN(data.amount)) {
            if (!this.wallet.version || this.wallet.version <= data.version) {
              this.wallet.amount = data.amount || 0;
              this.wallet.availableAmount = data.availableAmount || 0;
              this.wallet.version = data.version;
              isUpdated = true;
            } else {
              logger.debug('my wallet CANNOT update main wallet. current version [%s], new version [%s], wallet: %j', this.wallet.version, data.version, this.wallet);
            }
          }

          if (!isNaN(data.pVer) && !isNaN(data.pAmt)) {
            if (!this.wallet.pVersion || this.wallet.pVersion <= data.pVer) {
              this.wallet.pAmount = data.pAmt || 0;
              this.wallet.pAvailableAmount = data.pAvaiAmt || 0;
              this.wallet.pVersion = data.pVer;
              isUpdated = true;
            } else {
              logger.debug('my wallet CANNOT update promotion wallet. current version [%s], new version [%s], wallet: %j', this.wallet.pVersion, data.pVer, this.wallet);
            }
          }

          if (isUpdated) {
            logger.debug('my wallet update: %j', this.wallet);

            this._emitter.emit('wallet-updated');
          }
        };

        _proto.getWalletBalance = function getWalletBalance() {
          return Math.floor(this.wallet.amount);
        };

        _proto.getWallets = function getWallets() {
          var walletNormal = Math.floor(this.wallet.amount || 0);
          var walletPromote = Math.floor(this.wallet.pAmount || 0);
          return {
            amount: walletNormal,
            pAmount: walletPromote
          };
        };

        _proto.setUserId = function setUserId(userId) {
          this.userId = userId;
          logger.setUserId(userId);
        };

        _proto.getUserId = function getUserId() {
          return this.userId;
        };

        _proto.setToken = function setToken(token) {
          this.token = token;
        };

        _proto.getToken = function getToken() {
          return this.token;
        };

        _proto.setDisplayName = function setDisplayName(displayName) {
          this.displayName = displayName;
        };

        _proto.getDisplayName = function getDisplayName() {
          return this.displayName;
        };

        _proto.cleanUp = function cleanUp() {
          this._emitter.removeAllListeners();
        };

        return PlayerInfoStateManager;
      }();

      var playerInfoStateManager = exports('default', new PlayerInfoStateManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/animateNumberLabel.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, formatMoney, formatWalletMoney;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
      formatWalletMoney = module.formatWalletMoney;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "4eb529uDf5AQaMqTM8WSBKT", "animateNumberLabel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimateNumberLabel = exports('AnimateNumberLabel', (_dec = ccclass('AnimateNumberLabel'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimateNumberLabel, _Component);

        function AnimateNumberLabel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "currentValue", void 0);

          _defineProperty(_assertThisInitialized(_this), "timer", void 0);

          return _this;
        }

        var _proto = AnimateNumberLabel.prototype;

        _proto.onLoad = function onLoad() {
          this.node.onUpdateValue = this.onUpdateValue.bind(this);
          this.node.onUpdateWallet = this.onUpdateWallet.bind(this);
          this.node.onUpdateWinValue = this.onUpdateWinValue.bind(this);
          this.node.resetValue = this.resetValue.bind(this);
        };

        _proto.resetValue = function resetValue() {
          if (!this.node) return;
          clearInterval(this.timer);
          var label = this.node.getComponent(Label);
          label.string = '';
          this.currentValue = 0;
        };

        _proto.onUpdateValue = function onUpdateValue(end, animationDuration, acceptRunDown, prefix, suffixes) {
          var _this2 = this;

          if (animationDuration === void 0) {
            animationDuration = 3000;
          }

          if (acceptRunDown === void 0) {
            acceptRunDown = true;
          }

          if (prefix === void 0) {
            prefix = "";
          }

          if (suffixes === void 0) {
            suffixes = "";
          }

          clearInterval(this.timer);
          if (!this.node) return;
          var label = this.node.getComponent(Label);
          var start = this.currentValue ? this.currentValue : 0;

          if (!acceptRunDown && end < start) {
            this.currentValue = end;
            label.string = prefix + formatMoney(this.currentValue) + suffixes;
            return;
          } // assumes integer values for start and end


          var range = end - start; // no timer shorter than 50ms (not really visible any way)

          var minTimer = 50; // calc step time to show all interediate values

          var stepTime = Math.abs(Math.floor(animationDuration / range)); // never go below minTimer

          stepTime = Math.max(stepTime, minTimer); // get current time and calculate desired end time

          var startTime = new Date().getTime();
          var endTime = startTime + animationDuration;
          this.timer;

          var run = function run() {
            var now = new Date().getTime();
            var remaining = Math.max((endTime - now) / animationDuration, 0);
            var value = Math.round(end - remaining * range);
            _this2.currentValue = value;
            label.string = prefix + formatMoney(value) + suffixes;

            if (value == end) {
              clearInterval(_this2.timer);
            }
          };

          this.timer = setInterval(run, stepTime);
          run();
        };

        _proto.onUpdateWinValue = function onUpdateWinValue(end, animationDuration, callbackWin, isSkip, millisecond, timeUpdate, superWinRate, megaWinRate) {
          var _this3 = this;

          if (animationDuration === void 0) {
            animationDuration = 3000;
          }

          if (millisecond === void 0) {
            millisecond = 1000;
          }

          if (timeUpdate === void 0) {
            timeUpdate = 50;
          }

          if (superWinRate === void 0) {
            superWinRate = 50;
          }

          if (megaWinRate === void 0) {
            megaWinRate = 30;
          }

          clearInterval(this.timer);
          if (!this.node) return;
          var timeRate = millisecond / timeUpdate;
          this.currentValue = this.currentValue || 0;
          var valuePerTimes = Math.round(end / (animationDuration / millisecond * timeRate)); // a = ((s - v0 * t) * 2) / t^2

          var valueAccelerator = (end - valuePerTimes * timeUpdate) * 2 / Math.pow(timeUpdate, 2);

          var run = function run() {
            var label = _this3.node.getComponent(Label);

            _this3.currentValue = Math.round(_this3.currentValue <= end / 2 ? _this3.currentValue + valuePerTimes + valueAccelerator : _this3.currentValue + valuePerTimes - valueAccelerator);
            var value = _this3.currentValue;
            label.string = '' + formatMoney(value >= end ? end : value);
            var isSuper = end >= callbackWin.currentBetData * superWinRate;
            var isMega = end >= callbackWin.currentBetData * megaWinRate;
            var finalWin = isSuper ? 'super' : isMega ? 'mega' : 'big';
            var per = value / end;
            per = per > 1 ? 1 : per;
            callbackWin.enterFrame(per, finalWin);

            if (value >= callbackWin.currentBetData * superWinRate && !isSkip) {
              callbackWin.runSuperWin();
            } else if (value >= callbackWin.currentBetData * megaWinRate && !isSkip) {
              callbackWin.runMegaWin();
            } else if (value + callbackWin.currentBetData * 2 == end && !isSkip) {
              callbackWin.runFinishBigWin();
            }

            if (value >= end) {
              callbackWin.runFinishWin();
              clearInterval(_this3.timer);
            }
          };

          this.timer = setInterval(run, timeUpdate);
          run();
        };

        _proto.onUpdateWallet = function onUpdateWallet(end, animationDuration) {
          var _this4 = this;

          if (animationDuration === void 0) {
            animationDuration = 3000;
          }

          clearInterval(this.timer);
          if (!this.node) return;
          var label = this.node.getComponent(Label);
          var start = this.currentValue ? this.currentValue : 0; // assumes integer values for start and end

          var range = end - start; // no timer shorter than 50ms (not really visible any way)

          var minTimer = 50; // calc step time to show all interediate values

          var stepTime = Math.abs(Math.floor(animationDuration / range)); // never go below minTimer

          stepTime = Math.max(stepTime, minTimer); // get current time and calculate desired end time

          var startTime = new Date().getTime();
          var endTime = startTime + animationDuration;
          this.timer;

          var run = function run() {
            var now = new Date().getTime();
            var remaining = Math.max((endTime - now) / animationDuration, 0);
            var value = Math.round(end - remaining * range);
            _this4.currentValue = value;
            label.string = '' + formatWalletMoney(value);

            if (value == end) {
              clearInterval(_this4.timer);
            }
          };

          this.timer = setInterval(run, stepTime);
          run();
        };

        _proto.onDestroy = function onDestroy() {
          clearInterval(this.timer);
        };

        return AnimateNumberLabel;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './Config1985.ts', './GunSkill1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, EventsCode1985, ReferenceManager1985, Config1985, GunSkill1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      GunSkill1985 = module.GunSkill1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "4f827HKe3VPDaEJcpniJq6V", "SkillController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillController1985 = exports('SkillController1985', (_dec = ccclass('SkillController1985'), _dec2 = property(GunSkill1985), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillController1985, _Component);

        function SkillController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listGunSkill", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SkillController1985.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();

          for (var i = 0; i < this.listGunSkill.length; i++) {
            this.listGunSkill[i].index = i;
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.SEND_FIRE_SKILL, this.playerSendFireSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, this.catchFishBySkill, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.CHANGE_GUN_LASER, this.playerChangeLaserGun, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.hideAllGunSkill, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(EventsCode1985.GAME_LAYER.AIRCRAFT_DIE, this.onSpaceShipDie, this);
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          for (var i = 0; i < data.ListUser.length; i++) {
            var userInfo = data.ListUser[i];
            var player = ReferenceManager1985.instance.getPlayerByDeskStation(userInfo.DeskStation);

            if (player) {
              var gunSkill = this.listGunSkill[player.DeskStation];

              if (gunSkill) {
                gunSkill.initObj(userInfo);
              }
            }
          }
        };

        _proto.catchFishBySkill = function catchFishBySkill(data) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            switch (data.SkillID) {
              case Config1985.instance.SkillConfig.LASER:
                var gunSkill = this.listGunSkill[player.DeskStation];

                if (gunSkill) {
                  gunSkill.onFireSkill(data);
                }

                break;

              case Config1985.instance.SkillConfig.FISH_BOMB:
                gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.CATCH_FISH_BY_SKILL_BOMB, {
                  DeskStation: data.DeskStation,
                  data: data
                });
                break;

              case Config1985.instance.SkillConfig.SKILL_ULTIMATE:
                gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.CATCH_FISH_BY_SKILL_ULTIMATE, {
                  DeskStation: data.DeskStation,
                  Level: data.SkillInfo.Level,
                  Data: data
                });
                break;
            }
          }
        };

        _proto.playerJoinBoard = function playerJoinBoard(userInfo) {
          if (userInfo === void 0) {
            userInfo = null;
          }

          var player = ReferenceManager1985.instance.getPlayerByDeskStation(userInfo.DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.DeskStation];

            if (gunSkill) {
              gunSkill.initObj(userInfo);
            }
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(data) {
          if (data === void 0) {
            data = null;
          }

          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.DeskStation];

            if (gunSkill) {
              gunSkill.resetOnExit();
            }
          }
        };

        _proto.playerChangeLaserGun = function playerChangeLaserGun(DeskStation) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.DeskStation];

            if (gunSkill) {
              var dataSpecialGun = {
                DeskStation: DeskStation,
                SkillID: Config1985.instance.SkillConfig.LASER
              };
              gunSkill.changeSpecialGun(dataSpecialGun);
            }
          }
        };

        _proto.playerSendFireSkill = function playerSendFireSkill(data) {
          var SkillID = data.SkillID,
              DeskStation = data.DeskStation;
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.DeskStation];

            if (gunSkill) {
              gunSkill.onPlayerSendFireSkill(data);
            }
          }
        };

        _proto.hideAllGunSkill = function hideAllGunSkill() {
          for (var i = 0; i < this.listGunSkill.length; ++i) {
            this.listGunSkill[i].resetOnExit && this.listGunSkill[i].resetOnExit();
          }
        };

        _proto.onSpaceShipDie = function onSpaceShipDie(_ref) {
          var DeskStation = _ref.DeskStation;
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.DeskStation];

            if (gunSkill) {
              gunSkill.resetSkillPlayerDie();
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return SkillController1985;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listGunSkill", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyLockFish.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UIOpacity, Component, gfBaseEvents, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "51754JeHrtBa7Qn2SZKaoFF", "gfNotifyLockFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNotifyLockFish = exports('gfNotifyLockFish', (_dec = ccclass('gfNotifyLockFish'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNotifyLockFish, _Component);

        function gfNotifyLockFish() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfNotifyLockFish.prototype;

        _proto.onLoad = function onLoad() {
          this.node.getComponent(UIOpacity).opacity = 0;
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.SHOW_NOTIFY_LOCK_FISH, this.showNotifyLockFish, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.HIDE_NOTIFY_LOCK_FISH, this.resetOnExit, this);
        };

        _proto.showNotifyLockFish = function showNotifyLockFish() {
          this.resetOnExit();
          this.node.getComponent(UIOpacity).opacity = 255;
        };

        _proto.resetOnExit = function resetOnExit() {
          this.node.getComponent(UIOpacity).opacity = 0;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfNotifyLockFish;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBigWinWheelAvatar.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfBigWinWheel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, sys, tween, Sprite, v3, UITransform, convertAssetArrayToObject, gfBaseEvents, stopAllActions, scaleTo, shake, gfEventEmitter, gfBaseConfig, formatCoin, gfReferenceManager, gfBigWinWheel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      tween = module.tween;
      Sprite = module.Sprite;
      v3 = module.v3;
      UITransform = module.UITransform;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
      shake = module.shake;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      formatCoin = module.formatCoin;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfBigWinWheel = module.gfBigWinWheel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "51f75NdAWZHI7NaDvU1u5kt", "gfBigWinWheelAvatar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBigWinWheelAvatar = exports('gfBigWinWheelAvatar', (_dec = ccclass('gfBigWinWheelAvatar'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfBigWinWheel) {
        _inheritsLoose(gfBigWinWheelAvatar, _gfBigWinWheel);

        function gfBigWinWheelAvatar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBigWinWheel.call.apply(_gfBigWinWheel, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "iconMainFish", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "ribbon", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_listEffect", []);

          _defineProperty(_assertThisInitialized(_this), "_currentFishKind", -1);

          _defineProperty(_assertThisInitialized(_this), "sizeByTyeWin", void 0);

          _defineProperty(_assertThisInitialized(_this), "_listFishFrame", void 0);

          _defineProperty(_assertThisInitialized(_this), "_listTextFrame", void 0);

          _defineProperty(_assertThisInitialized(_this), "SKIN_NAME", void 0);

          _defineProperty(_assertThisInitialized(_this), "ANIMATION_NAME", void 0);

          _defineProperty(_assertThisInitialized(_this), "TWEEN_COIN_DURATION", void 0);

          return _this;
        }

        var _proto = gfBigWinWheelAvatar.prototype;

        _proto.onLoad = function onLoad() {
          this.sizeByTyeWin = 0.8;

          this._setUpConstantsVariable();

          this.spine.setMix(this.ANIMATION_NAME.APPEAR, this.ANIMATION_NAME.IDLE, 0.1);
        };

        _proto._setUpConstantsVariable = function _setUpConstantsVariable() {
          this.SKIN_NAME = {
            WIN: "Thang",
            BIG_WIN: "ThangLon",
            SUPER_WIN: "ThangCucLon",
            MEGA_WIN: "ThangSieuLon"
          };
          this.ANIMATION_NAME = {
            APPEAR: "AllAppear",
            IDLE: "AllIdle",
            DISAPPEAR: "RibbonAppear"
          };
          this.TWEEN_COIN_DURATION = {
            DEFAULT: 2.5,
            FAST: 1
          };
        };

        _proto.setUpListAvatarIcon = function setUpListAvatarIcon(listIcon) {
          this._listFishFrame = listIcon;
        };

        _proto.setUpListTextFrame = function setUpListTextFrame(listTextFrame) {
          this._listTextFrame = listTextFrame;
        };

        _proto.showAnimation = function showAnimation(_ref) {
          var gold = _ref.gold,
              bet = _ref.bet,
              isMe = _ref.isMe,
              _ref$fishKind = _ref.fishKind,
              fishKind = _ref$fishKind === void 0 ? 17 : _ref$fishKind,
              isTextImage = _ref.isTextImage,
              isKill = _ref.isKill;
          this.txtCoin.node.active = isMe;
          this.txtCoinOther.node.active = !isMe;
          if (!gold) return;

          if (!this._isShowing) {
            this._reset();

            this._playAnim({
              gold: gold,
              bet: bet,
              isMe: isMe,
              fishKind: fishKind,
              isTextImage: isTextImage,
              isKill: isKill
            });
          } else {
            this._listEffect.push({
              gold: gold,
              bet: bet,
              isMe: isMe,
              fishKind: fishKind,
              isTextImage: isTextImage,
              isKill: isKill
            });
          }
        };

        _proto._playAnim = function _playAnim(_ref2) {
          var gold = _ref2.gold,
              bet = _ref2.bet,
              isMe = _ref2.isMe,
              fishKind = _ref2.fishKind,
              isTextImage = _ref2.isTextImage,
              isKill = _ref2.isKill;
          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.node.active = true;
          this._winValue += gold;

          var skinName = this._setSkinByBet(bet);

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PAUSE_OR_RESUME_SOUND_WIN, false);
          skinName == this.SKIN_NAME.MEGA_WIN ? gfEventEmitter.instance.emit(gfBaseEvents.SOUND.MEGA_WIN) : gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BIG_WIN);
          var delayTimeTweenCoin = this._currentSkinName === '' ? 1 : 0;

          this._tweenCoin({
            winAmount: this._winValue,
            delay: delayTimeTweenCoin
          });

          var delayTime = this._currentSkinName !== skinName ? 0.5 : 0;

          this._playSpinAnim(skinName);

          this._playActionIconMainFish({
            delayTime: delayTime,
            fishKind: fishKind,
            isTextImage: isTextImage,
            isKill: isKill,
            gold: gold
          });

          this._isShowing = true;
        };

        _proto.hideAnimation = function hideAnimation(playEffect) {
          if (playEffect === void 0) {
            playEffect = true;
          }

          if (!this._isShowing) return;

          if (playEffect) {
            this._checkHideAnim();
          } else {
            this.resetAllAction();
            this.node.active = false;
          }
        };

        _proto._playSpinAnim = function _playSpinAnim(skinName) {
          if (this._currentSkinName !== skinName) {
            this.spine.setSkin(skinName);

            if (sys.isNative) {
              this.spine.setToSetupPose();
            }

            this._currentSkinName = skinName;
            this.spine.setAnimation(0, this.ANIMATION_NAME.APPEAR, false);
            this.spine.setCompleteListener(this._completeAppear.bind(this));
          } else {
            this.spine.setAnimation(0, this.ANIMATION_NAME.IDLE, true);
          }
        };

        _proto._setSkinByBet = function _setSkinByBet(bet) {
          var skinName = this.SKIN_NAME.BIG_WIN;
          this.sizeByTyeWin = 0.8;

          if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.SUPER) {
            skinName = this.SKIN_NAME.MEGA_WIN;
            this.sizeByTyeWin = 1;
          } else if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.HUGE) {
            skinName = this.SKIN_NAME.SUPER_WIN;
            this.sizeByTyeWin = 0.9;
          }

          return skinName;
        };

        _proto._completeAppear = function _completeAppear() {
          // eslint-disable-line
          this.spine.setAnimation(0, this.ANIMATION_NAME.IDLE, true);
          this.spine.setCompleteListener(function () {});
        };

        _proto._changeImageFishIcon = function _changeImageFishIcon(data) {
          var _this2 = this;

          var fishKind = data.fishKind,
              isTextImage = data.isTextImage,
              isKill = data.isKill;
          stopAllActions(this.iconMainFish);
          tween(this.iconMainFish).then(scaleTo(0.1, 0, 0, 'backOut')).call(function () {
            _this2._updateImage(fishKind, isTextImage, isKill);
          }).then(scaleTo(0.5, this.sizeByTyeWin, this.sizeByTyeWin, 'backOut')).then(shake(this.iconMainFish.position, 0.5)).start();
        };

        _proto._updateImage = function _updateImage(fishKind, isTextImage, isKill) {
          var assetFishes = convertAssetArrayToObject(this._listFishFrame);
          var sprite = null;

          if (isTextImage) {
            if (isKill) {
              sprite = assetFishes['Avatar_' + fishKind];
            } else {
              sprite = this._listTextFrame[0];
            }
          } else {
            if (assetFishes['Avatar_' + fishKind]) {
              sprite = assetFishes['Avatar_' + fishKind];
            } else {
              sprite = assetFishes['Avatar_' + 22];
            }
          }

          this.iconMainFish.getComponent(Sprite).spriteFrame = sprite;
        };

        _proto._tweenCoin = function _tweenCoin(data) {
          var _this3 = this;

          var winAmount = data.winAmount;
          var _coinValue = this.coinValue;

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }

          this.tweenCoin = tween(this).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PAUSE_OR_RESUME_SOUND_WIN, false);
          }).to(this._duration, null, {
            easing: "sineInOut",
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = _coinValue + winAmount * ratio;
            }
          }).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PAUSE_OR_RESUME_SOUND_WIN, true);

            _this3._checkHideAnim();
          });
          this.tweenCoin.start();
        };

        _proto._playActionIconMainFish = function _playActionIconMainFish(data) {
          var _this4 = this;

          var delayTime = data.delayTime,
              fishKind = data.fishKind;
          tween(this.spine.node).delay(delayTime).call(function () {
            if (_this4._currentFishKind !== fishKind) {
              _this4._changeImageFishIcon(data);

              _this4._currentFishKind = fishKind;
            }
          }).start();
        };

        _proto._checkHideAnim = function _checkHideAnim() {
          var _this5 = this;

          if (!this._checkPlayNext()) {
            tween(this.node).delay(1).call(function () {
              if (!_this5._checkPlayNext()) {
                gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_BIG_WIN);

                _this5._playAnimHideEffect();
              }
            }).start();
          }
        };

        _proto._checkPlayNext = function _checkPlayNext() {
          if (this._listEffect.length > 0) {
            this._duration = this.TWEEN_COIN_DURATION.FAST;

            var info = this._listEffect.shift();

            this._playAnim(info);

            return true;
          }

          return false;
        };

        _proto._playAnimHideEffect = function _playAnimHideEffect() {
          this.spine.setAnimation(0, this.ANIMATION_NAME.DISAPPEAR, false);
          tween(this.lblCoin.node).to(0.2, {
            scale: v3(0, 0, 1)
          }).start();
          stopAllActions(this.iconMainFish);
          tween(this.iconMainFish).to(0.2, {
            scale: v3(0, 0, 1)
          }).start();
          tween(this.ribbon).to(0.2, {
            scale: v3(0, 0, 0)
          }).start();
          var player = gfReferenceManager.instance.getPlayerByIndex(this.index);

          if (player.isMe) {
            player.addToDisplayWallet(this._winValue);
          }

          this._resetInfo();
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.lblCoin.string = formatCoin(this._coinValue);

          if (this.lblCoin.node.getComponent(UITransform).width > this.ribbon.getComponent(UITransform).width - 120) {
            this.ribbon.getComponent(UITransform).width += 5;
          }
        };

        _proto._resetInfo = function _resetInfo() {
          this._winValue = 0;
          this.coinValue = 0;
          this._isShowing = false;
          this._currentSkinName = '';
          this._currentFishKind = -1;
          this.sizeByTyeWin = 0.8;
          this._duration = this.TWEEN_COIN_DURATION.DEFAULT;
          this.ribbon.getComponent(UITransform).width = 250;
          this.lblCoin.string = '';

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }
        };

        _proto._reset = function _reset() {
          var _ReferenceManager$ins = gfReferenceManager.instance.getPlayerByIndex(this.index),
              isMe = _ReferenceManager$ins.isMe;

          this.node.active = true;
          this.iconMainFish.setScale(0, 0, 1);
          this.ribbon.setScale(0, 0, 1);
          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.string = '';
          this.lblCoin.node.setScale(0, 0, 1);
          tween(this.lblCoin.node).to(0.5, {
            scale: v3(1, 1, 1)
          }, {
            easing: 'bounceOut'
          }).start();
          tween(this.ribbon).to(0.5, {
            scale: v3(1, 1, 1)
          }, {
            easing: 'bounceOut'
          }).start();
        };

        _proto.resetAllAction = function resetAllAction() {
          stopAllActions(this.node);
          stopAllActions(this.ribbon);
          stopAllActions(this.lblCoin.node);
          stopAllActions(this.spine.node);
          stopAllActions(this.iconMainFish);

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }

          this._listEffect = [];
          this.spine.setToSetupPose();
          this.iconMainFish.setScale(0, 0, 1);
          this._isShowing = false;

          this._resetInfo();
        };

        return gfBigWinWheelAvatar;
      }(gfBigWinWheel), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconMainFish", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ribbon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyMenu.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "52196V367xKG4EbuCYnH8OC", "LobbyMenu", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LobbyMenu = exports('LobbyMenu', (_dec = ccclass('LobbyMenu'), _dec2 = property({
        type: Node
      }), _dec3 = property({
        type: Node
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LobbyMenu, _Component);

        function LobbyMenu() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "gameNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "eventNode", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LobbyMenu.prototype;

        _proto.onGameClick = function onGameClick() {
          this.eventNode.active = false;
          this.gameNode.active = true;
        };

        _proto.onEventClick = function onEventClick() {
          this.eventNode.active = true;
          this.gameNode.active = false;
        };

        return LobbyMenu;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpaceShip1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './EventsCode1985.ts', './DataStore1985.ts', './Config1985.ts', './EnergyController1985.ts', './SpineFish1985.ts', './ShieldController1985.ts', './AnimUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, Node, Color, Collider2D, Contact2DType, v3, tween, sp, UITransform, instantiate, v2, Component, gfBaseEvents, stopAllActions, v3f, gfEventEmitter, gfBaseConfig, v2Distance, getRotationByRad, EventsCode1985, DataStore1985, Config1985, EnergyController1985, SpineFish1985, ShieldController1985, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Color = module.Color;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      v3 = module.v3;
      tween = module.tween;
      sp = module.sp;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      v2 = module.v2;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      v3f = module.v3f;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      v2Distance = module.v2Distance;
      getRotationByRad = module.getRotationByRad;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      EnergyController1985 = module.EnergyController1985;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }, function (module) {
      ShieldController1985 = module.ShieldController1985;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "52de7/UhidAk6fSv5Sq8KJO", "SpaceShip1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ANIM_NAME = {
        impact: "impact",
        revival: "revival",
        idle: 'jet engine',
        side_right: 'charge side1',
        side_right_back: 'charge side1_back',
        side_right_idle: 'charge side1_idle',
        side_left: 'charge side2',
        side_left_back: 'charge side2_back',
        side_left_idle: 'charge side2_idle'
      };
      var SpaceShip1985 = exports('SpaceShip1985', (_dec = ccclass('SpaceShip1985'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Node), _dec5 = property(ShieldController1985), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpaceShip1985, _Component);

        function SpaceShip1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "FXExplode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "energy", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "FXImpactEnergy", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "shieldComp", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isMoving", void 0);

          _defineProperty(_assertThisInitialized(_this), "_targetDest", void 0);

          _defineProperty(_assertThisInitialized(_this), "_moveSpeed", 1000);

          _defineProperty(_assertThisInitialized(_this), "offset", 2.5);

          _defineProperty(_assertThisInitialized(_this), "_isWaitReborn", false);

          _defineProperty(_assertThisInitialized(_this), "opacityOtherPlayer", new Color(225, 255, 255, 170));

          _defineProperty(_assertThisInitialized(_this), "_isLockMove", false);

          _defineProperty(_assertThisInitialized(_this), "isMe", false);

          _defineProperty(_assertThisInitialized(_this), "DeskStation", null);

          _defineProperty(_assertThisInitialized(_this), "lastPos", null);

          _defineProperty(_assertThisInitialized(_this), "_isProtectedState", false);

          _defineProperty(_assertThisInitialized(_this), "_isHaveSkillLaser", false);

          return _this;
        }

        var _proto = SpaceShip1985.prototype;
        /**
         * getIsWaitReborn
         */

        _proto.getIsWaitReborn = function getIsWaitReborn() {
          return this._isWaitReborn;
        };

        _proto.getProtectedState = function getProtectedState() {
          return this._isProtectedState;
        };

        _proto.setProtectedState = function setProtectedState(state) {
          this._isProtectedState = state;

          if (this.isMe) {
            DataStore1985.instance.isProtectedState = state;
          }
        };

        _proto.setIsHaveSkillLaser = function setIsHaveSkillLaser(isHaveSkill) {
          this._isHaveSkillLaser = isHaveSkill;
        };

        _proto.onLoad = function onLoad() {
          this.node.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        };

        _proto.initObj = function initObj(data) {
          this.isMe = data.DeskStation === DataStore1985.instance.getSelfDeskStation();
          this._isMoving = false;
          this.DeskStation = data.DeskStation;

          if (!this.isMe) {
            this.setActive(true);
            this.setOpacityOtherPlayer();

            if (data.PlayerPosition) {
              this.node.setPosition(data.PlayerPosition.PosX, data.PlayerPosition.PosY, 0);
            } else {
              this.playAnimOtherPlayerJoinGame(data);
            }
          } else {
            this.node.setSiblingIndex(5);
          }

          this.shieldComp.initShield();
          this.shieldComp.setIsMe(this.isMe);
        };

        _proto.playAnimPlayerJoinGame = function playAnimPlayerJoinGame() {
          this.setActive(true);
          var y = gfBaseConfig.instance.realSize.Height / 2;
          this.node.setPosition(this.node.position.x, y, 0);
          this.shieldComp.showShieldWhenPlayerJoinRoom();
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.OPEN_FEATURE_FIRE, {
            DeskStation: this.DeskStation
          });
        };

        _proto.playAnimOtherPlayerJoinGame = function playAnimOtherPlayerJoinGame(data) {
          var _this2 = this;

          var _gfBaseConfig$instanc = gfBaseConfig.instance.realSize,
              Width = _gfBaseConfig$instanc.Width,
              Height = _gfBaseConfig$instanc.Height;
          this.setActive(true);
          var y = -Height / 2;
          this.node.setPosition(Width / 2, y, 0);
          this.shieldComp.setIsProtected(true);
          var position = v3(Width / 2, Height / 2, 0);
          tween(this.node).delay(5).to(1, {
            position: position
          }).call(function () {
            _this2.shieldComp.showShieldWhenPlayerJoinRoom();
          }).start();
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other) {
          var energy = other.node.getComponent(EnergyController1985);
          var fish = other.node.getComponent(SpineFish1985) || other.node.parent.getComponent(SpineFish1985) || other.node.parent.parent.getComponent(SpineFish1985);

          if (energy && energy.getIsPick()) {
            gfEventEmitter.instance.emit(EventsCode1985.SOUND.PICK_ENERGY);
            this.playEffectImpactEnergy();
            energy.playAnimRemoveEnergy();
          }
        };

        _proto.playEffectImpactEnergy = function playEffectImpactEnergy() {
          var _this3 = this;

          stopAllActions(this.FXImpactEnergy);
          this.FXImpactEnergy.active = true;
          var fxImpact = this.FXImpactEnergy.getComponent(sp.Skeleton);
          fxImpact.setAnimation(0, "animation", false);
          var delayTime = fxImpact.findAnimation("animation").duration;
          tween(this.FXImpactEnergy).delay(delayTime).call(function () {
            _this3.FXImpactEnergy.active = false;
          }).start();
        };

        _proto.onAnimSpaceDie = function onAnimSpaceDie(data) {
          var _this4 = this;

          stopAllActions(this.node);
          this._isMoving = false;
          this._isWaitReborn = true;
          this.setProtectedState(true);
          var spaceShip = this.node.getChildByName("Spine").getComponent(sp.Skeleton);
          spaceShip.setAnimation(0, ANIM_NAME.idle, true);
          var y = -this.node.getComponent(UITransform).height / 2;
          var x = this.node.parent.getComponent(UITransform).width / 2;
          var posMoveTo = v3(x, this.node.parent.getComponent(UITransform).height / 3, 0);
          this._targetDest = posMoveTo;
          var durExplode = 2;
          var durImpect = 0;
          this.shieldComp.resetShieldWhenAircraftDie();
          tween(this.node).delay(durImpect).call(function () {
            _this4.createEnergy(data.listItem);

            gfEventEmitter.instance.emit(EventsCode1985.SOUND.SPACE_SHIP_EXPLOSION);

            if (_this4._isHaveSkillLaser) {
              DataStore1985.instance.setSelfInfo({
                isLockGun: true
              });
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, {
                fishPos: _this4.node.worldPosition,
                deskStation: _this4.DeskStation
              });
            }

            _this4.playFXExplode();

            _this4.node.setScale(v3f(0));

            _this4.node.setPosition(v3(x, y, 0));
          }).delay(durExplode).call(function () {
            spaceShip.setAnimation(1, ANIM_NAME.revival, false);
            spaceShip.setTrackCompleteListener(spaceShip.getCurrent(1), function () {
              _this4.shieldComp.setIsProtected(false);

              gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.AIRCRAFT_REVIVAL, {
                DeskStation: data.DeskStation
              });
              spaceShip.setTrackCompleteListener(spaceShip.getCurrent(1), function () {});
            });
          }).to(1.5, {
            position: posMoveTo,
            scale: v3(1, 1, 0)
          }, {
            easing: "backOut"
          }).call(function () {
            gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.OPEN_FEATURE_FIRE, {
              DeskStation: data.DeskStation
            });
            _this4._isMoving = true;
            _this4._isWaitReborn = false;
          }).start();
        };

        _proto.playAnimKilledByEnemy = function playAnimKilledByEnemy() {
          var animName = this.getAnimNameKilledByBullet(0);
          var spaceShip = this.node.getChildByName("Spine").getComponent(sp.Skeleton);
          var durAnim = spaceShip.findAnimation(animName).duration;
          spaceShip.setAnimation(0, ANIM_NAME.idle, true);
          spaceShip.setAnimation(1, animName, false);
          return durAnim;
        };

        _proto.getAnimNameKilledByBullet = function getAnimNameKilledByBullet(BulletKind) {
          var animName = ANIM_NAME.impact;
          return animName;
        };

        _proto.playFXExplode = function playFXExplode() {
          var explode = instantiate(this.FXExplode);
          explode.setParent(this.node.parent);
          explode.setPosition(this.node.getPosition());
          var spineExplode = explode.getComponent(sp.Skeleton);
          spineExplode.setAnimation(0, 'animation', false);
          spineExplode.setCompleteListener(function () {
            explode.removeFromParent();
            explode.destroy();
            spineExplode.setCompleteListener(function () {});
          });
        };

        _proto.createEnergy = function createEnergy(data) {
          var countEnergy = data.length;
          if (countEnergy <= 0) return;
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.DROP_ENERGY);

          for (var i = 0; i < countEnergy; ++i) {
            var energy = instantiate(this.energy);
            energy.setParent(this.node.parent);
            energy.setPosition(this.node.position);
            energy.getComponent(EnergyController1985).initData(data[i]);
          }
        };

        _proto.addGoldReward = function addGoldReward(reward) {
          gfEventEmitter.instance.emit(EventsCode1985.HUD.ADD_GOLD_REWARD, reward);
        };

        _proto.addToDisplayWallet = function addToDisplayWallet(amount) {
          gfEventEmitter.instance.emit(EventsCode1985.HUD.ADD_TO_DISPLAY_WALLET, amount);
        };

        _proto.moveTo = function moveTo(pos) {
          if (this._isWaitReborn && !this._isMoving) return;
          this.checkScreenLimit(pos);
          this._isMoving = true;
          this._targetDest = pos;
          this.playAnimInTheDirection();
        };

        _proto.checkScreenLimit = function checkScreenLimit(pos) {
          var offset = Config1985.instance.SafeZoneOffsetX;

          var _this$node$parent$par = this.node.parent.parent.getComponent(UITransform),
              height = _this$node$parent$par.height,
              width = _this$node$parent$par.width;

          if (pos.x - offset <= 0) {
            pos.x = offset;
          }

          if (pos.x + offset >= width) {
            pos.x = width - offset;
          }

          if (pos.y - offset <= 0) {
            pos.y = offset;
          }

          if (pos.y + offset >= height) {
            pos.y = height - offset;
          }
        };

        _proto.stopMove = function stopMove() {
          this._isMoving = false;
          this.stopAnimInTheDirection();

          if (this.isMe) {
            gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.PLAYER_MOVE, v2(this.node.position.x, this.node.position.y));
          }
        };

        _proto.playAnimInTheDirection = function playAnimInTheDirection() {
          if (this._isWaitReborn || !this.node.active) return;
          var spaceShip = this.node.getChildByName("Spine").getComponent(sp.Skeleton);

          if (this._targetDest.x <= this.node.position.x - this.offset) {
            if (spaceShip.animation != ANIM_NAME.side_left_idle) this.setAnimInTheDirection(ANIM_NAME.side_left, ANIM_NAME.side_left_idle);
          } else if (this._targetDest.x >= this.node.position.x + this.offset) {
            if (spaceShip.animation != ANIM_NAME.side_right_idle) this.setAnimInTheDirection(ANIM_NAME.side_right, ANIM_NAME.side_right_idle);
          }
        };

        _proto.setAnimInTheDirection = function setAnimInTheDirection(animStart, animIdle, timeStartAnim) {
          if (timeStartAnim === void 0) {
            timeStartAnim = false;
          }

          if (!this._isWaitReborn) {
            stopAllActions(this.node);
          }

          var spaceShip = this.node.getChildByName("Spine").getComponent(sp.Skeleton);

          if (animStart == spaceShip.animation) {
            return;
          }

          var curTime = spaceShip.getCurrent(0).animationLast;
          spaceShip.setAnimation(0, animStart, false);

          if (timeStartAnim) {
            var durAnim = spaceShip.findAnimation(animStart).duration;
            spaceShip.getCurrent(0).animationStart = durAnim - curTime;
          }

          spaceShip.setCompleteListener(function () {
            spaceShip.getCurrent(0).timeStartAnim = 0;
            spaceShip.setAnimation(0, animIdle, true);
            spaceShip.setCompleteListener(function () {});
          });
        };

        _proto.stopAnimInTheDirection = function stopAnimInTheDirection() {
          var spaceShip = this.node.getChildByName("Spine").getComponent(sp.Skeleton);

          switch (spaceShip.animation) {
            case ANIM_NAME.side_left:
              this.setAnimInTheDirection(ANIM_NAME.side_left_back, ANIM_NAME.idle, true);
              break;

            case ANIM_NAME.side_right:
              this.setAnimInTheDirection(ANIM_NAME.side_right_back, ANIM_NAME.idle, true);
              break;

            case ANIM_NAME.side_left_idle:
              this.setAnimInTheDirection(ANIM_NAME.side_left_back, ANIM_NAME.idle);
              break;

            case ANIM_NAME.side_right_idle:
              this.setAnimInTheDirection(ANIM_NAME.side_right_back, ANIM_NAME.idle);
              break;
          }
        };

        _proto.checkUserStopMoveTouch = function checkUserStopMoveTouch() {
          if (this._targetDest && this._targetDest.x == this.node.position.x && this._targetDest.y == this.node.position.y) {
            this.stopAnimInTheDirection();
            return true;
          }

          return false;
        };

        _proto.setOpacityOtherPlayer = function setOpacityOtherPlayer() {
          this.node.children.forEach(function (child) {
            if (child.name == "BigWin1985") {
              setOpacity(child, 200);
              return;
            }

            setOpacity(child, 170);
          });
          var spine = this.node.getChildByName("Spine");
          spine.getComponent(sp.Skeleton).color = this.opacityOtherPlayer;
          var spineBigwin = this.node.getChildByName("BigWin1985").getChildByName("Spine");
          spineBigwin.getComponent(sp.Skeleton).color = this.opacityOtherPlayer;
        };

        _proto.isHoldingSkillGun = function isHoldingSkillGun() {};

        _proto.update = function update(dt) {
          if (!this._isMoving || this.checkUserStopMoveTouch() || !this._targetDest || this._isLockMove) return;
          var delta = dt * this._moveSpeed;

          if (delta > v2Distance(this._targetDest, this.node.position)) {
            this.node.setPosition(this._targetDest);

            if (this.isMe) {
              gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.PLAYER_MOVE, this._targetDest);
            }
          } else {
            var angle = getRotationByRad(this._targetDest, this.node.position);
            var x = this.node.position.x + Math.cos(angle) * delta;
            var y = this.node.position.y + Math.sin(angle) * delta;
            this.node.setPosition(x, y, 0);

            if (this.isMe) {
              gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.PLAYER_MOVE, this._targetDest);
            }
          }

          this.lastPos = this.node.getPosition();
        };

        _proto.catchFishBySkill = function catchFishBySkill(data) {
          this.shieldComp.changeStateShieldBySkill(data.SkillID);
        };

        _proto.setActive = function setActive(active) {
          if (active === void 0) {
            active = true;
          }

          this.node.active = active;
        };

        _proto.setLockMove = function setLockMove(isLock) {
          this._isLockMove = isLock;
        };

        _proto.isActive = function isActive() {
          return this.node.active;
        };

        return SpaceShip1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "FXExplode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "energy", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "FXImpactEnergy", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "shieldComp", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpaceShipController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './DataStore1985.ts', './SpaceShip1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sys, UITransform, v3, Component, gfBaseEvents, registerEvent, removeEvents, EventsCode1985, ReferenceManager1985, DataStore1985, SpaceShip1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      UITransform = module.UITransform;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      SpaceShip1985 = module.SpaceShip1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "5316fK43YRGH44cjoxv7YSY", "SpaceShipController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpaceShipController1985 = exports('SpaceShipController1985', (_dec = ccclass('SpaceShipController1985'), _dec2 = property(SpaceShip1985), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SpaceShipController1985, _Component);

        function SpaceShipController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "lstShip", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "offsetY", 80);

          return _this;
        }

        var _proto = SpaceShipController1985.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          ReferenceManager1985.instance.setData({
            spaceShipLayer: this.node
          });
          this.node["getSpaceShipByDeskStation"] = this.getSpaceShipByDeskStation.bind(this);
          this.hideAllPlayer();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(EventsCode1985.CONTROL.USER_START_TOUCH, this.startTouch, this);
          registerEvent(EventsCode1985.CONTROL.USER_END_TOUCH, this.endTouch, this);
          registerEvent(EventsCode1985.CONTROL.USER_MOVE_TOUCH, this.moveTouch, this); //@ts-ignore

          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(EventsCode1985.GAME_LAYER.SHIP_MOVE, this.updateMoveSpaceShip, this);
          registerEvent(EventsCode1985.GAME_LAYER.AIRCRAFT_DIE, this.onSpaceShipDie, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, this._onCatchFishBySkill, this);
          registerEvent(EventsCode1985.GAME_LAYER.LOCK_MOVE_SPACESHIP, this._onLockMove, this);
          registerEvent(EventsCode1985.GAME_LAYER.ANIMATION_SPACESHIP_JOIN_ROOM_DONE, this.playAnimPlayerJoinGame, this);
        };

        _proto.playerJoinBoard = function playerJoinBoard(userInfo) {
          if (userInfo === void 0) {
            userInfo = null;
          }

          var player = this.getSpaceShipByDeskStation(userInfo.DeskStation);

          if (player) {
            player.initObj(userInfo);
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(data) {
          if (data === void 0) {
            data = null;
          }

          var player = this.getSpaceShipByDeskStation(data.DeskStation);

          if (player) {
            player.setActive(false);
          }
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          for (var i = 0; i < data.ListUser.length; i++) {
            var userInfo = data.ListUser[i];
            var player = this.getSpaceShipByDeskStation(userInfo.DeskStation);

            if (player) {
              player.initObj(userInfo);
            }
          } //Make sure init position after init all player
          // Emitter.instance.emit(EventCode.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST);
          // Emitter.instance.emit(EventCode.COMMON.HIDE_WAITING);
          // Emitter.instance.emit(EventCode.POPUP.POPUP_TUTORIAL);

        };

        _proto.onSpaceShipDie = function onSpaceShipDie(data) {
          var spaceShip = this.lstShip[data.DeskStation];
          spaceShip.getComponent(SpaceShip1985).onAnimSpaceDie(data);
        };

        _proto.hideAllPlayer = function hideAllPlayer() {
          for (var i = 0; i < this.lstShip.length; ++i) {
            this.lstShip[i].setActive(false);
          }
        };

        _proto.startTouch = function startTouch(data) {
          var touchID = data.touchID;
          if (sys.isMobile && touchID !== DataStore1985.instance.spaceShipIDTouch) return;

          if (this.getMySpaceShip() && DataStore1985.instance.spaceShipMoving) {
            var startShipPos = this.getMySpaceShip().node.getPosition();
            sys.isMobile ? startShipPos.y += this.offsetY : 0;
            this.getMySpaceShip().moveTo(startShipPos);
          }
        };

        _proto.moveTouch = function moveTouch(data) {
          var position = data.position,
              touchID = data.touchID;
          if (sys.isMobile && touchID !== DataStore1985.instance.spaceShipIDTouch) return;
          var point = this.node.getComponent(UITransform).convertToNodeSpaceAR(v3(position.x, position.y, 0));
          this.moveSpaceShip(point);
        };

        _proto.endTouch = function endTouch(data) {
          var touchID = data.touchID;
          if (sys.isMobile && touchID !== DataStore1985.instance.spaceShipIDTouch) return;

          if (this.getMySpaceShip() && touchID === DataStore1985.instance.spaceShipIDTouch) {
            this.getMySpaceShip().stopMove();
          }
        };

        _proto.moveSpaceShip = function moveSpaceShip(point) {
          if (this.getMySpaceShip()) {
            sys.isMobile ? point.y += this.offsetY : 0;
            this.getMySpaceShip().moveTo(point);
          }
        };

        _proto.updateMoveSpaceShip = function updateMoveSpaceShip(data) {
          var ListUser = data.ListUser;

          for (var deskStation in ListUser) {
            if (parseInt(deskStation) == DataStore1985.instance.getSelfDeskStation()) continue;
            var spaceShip = this.getSpaceShipByDeskStation(parseInt(deskStation));
            spaceShip.moveTo(v3(ListUser[deskStation].PosX, ListUser[deskStation].PosY, 0));
          }
        };

        _proto.getSpaceShipByDeskStation = function getSpaceShipByDeskStation(deskStation) {
          if (deskStation === void 0) {
            deskStation = -1;
          }

          return this.lstShip[deskStation];
        };

        _proto.getMySpaceShip = function getMySpaceShip() {
          return this.lstShip[DataStore1985.instance.getSelfDeskStation()];
        };

        _proto._onCatchFishBySkill = function _onCatchFishBySkill(data) {
          var player = this.getSpaceShipByDeskStation(data.DeskStation);
          player.catchFishBySkill(data);
        };

        _proto.playAnimPlayerJoinGame = function playAnimPlayerJoinGame() {
          var player = this.getMySpaceShip();

          if (player) {
            player.playAnimPlayerJoinGame();
          }
        };

        _proto._onLockMove = function _onLockMove(isLock) {
          this.getMySpaceShip().setLockMove(isLock);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return SpaceShipController1985;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "lstShip", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkSocket.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfNetworkEvent.ts', './XOCypher.ts', './logger.ts', './hashKey.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, error, gfDataStore, gfNetworkEvent, xorCipher, logger, hash;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNetworkEvent = module.default;
    }, function (module) {
      xorCipher = module.default;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      hash = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "531a6Z/e2BI1bTqNgIF5Cs0", "gfNetworkSocket", undefined);

      var STATUS_INIT = 'INIT';
      var STATUS_CONNECTED = 'CONNECTED';
      var STATUS_DISCONNECTED = 'DISCONNECTED';
      var LIVE_STATUS_INIT = 'INIT';
      var LIVE_STATUS_CONNECT = 'CONNECT';
      var LIVE_STATUS_CLOSED = 'CLOSED';
      var gfNetworkSocket = exports('default', /*#__PURE__*/function () {
        // private _emitter: EventEmitter;

        /**
         *
         * @param { } opt : {
         *      pingInterval,
         *      pingTimeout,
         *      reconnectionAttempts,
         *      reconnectionDelay
         *      reconnectionAttemptsWarning,
         * }
         */
        function gfNetworkSocket(opt) {
          _defineProperty(this, "_msgQueue", void 0);

          _defineProperty(this, "_socket", void 0);

          _defineProperty(this, "_status", void 0);

          _defineProperty(this, "_liveStatus", void 0);

          _defineProperty(this, "_pingInfo", void 0);

          _defineProperty(this, "_reconnectInfo", void 0);

          _defineProperty(this, "_hostName", void 0);

          _defineProperty(this, "_token", void 0);

          _defineProperty(this, "_emitter", void 0);

          _defineProperty(this, "_hashKey", void 0);

          opt = opt || {};
          this._socket = null;
          this._status = STATUS_INIT;
          this._liveStatus = LIVE_STATUS_INIT;
          this._pingInfo = {
            pingInterval: opt.pingInterval || 5000,
            pingTimeout: opt.pingTimeout || 3000,
            pingIntervalId: 0,
            pongIntervalId: 0,
            lastPingTime: 0,
            delay: 0,
            isSendingPing: false
          };
          this._reconnectInfo = {
            reconnectionCount: 0,
            reconnectionAttempts: opt.reconnectionAttempts || 100,
            reconnectionDelay: opt.reconnectionDelay || 500,
            reconnectionAttemptsWarning: opt.reconnectionAttemptsWarning || 10,
            reconnectionAttemptsDie: opt.reconnectionAttemptsDie || 25,
            reconnectIntervalId: 0
          };
          this._msgQueue = [];
          this._hashKey = undefined;
          this._emitter = new globalThis.EventEmitter();
        }

        var _proto = gfNetworkSocket.prototype;

        _proto.echo = function echo(str) {
          console.log(str + " " + gfNetworkEvent.EVENT_NETWORK_CONNECTED);
        };

        _proto.init = function init(hostName, token) {
          logger.debug('NetworkSocket init: %j', {
            hostName: hostName,
            token: token
          });
          this._hostName = hostName;
          this._token = token;
          this.connect();
        };

        _proto.connect = function connect() {
          this._socket = new WebSocket(this._hostName, this._token, "cacert.pem");
          this._socket.binaryType = "arraybuffer";

          this._handleConnectionEvent();

          this._liveStatus = LIVE_STATUS_CONNECT;
        };

        _proto.close = function close(reason, isReconnect, callback) {
          if (isReconnect === void 0) {
            isReconnect = false;
          }

          if (callback === void 0) {
            callback = null;
          }

          if (typeof isReconnect === 'function') {
            callback = isReconnect;
            isReconnect = false;
          }

          logger.debug('NetworkSocket close %s', reason ? ': by ' + reason : '');

          this._changeStatus(STATUS_DISCONNECTED);

          if (this._socket) {
            this._socket.close();

            this._removeHandleConnectionEvent();

            this._socket = null;
          }

          this._cleanupTimer();

          if (!isReconnect) {
            this._liveStatus = LIVE_STATUS_CLOSED;
          }

          if (callback) {
            callback();
          }
        };

        _proto.cleanUp = function cleanUp() {
          this._emitter.removeAllListeners();
        };

        _proto.reconnect = function reconnect(reason) {
          if (this._liveStatus !== LIVE_STATUS_CLOSED) {
            logger.debug('NetworkSocket reconnect by %s', reason); //Reset queue message

            this._msgQueue.length = 0;

            if (this._reconnectInfo.reconnectionCount < this._reconnectInfo.reconnectionAttempts) {
              if (this._reconnectInfo.reconnectionCount == this._reconnectInfo.reconnectionAttemptsWarning) {
                this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_POOR);
              }

              if (this._reconnectInfo.reconnectionCount == this._reconnectInfo.reconnectionAttemptsDie) {
                this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_DIE);

                this._onClose("NETWORK_DIE");
              }

              logger.debug('NetworkSocket reconnect attempts: %s', this._reconnectInfo.reconnectionCount);
              this._reconnectInfo.reconnectionCount++;
            } else {
              logger.error("NetworkSocket Exceed maximum reconnection attempts.");

              this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_DIE);
            }

            this.connect();
          } else {
            this._cleanupTimer();
          }
        };

        _proto.send = function send(data) {
          // logger.debug("send " + JSON.stringify(data));
          if (~gfNetworkEvent.LIST_EVENT_QUEUE.indexOf(data.requestId) && this._liveStatus == LIVE_STATUS_CONNECT) {
            //send fire laser
            this._ping(true);

            this._msgQueue.push(data);

            return true;
          } else if (this._status == STATUS_CONNECTED && this._socket && this._socket.readyState == WebSocket.OPEN) {
            if (data.requestId === 3001) {
              //clear queue on reconnect event
              this._msgQueue.length = 0;
            }

            this._socket.send(this._encode(data));

            return true;
          }

          return false;
        };

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.removeEvent = function removeEvent(event, listener) {
          this._emitter.removeListener(event, listener);
        };

        _proto._handleConnectionEvent = function _handleConnectionEvent() {
          if (this._socket) {
            this._socket.onopen = this._onOpen.bind(this);
            this._socket.onerror = this._onError.bind(this);
            this._socket.onmessage = this._onMessage.bind(this);
            this._socket.onclose = this._onClose.bind(this);
          }
        };

        _proto._removeHandleConnectionEvent = function _removeHandleConnectionEvent() {
          if (this._socket) {
            this._socket.onopen = null;
            this._socket.onerror = null;
            this._socket.onmessage = null;
            this._socket.onclose = null;
          }
        };

        _proto._onOpen = function _onOpen() {
          this._changeStatus(STATUS_CONNECTED);

          this._cleanupTimer();

          if (this._reconnectInfo.reconnectionCount > 0) {
            this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_RECONNECTED);
          } else {
            this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_CONNECTED);
          }

          this._reconnectInfo.reconnectionCount = 0;

          this._ping();
        };

        _proto._onError = function _onError(error) {
          logger.debug('NetworkSocket _onError: %j', error);

          this._changeStatus(STATUS_DISCONNECTED);

          this.reconnect('_onError');
        };

        _proto._onMessage = function _onMessage(message) {
          var messageDecode = this._decode(message.data);

          var isEncrypted = this._onCheckMessageEncrypted(messageDecode);

          if (isEncrypted) {
            var strMessageDecode = undefined;

            try {
              strMessageDecode = xorCipher.decode_new(this._hashKey, messageDecode);
            } catch (error) {
              var dataLog = {
                userID: gfDataStore.instance.getSelfInfo().UserID,
                method: gfDataStore.instance.getSelfInfo().pek,
                key: gfDataStore.instance.getSelfInfo().cpm,
                hashKey: this._hashKey,
                messageDecode: messageDecode,
                message: message,
                error: error
              };
              logger.error("NetworkSocket _onMessage decode fail: ", dataLog);
            }

            try {
              messageDecode = JSON.parse(strMessageDecode);
            } catch (error) {
              var _dataLog = {
                userID: gfDataStore.instance.getSelfInfo().UserID,
                method: gfDataStore.instance.getSelfInfo().pek,
                key: gfDataStore.instance.getSelfInfo().cpm,
                hashKey: this._hashKey,
                messageDecode: messageDecode,
                strMessageDecode: strMessageDecode,
                message: message,
                error: error
              };
              logger.error("NetworkSocket _onMessage JSON.parse fail: ", _dataLog);
            }
          }

          logger.debug('NetworkSocket _onMessage: %j', messageDecode);

          if (messageDecode.requestId == 2001) {
            var _messageDecode$conten = messageDecode.content,
                cpm = _messageDecode$conten.cpm,
                pek = _messageDecode$conten.pek;

            this._setHashKeyDecode(cpm, pek);
          }

          if (messageDecode.requestId === 3999) {
            this._pong();
          }

          if (messageDecode.requestId === 3000) {
            this._handleNetworkPacketResponse(messageDecode);
          }

          if (messageDecode.requestId === 2019) {
            //NO ACTION
            this._handleNoActionLongTime();
          } else {
            this._emitter.emit(gfNetworkEvent.EVENT_NEW_MESSAGE, messageDecode);
          }
        };

        _proto._onCheckMessageEncrypted = function _onCheckMessageEncrypted(message) {
          if (typeof message == "object") {
            return false;
          }

          return true;
        };

        _proto._setHashKeyDecode = function _setHashKeyDecode(method, key) {
          if (!method || !key) {
            logger.debug("NetworkSocket: No have method or key");
            return;
          }

          this._hashKey = hash(method, key);
        };

        _proto._onClose = function _onClose(event) {
          var _this = this;

          logger.debug('NetworkSocket _onClose: %j', event);

          this._changeStatus(STATUS_DISCONNECTED);

          this._cleanupTimer();

          this._removeHandleConnectionEvent();

          this._socket = null;

          if (this._liveStatus == LIVE_STATUS_CONNECT) {
            this._reconnectInfo.reconnectIntervalId = setTimeout(function () {
              _this.connect();
            }, this._reconnectInfo.reconnectionDelay);
          }
        };

        _proto._cleanupTimer = function _cleanupTimer() {
          clearTimeout(this._pingInfo.pingIntervalId);
          clearTimeout(this._pingInfo.pongIntervalId);
          clearTimeout(this._reconnectInfo.reconnectIntervalId);
          this._pingInfo.isSendingPing = false;
        };

        _proto._ping = function _ping(isPingImmediately) {
          var _this2 = this;

          if (isPingImmediately === void 0) {
            isPingImmediately = false;
          }

          if (this._liveStatus !== LIVE_STATUS_CLOSED) {
            var delayPing = isPingImmediately ? 0 : this._pingInfo.pingInterval;
            this._pingInfo.pingIntervalId = setTimeout(function () {
              if (!_this2._pingInfo.isSendingPing) {
                _this2._pingInfo.lastPingTime = Date.now();

                var isSendSuccess = _this2.send({
                  requestId: 3999,
                  content: {}
                });

                if (isSendSuccess) {
                  _this2._pingInfo.isSendingPing = true;
                }
              }

              clearTimeout(_this2._pingInfo.pongIntervalId);
              _this2._pingInfo.pongIntervalId = setTimeout(function () {
                logger.debug("pong timeout -> reconnect.");

                if (_this2._status == STATUS_CONNECTED) {
                  _this2._changeStatus(STATUS_DISCONNECTED);
                }

                _this2._ping(true);

                if (_this2._socket) {
                  _this2.close('PONG TIMEOUT', true);
                }

                _this2.reconnect('pong timeout');
              }, _this2._pingInfo.pingTimeout); // logger.debug("ping");
            }, delayPing);
          } else {
            this._cleanupTimer();
          }
        };

        _proto._pong = function _pong() {
          clearTimeout(this._pingInfo.pongIntervalId);
          this._pingInfo.delay = Date.now() - this._pingInfo.lastPingTime;
          this._pingInfo.isSendingPing = false;

          this._ping();

          if (this._status != STATUS_CONNECTED) {
            this._changeStatus(STATUS_CONNECTED);

            if (this._reconnectInfo.reconnectionCount > 0) {
              this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_RECONNECTED);

              this._reconnectInfo.reconnectionCount = 0;
            }
          }

          for (var i = 0; i < this._msgQueue.length; ++i) {
            if (this._status === STATUS_CONNECTED) {
              this._socket.send(this._encode(this._msgQueue[i]));
            }
          }

          this._msgQueue.length = 0;

          this._emitter.emit(gfNetworkEvent.EVENT_NETWORK_PINGPONG, this._pingInfo.delay); // logger.debug("pong: %s", this._pingInfo.delay);

        };

        _proto._handleNetworkPacketResponse = function _handleNetworkPacketResponse(_ref) {
          var content = _ref.content;

          switch (content.code) {
            case 1:
              // Login in other device.
              this.close('EVENT_LOGIN_IN_OTHER_DEVICE', false);

              this._emitter.emit(gfNetworkEvent.EVENT_LOGIN_IN_OTHER_DEVICE);

              break;

            case 2:
              // Authen fail
              this.close('EVENT_AUTHEN_FAIL', false);

              this._emitter.emit(gfNetworkEvent.EVENT_AUTHEN_FAIL);

              break;

            default:
              error(content);
              break;
          }
        };

        _proto.isAvailable = function isAvailable() {
          return this._liveStatus !== LIVE_STATUS_CLOSED;
        };

        _proto._changeStatus = function _changeStatus(status) {
          logger.debug("NetworkSocket _changeStatus from [%s] to [%s]", this._status, status);
          this._status = status;
        };

        _proto._encode = function _encode(message) {
          return globalThis.msgpack.encode(message); // return undefined;
        };

        _proto._decode = function _decode(byteData) {
          var arr = new Uint8Array(byteData);
          var buf = arr.buffer;
          return globalThis.msgpack.decode(new Uint8Array(buf)); // return undefined;
        };

        _proto._handleNoActionLongTime = function _handleNoActionLongTime() {
          this.close('EVENT_NO_ACTION_LONG_TIME');

          this._emitter.emit(gfNetworkEvent.EVENT_NO_ACTION_LONG_TIME);
        };

        return gfNetworkSocket;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPlayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfNetworkGameEvent.ts', './gfWallet.ts', './loadConfigAsync.ts', './gfLocalize.ts', './gfFishManager.ts', './gfBallTray.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Node, Sprite, warn, Button, Animation, Tween, tween, log, Component, formatMoney, setOpacity, getPostionInOtherNode, gfBaseEvents, delay, fadeOut, call, gfEventEmitter, gfBaseConfig, registerEvent, formatUserName, getBetValue, setBetValue, getRotation, removeEvents, gfReferenceManager, gfDataStore, gfNetworkGameEvent, gfWallet, loadConfigAsync, gfLocalize, gfFishManager, GfBallTray;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      warn = module.warn;
      Button = module.Button;
      Animation = module.Animation;
      Tween = module.Tween;
      tween = module.tween;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
      setOpacity = module.setOpacity;
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      delay = module.delay;
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      formatUserName = module.formatUserName;
      getBetValue = module.getBetValue;
      setBetValue = module.setBetValue;
      getRotation = module.getRotation;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      gfWallet = module.gfWallet;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      GfBallTray = module.GfBallTray;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _temp;

      cclegacy._RF.push({}, "53ffflFBBhP7KzpIBzR/K/9", "gfPlayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPlayer = exports('gfPlayer', (_dec = ccclass('gfPlayer'), _dec2 = property(Label), _dec3 = property(gfWallet), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Sprite), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec10 = property(GfBallTray), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfPlayer, _Component);

        function gfPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "txtUserName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "wallet", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtBet", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gun", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "avatar", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnPlus", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnMinus", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "_gunIndex", _descriptor8, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_gunValue", 0);

          _initializerDefineProperty(_assertThisInitialized(_this), "ballTray", _descriptor9, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isGunSkill", false);

          _defineProperty(_assertThisInitialized(_this), "_userID", null);

          _defineProperty(_assertThisInitialized(_this), "isMe", false);

          _defineProperty(_assertThisInitialized(_this), "DeskStation", -1);

          _defineProperty(_assertThisInitialized(_this), "effectIsMe", null);

          _defineProperty(_assertThisInitialized(_this), "effectMaxGun", null);

          _defineProperty(_assertThisInitialized(_this), "waitingText", null);

          _defineProperty(_assertThisInitialized(_this), "avatarAtlas", void 0);

          _defineProperty(_assertThisInitialized(_this), "gunSprite", null);

          _defineProperty(_assertThisInitialized(_this), "index", -1);

          _defineProperty(_assertThisInitialized(_this), "isFreezed", void 0);

          return _this;
        }

        var _proto = gfPlayer.prototype;

        _proto.getGunIndex = function getGunIndex() {
          return this._gunIndex;
        };

        _proto.setGunIndex = function setGunIndex(gunIndex) {
          this._gunIndex = gunIndex;
        };

        _proto.getIsGunSkill = function getIsGunSkill() {
          return this._isGunSkill;
        };

        _proto.setIsGunSkill = function setIsGunSkill(isGunSkill) {
          this._isGunSkill = isGunSkill;
        };

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.effectIsMe.active = true;
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.AUTO_BOT.START_BOT, this.onStartBot, this);
        };

        _proto.initObj = function initObj(data) {
          this.isMe = data.DeskStation === gfDataStore.instance.getSelfDeskStation();

          if (data.UserID === this._userID && !this.isMe) {
            this.updateData(data);
            return;
          }

          this.DeskStation = data.DeskStation;
          this._userID = data.UserID;
          this.reset();
          this.setActive(true);
          this.updateAvatar(data);
          this.txtUserName.string = formatUserName(data.Username);
          this.forceUpdateWallet(data.Wallet);
          this.toggleBtnPlusMinus();

          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              isLockGun: false,
              skillLock: false
            });
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
            this.effectIsMe.setPosition(this.node.getPosition());
            this.effectMaxGun.active = false; // @ts-ignore

            this.effectMaxGun.position.x = this.node.position.x;

            if (data.BulletMultiple == 0) {
              data.BulletMultiple = getBetValue(gfBaseConfig.instance.GameId, gfDataStore.instance.getCurrentRoom());
            }
          }

          this.waitingText.active = false;
          this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

          if (gfDataStore.instance.isAutoBot() && this.isMe) {
            this._gunIndex = gfDataStore.instance.getBotSetting().bulletIndex;
          }

          this._updateGun();

          if (gfFishManager.instance.isDragonInGame()) {
            this.resumeBallTray(data.Balls);
          } else if (data.Balls) {
            warn("DRAGON SHOULD BE IN GAME");
          }

          if (this.isMe) {
            var config = gfDataStore.instance.getGunValue();
            var wallet = this.wallet.getDisplayWallet();
            var realWallet = this.wallet.getRealWallet();

            if (wallet < this._gunValue) {
              if (wallet < config[0]) {
                if (!this.checkIfHaveDragon()) {
                  if (realWallet < config[0]) {
                    gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
                    this.showPopupNoMoney();
                  }
                }
              } else {
                for (var index = config.length - 1; index >= 0; index--) {
                  var gunValue = config[index];

                  if (wallet >= gunValue) {
                    this._gunIndex = gfDataStore.instance.getBulletIndex(config[index]);

                    this._updateGun();

                    return true;
                  }
                }
              }
            }
          }
        };

        _proto.updateAvatar = function updateAvatar(data) {
          if (this.avatarAtlas) {
            var frameAvatar = this.avatarAtlas.getSpriteFrame(data.Avatar);

            if (!frameAvatar) {
              frameAvatar = this.avatarAtlas.getSpriteFrame(gfBaseConfig.instance.DEFAULT_AVATAR);
            }

            this.avatar.spriteFrame = frameAvatar;
          }
        };

        _proto.updateData = function updateData(data) {
          this.updateAvatar(data);
          this.txtUserName.string = formatUserName(data.Username);
          this.forceUpdateWallet(data.Wallet);
          this.toggleBtnPlusMinus();
          this.waitingText.active = false;
          this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

          this._updateGun();
        };

        _proto.isActive = function isActive() {
          return this.node.active;
        };

        _proto.toggleBtnPlusMinus = function toggleBtnPlusMinus() {
          if (this.btnMinus) this.btnMinus.active = this.isMe;
          if (this.btnPlus) this.btnPlus.active = this.isMe;
        } // _hideBtnPlusMinus() {
        //     if (this.btnMinus) this.btnMinus.active = false;
        //     if (this.btnPlus) this.btnPlus.active = false;
        // }
        ;

        _proto.updateGunData = function updateGunData(gunIndex) {
          this._gunIndex = gunIndex;

          this._updateGun();
        };

        _proto._updateGun = function _updateGun() {
          if (this.btnMinus) this.btnMinus.getComponent(Button).interactable = !(this._gunIndex === 0);
          if (this.btnPlus) this.btnPlus.getComponent(Button).interactable = !(this._gunIndex === gfDataStore.instance.getTotalGun() - 1);
          this._gunValue = gfDataStore.instance.getGunValue()[this._gunIndex];
          this.txtBet.string = formatMoney(this._gunValue);

          this._playEffectChangeGun();

          if (this.isMe && (gfDataStore.instance.isAutoBot() || gfDataStore.instance.getSelfInfo().skillLock)) {
            if (this.btnPlus) this.btnPlus.getComponent(Button).interactable = false;
            if (this.btnMinus) this.btnMinus.getComponent(Button).interactable = false;
          }
        };

        _proto._playEffectChangeGun = function _playEffectChangeGun() {
          this._playEffectFire();
        };

        _proto._playEffectFire = function _playEffectFire(gunName) {
          var spriteGunNode = this.gun.getChildByName('SpriteGun');

          if (spriteGunNode) {
            if (!gunName) gunName = "gun" + (this._gunIndex + 1);
            this._isGunSkill = Object.values(gfBaseConfig.instance.GunSkill).indexOf(gunName) > -1;
            spriteGunNode.getComponent(Sprite).spriteFrame = this.gunSprite[gunName];
            spriteGunNode.getComponent(Animation).play();
          }
        };

        _proto.lockBet = function lockBet(isLock) {
          if (isLock === void 0) {
            isLock = false;
          }

          if (isLock) {
            if (this.btnPlus) this.btnPlus.getComponent(Button).interactable = false;
            if (this.btnMinus) this.btnMinus.getComponent(Button).interactable = false;
          } else {
            this._updateGun();
          }
        };

        _proto.onBtnPlus = function onBtnPlus() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK_BET);
          this._gunIndex++;

          if (!this._checkMaxGun()) {
            this._gunIndex--;
            return;
          }

          if (this._gunIndex >= gfDataStore.instance.getTotalGun()) {
            this._gunIndex = 0;
          }

          this._updateGun();
        };

        _proto._checkMaxGun = function _checkMaxGun() {
          var _this2 = this;

          if (gfDataStore.instance.getGunValue()[this._gunIndex] > this.wallet.getDisplayWallet()) {
            this.effectMaxGun.active = true;
            Tween.stopAllByTarget(this.effectMaxGun);
            setOpacity(this.effectMaxGun, 255);
            var fadeAction = tween(this.effectMaxGun);
            fadeAction.then(delay(1));
            fadeAction.then(fadeOut(2));
            fadeAction.then(call(function () {
              _this2.effectMaxGun.active = false;
            }));
            fadeAction.start();
            return false;
          }

          return true;
        };

        _proto.onBtnMinus = function onBtnMinus() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK_BET);
          this._gunIndex--;

          if (this._gunIndex < 0) {
            this._gunIndex = gfDataStore.instance.getTotalGun() - 1;
          }

          this._updateGun();
        };

        _proto.onUserFire = function onUserFire(data) {
          if (this.isMe) {
            if (gfDataStore.instance.isReachMaxNumBullet()) return;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.GUN_FIRE, this._gunIndex);
          }

          this.gun.angle = this.checkAngleByLockFish(data);

          if (!this.isMe) {
            this._gunIndex = gfDataStore.instance.getBulletIndex(data.BulletMultiple);

            this._updateGun();
          } else {
            setBetValue(gfBaseConfig.instance.GameId, gfDataStore.instance.getCurrentRoom(), data.BulletMultiple);
            if (this.effectIsMe.active) this.effectIsMe.active = false;

            if (data.LockedFishID > -1) {
              this._playEffectLockFish(data);
            }
          }

          this._playEffectFire();

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_BULLET, data);
        };

        _proto.checkAngleByLockFish = function checkAngleByLockFish(data) {
          if (data.LockedFishID >= 0) {
            var fish = gfFishManager.instance.getFishById(data.LockedFishID);
            var startPos = getPostionInOtherNode(gfReferenceManager.instance.getNodeGameLayer(), this.gun);
            var angle = 0;

            if (fish) {
              var endPos = fish.getLockPositionByNodeSpace(gfReferenceManager.instance.getNodeGameLayer());
              angle = getRotation(endPos, startPos);

              if (this.index > 1) {
                angle += 360;
              }

              data.Angle = angle;
            }
          }

          return data.Angle;
        };

        _proto.onStartBot = function onStartBot() {
          if (!this.isMe) return;
          this.lockBet(true);

          var _DataStore$instance$g = gfDataStore.instance.getSelfInfo(),
              isLockGun = _DataStore$instance$g.isLockGun,
              skillLock = _DataStore$instance$g.skillLock;
        };

        _proto._updateAngle = function _updateAngle(angle) {
          if (angle < 0 && angle > -90) {
            return 0;
          }

          if (angle < -90 && angle > -180) {
            return -180;
          }

          return angle;
        };

        _proto.rotateGun = function rotateGun(mousePos) {
          var angle = getRotation(mousePos, this.gun.worldPosition);
          this.gun.angle = this._updateAngle(angle);
        };

        _proto.getGunAngle = function getGunAngle() {
          return this.gun.angle;
        };

        _proto.forceUpdateWallet = function forceUpdateWallet(value) {
          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              Wallet: value
            });
          }

          this.wallet.forceUpdateWallet(value);
        };

        _proto.updateWallet = function updateWallet(value) {
          if (this.isMe) {
            gfDataStore.instance.setSelfInfo({
              Wallet: value
            });
            log("REAL WALLET:" + formatMoney(value));
          }

          this.wallet.updateWallet(value);
        };

        _proto.addGoldReward = function addGoldReward(reward) {
          this.wallet.addGoldReward(reward);
        };

        _proto.getRealWallet = function getRealWallet() {
          return this.wallet.getRealWallet();
        };

        _proto.addToDisplayWallet = function addToDisplayWallet(amount) {
          this.wallet.addToDisplay(amount);

          if (amount > 0 && gfDataStore.instance.isAutoPaused()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
          }
        };

        _proto.getBallHolder = function getBallHolder(index) {
          return this.ballTray.getBallHolder(index);
        };

        _proto.checkHaveBallTrayOnActived = function checkHaveBallTrayOnActived() {
          if (this.ballTray && !this.ballTray.isAppear()) {
            this.resumeBallTray(0);
          }
        };

        _proto.showBallTray = function showBallTray() {
          var _this3 = this;

          if (!this.ballTray) return;
          this.scheduleOnce(function () {
            _this3.ballTray.appear();
          }, 1);
        };

        _proto.resumeBallTray = function resumeBallTray(ballCount) {
          if (ballCount === void 0) {
            ballCount = 0;
          }

          if (!this.ballTray) return;
          this.ballTray.appear();
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.ADD_BALL_TO_PLAYER, {
            ballCount: ballCount,
            playerIndex: this.index
          });
          this.ballTray.onBallEnter(ballCount);
        };

        _proto.onBallDropDone = function onBallDropDone() {
          this.ballTray.onBallEnter();
        };

        _proto.hideBallTray = function hideBallTray() {
          if (!this.ballTray) return;
          this.ballTray.disappear();
        };

        _proto.reset = function reset() {
          this.unscheduleAllCallbacks();
          this.isFreezed = false;
          var angle = 90;

          if (this.index == 2 || this.index == 3) {
            angle = -90;
          }

          this.gun.angle = angle;

          if (this.ballTray) {
            this.ballTray.hide();
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          this.unscheduleAllCallbacks();

          if (this.isMe) {
            if (this.effectIsMe.active) this.effectIsMe.active = false;
            gfDataStore.instance.setSelfInfo({
              isLockGun: false
            });
          }

          this.setActive(false);

          if (this.ballTray) {
            this.ballTray.hide();
          }

          this.txtUserName.string = '';
          this.wallet.resetOnExit();
          this.txtBet.string = '';
          this._gunIndex = 0;
          this._gunValue = 0;
          this.avatar.spriteFrame = null;
          this.resetUserId();
        };

        _proto.setActive = function setActive(active) {
          if (active === void 0) {
            active = true;
          }

          this.node.active = active;
        };

        _proto.resetUserId = function resetUserId() {
          this._userID = null;
        };

        _proto._playEffectLockFish = function _playEffectLockFish(data) {
          var fish = gfFishManager.instance.getFishById(data.LockedFishID);

          if (fish) {
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.START_LOCK_FISH, fish, this.gun);
          }
        };

        _proto.checkUpdateGunByWallet = function checkUpdateGunByWallet() {
          var config = gfDataStore.instance.getGunValue();
          var wallet = this.wallet.getDisplayWallet();
          var realWallet = this.wallet.getRealWallet();

          if (wallet < this._gunValue) {
            if (wallet < config[0]) {
              if (!this.checkIfHaveDragon()) {
                if (realWallet < config[0]) {
                  gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
                  this.showPopupNoMoney();
                }
              }

              return false;
            }

            if (config[this._gunIndex] >= wallet && !gfDataStore.instance.isAutoBot()) {
              for (var i = this._gunIndex - 1; i >= 0; --i) {
                if (config[i] <= wallet) {
                  this._gunIndex = i;
                  break;
                }
              }

              this._updateGun();
            } else if (gfDataStore.instance.isAutoBot() && config[this._gunIndex] > realWallet) {
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_BOT.END_AUTO_BOT);
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_AUTO_BOT);
              return false;
            }
          }

          return true;
        };

        _proto.checkIfHaveDragon = function checkIfHaveDragon() {
          var _this4 = this;

          var config = gfDataStore.instance.getGunValue();
          var effectDragon = gfReferenceManager.instance.getEffectLayer().getComponent('GfEffectDragon');

          if (effectDragon) {
            var ballCount = effectDragon.getMyTotalBall();

            if (ballCount === 0 && this.wallet.getRealWallet() < config[0]) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
              this.showPopupNoMoney();
            } else if (ballCount > 0 && !gfDataStore.instance.isAutoPaused()) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.PAUSE_AUTO_FIRE);
              var msg = gfLocalize.instance.txtCustomNotify.NotEnoughCoin;

              var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
                  LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

              if (LOGIN_IFRAME && typeof globalThis.ingameDeposit === 'function') {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, {
                  customMsg: msg,
                  customCallbacks: {
                    confirmCallback: function confirmCallback() {
                      var currentBallCount = effectDragon.getMyTotalBall();

                      if (currentBallCount === 0 && _this4.wallet.getRealWallet() >= config[0] && gfDataStore.instance.isAutoPaused()) {
                        gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
                      } else {
                        globalThis.ingameDeposit();
                      }
                    },
                    rejectCallback: function rejectCallback() {}
                  }
                });
              } else {
                gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, {
                  customMsg: msg,
                  customCallbacks: {
                    confirmCallback: function confirmCallback() {
                      var currentBallCount = effectDragon.getMyTotalBall();

                      if (currentBallCount === 0 && _this4.wallet.getRealWallet() >= config[0] && gfDataStore.instance.isAutoPaused()) {
                        gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
                      }
                    },
                    rejectCallback: function rejectCallback() {}
                  }
                });
              }
            }

            return true;
          }

          return false;
        };

        _proto.isHoldingSkillGun = function isHoldingSkillGun() {
          return this._isGunSkill;
        };

        _proto.showPopupNoMoney = function showPopupNoMoney() {
          if (!this.isMe) return;
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME);
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        };

        return gfPlayer;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtUserName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wallet", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "txtBet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "avatar", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnPlus", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnMinus", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "_gunIndex", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "ballTray", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragon.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './gfBaseFish.ts', './gfDragonCacheData.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, Color, _decorator, sp, sys, UIOpacity, UITransform, Vec3, tween, v3, gfBaseEvents, stopAllActions, fadeOut, gfEventEmitter, gfBaseConfig, SetZIndex, isPointInScreen, gfDataStore, gfBaseFish, BoneCacheValue;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      _decorator = module._decorator;
      sp = module.sp;
      sys = module.sys;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      tween = module.tween;
      v3 = module.v3;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      isPointInScreen = module.isPointInScreen;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      BoneCacheValue = module.BoneCacheValue;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "558eeXCIjhNK6dXof0Xebcv", "gfDragon", undefined);

      var animationList = ["Swim In", "Swim Out", "Swim Loop"];
      var TIME_ANIM_SWIM_IN = 5.997;
      var TIME_ANIM_SWIM_LOOP = 29.985;
      var TIME_ANIM_SWIM_OUT = 5.997;
      var BASE_TIME_SCALE = 1 / 6;
      var TOTAL_LIVE_TIME = 42;
      var FLAG_COLOR = new Color(230, 230, 230, 255);
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfDragon = exports('gfDragon', (_dec = ccclass('gfDragon'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(gfDragon, _gfBaseFish);

        function gfDragon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "fishAnim", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "listBox", void 0);

          _defineProperty(_assertThisInitialized(_this), "durationMap", void 0);

          _defineProperty(_assertThisInitialized(_this), "listBoneName", void 0);

          _defineProperty(_assertThisInitialized(_this), "bone", void 0);

          _defineProperty(_assertThisInitialized(_this), "_timeRemain", void 0);

          _defineProperty(_assertThisInitialized(_this), "_mainMaterial", void 0);

          _defineProperty(_assertThisInitialized(_this), "_isLoaded", false);

          _defineProperty(_assertThisInitialized(_this), "curAnimTime", void 0);

          _defineProperty(_assertThisInitialized(_this), "curAnimName", void 0);

          return _this;
        }

        var _proto = gfDragon.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.DRAGON);
          this.fishAnim = this.node.getComponent(sp.Skeleton);
          this.fishAnim.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME);
        };

        _proto.start = function start() {
          if (!this._isLoaded) {
            this.setupBones();
          }
        };

        _proto.setupBones = function setupBones() {
          this.durationMap = {};

          for (var i = 0; i < animationList.length; i++) {
            var animName = animationList[i];
            var pos = this.fishAnim.skeletonData._skeletonJson.animations[animName].paths['Path Loop'].position;
            var duration = pos[pos.length - 1].time / BASE_TIME_SCALE;
            this.durationMap[animName] = duration;
          }

          this.listBoneName = ["Head", "Body 3", "Body 6", "Body 9", "Body 12", "Body 15", "Body 18", "Body 21", "Body 24", "Body 27", "Body 30", "Body 33", "Body 36", "Body 39", "Body 42", "Body 45", "Body 47", "All Tail Position"];
          this.bone = [];

          if (!sys.isNative) {
            for (var _i = 0; _i < this.listBoneName.length; _i++) {
              this.bone[_i] = this.fishAnim.findBone(this.listBoneName[_i]);
            }
          }

          this._isLoaded = true;
        };

        _proto.initFishData = function initFishData(data) {
          this._isDie = false;
          this._isOutScreen = true;
          this.node.getComponent(UIOpacity).opacity = 255;
          this.node.active = true;
          this._FishID = data.FishID;
          this._FishKind = data.FishKind;
          this.unscheduleAllCallbacks();
          this.fishAnim.color = Color.WHITE;
          stopAllActions(this.fishAnim.node);
          var timeRemain = TOTAL_LIVE_TIME - Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000);

          if (!this._isLoaded) {
            this.setupBones();
          }

          this.startMoving(timeRemain);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.DRAGON);
        };

        _proto.setDragonAnim = function setDragonAnim(trackInd, animName, loop, timePassed) {
          if (timePassed === void 0) {
            timePassed = 0;
          }

          if (!this._isDie) {
            if (animName === "Swim In" || animName === "Swim Out") {
              this.schedule(this.checkOutScreen, 0.2);
            } else {
              this.unschedule(this.checkOutScreen);
              this._isOutScreen = false;
            }
          }

          this.fishAnim.setAnimation(trackInd, animName, loop);

          if (timePassed > 0) {
            // @ts-ignore
            cc.sys.isNative ? this.fishAnim._updateRealtime(timePassed) : this.fishAnim.updateAnimation(timePassed);
          }

          this.curAnimTime = timePassed;
          this.curAnimName = animName;

          if (!BoneCacheValue[animName]) {
            BoneCacheValue[animName] = [];
          }
        };

        _proto.playEffectDie = function playEffectDie() {
          var _this2 = this;

          this.unschedule(this.checkOutScreen);
          this.fishAnim.timeScale = 0;
          stopAllActions(this.fishAnim.node);
          this.fishAnim.setCompleteListener(function () {});
          this.fishAnim.clearTrack(0);
          var explBones = [0, 14, 6, 17, 9];
          var explPositions = [];

          for (var i = 0; i < explBones.length; ++i) {
            explPositions.push(this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.bone[explBones[i]].worldX, this.bone[explBones[i]].worldY)));
          }

          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.SMALL_EXPLOSION, explPositions);
          tween(this.fishAnim.node).by(0.1, {
            position: v3(0, 10)
          }).by(0.1, {
            position: v3(0, -10)
          }).by(0.1, {
            position: v3(0, -10)
          }).by(0.1, {
            position: v3(10, 10)
          }).by(0.1, {
            position: v3(-10, 0)
          }).by(0.1, {
            position: v3(-10, 0)
          }).by(0.1, {
            position: v3(10, 0)
          }).by(0.1, {
            position: v3(0, 10)
          }).by(0.1, {
            position: v3(0, -10)
          }).by(0.1, {
            position: v3(0, -10)
          }).by(0.1, {
            position: v3(10, 10)
          }).by(0.1, {
            position: v3(-10, 0)
          }).by(0.1, {
            position: v3(-10, 0)
          }).by(0.1, {
            position: v3(10, 0)
          }).start();
          this.fishAnim.color = Color.RED;
          tween(this.fishAnim).repeat(3, tween().call(function () {
            _this2.fishAnim.color = Color.RED;
          }).delay(0.35).call(function () {
            _this2.fishAnim.color = Color.WHITE;
          }).delay(0.35)).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10
            });
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.BIG_EXPLOSION, _this2.node.getComponent(UITransform).convertToWorldSpaceAR(_this2.node.getChildByName('Box6').position));
          }).then(fadeOut(0.1)).delay(0.75).call(function () {
            _this2.onDie();
          }).start();
        };

        _proto.startMoving = function startMoving(timeRemain) {
          var _this3 = this;

          this.node.setPosition(new Vec3(gfBaseConfig.instance.AppSize.Width / 2, gfBaseConfig.instance.AppSize.Height / 2));
          this.fishAnim.timeScale = BASE_TIME_SCALE;

          if (timeRemain <= TIME_ANIM_SWIM_OUT) {
            this.setDragonAnim(0, "Swim Out", false, TIME_ANIM_SWIM_OUT - timeRemain);
            this.fishAnim.setCompleteListener(function () {});
          } else if (timeRemain <= TIME_ANIM_SWIM_OUT + TIME_ANIM_SWIM_LOOP) {
            var swimLoopTimeLeft = timeRemain - TIME_ANIM_SWIM_OUT;
            this.setDragonAnim(0, "Swim Loop", false, TIME_ANIM_SWIM_LOOP - swimLoopTimeLeft);
            this.fishAnim.setCompleteListener(function () {
              _this3.setDragonAnim(0, "Swim Out", false);

              _this3.fishAnim.setCompleteListener(function () {});
            });
          } else {
            var swimInTimeLeft = timeRemain - TIME_ANIM_SWIM_OUT - TIME_ANIM_SWIM_LOOP;
            var timePassed = Math.max(TIME_ANIM_SWIM_IN - swimInTimeLeft, 0);
            this.setDragonAnim(0, "Swim In", false, timePassed);
            this.fishAnim.setCompleteListener(function () {
              _this3.setDragonAnim(0, "Swim Loop", false);

              _this3.fishAnim.setCompleteListener(function () {
                _this3.setDragonAnim(0, "Swim Out", false);

                _this3.fishAnim.setCompleteListener(function () {});
              });
            });
          }
        };

        _proto.onHit = function onHit() {
          var _this4 = this;

          this.fishAnim.color = FLAG_COLOR;
          this.scheduleOnce(function () {
            _this4.fishAnim.color = Color.WHITE;
          }, 0.1);
        };

        _proto.onCatch = function onCatch() {
          this._isDie = true;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_DIE);
          this.playEffectDie();
        };

        _proto.onDie = function onDie(isResume) {
          if (isResume === void 0) {
            isResume = false;
          }

          if (!isResume) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }

          this._isDie = true;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this._FishID);
          this.node.removeFromParent();
        };

        _proto.update = function update(dt) {
          if (this._isDie) return;
        };

        _proto.checkOutScreen = function checkOutScreen() {
          var lastState = this._isOutScreen;
          var head = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box1').position)));
          var tail = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box12').position)));
          this._isOutScreen = !(isPointInScreen(head) || isPointInScreen(tail));

          if (lastState && !this._isOutScreen) {
            gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.BOSS_ON_GAME);
          }
        };

        _proto.getLockPositionByNodeSpace = function getLockPositionByNodeSpace(node) {
          var head = this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box1').position));
          var tail = this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box12').position));
          var body = this.node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(this.node.getChildByName('Box5').position));
          var bodyIndexList = [head, body, tail];

          for (var i = 0; i < bodyIndexList.length; ++i) {
            if (isPointInScreen(this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(bodyIndexList[i]))) {
              return node.getComponent(UITransform).convertToNodeSpaceAR(bodyIndexList[i]);
            }
          }

          return node.getComponent(UITransform).convertToNodeSpaceAR(tail);
        };

        _proto.getBallDropPosition = function getBallDropPosition() {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(this.node.getChildByName('Box5').position);
        };

        _proto.onDestroy = function onDestroy() {};

        _proto.moveOut = function moveOut() {};

        _proto.onIced = function onIced() {};

        _proto.returnPool = function returnPool() {};

        return gfDragon;
      }(gfBaseFish), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup05.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, misc, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      misc = module.misc;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5595fy2gOdBJYy082YR5U9W", "gfFishGroup05", undefined);

      var gfFishGroup5 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup5() {}

        gfFishGroup5.create = function create() {
          // Two cirle rotating then spread out
          var width = gfBaseConfig.instance.AppSize.Width / 2;
          var height = gfBaseConfig.instance.AppSize.Height / 2;
          var offsetX = 480 * 0.67 * gfFishGroupData.flipCoord;
          var radismain = 360 * 0.67;
          this.circleCallback(30, v2(width - offsetX, height), radismain, 16, 720);
          this.circleCallback(30, v2(width + offsetX, height), radismain, 18, 720 + 90);
          this.circleCallback(30, v2(width - offsetX, height), radismain - 34.5, 20, 720 + 180);
          this.circleCallback(30, v2(width + offsetX, height), radismain - 36, 21, 720 + 180 + 45);
          this.circleCallback(18, v2(width - offsetX, height), radismain - 36 - 56, 22, 720 + 180 + 90);
          this.circleCallback(18, v2(width + offsetX, height), radismain - 34.5 - 58.5, 22.66, 720 + 180 + 90 + 30);
          this.circleCallback(8, v2(width - offsetX, height), radismain - 58 - 65 - 34.5, 23.33, 720 + 180 + 90 + 60);
          this.circleCallback(8, v2(width + offsetX, height), radismain - 36 - 56 - 68, 24, 720 + 180 + 90 + 60 + 30);
          this.circleCallback(1, v2(width - offsetX, height), 0, 24.66, -90);
          this.circleCallback(1, v2(width + offsetX, height), 0, 25.33, -90);
        };

        gfFishGroup5.circleCallback = function circleCallback(index, center, radius, fishDuration, angle) {
          var AppSize = gfBaseConfig.instance.AppSize;
          var angleStep = 360 / index;
          var angleOffset = gfFishGroupData.isFlipped() ? 180 : 0;

          for (var i = 0; i < index; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var startAngle = (i * angleStep + angleOffset) * Math.PI / 180;
            var x = center.x + Math.cos(startAngle) * radius;
            var y = center.y + Math.sin(startAngle) * radius;
            var timeSpent = gfFishGroupData.timeSkipped - data.TimeFreeze;
            var speed = 180;
            data.moveAction = new FishMoveActions(v2(x, y), misc.radiansToDegrees(Math.atan2(y - center.y, x - center.x)), timeSpent);
            data.moveAction.appendAction(FISH_ACTION.CircleBy, {
              time: fishDuration,
              center: center,
              radius: radius,
              angle: angle
            });
            data.moveAction.appendAction(FISH_ACTION.MoveByDistance, {
              time: AppSize.Width / speed,
              distance: AppSize.Width
            });
            data.skipFlipY = true;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup5;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gameCommonUtils.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, sys, director, game, rect, setOpacity, loadConfigAsync;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      director = module.director;
      game = module.game;
      rect = module.rect;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "57626ZrpD9Ds4C68txemV+u", "gameCommonUtils", undefined);

      var lodash = _;

      var GameCommonUtils = /*#__PURE__*/function () {
        function GameCommonUtils() {
          var _this = this;

          _defineProperty(this, "getUrlParam", function (name) {
            if (sys.isNative) return null;
            var url = new URL(window.location);
            return url.searchParams.get(name);
          });

          _defineProperty(this, "checkConditionCloseGameIframe", function () {
            var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

            if (!LOGIN_IFRAME) {
              return true;
            }

            var returnUrl = _this.getUrlParam('ru');

            return returnUrl && LOGIN_IFRAME;
          });

          _defineProperty(this, "handleCloseGameIframe", function () {
            var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
                LOBBY_SCENE_NAME = _loadConfigAsync$getC2.LOBBY_SCENE_NAME,
                LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME;

            if (!LOGIN_IFRAME) {
              director.preloadScene(LOBBY_SCENE_NAME, function () {
                director.loadScene(LOBBY_SCENE_NAME);
              });
              return;
            }

            var returnUrl = _this.getUrlParam('ru');

            if (returnUrl && LOGIN_IFRAME) {
              if (returnUrl.trim() === 'close') {
                window.close();
              } else {
                window.location.href = returnUrl;
              }
            } else {
              location.reload();
            }
          });

          _defineProperty(this, "handleFlowOutGame", function () {
            var _loadConfigAsync$getC3 = loadConfigAsync.getConfig(),
                LOBBY_SCENE_NAME = _loadConfigAsync$getC3.LOBBY_SCENE_NAME,
                LOGIN_IFRAME = _loadConfigAsync$getC3.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              if (window && window.location) {
                window.location.reload();
              }
            } else {
              director.preloadScene(LOBBY_SCENE_NAME, function () {
                director.loadScene(LOBBY_SCENE_NAME);
              });
            }
          });

          _defineProperty(this, "handleBackLogin", function () {
            var _loadConfigAsync$getC4 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC4.LOGIN_IFRAME,
                LOBBY_SCENE_NAME = _loadConfigAsync$getC4.LOBBY_SCENE_NAME,
                IS_PRODUCTION = _loadConfigAsync$getC4.IS_PRODUCTION,
                LOGIN_SCENE_NAME = _loadConfigAsync$getC4.LOGIN_SCENE_NAME;

            if (LOGIN_IFRAME) {
              if (window && window.location) {
                window.location.reload();
              }
            } else {
              if (IS_PRODUCTION) {
                director.preloadScene(LOBBY_SCENE_NAME, function () {
                  director.loadScene(LOBBY_SCENE_NAME);
                });
              } else {
                var scene = director.getScene();
                var nodePersist = scene.getChildByName('OverlayPersistent');

                if (nodePersist) {
                  game.removePersistRootNode(nodePersist);
                }

                director.preloadScene(LOGIN_SCENE_NAME, function () {
                  director.loadScene(LOGIN_SCENE_NAME);
                });
              }
            }
          });

          _defineProperty(this, "getMessageSlot", function (mess) {
            if (mess === void 0) {
              mess = {};
            }

            var messageConfig = Object.assign({
              NAME: 'DialogMessage',
              NO_MONEY: 'Số dư trong ví không đủ, vui lòng nạp thêm để chơi tiếp.',
              NO_MONEY_EVENT: 'Số dư trong [wallet] không đủ, vui lòng nạp thêm để chơi tiếp.',
              LOST_CONNECT: 'Bạn đã bị mất kết nối. \n Vui lòng chờ ...',
              SPIN_4_EVER: 'Bạn đã mất kết nối. \n Vui lòng thử lại.',
              ANOTHER_ACCOUNT: 'Tài khoản của bạn đã đăng nhập từ thiết bị khác.',
              AUTHEN_FAILED: 'Xác thực tài khoản thất bại',
              DEPOSIT_MONEY: 'Số dư không đủ, bạn có muốn nạp thêm ?',
              MISMATCH_DATA: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại',
              SYSTEM_ERROR: 'Có lỗi xảy ra, vui lòng thử lại',
              DISCONNECT: 'Bị mất kết nối tới máy chủ\n Đang kết nối lại',
              NO_PLAYSESSION: 'Hệ thống không tìm thấy phiên chơi',
              GROUP_MAINTAIN: 'Hệ thống đang bảo trì.\nVui lòng quay lại sau.',
              NETWORK_WARNING: 'Đường truyền mạng yếu!',
              NETWORK_DISCONNECT: 'Bị mất kết nối tới máy chủ \nĐang kết nối lại',
              NO_FREESPIN_OPTION: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại',
              IN_PROGRESSING: 'Mạng chậm vui lòng đợi trong giây lát để hoàn thành\nlượt quay hoặc bấm xác nhận để tải lại game',
              SPIN_UNSUCCESS: 'Thao tác không thành công, vui lòng thử lại',
              ACCOUNT_BLOCKED: 'Tài khoản của bạn đã bị khoá, vui lòng liên hệ admin',
              QUEST_LOCK: 'Bạn chưa hoàn thành\nnhiệm vụ game trước'
            }, mess);

            var _loadConfigAsync$getC5 = loadConfigAsync.getConfig(),
                LOGIN_IFRAME = _loadConfigAsync$getC5.LOGIN_IFRAME;

            if (LOGIN_IFRAME) {
              messageConfig.ACCOUNT_BLOCKED = "Tài khoản bị khóa chơi game " + document.title.replace('Techplay - ', '');
            }

            return messageConfig;
          });

          _defineProperty(this, "getMessageSlotEng", function (mess) {
            if (mess === void 0) {
              mess = {};
            }

            return Object.assign({
              NAME: 'DialogMessage',
              NO_MONEY: 'You have run out of your balance, please top up.',
              LOST_CONNECT: 'Your device is not connected to the Internet.\nPlease try again.',
              SPIN_4_EVER: 'Your device is not connected to the Internet.\nPlease try again.',
              ANOTHER_ACCOUNT: 'You are logging in another device.',
              AUTHEN_FAILED: 'Authentication failed',
              DEPOSIT_MONEY: 'Your balance is not enough, do you want to top up?',
              MISMATCH_DATA: 'Data is not synchronized between client and server',
              SYSTEM_ERROR: 'System error, please try again later',
              DISCONNECT: 'Message Disconnect',
              NO_PLAYSESSION: 'Playsession is not correct',
              GROUP_MAINTAIN: 'Server is under maintenance, please try again later',
              NETWORK_WARNING: 'Đường truyền mạng yếu!',
              NETWORK_DISCONNECT: 'Bị mất kết nối tới máy chủ \nĐang kết nối lại',
              NO_FREESPIN_OPTION: 'Dữ liệu không đồng bộ với máy chủ, vui lòng thử lại',
              SPIN_UNSUCCESS: 'Thao tác không thành công, vui lòng thử lại',
              ACCOUNT_BLOCKED: 'Tài khoản của bạn đã bị khoá, vui lòng liên hệ admin'
            }, mess);
          });

          _defineProperty(this, "getBetValueWithGame", function (gameId, listBet) {
            if (!gameId) return '';
            var betValue = sys.localStorage.getItem('betValueWithGame');

            if (lodash.isEmpty(betValue)) {
              var newObj = {};
              newObj[gameId] = '';
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(newObj));
            } else {
              betValue = JSON.parse(betValue);

              if (lodash.isEmpty(listBet)) {
                return betValue[gameId];
              } else {
                if (lodash.isArray(listBet) && listBet.includes(betValue[gameId])) {
                  return betValue[gameId];
                } else {
                  var isExist = false;
                  Object.keys(listBet).map(function (betId) {
                    if (listBet[betId] === betValue[gameId]) {
                      isExist = true;
                    }
                  });

                  if (isExist) {
                    return betValue[gameId];
                  }
                }
              }
            }

            return '';
          });

          _defineProperty(this, "setBetValueWithGame", function (gameId, betId) {
            var betValue = sys.localStorage.getItem('betValueWithGame');

            if (lodash.isEmpty(betValue)) {
              var newObj = {};
              newObj[gameId] = betId;
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(newObj));
            } else {
              betValue = JSON.parse(betValue);
              betValue[gameId] = betId;
              sys.localStorage.setItem('betValueWithGame', JSON.stringify(betValue));
            }
          });

          _defineProperty(this, "getKeyWithGame", function (gameId, key, value) {
            if (value === void 0) {
              value = '';
            }

            if (!gameId || !key) return '';
            var betLinesValue = sys.localStorage.getItem(key);

            if (lodash.isEmpty(betLinesValue)) {
              var newObj = {};
              newObj[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(newObj));
            } else {
              betLinesValue = JSON.parse(betLinesValue);
              return betLinesValue[gameId] ? betLinesValue[gameId] : value;
            }

            return value;
          });

          _defineProperty(this, "setKeyWithGame", function (gameId, key, value) {
            if (value === void 0) {
              value = '';
            }

            if (!gameId || !key) return '';
            var betLinesValue = sys.localStorage.getItem(key);

            if (lodash.isEmpty(betLinesValue)) {
              var newObj = {};
              newObj[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(newObj));
            } else {
              betLinesValue = JSON.parse(betLinesValue);
              betLinesValue[gameId] = value;
              sys.localStorage.setItem(key, JSON.stringify(betLinesValue));
            }
          });

          _defineProperty(this, "optimizeScrollView", function (listView) {
            var view = listView.parent;
            var viewRect = rect(-view.width / 2, -listView.y - view.height, view.width, view.height);

            for (var i = 0; i < listView.children.length; i++) {
              var node = listView.children[i];

              if (viewRect.intersects(node.getBoundingBox())) {
                setOpacity(node, 255);
              } else {
                setOpacity(node, 0);
              }
            }
          });
        }

        var _proto = GameCommonUtils.prototype;

        _proto.isLoginIframe = function isLoginIframe() {
          var _loadConfigAsync$getC6 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC6.LOGIN_IFRAME;

          return LOGIN_IFRAME === true;
        };

        _proto.handleReleaseBundle = function handleReleaseBundle() {};

        return GameCommonUtils;
      }();

      var gameCommonUtils = exports('default', new GameCommonUtils());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataStore1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, KeyCode, gfDataStore;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      KeyCode = module.KeyCode;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "57ee3ETn+dC0bGeJi/mxVSS", "DataStore1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DataStore1985 = exports('default', (_dec = ccclass('DataStore1985'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfDataStore) {
        _inheritsLoose(DataStore1985, _gfDataStore);

        function DataStore1985() {
          var _this;

          _this = _gfDataStore.call(this) || this;

          _defineProperty(_assertThisInitialized(_this), "isSwitchHUDSkillToLeft", false);

          _defineProperty(_assertThisInitialized(_this), "curEnergyShield", null);

          _defineProperty(_assertThisInitialized(_this), "isProtectedState", false);

          _defineProperty(_assertThisInitialized(_this), "ping", null);

          _defineProperty(_assertThisInitialized(_this), "deltaTimeTouch", 40);

          _defineProperty(_assertThisInitialized(_this), "spaceShipIDTouch", -1);

          _defineProperty(_assertThisInitialized(_this), "shootIDTouch", -1);

          _defineProperty(_assertThisInitialized(_this), "spaceShipMoving", false);

          _defineProperty(_assertThisInitialized(_this), "Controller", {
            0: {
              Hotkey: KeyCode.KEY_Q
            },
            1: {
              Hotkey: KeyCode.KEY_W
            },
            2: {
              Hotkey: KeyCode.KEY_E
            },
            3: {
              Hotkey: KeyCode.KEY_D
            },
            4: {
              Hotkey: KeyCode.ESCAPE
            },
            5: {
              Hotkey: KeyCode.DIGIT_2
            },
            6: {
              Hotkey: KeyCode.DIGIT_3
            },
            7: {
              Hotkey: KeyCode.DIGIT_4
            },
            8: {
              Hotkey: KeyCode.DIGIT_5
            }
          });

          _defineProperty(_assertThisInitialized(_this), "isWaitJoinRoom", false);

          DataStore1985.instance = _assertThisInitialized(_this);

          _this.setSelfInfo({
            currentSkillID: -1
          });

          _this.ping = 0;
          return _this;
        }

        return DataStore1985;
      }(gfDataStore), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ES6Bullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './EnemyBulletWithTrail.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, EnemyBulletWithTrail;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      EnemyBulletWithTrail = module.EnemyBulletWithTrail;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "58207qeejlLCZW6blF1gL2b", "ES6Bullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ES6Bullet = exports('ES6Bullet', (_dec = ccclass('ES6Bullet'), _dec(_class = /*#__PURE__*/function (_EnemyBulletWithTrail) {
        _inheritsLoose(ES6Bullet, _EnemyBulletWithTrail);

        function ES6Bullet() {
          return _EnemyBulletWithTrail.apply(this, arguments) || this;
        }

        return ES6Bullet;
      }(EnemyBulletWithTrail)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemyBulletWithTrail.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './EnemyBullet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, ParticleSystem2D, setOpacity, EnemyBullet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ParticleSystem2D = module.ParticleSystem2D;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      EnemyBullet = module.EnemyBullet;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "596f62aA5hB/5qpHYbok5K6", "EnemyBulletWithTrail", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemyBulletWithTrail = exports('EnemyBulletWithTrail', (_dec = ccclass('EnemyBulletWithTrail'), _dec2 = property(Node), _dec3 = property(ParticleSystem2D), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_EnemyBullet) {
        _inheritsLoose(EnemyBulletWithTrail, _EnemyBullet);

        function EnemyBulletWithTrail() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyBullet.call.apply(_EnemyBullet, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "head", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "trail", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "isHit", false);

          return _this;
        }

        var _proto = EnemyBulletWithTrail.prototype;

        _proto.unuse = function unuse() {
          this.isHit = false;
          setOpacity(this.head, 255);
          this.trail.resetSystem();
          this.node.setPosition(9999, 9999, 0);
          this.unscheduleAllCallbacks();

          _EnemyBullet.prototype.unuse.call(this);
        };

        _proto.onHit = function onHit() {
          var _this2 = this;

          this.isHit = true;
          setOpacity(this.head, 0);
          this.trail.stopSystem();
          this.scheduleOnce(function () {
            _this2._isDie = true;
          }, 2);
        };

        _proto.onDie = function onDie() {
          this.trail.stopSystem();

          _EnemyBullet.prototype.onDie.call(this);
        };

        _proto.updatePosition = function updatePosition(dt) {
          if (this.isHit) return;

          _EnemyBullet.prototype.updatePosition.call(this, dt);
        };

        return EnemyBulletWithTrail;
      }(EnemyBullet), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "head", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "trail", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfResizeWindow.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, macro, Size, ResolutionPolicy, math, UITransform, Component, gfBaseEvents, gfEventEmitter, gfBaseConfig, showFullScreenButton, gfDataStore;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      macro = module.macro;
      Size = module.Size;
      ResolutionPolicy = module.ResolutionPolicy;
      math = module.math;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      showFullScreenButton = module.showFullScreenButton;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5a086oFlJ5FGbrlGFR24pZv", "gfResizeWindow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfResizeWindow = exports('default', (_dec = ccclass('gfResizeWindow'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfResizeWindow, _Component);

        function gfResizeWindow() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfResizeWindow.prototype;

        _proto.start = function start() {
          if (gfDataStore.instance.isPlayingLoadingTransition) {
            this.scheduleOnce(this.updateSceneSize, 0.25);
          } else {
            this.updateSceneSize();
          }

          view.setResizeCallback(this.updateSceneSize.bind(this)); //prevent resize event from common.js show button full screen

          window.addEventListener('resize', this._updateButtonFullScreen);
        };

        _proto._updateButtonFullScreen = function _updateButtonFullScreen() {
          showFullScreenButton(gfDataStore.instance.getCurrentSceneName() != gfBaseConfig.instance.SceneName.Game);
        };

        _proto.updateSceneSize = function updateSceneSize() {
          view.setOrientation(macro.ORIENTATION_LANDSCAPE);
          if (!gfBaseConfig.instance || !gfBaseConfig.instance.realSize) return;
          var _GameConfig$instance = gfBaseConfig.instance,
              realSize = _GameConfig$instance.realSize,
              AppSize = _GameConfig$instance.AppSize,
              SceneBox = _GameConfig$instance.SceneBox;
          var designResolution = new Size(AppSize.Width, AppSize.Height);
          var designRatio = AppSize.Width / AppSize.Height;
          var frameSize = view.getFrameSize();
          var screenRatio = frameSize.width / frameSize.height;
          var canvasSize = view.getCanvasSize();

          if (screenRatio < designRatio) {
            view.setDesignResolutionSize(designResolution.width, designResolution.height, ResolutionPolicy.FIXED_WIDTH);
            realSize.Width = designResolution.width;
          } else {
            view.setDesignResolutionSize(designResolution.width, designResolution.height, ResolutionPolicy.FIXED_HEIGHT);
            var heightScale = AppSize.Height / canvasSize.height;
            realSize.Width = math.clamp(canvasSize.width * heightScale, AppSize.Width, AppSize.MaxWidth);
          }

          SceneBox.Left = -(realSize.Width - AppSize.Width) / 2;
          SceneBox.Right = SceneBox.Left + realSize.Width;
          this.node.getComponent(UITransform).width = realSize.Width;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SCREEN_RESIZE);
          this.scheduleOnce(this._resizeFullScreenButton, 0.1);
        };

        _proto._resizeFullScreenButton = function _resizeFullScreenButton() {
          this.unscheduleAllCallbacks();
          var div_full_screen = document.getElementById('div_full_screen');
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (div_full_screen) {
            if (enterFullscreen) {
              enterFullscreen.style.top = "0";
              enterFullscreen.style.left = "0";
              enterFullscreen.style.width = "100%";
              enterFullscreen.style.height = "100%";
              enterFullscreen.style.backgroundSize = "contain";
            }

            if (exitFullscreen) {
              exitFullscreen.style.top = "0";
              exitFullscreen.style.left = "0";
              exitFullscreen.style.width = "100%";
              exitFullscreen.style.height = "100%";
              exitFullscreen.style.backgroundSize = "contain";
            }

            div_full_screen.style.position = "absolute";
            div_full_screen.style.width = "30px";
            div_full_screen.style.height = "30px";

            if (window.innerWidth > window.innerHeight) {
              div_full_screen.style.top = "70%";
              div_full_screen.style.left = "10px";
            } else {
              div_full_screen.style.top = "10px";
              div_full_screen.style.left = "23%";
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (!gfBaseConfig.instance) {
            window.removeEventListener('resize', this._updateButtonFullScreen);
            view.setResizeCallback(null);
          }
        };

        return gfResizeWindow;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishEffectLayer1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './ReferenceManager1988.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, ReferenceManager1988;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5b598DUFoBI0b/g1nNXDBHE", "FishEffectLayer1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FishEffectLayer1988 = exports('FishEffectLayer1988', (_dec = ccclass('FishEffectLayer1988'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FishEffectLayer1988, _Component);

        function FishEffectLayer1988() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = FishEffectLayer1988.prototype;

        _proto.start = function start() {
          ReferenceManager1988.instance.setData({
            FishEffectLayer: this.node
          });
        };

        return FishEffectLayer1988;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ItemLobby.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Sprite, Button, Node, Color, v3, Event, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Button = module.Button;
      Node = module.Node;
      Color = module.Color;
      v3 = module.v3;
      Event = module.Event;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "5c457zj8jZGaJOoxcIw0SWf", "ItemLobby", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ItemLobby = exports('ItemLobby', (_dec = ccclass('ItemLobby'), _dec2 = property({
        type: Sprite
      }), _dec3 = property({
        type: Button
      }), _dec4 = property({
        type: Node
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ItemLobby, _Component);

        function ItemLobby() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "gameId", null);

          _initializerDefineProperty(_assertThisInitialized(_this), "icon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "button", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "config", null);

          _initializerDefineProperty(_assertThisInitialized(_this), "jackpot", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "dimColor", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ItemLobby.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on('ENABLE_SELECTED_GAME', this.enableGame.bind(this));
          this.node.on('DISABLE_SELECTED_GAME', this.disableGame.bind(this));
          this.node.on('JACKPOT_UPDATE', this.jackpotUpdate, this);
        };

        _proto.setJackpotY = function setJackpotY(posY) {
          this.jackpot.setPosition(v3(0, posY, 0));
        };

        _proto.jackpotUpdate = function jackpotUpdate(data) {
          var _this2 = this;

          console.log(data);
          var listJP = Object.keys(data);
          var jpName = listJP.filter(function (it) {
            return it.indexOf(_this2.gameId) > 0;
          })[0];

          if (jpName) {
            var jpData = data[jpName];
            this.jackpot.emit('UPDATE_JACKPOT', {
              JP3: jpData[3],
              JP2: jpData[2],
              JP1: jpData[1]
            });
          }
        };

        _proto.setSprite = function setSprite(spriteFrame) {
          this.icon.spriteFrame = spriteFrame;
        };

        _proto.setGameConfig = function setGameConfig(id, config) {
          this.gameId = id;
          this.config = config;
        };

        _proto.disableGame = function disableGame() {
          this.node.getComponent(Button).interactable = false;
          this.icon.active = false; // this.icon.getComponent(Sprite).color = this.dimColor;
        };

        _proto.enableGame = function enableGame() {
          this.node.getComponent(Button).interactable = true;
          this.icon.active = true; // this.icon.getComponent(Sprite).color = Color.WHITE;
        };

        _proto.onClick = function onClick() {
          var ev = new Event('RQ_PLAY_GAME', true);
          ev['gameId'] = this.gameId;
          ev['config'] = this.config;
          this.node.dispatchEvent(ev);
        };

        return ItemLobby;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "button", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jackpot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "dimColor", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return new Color();
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha512.ts", ['cc', './crypto-core.ts', './x64-core.ts'], function () {
  'use strict';

  var cclegacy, CryptoJS, C_x64;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }, function (module) {
      C_x64 = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5d1e62122NOj6bU0n0LsOM1", "sha512", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var Hasher = C_lib.Hasher; // var C_x64 = C.x64;

      var X64Word = C_x64.Word;
      var X64WordArray = C_x64.WordArray;
      var C_algo = C.algo;

      function X64Word_create() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return X64Word.create.apply(X64Word, arguments);
      } // Constants


      var K = [X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd), X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc), X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019), X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118), X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe), X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2), X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1), X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694), X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3), X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65), X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483), X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5), X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210), X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4), X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725), X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70), X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926), X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df), X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8), X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b), X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001), X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30), X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910), X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8), X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53), X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8), X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb), X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3), X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60), X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec), X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9), X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b), X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207), X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178), X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6), X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b), X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493), X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c), X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a), X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)]; // Reusable objects

      var W = [];

      (function () {
        for (var i = 0; i < 80; i++) {
          W[i] = X64Word_create();
        }
      })();
      /**
       * SHA-512 hash algorithm.
       */


      var SHA512 = C_algo.SHA512 = Hasher.extend({
        _doReset: function _doReset() {
          this._hash = new X64WordArray.init([new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b), new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1), new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f), new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);
        },
        _doProcessBlock: function _doProcessBlock(M, offset) {
          // Shortcuts
          var H = this._hash.words;
          var H0 = H[0];
          var H1 = H[1];
          var H2 = H[2];
          var H3 = H[3];
          var H4 = H[4];
          var H5 = H[5];
          var H6 = H[6];
          var H7 = H[7];
          var H0h = H0.high;
          var H0l = H0.low;
          var H1h = H1.high;
          var H1l = H1.low;
          var H2h = H2.high;
          var H2l = H2.low;
          var H3h = H3.high;
          var H3l = H3.low;
          var H4h = H4.high;
          var H4l = H4.low;
          var H5h = H5.high;
          var H5l = H5.low;
          var H6h = H6.high;
          var H6l = H6.low;
          var H7h = H7.high;
          var H7l = H7.low; // Working variables

          var ah = H0h;
          var al = H0l;
          var bh = H1h;
          var bl = H1l;
          var ch = H2h;
          var cl = H2l;
          var dh = H3h;
          var dl = H3l;
          var eh = H4h;
          var el = H4l;
          var fh = H5h;
          var fl = H5l;
          var gh = H6h;
          var gl = H6l;
          var hh = H7h;
          var hl = H7l; // Rounds

          for (var i = 0; i < 80; i++) {
            var Wil;
            var Wih; // Shortcut

            var Wi = W[i]; // Extend message

            if (i < 16) {
              Wih = Wi.high = M[offset + i * 2] | 0;
              Wil = Wi.low = M[offset + i * 2 + 1] | 0;
            } else {
              // Gamma0
              var gamma0x = W[i - 15];
              var gamma0xh = gamma0x.high;
              var gamma0xl = gamma0x.low;
              var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
              var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25); // Gamma1

              var gamma1x = W[i - 2];
              var gamma1xh = gamma1x.high;
              var gamma1xl = gamma1x.low;
              var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
              var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26); // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]

              var Wi7 = W[i - 7];
              var Wi7h = Wi7.high;
              var Wi7l = Wi7.low;
              var Wi16 = W[i - 16];
              var Wi16h = Wi16.high;
              var Wi16l = Wi16.low;
              Wil = gamma0l + Wi7l;
              Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
              Wil = Wil + gamma1l;
              Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
              Wil = Wil + Wi16l;
              Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
              Wi.high = Wih;
              Wi.low = Wil;
            }

            var chh = eh & fh ^ ~eh & gh;
            var chl = el & fl ^ ~el & gl;
            var majh = ah & bh ^ ah & ch ^ bh & ch;
            var majl = al & bl ^ al & cl ^ bl & cl;
            var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
            var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
            var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
            var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9); // t1 = h + sigma1 + ch + K[i] + W[i]

            var Ki = K[i];
            var Kih = Ki.high;
            var Kil = Ki.low;
            var t1l = hl + sigma1l;
            var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
            t1l = t1l + chl;
            t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
            t1l = t1l + Kil;
            t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
            t1l = t1l + Wil;
            t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0); // t2 = sigma0 + maj

            var t2l = sigma0l + majl;
            var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0); // Update working variables

            hh = gh;
            hl = gl;
            gh = fh;
            gl = fl;
            fh = eh;
            fl = el;
            el = dl + t1l | 0;
            eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
            dh = ch;
            dl = cl;
            ch = bh;
            cl = bl;
            bh = ah;
            bl = al;
            al = t1l + t2l | 0;
            ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
          } // Intermediate hash value


          H0l = H0.low = H0l + al;
          H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
          H1l = H1.low = H1l + bl;
          H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
          H2l = H2.low = H2l + cl;
          H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
          H3l = H3.low = H3l + dl;
          H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
          H4l = H4.low = H4l + el;
          H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
          H5l = H5.low = H5l + fl;
          H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
          H6l = H6.low = H6l + gl;
          H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
          H7l = H7.low = H7l + hl;
          H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
        },
        _doFinalize: function _doFinalize() {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Convert hash to 32-bit word array before returning


          var hash = this._hash.toX32(); // Return final computed hash


          return hash;
        },
        clone: function clone() {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        },
        blockSize: 1024 / 32
      });
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA512('message');
       *     var hash = CryptoJS.SHA512(wordArray);
       */

      C.SHA512 = Hasher._createHelper(SHA512);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA512(message, key);
       */

      C.HmacSHA512 = Hasher._createHmacHelper(SHA512);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCutSceneItem.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, log, Tween, Component, setOpacity, call, delay;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      log = module.log;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      call = module.call;
      delay = module.delay;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5e27fpLouRPtJkozKYizg3I", "gfCutSceneItem", undefined);

      var ccclass = _decorator.ccclass;
      var gfCutSceneItem = exports('gfCutSceneItem', (_dec = ccclass('gfCutSceneItem'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfCutSceneItem, _Component);

        function gfCutSceneItem() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfCutSceneItem.prototype;

        _proto.onLoad = function onLoad() {
          this.node.active = false;
          setOpacity(this.node, 0);
          this.node['show'] = this.show.bind(this);
          this.node['hide'] = this.hide.bind(this);
          this.node['resetOnExit'] = this.resetOnExit.bind(this);
        };

        _proto.show = function show(content, callback) {
          this.node.active = true;
          setOpacity(this.node, 255);
          this.extendShow(content, callback);
        };

        _proto.extendShow = function extendShow(content, callback) {
          var _this = this; // Overwrite here


          tween(this.node).then(call(function () {
            log("Content", content);
          })).then(delay(2)).then(call(function () {
            if (callback && typeof callback === 'function') {
              callback();
            }

            _this.hide();
          }));
        };

        _proto.hide = function hide() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          setOpacity(this.node, 0);
          this.node.removeFromParent();
          this.node.destroy();
        };

        _proto.resetOnExit = function resetOnExit() {};

        return gfCutSceneItem;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptMovingObject.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfUtilities.ts', './gfptCurvePoint.ts', './gfptDataType.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Component, v3f, getRotationByRad, v2Distance, getRotation, gfptCurvePoint, FORMATION_TYPE, Round, gfptEvent, VALUE_TYPE;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      v3f = module.v3f;
    }, function (module) {
      getRotationByRad = module.getRotationByRad;
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
    }, function (module) {
      gfptCurvePoint = module.gfptCurvePoint;
    }, function (module) {
      FORMATION_TYPE = module.FORMATION_TYPE;
      Round = module.Round;
      gfptEvent = module.gfptEvent;
      VALUE_TYPE = module.VALUE_TYPE;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "5e630WFmfFNYLgPuJ90u6Lt", "gfptMovingObject", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var gfptSpeedScaleData = /*#__PURE__*/function () {
        function gfptSpeedScaleData() {
          _defineProperty(this, "curve", new gfptCurvePoint());

          _defineProperty(this, "type", void 0);

          _defineProperty(this, "value", void 0);
        }

        var _proto = gfptSpeedScaleData.prototype;

        _proto.setData = function setData(data) {
          if (data.type == VALUE_TYPE.Linear) {
            this.type = VALUE_TYPE.Linear;
            this.value = data.value;
          } else {
            this.curve.setData(data.pts);
            this.type = VALUE_TYPE.Curve;
          }
        };

        _proto.getValue = function getValue(step) {
          if (this.type == VALUE_TYPE.Linear) {
            return this.value;
          }

          var value = this.curve.getPoint(step);

          if (!value) {
            return this.curve.getLastPoint().y;
          }

          return value.y;
        };

        return gfptSpeedScaleData;
      }();

      var GfptMovingObject = exports('GfptMovingObject', (_dec = ccclass('GfptMovingObject'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptMovingObject, _Component);

        function GfptMovingObject() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "originalPathCurve", new gfptCurvePoint());

          _defineProperty(_assertThisInitialized(_this), "pathCurve", new gfptCurvePoint());

          _defineProperty(_assertThisInitialized(_this), "speedData", new gfptSpeedScaleData());

          _defineProperty(_assertThisInitialized(_this), "scaleData", new gfptSpeedScaleData());

          _defineProperty(_assertThisInitialized(_this), "formationType", FORMATION_TYPE.Line);

          _defineProperty(_assertThisInitialized(_this), "isMoving", void 0);

          _defineProperty(_assertThisInitialized(_this), "currStep", void 0);

          return _this;
        }

        var _proto2 = GfptMovingObject.prototype;

        _proto2.start = function start() {// [3]
        };

        _proto2.setPath = function setPath(data) {
          this.originalPathCurve.setData(data);
          this.pathCurve.cloneData(this.originalPathCurve);
        };

        _proto2.setSpeed = function setSpeed(data) {
          this.speedData.setData(data);
        };

        _proto2.setScale = function setScale(data) {
          this.scaleData.setData(data);
        };

        _proto2.setFormation = function setFormation(formation, index) {
          this.formationType = formation.type;

          if (formation.type == FORMATION_TYPE.Shape) {
            for (var i = 0, length = this.pathCurve.getMaxStep(); i < length; ++i) {
              var baseOffset = formation.pts[index];
              var scale = this.scaleData.getValue(i); // let baseAngle = 0;
              // if (i < this.pathCurve.getMaxStep() - 1) {
              //     baseAngle = getRotationByRad(this.pathCurve.listPoint[i + 1], this.pathCurve.listPoint[i]) + Math.PI / 2;
              // } else {
              //     baseAngle = getRotationByRad(this.pathCurve.listPoint[i - 1], this.pathCurve.listPoint[i - 2]) + Math.PI / 2;
              // }
              // const offSetX = baseOffset.x * Math.cos(baseAngle) - baseOffset.y * Math.sin(baseAngle);
              // const offSetY = baseOffset.x * Math.sin(baseAngle) + baseOffset.y * Math.cos(baseAngle);

              var offSetX = baseOffset.x,
                  offSetY = baseOffset.y;
              this.pathCurve.listPoint[i].x += offSetX * scale;
              this.pathCurve.listPoint[i].y += offSetY * scale;
            }
          } else {
            var space = formation.space * index * this.scaleData.getValue(0);
            var baseAngle = getRotationByRad(this.pathCurve.listPoint[1], this.pathCurve.listPoint[0]);

            var _offSetX = Math.cos(baseAngle) * space;

            var _offSetY = Math.sin(baseAngle) * space;

            this.pathCurve.listPoint[0].x -= _offSetX;
            this.pathCurve.listPoint[0].y -= _offSetY;
          }
        };

        _proto2.move = function move() {
          this.unscheduleAllCallbacks();
          this.isMoving = true;
          this.currStep = 0;
          var p0 = this.pathCurve.getPoint(0);
          var scale = this.scaleData.getValue(0);
          this.node.setPosition(p0.x, p0.y, 0);
          this.node.setScale(scale, scale, 1);
        };

        _proto2.update = function update(dt) {
          if (!this.isMoving) return;
          var speedScale = 1;

          if (this.formationType == FORMATION_TYPE.Shape) {
            var baseDistance = v2Distance(this.originalPathCurve.getPoint(this.currStep), this.originalPathCurve.getPoint(this.currStep + 1));
            var distance = v2Distance(this.pathCurve.getPoint(this.currStep), this.pathCurve.getPoint(this.currStep + 1));
            speedScale = distance / baseDistance;
          }

          var distanceMoved = this.speedData.getValue(this.currStep) * dt * speedScale * this.scaleData.getValue(this.currStep);
          var nextPoint = this.pathCurve.getPoint(this.currStep + 1);

          if (!nextPoint) {
            this.moveDone();
            return;
          }

          var currPos = this.node.getPosition();
          var distanceToNextPoint = v2Distance(currPos, nextPoint);

          while (distanceMoved > distanceToNextPoint) {
            distanceMoved -= distanceToNextPoint;
            currPos = v3(nextPoint.x, nextPoint.y, 0);
            ++this.currStep;
            nextPoint = this.pathCurve.getPoint(this.currStep + 1);

            if (!nextPoint) {
              this.moveDone();
              return;
            }

            distanceToNextPoint = v2Distance(currPos, nextPoint);
          }

          var ratio = distanceMoved / distanceToNextPoint;
          var x = Round(currPos.x + (nextPoint.x - currPos.x) * ratio);
          var y = Round(currPos.y + (nextPoint.y - currPos.y) * ratio);
          this.node.setPosition(x, y, 0);
          this.node.setScale(v3f(this.scaleData.getValue(this.currStep)));
          var lastAngle = getRotation(nextPoint, this.pathCurve.getPoint(this.currStep));
          var nextAngle = getRotation(this.pathCurve.getPoint(this.currStep + 2), nextPoint);
          var angle = nextAngle - lastAngle;
          if (angle > 180) angle -= 360;
          if (angle < -180) angle += 360;
          this.node.angle = lastAngle + angle * ratio + 90;
        };

        _proto2.moveDone = function moveDone() {
          var _this2 = this;

          this.isMoving = false;
          this.node.setPosition(this.pathCurve.getLastPoint().x, this.pathCurve.getLastPoint().y, 0);
          this.scheduleOnce(function () {
            _this2.node.dispatchEvent(new gfptEvent('OBJ_MOVE_DONE'));
          }, 0.5);
        };

        return GfptMovingObject;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupHelper.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './gfFishManager.ts', './gfGameScheduler.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts'], function (exports) {
  'use strict';

  var _defineProperty, _createClass, cclegacy, v2, _decorator, tween, gfBaseConfig, v2Distance, gfDataStore, gfFishManager, gfGameScheduler, gfFishGroupData, FishMoveActions, FISH_ACTION;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      v2Distance = module.v2Distance;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfGameScheduler = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "5ed8cyl4MlMQagcLlHz1XTa", "gfFishGroupHelper", undefined);

      var OutScreenPos = v2(-1000, -1000);
      var ccclass = _decorator.ccclass;
      var FishGroupHelper = exports('default', (_dec = ccclass('FishGroupHelper'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function () {
        function FishGroupHelper() {
          _defineProperty(this, "fishDelay", 0);

          this.fishDelay = 0;
        }

        var _proto = FishGroupHelper.prototype;

        _proto.resetDelayCounting = function resetDelayCounting() {
          this.fishDelay = 0;
        };

        _proto._getDelayTime = function _getDelayTime() {
          return ++this.fishDelay / 100;
        };

        FishGroupHelper.initFishGroupData = function initFishGroupData(data) {
          FishGroupHelper.instance.resetDelayCounting();
          data.timeSkipped = (gfDataStore.instance.getTime() - data.buildTick) / 1000 - this.FISH_START_DELAY;
          gfFishGroupData.initData(data);
        };

        FishGroupHelper.createFishWithDelay = function createFishWithDelay(data) {
          var _this = this;

          var delay = this.getDelayTime();

          if (!data.isResume) {
            gfGameScheduler.scheduleOnce(function () {
              _this.createAndRunFish(data, delay);
            }, delay);
          } else {
            this.createAndRunFish(data);
          }
        };

        FishGroupHelper.getDelayTime = function getDelayTime() {
          return FishGroupHelper.instance._getDelayTime();
        };

        FishGroupHelper.createAndRunFish = function createAndRunFish(data, delay) {
          if (delay === void 0) {
            delay = -1;
          }

          var fish = gfFishManager.instance.createFishWithData(data);
          if (!fish) return;
          fish.moveAction = tween(fish.node);
          var moveAction = data.moveAction.getActions();
          var position = data.moveAction.getStartPositionV3();
          fish.node.angle = data.moveAction.getStartAngle();

          if (delay > -1) {
            fish.node.setPosition(OutScreenPos.x, OutScreenPos.y, position.z);
            fish.setDie(true);
            fish.moveAction.delay(this.FISH_START_DELAY - delay).call(function () {
              fish.node.setPosition(position);
              fish.setDie(false);
            }).then(moveAction).call(function () {
              fish.onDie();
            }).start();
          } else {
            fish.node.setPosition(position);
            fish.moveAction.then(moveAction).call(function () {
              fish.onDie();
            }).start();
          }
        };

        FishGroupHelper.createFishLine = function createFishLine(fishCount, yCoord, space, speed, xOffset) {
          if (xOffset === void 0) {
            xOffset = 0;
          }

          var AppSize = gfBaseConfig.instance.AppSize;
          var LEFT = -200;
          var RIGHT = AppSize.Width + 200;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [RIGHT, LEFT];
            LEFT = _ref[0];
            RIGHT = _ref[1];
            yCoord = AppSize.Height - yCoord;
          }

          var distance = Math.abs(RIGHT - LEFT) + fishCount * space - xOffset;

          for (var i = 0; i < fishCount; ++i) {
            var startX = LEFT - (i * space - xOffset) * gfFishGroupData.flipCoord;
            this.createSimpleMovingFish(v2(startX, yCoord), v2(startX + distance * gfFishGroupData.flipCoord, yCoord), 0, speed);
          }
        };

        FishGroupHelper.createSimpleMovingFish = function createSimpleMovingFish(startPos, destPos, baseDelay, speed) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var distance = v2Distance(destPos, startPos);
          var baseMoveTime = distance / speed;
          data.moveAction = new FishMoveActions(startPos);
          data.moveAction.appendAction(FISH_ACTION.Delay, baseDelay);
          data.moveAction.appendAction(FISH_ACTION.MoveTo, {
            time: baseMoveTime,
            x: destPos.x,
            y: destPos.y
          });
          FishGroupHelper.createFishWithDelay(data);
        };

        FishGroupHelper.convertFlipCoordinate = function convertFlipCoordinate(point) {
          if (gfFishGroupData.isFlipped()) {
            var AppSize = gfBaseConfig.instance.AppSize;
            return v2(AppSize.Width - point.x, AppSize.Height - point.y);
          }

          return point;
        };

        _createClass(FishGroupHelper, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new FishGroupHelper();
            }

            return this._instance;
          }
        }]);

        return FishGroupHelper;
      }(), _defineProperty(_class2, "FISH_START_DELAY", 4), _defineProperty(_class2, "_instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemySP1.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1985.ts', './SpineFish1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfEventEmitter, EventsCode1985, SpineFish1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "5f599HQW+5ElpL9ZMp1CT6K", "EnemySP1", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SLOT_NAME = ["SP-1_leg", "SP-1_leg2", "leg2/0001", "leg2/0002"];
      var HIT_COLOR = {
        r: 230 / 255,
        g: 30 / 255,
        b: 30 / 255
      };
      var EnemySP1 = exports('EnemySP1', (_dec = ccclass('EnemySP1'), _dec(_class = /*#__PURE__*/function (_SpineFish) {
        _inheritsLoose(EnemySP1, _SpineFish);

        function EnemySP1() {
          return _SpineFish.apply(this, arguments) || this;
        }

        var _proto = EnemySP1.prototype;

        _proto.initFishData = function initFishData(data) {
          _SpineFish.prototype.initFishData.call(this, data);

          gfEventEmitter.instance.emit(EventsCode1985.SOUND.BOMB_ENERGY);
        };

        _proto.setColor = function setColor() {
          for (var i = 0; i < SLOT_NAME.length; ++i) {
            var slot = this.fishAnim.findSlot(SLOT_NAME[i]);

            if (slot) {
              slot.color.r = HIT_COLOR.r;
              slot.color.g = HIT_COLOR.g;
              slot.color.b = HIT_COLOR.b;
            }
          }
        };

        _proto.resetColor = function resetColor() {
          for (var i = 0; i < SLOT_NAME.length; ++i) {
            var slot = this.fishAnim.findSlot(SLOT_NAME[i]);

            if (slot) {
              slot.color.r = 1;
              slot.color.g = 1;
              slot.color.b = 1;
            }
          }
        };

        _proto.playEffectDie = function playEffectDie(data) {
          if (data === void 0) {
            data = null;
          }

          _SpineFish.prototype.playEffectDie.call(this, data);

          var durDelay = this.fishAnim.getCurrent(0).animation.duration * 0.45;
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.BOMB_ALERT);
          this.scheduleOnce(function () {
            gfEventEmitter.instance.emit(EventsCode1985.SOUND.DESTROY_SP1);
          }, durDelay);
        };

        return EnemySP1;
      }(SpineFish1985)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBulletLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfPoolManager.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, Component, gfBaseEvents, gfBaseConfig, registerEvent, getPointByDegrees, removeEvents, gfReferenceManager, gfDataStore, gfPoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      getPointByDegrees = module.getPointByDegrees;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "5f8c2rNPRJLuKY00KHKsTQq", "gfBulletLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBulletLayer = exports('gfBulletLayer', (_dec = ccclass('gfBulletLayer'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfBulletLayer, _Component);

        function gfBulletLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "numBullet", 0);

          return _this;
        }

        var _proto = gfBulletLayer.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvent();
          this.numBullet = 0;
        };

        _proto.initEvent = function initEvent() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_BULLET, this.createBullet, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.countDownBullet, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.onResumeGame, this);
        };

        _proto.createBullet = function createBullet(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            var posFire = this.node.getComponent(UITransform).convertToNodeSpaceAR(player.gun.worldPosition);
            var realPosFire = getPointByDegrees(posFire.x, posFire.y, posFire.x + gfBaseConfig.instance.gunRadius, posFire.y, Number.parseFloat(data.Angle));
            data.position = realPosFire;

            if (player.isMe) {
              if (this.numBullet < gfBaseConfig.instance.MaxBullet) {
                data.FireType = gfDataStore.instance.getTargetState();
                this.createBulletPool(data);
                this.countBullet(true);
              } else {
                this.onReachMaxNumBullet(true);
              }
            } else {
              this.createBulletPool(data);
            }
          }
        };

        _proto.createBulletPool = function createBulletPool(data) {
          var bullet = gfPoolManager.instance.getBulletWithData(data);
          bullet.node.setParent(this.node);
        };

        _proto.countBullet = function countBullet(plus) {
          if (plus === void 0) {
            plus = true;
          }

          this.numBullet += plus ? 1 : -1;

          if (this.numBullet < 0) {
            this.numBullet = 0;
          } else if (this.numBullet >= gfBaseConfig.instance.MaxBullet) {
            this.onReachMaxNumBullet(true);
          }

          if (gfDataStore.instance.isReachMaxNumBullet()) {
            if (this.numBullet < gfBaseConfig.instance.MaxBullet) {
              this.onReachMaxNumBullet(false);
            }
          }
        };

        _proto.countDownBullet = function countDownBullet(data) {
          if (data.isMe) {
            this.countBullet(false);
          }
        };

        _proto.onResumeGame = function onResumeGame() {
          this.numBullet = 0;
          this.onReachMaxNumBullet(false);
        };

        _proto.onReachMaxNumBullet = function onReachMaxNumBullet(isMax) {
          gfDataStore.instance.setDataStore({
            reachMaxNumBullet: isMax
          });
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfBulletLayer;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PathLayerConfig1985.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "608fa6+aPhNc59+0wWdGCFc", "PathLayerConfig1985", undefined);

      var PathLayerConfig = exports('PathLayerConfig', {
        "1.1": 7,
        "1.3": 5,
        "2.1": 4,
        "2.2": 3,
        "4.1": 8,
        "4.2": 8,
        "4.3": 4,
        "10.1": 5,
        "10.2": 9,
        "12.1": 6,
        "12.2": 7,
        "12.3": 8,
        "5.1": 9,
        "5.3": 9,
        "6.1": 8,
        "13.1": 9,
        "13.2": 9,
        "13.3": 9
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfUtilities.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _extends, cclegacy, Tween, sys, v2, math, Rect, v3, view, gfEventEmitter, gfBaseConfig;

  return {
    setters: [function (module) {
      _extends = module.extends;
    }, function (module) {
      cclegacy = module.cclegacy;
      Tween = module.Tween;
      sys = module.sys;
      v2 = module.v2;
      math = module.math;
      Rect = module.Rect;
      v3 = module.v3;
      view = module.view;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "61235QIdHNH25S5n7ic6whF", "gfUtilities", undefined); //     return this._finalAction.isDone();
      // };


      Tween.prototype.setSpeed = function (speed) {
        if (speed === void 0) {
          speed = 1;
        }

        this._finalAction._speedMethod = true;

        this._finalAction.setSpeed(speed);
      };

      var SubString = exports('SubString', function SubString(str, len) {
        return str.substr(0, len);
      });
      var v2Distance = exports('v2Distance', function v2Distance(p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
      });
      var getRotation = exports('getRotation', function getRotation(p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.atan2(p1.y - p2.y, p1.x - p2.x) * 180 / Math.PI;
      });
      var getRotationByRad = exports('getRotationByRad', function getRotationByRad(p1, p2) {
        if (p1 == null || p2 == null) return 0;
        return Math.atan2(p1.y - p2.y, p1.x - p2.x);
      });
      var randomBetween = exports('randomBetween', function randomBetween(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      });
      var convertSecondToTime = exports('convertSecondToTime', function convertSecondToTime(a) {
        var sec_num = parseInt(a.toString(), 10); // let hours   = Math.floor(sec_num / 3600);

        var minutes = Math.floor(sec_num / 60);
        var seconds = sec_num % 60;
        return [minutes, seconds].map(function (v) {
          return v < 10 ? "0" + v : v;
        }).filter(function (v, i) {
          return v !== "00" || i > 0;
        }).join(":");
      });
      var ReplaceDataNotify = exports('ReplaceDataNotify', function ReplaceDataNotify(string, data, substr) {
        if (substr === void 0) {
          substr = '';
        }

        var strOut = string;

        for (var index = 0; index < data.length; index++) {
          strOut = strOut.replace("data.data[" + index + "]", data[index]);
        }

        if (substr != '') {
          strOut = strOut.replace("substr", substr);
        }

        return strOut;
      });
      var convertMillisecondsToTime = exports('convertMillisecondsToTime', function convertMillisecondsToTime(duration) {
        if (typeof duration !== "number") duration = parseInt(duration);
        var milliseconds = Math.floor(duration % 1000 / 100),
            seconds = Math.floor(duration / 1000 % 60),
            minutes = Math.floor(duration / (1000 * 60) % 60),
            hours = Math.floor(duration / (1000 * 60 * 60) % 24);
        var hourString = hours < 10 ? "0" + hours : hours;
        var minuteString = minutes < 10 ? "0" + minutes : minutes;
        var secondString = seconds < 10 ? "0" + seconds : seconds;
        return hourString + ":" + minuteString + ":" + secondString + "." + milliseconds;
      });
      var isWebMobileSafari = exports('isWebMobileSafari', function isWebMobileSafari() {
        if (sys.platform === sys.MOBILE_BROWSER && sys.browserType === sys.BROWSER_TYPE_SAFARI) {
          if (navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Chrome") <= -1 && navigator.userAgent.indexOf("CriOS") <= -1) {
            return true;
          } else {
            return false;
          }
        }

        return false;
      });
      var isChromeiOS = exports('isChromeiOS', function isChromeiOS() {
        if (sys.os === sys.OS_IOS && sys.platform === sys.MOBILE_BROWSER && sys.browserType === sys.BROWSER_TYPE_SAFARI) {
          if (navigator.userAgent.indexOf("CriOS") > -1) {
            //Check is Chrome
            return true;
          }
        }

        return false;
      });
      var isEmpty = exports('isEmpty', function isEmpty(data) {
        return data == undefined || data == null;
      });
      var formatCoin = exports('formatCoin', function formatCoin(str, seperate) {
        if (seperate === void 0) {
          seperate = ",";
        }

        if (str == undefined || str < 0) return '0';
        seperate = seperate == null ? "," : seperate;

        if (typeof str === "number") {
          str = Math.round(str);
          str = str.toString();
        } else {
          if (typeof str == 'string') {
            var coin = parseInt(str);
            str = coin.toString();
          }
        }

        var strResult = "";
        var count = -1;
        var stringLength = str.length;

        for (var i = 0; i < stringLength; i++) {
          count++;

          if (count == 3) {
            count = 0;

            if (parseInt(str.charAt(stringLength - (i + 1)), 10).toString() != "NaN" && str.charAt(stringLength - (i + 1)) != "-") {
              strResult += seperate + str.charAt(stringLength - (i + 1));
            } else {
              strResult += str.charAt(stringLength - (i + 1));
            }
          } else {
            strResult += str.charAt(stringLength - (i + 1));
          }
        }

        var s1 = "";
        var strResultLength = strResult.length;

        for (var j = 0; j < strResultLength; j++) {
          s1 += strResult.charAt(strResultLength - (j + 1));
        }

        if (s1 == "NaN") {
          s1 = 0;
        }

        return s1.toString();
      });
      var getPointBetweenTwoPointByPercent = exports('getPointBetweenTwoPointByPercent', function getPointBetweenTwoPointByPercent(p0, p1, per) {
        var px = p0.x + (p1.x - p0.x) * per;
        var py = p0.y + (p1.y - p0.y) * per;
        return v2(px, py);
      });
      var getListPointFromThreePoint = exports('getListPointFromThreePoint', function getListPointFromThreePoint(p1, p2, p3, tbegin) {
        var listPoints = [];

        for (var t = tbegin; t <= 1; t += 0.01) {
          var xt = (1 - t) * (1 - t) * p1.x + 2 * (1 - t) * t * p2.x + t * t * p3.x;
          var yt = (1 - t) * (1 - t) * p1.y + 2 * (1 - t) * t * p2.y + t * t * p3.y;
          listPoints.push(v2(xt, yt));
        }

        return listPoints;
      });
      var rotateAngleByCoordinate = exports('rotateAngleByCoordinate', function rotateAngleByCoordinate(cx, cy, x, y, angle) {
        var radians = Math.PI / 180 * angle,
            cos = Math.cos(radians),
            sin = Math.sin(radians),
            nx = cos * (x - cx) + sin * (y - cy) + cx,
            ny = cos * (y - cy) - sin * (x - cx) + cy;
        return {
          x: nx,
          y: ny
        };
      });
      var showFullScreenButton = exports('showFullScreenButton', function showFullScreenButton(isShow) {
        if (isShow === void 0) {
          isShow = true;
        }

        var visible = isShow ? "visible" : "hidden";

        if (sys.os === sys.OS.ANDROID && sys.isMobile) {
          var divFullscreen = document.getElementById('div_full_screen');

          if (divFullscreen) {
            divFullscreen.style.visibility = visible;
          }
        }
      });
      var addHtmlCursor = exports('addHtmlCursor', function addHtmlCursor() {
        if (sys.platform == sys.Platform.DESKTOP_BROWSER) {
          var css = document.createElement('style');
          css.type = 'text/css';
          css.id = 'cursorId';
          var styles = 'canvas { color: #555;cursor: url(data:image/cur;base64,' + gfBaseConfig.instance.CursorBase64 + ') 16 16, default; background:#F4F4F4; display: block;  text-align: center;}';
          if (css['styleSheet']) css['styleSheet'].cssText = styles;else css.appendChild(document.createTextNode(styles));
          document.getElementsByTagName("head")[0].appendChild(css);
        }
      });
      var removeCursorInHtml = exports('removeCursorInHtml', function removeCursorInHtml() {
        if (sys.platform == sys.Platform.DESKTOP_BROWSER) {
          var _document$getElements;

          var cursorElement = document.getElementById("cursorId");
          cursorElement && ((_document$getElements = document.getElementsByTagName("head")[0]) === null || _document$getElements === void 0 ? void 0 : _document$getElements.removeChild(cursorElement));
        }
      });
      var clamp = exports('clamp', function clamp(x, min, max) {
        return math.clamp(x, min, max);
      });
      var isArrayEqual = exports('isArrayEqual', function isArrayEqual(x, y) {
        return globalThis._(x).xorWith(y, globalThis._.isEqual).isEmpty();
      });
      var getPointByDegrees = exports('getPointByDegrees', function getPointByDegrees(cx, cy, x, y, angle) {
        var radians = -(Math.PI / 180) * angle,
            cos = Math.cos(radians),
            sin = Math.sin(radians),
            nx = cos * (x - cx) + sin * (y - cy) + cx,
            ny = cos * (y - cy) - sin * (x - cx) + cy;
        return {
          x: nx,
          y: ny
        };
      });
      var registerEvent = exports('registerEvent', function registerEvent(eventCode, func, main) {
        if (!main.eventMap) {
          main.eventMap = [];
        }

        var funcKey = func.bind(main);
        main.eventMap.push({
          eventCode: eventCode,
          funcKey: funcKey
        });

        if (gfEventEmitter.instance) {
          gfEventEmitter.instance.registerEvent(eventCode, funcKey);
        }
      });
      var removeEvents = exports('removeEvents', function removeEvents(main) {
        if (!main.eventMap || !gfEventEmitter.instance) return;
        main.eventMap.forEach(function (e) {
          gfEventEmitter.instance.removeEvent(e.eventCode, e.funcKey);
        });
        main.eventMap.length = 0;
      });
      var autoEnum = exports('autoEnum', function autoEnum(arr) {
        var res = {};

        for (var i = 0; i < arr.length; i++) {
          res[arr[i]] = i;
        }

        return res;
      });
      var getBetValue = exports('getBetValue', function getBetValue(gameId, roomKind) {
        if (!gameId || !roomKind) return null;
        var KEY_STORE = 'betFish' + gameId;
        var betObject = sys.localStorage.getItem(KEY_STORE);

        if (!globalThis._.isEmpty(betObject)) {
          betObject = JSON.parse(betObject);

          if (betObject[roomKind]) {
            return betObject[roomKind];
          }
        }

        return null;
      });
      var setBetValue = exports('setBetValue', function setBetValue(gameId, roomKind, bulletMultiple) {
        var KEY_STORE = 'betFish' + gameId;
        var betObject = sys.localStorage.getItem(KEY_STORE);

        if (globalThis._.isEmpty(betObject)) {
          var _newObj;

          var newObj = (_newObj = {}, _newObj[roomKind] = bulletMultiple, _newObj);
          sys.localStorage.setItem(KEY_STORE, JSON.stringify(newObj));
        } else {
          betObject = JSON.parse(betObject);
          betObject[roomKind] = bulletMultiple;
          sys.localStorage.setItem(KEY_STORE, JSON.stringify(betObject));
        }
      });
      var formatUserName = exports('formatUserName', function formatUserName(userName, maxLength, replaceText) {
        if (userName === void 0) {
          userName = '';
        }

        if (maxLength === void 0) {
          maxLength = 16;
        }

        if (replaceText === void 0) {
          replaceText = "...";
        }

        if (userName.length <= maxLength) return userName;
        return userName.slice(0, maxLength - replaceText.length + 1) + replaceText;
      });
      var isPointInScreen = exports('isPointInScreen', function isPointInScreen(point, offset) {
        if (offset === void 0) {
          offset = 0;
        }

        var _GameConfig$instance = gfBaseConfig.instance,
            SceneBox = _GameConfig$instance.SceneBox,
            realSize = _GameConfig$instance.realSize;
        var screen = new Rect(SceneBox.Left - offset / 2, SceneBox.Bottom - offset / 2, realSize.Width + offset, realSize.Height + offset);
        return screen.contains(v2(point.x, point.y));
      });
      var formatString = exports('formatString', function formatString(theString, argumentArray) {
        var regex = /%s/;

        var _r = function _r(p, c) {
          return p.replace(regex, c);
        };

        return argumentArray.reduce(_r, theString);
      });
      var deepCopy = exports('deepCopy', function deepCopy(target) {
        if (target === null) {
          return target;
        }

        if (target instanceof Date) {
          return new Date(target.getTime());
        }

        if (target instanceof Array) {
          var cp = [];
          target.forEach(function (v) {
            cp.push(v);
          });
          return cp.map(function (n) {
            return deepCopy(n);
          });
        }

        if (typeof target === 'object' && target !== {}) {
          var _cp = _extends({}, target);

          Object.keys(_cp).forEach(function (k) {
            _cp[k] = deepCopy(_cp[k]);
          });
          return _cp;
        }

        return target;
      });
      var mergeTwoObject = exports('mergeTwoObject', function mergeTwoObject(obj1, obj2) {
        return globalThis._.merge({}, obj1, obj2);
      });
      var SetZIndex = exports('SetZIndex', function SetZIndex(node, index) {
        var zIndex = 'zIndex';
        if (!node.parent) return;
        node[zIndex] = index;

        for (var i = 0; i < node.parent.children.length; ++i) {
          var child = node.parent.children[i];

          if (child[zIndex] == undefined) {
            child[zIndex] = 0;
          }

          if (index <= child[zIndex]) {
            node.setSiblingIndex(child.getSiblingIndex());
            return;
          }
        }
      });
      var convertFishCoordinateSystem = exports('convertFishCoordinateSystem', function convertFishCoordinateSystem(points) {
        var APP_SIZE = gfBaseConfig.instance.AppSize;

        for (var i = 0; i < points.length; ++i) {
          var pointRotated = rotateAngleByCoordinate(APP_SIZE.Width / 2, APP_SIZE.Height / 2, points[i].PosX, points[i].PosY, -180);
          points[i].PosY = pointRotated.y;
          points[i].PosX = pointRotated.x;
        }
      });
      var bezier3P = exports('bezier3P', function bezier3P(a, b, c, t) {
        return (1 - t) * (1 - t) * a + 2 * (1 - t) * t * b + t * t * c;
      });
      var getPositionWithTimeSpentFromThreePoint = exports('getPositionWithTimeSpentFromThreePoint', function getPositionWithTimeSpentFromThreePoint(p1, p2, p3, timeLost, speed) {
        var totalPoints = 100;
        var durationPerUnit = 1 / totalPoints;
        var duration = 0;
        var position = v2(x(0), y(0));
        var i = 1;
        var currentPoint = position;
        var lastPoint = currentPoint;
        var lastDuration = 0;

        while (duration < timeLost && i <= totalPoints) {
          lastPoint = currentPoint;
          lastDuration = duration;
          currentPoint = v2(x(i * durationPerUnit), y(i * durationPerUnit));
          var distance = v2Distance(lastPoint, currentPoint);
          duration += distance / speed;
          ++i;
        }

        if (duration == lastDuration) {
          return v2(x(i - 1), y(i - 1));
        }

        var ratio = (timeLost - lastDuration) / (duration - lastDuration);
        var index = (i - 2 + ratio) * durationPerUnit;
        return v2(x(index), y(index));

        function x(t) {
          return bezier3P(p1.x, p2.x, p3.x, t);
        }

        function y(t) {
          return bezier3P(p1.y, p2.y, p3.y, t);
        }
      });
      var flipX = exports('flipX', function flipX(node) {
        node.scale = v3(-node.scale.x, node.scale.y, node.scale.z);
      });
      var checkTablet = exports('checkTablet', function checkTablet() {
        if (sys.isNative) {
          var dpi = jsb.device.getDevicePixelRatio();
          var viewSize = view.getFrameSize();
          var xInches = viewSize.width / dpi;
          var yInches = viewSize.height / dpi;
          var diagonalInches = Math.sqrt(Math.pow(xInches, 2) + Math.pow(yInches, 2));
          diagonalInches = Math.round(diagonalInches * 100) / 100;
          return diagonalInches >= 7;
        } else {
          var userAgent = navigator.userAgent.toLowerCase();
          var isTablet = /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|(puffin(?!.*(IP|AP|WP))))/.test(userAgent);
          return isTablet;
        }
      });
      var refreshButtonState = exports('refreshButtonState', function refreshButtonState(button) {
        button.interactable = false;
        button.interactable = true;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishManager1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfFishManager.ts', './EventsCode1988.ts', './Config1988.ts', './ReferenceManager1988.ts', './PoolManager1988.ts', './BossBoris1988.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, warn, instantiate, v2, getRandomInt, gfBaseEvents, gfEventEmitter, registerEvent, v2Distance, removeEvents, gfFishManager, EventCode, Config1988, ReferenceManager1988, PoolManager1988, BossBoris1988;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
      instantiate = module.instantiate;
      v2 = module.v2;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      v2Distance = module.v2Distance;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }, function (module) {
      PoolManager1988 = module.default;
    }, function (module) {
      BossBoris1988 = module.BossBoris1988;
    }],
    execute: function () {
      cclegacy._RF.push({}, "61bc3mDlQtBBb9ecmqIGZ4a", "FishManager1988", undefined);

      var CONFIG_POS_CREATE_FISH_FAKE = {
        LEFT: -220,
        RIGHT: 1680,
        TOP: 840,
        BOT: -120
      };
      var FishManager1988 = exports('default', /*#__PURE__*/function (_gfFishManager) {
        _inheritsLoose(FishManager1988, _gfFishManager);

        function FishManager1988() {
          var _this;

          _this = _gfFishManager.call(this) || this;
          FishManager1988.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = FishManager1988.prototype;

        _proto.initEvent = function initEvent() {
          _gfFishManager.prototype.initEvent.call(this);

          registerEvent(EventCode.FISH_LAYER.CREATE_LIST_FISH_FAKE, this.createListFishFake, this);
          registerEvent(EventCode.FISH_LAYER.CATCH_BORIS, this.catchBoris, this);
        };

        _proto.createBoss = function createBoss(data, bossName) {
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.CREATE, data);
          return _gfFishManager.prototype.createBoss.call(this, data, bossName);
        };

        _proto.dragonDropBall = function dragonDropBall(data) {
          var bossBoris = this.getBossByKind(Config1988.instance.FISH_KIND.DRAGON);
          if (!bossBoris) return;
          data.position = bossBoris.getComponent(BossBoris1988).getChipDropPosition();
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DROP_BALL, data);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_HIT_BALL);
          bossBoris.getComponent(BossBoris1988).updateSkinDamaged(data.damageLevel);
        };

        _proto.endDragon = function endDragon(data) {
          var bossBoris = this.getBossByKind(Config1988.instance.FISH_KIND.DRAGON);

          if (bossBoris) {
            bossBoris.getComponent(BossBoris1988).onBossEnd(data);
          } else {
            warn("Boss Boris has been deleted");
          }
        };

        _proto.catchBoris = function catchBoris() {
          var bossBoris = this.getBossByKind(Config1988.instance.FISH_KIND.DRAGON);

          if (bossBoris) {
            bossBoris.getComponent(BossBoris1988).onCatch();
          }
        };

        _proto.getArrFishID = function getArrFishID() {
          var listFish = this.getListFish();
          var arrFishID = [];
          listFish.forEach(function (fish) {
            if (fish.isAvailable()) {
              arrFishID.push(fish.getId());
            }
          });
          return arrFishID;
        } //Data nhằm diễn hoặc cho đúng quy trình
        ;

        _proto.createFakeData = function createFakeData(data) {
          if (data.Position && data.Position.length > 0) return;
          data.InitCount = 3;
          var randomTBLR = getRandomInt(0, 1); // random bot, left = 0, top, right = 1

          var randomHV = getRandomInt(0, 1); // random horizontal = 0, vertical = 1

          var Pos1 = {
            PosX: randomHV ? getRandomInt(0, 1280) : randomTBLR ? CONFIG_POS_CREATE_FISH_FAKE.RIGHT : CONFIG_POS_CREATE_FISH_FAKE.LEFT,
            PosY: randomHV ? randomTBLR ? CONFIG_POS_CREATE_FISH_FAKE.TOP : CONFIG_POS_CREATE_FISH_FAKE.BOT : getRandomInt(0, 720)
          };
          var Pos2 = {
            PosX: getRandomInt(426, 853),
            // 1/3 -> 2/3 Width
            PosY: getRandomInt(240, 480) // 1/3 -> 2/3 Height

          };
          var Pos3 = {
            PosX: randomHV ? getRandomInt(0, 1280) : randomTBLR ? CONFIG_POS_CREATE_FISH_FAKE.LEFT : CONFIG_POS_CREATE_FISH_FAKE.RIGHT,
            PosY: randomHV ? randomTBLR ? CONFIG_POS_CREATE_FISH_FAKE.BOT : CONFIG_POS_CREATE_FISH_FAKE.TOP : getRandomInt(0, 720)
          };
          data.Position = [Pos1, Pos2, Pos3];
          return data;
        } //array chứa các thông số FishID, FishKind, InitCount, Position [ {PosX, PosY} {PosX, PosY} {PosX, PosY}], BuildTick
        ;

        _proto.createListFishFake = function createListFishFake(listCatchFish) {
          for (var i = 0; i < listCatchFish.length; ++i) {
            var fishData = listCatchFish[i];
            var fish = this.getFishById(fishData.FishID);

            if (!fish || fish.checkDie() || fish.checkOutScene()) {
              if (fish && !fish.checkDie()) fish.onDie();
              var fakeData = this.createFakeData(fishData);
              fishData = fakeData ? fakeData : fishData;
              this.createFishFakeWithData(fishData);
            }
          }
        };

        _proto.createFishFakeWithData = function createFishFakeWithData(data) {
          var fish = null;
          data.isFake = true;
          var prefabFish = ReferenceManager1988.instance.getPrefabFishByKind(parseInt(data.FishKind));

          if (prefabFish) {
            // Create by prefab
            fish = instantiate(prefabFish);
            fish.setParent(ReferenceManager1988.instance.getNodeFishLayer());
            fish = fish.getComponent("gfBaseFish");
            fish.initFishData(data);
          } else {
            // Create by pool
            fish = PoolManager1988.instance.getFishWithData(data);
          }

          if (fish) {
            this.listFish.push(fish);
          }
        };

        _proto.moveOutAllFishes = function moveOutAllFishes(data) {
          var timeDelay = 4.0;

          if (!data) {
            timeDelay = 0.0;
          }

          for (var i = this.listFish.length - 1; i >= 0; --i) {
            this.listFish[i].moveOut(timeDelay);
          }
        };

        _proto.getBossBoris = function getBossBoris() {
          var bossBoris = this.getBossByKind(Config1988.instance.FISH_KIND.DRAGON);
          if (!bossBoris) return null;
          return bossBoris;
        };

        _proto.catchFish = function catchFish(data) {
          if (data.FishID === 0) return;
          var SkillConfig = Config1988.instance.SkillConfig;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe && (!data.skillID || data.skillID && data.skillID == SkillConfig.FISH_BOMB)) {
            player.addGoldReward(data.GoldReward);
          }

          var fish = this.getFishById(data.FishID);

          if (fish) {
            fish.onCatch(data);
          } else if (player && player.isMe) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
              data: data
            });
          }
        };

        _proto.catchFishSkill = function catchFishSkill(data) {
          var listFish = data.ListFish; // eslint-disable-next-line no-unused-vars

          listFish.sort(function (a, b) {
            return 0.5 - Math.random();
          });
          var SkillConfig = Config1988.instance.SkillConfig;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe && data.SkillID == SkillConfig.LASER) {
            player.addGoldReward(data.TotalReward);
          }

          if (data.SkillID && data.SkillID === SkillConfig.FISH_BOMB && data.isLastPhase) {
            gfEventEmitter.instance.emit(EventCode.EFFECT_LAYER.END_PHASE_POISON_FLOWER);
          }

          for (var i = 0; i < listFish.length; ++i) {
            var fish = listFish[i];
            var delay = 0;

            if (data.SkillID === SkillConfig.FISH_BOMB) {
              delay = 0.85;
            }

            var infoDetail = {
              DeskStation: data.DeskStation,
              FishID: fish.FishID,
              GoldReward: fish.GoldReward,
              BulletMultiple: data.BulletMultiple,
              itemInfo: fish.itemInfo,
              isSkill: true,
              skillID: data.SkillID,
              delayTimeDie: delay
            };
            this.catchFish(infoDetail);
          }
        };

        _proto.getFishByDistanceWidthNode = function getFishByDistanceWidthNode(nodePos, distanceConfig) {
          nodePos = nodePos.convertToWorldSpaceAR(v2(0, 0));
          var arrayFish = [].concat(this.listFish);
          var arrFishOutput = [];
          arrayFish.forEach(function (fish) {
            var distance = v2Distance(nodePos, fish.node.worldPosition);

            if (distance < distanceConfig) {
              arrFishOutput.push(fish.getId());
            }
          });
          return arrFishOutput;
        };

        _proto.sendListFishPoison = function sendListFishPoison(listFish) {
          var data = {
            Angle: 0,
            ListFish: listFish.length > 0 ? listFish : [-1],
            SkillID: Config1988.instance.SkillConfig.FISH_BOMB
          };
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_FIRE_LASER, data);
        };

        _proto.destroy = function destroy() {
          removeEvents(this);

          _gfFishManager.prototype.destroy.call(this);
        };

        return FishManager1988;
      }(gfFishManager));

      _defineProperty(FishManager1988, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utils.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Vec3, UITransform, UIOpacity, Renderable2D, tween, Color, bezier, director, v3, sys, log, assetManager, Texture2D, SpriteFrame, Sprite, isValid, Node, warn;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      Renderable2D = module.Renderable2D;
      tween = module.tween;
      Color = module.Color;
      bezier = module.bezier;
      director = module.director;
      v3 = module.v3;
      sys = module.sys;
      log = module.log;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      isValid = module.isValid;
      Node = module.Node;
      warn = module.warn;
    }],
    execute: function () {
      exports({
        MD5: MD5,
        addZero: addZero,
        changeParent: changeParent,
        convertAssetArrayToObject: convertAssetArrayToObject,
        convertPayLine: convertPayLine,
        convertPayLineAllways: convertPayLineAllways,
        customDateFormat: customDateFormat,
        fadeIn: fadeIn,
        fadeOut: fadeOut,
        fadeTo: fadeTo,
        findKeyByValue: findKeyByValue,
        formatMoney: formatMoney,
        formatUserName: formatUserName,
        formatWalletMoney: formatWalletMoney,
        getAngleTwoPoint: getAngleTwoPoint,
        getAnimationsName: getAnimationsName,
        getDistance: getDistance,
        getFBAvatar: getFBAvatar,
        getLeftTime: getLeftTime,
        getOpacity: getOpacity,
        getPostionInOtherNode: getPostionInOtherNode,
        getRandomElement: getRandomElement,
        getRandomInt: getRandomInt,
        getText: getText,
        getTime: getTime,
        loadAvatarFacebook: loadAvatarFacebook,
        mapObjectKey: mapObjectKey,
        pickOutRandomElement: pickOutRandomElement,
        randRange: randRange,
        removeDuplicates: removeDuplicates,
        removeElementByValue: removeElementByValue,
        replaceElement: replaceElement,
        roundDecimal: roundDecimal,
        secondsToHHMMSS: secondsToHHMMSS,
        setLayerAlls: setLayerAlls,
        setLayerForAllChildrens: setLayerForAllChildrens,
        setMixAllAnims: setMixAllAnims,
        setOpacity: setOpacity,
        setRenderColor: setRenderColor,
        shaking: shaking,
        shuffleArray: shuffleArray,
        startGameFromEvent: startGameFromEvent,
        toFixed: toFixed,
        toLocalClockTime: toLocalClockTime,
        toLocalTime: toLocalTime,
        toLocalTimeHHMM: toLocalTimeHHMM,
        tweenBezier2DTo: tweenBezier2DTo,
        tweenMoney: tweenMoney,
        tweenMoney2: tweenMoney2,
        tweenWalletMoney: tweenWalletMoney,
        updateUtilConfig: updateUtilConfig
      });

      cclegacy._RF.push({}, "61e2aeL1yJB6r+n4NcvBChY", "utils", undefined);

      var lodash = globalThis._;
      var UTIL_CONFIG = exports('UTIL_CONFIG', {
        FORMAT_MONEY_EVENT: false
      });

      function updateUtilConfig(key, value) {
        if (UTIL_CONFIG.hasOwnProperty(key)) {
          UTIL_CONFIG[key] = value;
        }
      }

      function findKeyByValue(object, value) {
        return Object.keys(object).find(function (key) {
          return object[key] == value;
        });
      }

      function customDateFormat(date, formatString) {
        var YYYY, YY, MMMM, MMM, MM, M, DDDD, DDD, DD, D, hhhh, hhh, hh, h, mm, m, ss, s, ampm, AMPM, dMod, th;
        YY = ((YYYY = date.getFullYear()) + "").slice(-2);
        MM = (M = date.getMonth() + 1) < 10 ? '0' + M : M;
        MMM = (MMMM = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][M - 1]).substring(0, 3);
        DD = (D = date.getDate()) < 10 ? '0' + D : D;
        DDD = (DDDD = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][date.getDay()]).substring(0, 3);
        th = D >= 10 && D <= 20 ? 'th' : (dMod = D % 10) == 1 ? 'st' : dMod == 2 ? 'nd' : dMod == 3 ? 'rd' : 'th';
        formatString = formatString.replace("#YYYY#", YYYY).replace("#YY#", YY).replace("#MMMM#", MMMM).replace("#MMM#", MMM).replace("#MM#", MM).replace("#M#", M).replace("#DDDD#", DDDD).replace("#DDD#", DDD).replace("#DD#", DD).replace("#D#", D).replace("#th#", th);
        h = hhh = date.getHours();
        if (h == 0) h = 24;
        if (h > 12) h -= 12;
        hh = h < 10 ? '0' + h : h;
        hhhh = hhh < 10 ? '0' + hhh : hhh;
        AMPM = (ampm = hhh < 12 ? 'am' : 'pm').toUpperCase();
        mm = (m = date.getMinutes()) < 10 ? '0' + m : m;
        ss = (s = date.getSeconds()) < 10 ? '0' + s : s;
        return formatString.replace("#hhhh#", hhhh).replace("#hhh#", hhh).replace("#hh#", hh).replace("#h#", h).replace("#mm#", mm).replace("#m#", m).replace("#ss#", ss).replace("#s#", s).replace("#ampm#", ampm).replace("#AMPM#", AMPM);
      }

      function toLocalTimeHHMM(ts) {
        var timestamp = new Date(parseInt(ts));
        var hour = timestamp.getHours();
        var minutes = timestamp.getMinutes();
        var localTime = (hour < 10 ? "0" : "") + hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function toLocalClockTime(ts) {
        var timestamp = new Date(parseInt(ts));
        var hour = timestamp.getHours();
        var minutes = timestamp.getMinutes();
        var localTime = hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function formatUserName(userName) {
        return userName.trim();
      }

      function secondsToHHMMSS(secs) {
        if (secs == 0) return "00:00";
        var sec_num = parseInt(secs, 10);
        var hours = Math.floor(sec_num / 3600);
        var minutes = Math.floor(sec_num / 60) % 60;
        var seconds = sec_num % 60;
        return [hours, minutes, seconds].map(function (v) {
          return v < 10 ? "0" + v : v;
        }).filter(function (v, i) {
          return v !== "00" || i > 0;
        }).join(":");
      }

      function toLocalTime(ts, format) {
        return customDateFormat(new Date(ts * 1000), format);
      }

      function randRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function toFixed(num, fixed) {
        var re = new RegExp('^-?\\d+(?:\.\\d{0,' + (fixed || -1) + '})?'); // eslint-disable-line

        var result = num.toString().match(re)[0];
        return result;
      }

      function getPostionInOtherNode(spaceNode, targetNode) {
        if (targetNode.parent == null) {
          return null;
        }

        var pos = new Vec3(0, 0, 0);
        var targetNodeComponent = targetNode.parent.getComponent(UITransform);
        var spaceNodeComponent = spaceNode.getComponent(UITransform);

        if (!targetNodeComponent) {
          targetNode.parent.addComponent(UITransform);
        }

        if (!spaceNodeComponent) {
          spaceNode.addComponent(UITransform);
        }

        pos = targetNodeComponent.convertToWorldSpaceAR(targetNode.getPosition());
        return spaceNodeComponent ? spaceNodeComponent.convertToNodeSpaceAR(pos) : pos;
      }

      function convertAssetArrayToObject(arr) {
        var obj = {};

        for (var i = 0; i < arr.length; i++) {
          if (arr[i]._name == "" && arr[i].data) {
            arr[i]._name = arr[i].data._name;
          }

          if (arr[i] && arr[i]._name) {
            obj[arr[i]._name] = arr[i];
          }
        }

        return obj;
      }

      function getAnimationsName(spine) {
        return Object.keys(spine.skeletonData._skeletonJson.animations);
      }
      /**
       * ! just using for the spine have a few animations
       */


      function setMixAllAnims(spine, mixTime) {
        if (mixTime === void 0) {
          mixTime = 0.15;
        }

        var animNames = getAnimationsName(spine);

        if (animNames.length < 2) {
          console.error("spine have to have many animations");
          return;
        }

        for (var i = 0; i < animNames.length; i++) {
          for (var j = 0; j < animNames.length; j++) {
            spine.setMix(animNames[i], animNames[j], mixTime);
          }
        }
      }

      function convertPayLineAllways(payLines, multiplier, betDenom) {
        if (payLines === void 0) {
          payLines = [];
        }

        if (multiplier === void 0) {
          multiplier = 1;
        }

        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          if (payLines[i].includes(';')) {
            var dataSplit = payLines[i].split(';');

            if (dataSplit.length !== 0) {
              listNewPL.push({
                symbolId: dataSplit[0],
                totalWinAmount: dataSplit[1],
                symbolCount: dataSplit[2],
                combination: dataSplit[3],
                payableSymbol: dataSplit[4],
                betDenom: betDenom,
                multiplier: multiplier
              });
            } else {
              console.error("payLines is not right AKTV formatted");
            }
          }
        }

        return listNewPL;
      }

      function convertPayLine(payLines) {
        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          var dataSplit = payLines[i].split(';');

          if (dataSplit.length >= 3) {
            listNewPL.push({
              payLineID: dataSplit[0],
              payLineWinNumbers: parseInt(dataSplit[1]),
              payLineWinAmount: dataSplit[2],
              payLineSymbol: dataSplit[3]
            });
          }
        }

        return listNewPL;
      }

      function formatWalletMoney(num, digits) {
        if (digits === void 0) {
          digits = 2;
        }

        if (isNaN(parseFloat(num))) return "0";
        var si = [{
          value: 1,
          symbol: ""
        }, {
          value: 1E3,
          symbol: "K"
        }, {
          value: 1E6,
          symbol: "M"
        }, {
          value: 1E9,
          symbol: "B"
        }, {
          value: 1E12,
          symbol: "T"
        }, {
          value: 1E15,
          symbol: "P"
        }, {
          value: 1E18,
          symbol: "E"
        }];
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        var i;

        for (i = si.length - 1; i > 0; i--) {
          if (num >= si[i].value) {
            break;
          }
        }

        var result = toFixed(num / si[i].value, digits);

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          result = result.replace('.', ',');
        }

        return result.replace(rx, "$1") + si[i].symbol;
      }

      function formatMoney(amount, decimalCount, decimal, thousands) {
        if (decimalCount === void 0) {
          decimalCount = 0;
        }

        if (decimal === void 0) {
          decimal = ".";
        }

        if (thousands === void 0) {
          thousands = ",";
        }

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          decimal = ",";
          thousands = ".";
        }

        try {
          decimalCount = Math.abs(decimalCount);
          decimalCount = isNaN(decimalCount) ? 2 : decimalCount;
          var negativeSign = amount < 0 ? "-" : "";
          var i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
          var j = i.length > 3 ? i.length % 3 : 0;
          return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
          console.error(e);
        }

        return "0";
      }

      function changeParent(node, newParent) {
        if (node.parent === newParent) return;

        var getWorldRotation = function getWorldRotation(node) {
          var currNode = node;
          var resultRot = currNode.angle || 0;

          do {
            currNode = currNode.parent;
            resultRot += currNode.angle || 0;
          } while (currNode.parent != null);

          resultRot = resultRot % 360;
          return resultRot;
        };

        var oldWorRot = getWorldRotation(node);
        var newParentWorRot = getWorldRotation(newParent);
        var newLocRot = oldWorRot - newParentWorRot;

        if (!node.getComponent(UITransform)) {
          node.addComponent(UITransform);
        }

        if (!newParent.getComponent(UITransform)) {
          newParent.addComponent(UITransform);
        }

        var oldWorPos = node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0));
        var newLocPos = newParent.getComponent(UITransform).convertToNodeSpaceAR(oldWorPos);
        node.parent = newParent;
        node.position = newLocPos;
        node.angle = newLocRot;
      }

      function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function roundDecimal(num, numDecimal) {
        var rate = 1;

        for (var i = 0; i < numDecimal; i++) {
          rate *= 10;
        }

        return Math.round((num + Number.EPSILON) * rate) / rate;
      }

      function shuffleArray(array) {
        for (var i = array.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }

        return array;
      }

      function getRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        return array[Math.floor(Math.random() * array.length)];
      }

      function pickOutRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        var randomIndex = Math.floor(Math.random() * array.length);
        return array.splice(randomIndex, 1)[0];
      }

      function removeElementByValue(array, value) {
        array.splice(array.indexOf(value), 1);
        return array;
      }

      function replaceElement(array, oldElement, newElement) {
        var index = array.indexOf(oldElement);
        if (index > -1) array[index] = newElement;
        return array;
      }

      function getText(text, length) {
        if (text === void 0) {
          text = '';
        }

        if (length === void 0) {
          length = 0;
        }

        var result = text;
        var n = length - text.length;

        if (n) {
          for (var i = 0; i < n; i++) {
            result += ' ';
          }
        }

        return result;
      }

      function getLeftTime(endTime, serverTime, millisecond) {
        if (millisecond === void 0) {
          millisecond = 1000;
        }

        serverTime = serverTime ? new Date(serverTime).getTime() : new Date().getTime();
        var time = Math.floor((new Date(endTime).getTime() - serverTime) / millisecond);
        if (time < 0) time = 0;
        return time;
      }

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      function getTime() {
        var d = new Date();
        var h = addZero(d.getHours());
        var m = addZero(d.getMinutes());
        var s = addZero(d.getSeconds());
        var t = h + ':' + m + ':' + s;
        return t;
      }

      function mapObjectKey(obj, keysMap) {
        return lodash.transform(obj, function (result, value, key) {
          var currentKey = key;

          if (keysMap[key]) {
            currentKey = keysMap[key].name;
            if (keysMap[key].type == Boolean) value = value == 'T';
          }

          if (lodash.isObject(value)) {
            result[currentKey] = mapObjectKey(value, keysMap);
          } else {
            result[currentKey] = value;
          }
        });
      }

      function fadeTo(target, duration, opacity, options) {
        var uiOpacity = target.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = target.addComponent(UIOpacity); //if (sys.isNative) {

        var render2D = target.getComponent(Renderable2D);
        options = options || {};

        if (render2D) {
          if (options.onUpdate) {
            var _onUpdate = options.onUpdate;

            options.onUpdate = function () {
              setRenderColor(render2D, uiOpacity.opacity);
              _onUpdate && _onUpdate();
            };
          } else {
            options.onUpdate = function () {
              setRenderColor(render2D, uiOpacity.opacity);
            };
          }
        } //}


        if (target['tweenFade']) {
          target['tweenFade'].stop();
          target['tweenFade'] = null;
        }

        var tweenFade = tween(uiOpacity);
        target['tweenFade'] = tweenFade;
        tweenFade.to(duration, {
          opacity: opacity
        }, options).call(function () {
          target['tweenFade'] = null;
        }).start();
        return tweenFade;
      }

      function fadeIn(target, duration, options) {
        return fadeTo(target, duration, 255, options);
      }

      function fadeOut(target, duration, options) {
        return fadeTo(target, duration, 0, options);
      }

      function getOpacity(node) {
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        return uiOpacity.opacity;
      }

      function setOpacity(node, opacity) {
        var activeCache = node.active;
        node.active = true;
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        uiOpacity.opacity = opacity; //if (sys.isNative) {

        var render2D = node.getComponent(Renderable2D);
        render2D && setRenderColor(render2D, opacity); //}

        node.active = activeCache;
      }

      function setRenderColor(render, alpha) {
        var color = Color.clone(render.color);
        color.a = alpha;
        render.color = color;
      }

      function tweenMoney(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value));
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatMoney(endValue);
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      } //for slot event only


      function tweenMoney2(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value), 0, ',', '.');
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatMoney(endValue, 0, ',', '.');
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      function tweenWalletMoney(label, duration, startValue, endValue, options) {
        if (label["tweenWalletMoney"]) label["tweenWalletMoney"].stop(); // stop if on tween;

        var currentVal = startValue || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatWalletMoney(Math.round(_target.value));
        };

        var tweenWalletMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatWalletMoney(endValue);
          label["tweenWalletMoney"] = null;
        }).start();
        label["tweenWalletMoney"] = tweenWalletMoney;
        return tweenWalletMoney;
      }

      function tweenBezier2DTo(target, duration, c1, c2, to, opts) {
        if (target['bezierX']) target['bezierX'].stop();
        if (target['bezierY']) target['bezierY'].stop();
        var c0x = c1.x,
            c0y = c1.y,
            c1x = c2.x,
            c1y = c2.y;
        var _targetX = {
          value: target.getPosition().x
        };
        var _targetY = {
          value: target.getPosition().y
        };
        var aOpts = opts || Object.create(null);

        aOpts.progress = function (startX, endX, currentX, t) {
          currentX = bezier(startX, c0x, c1x, endX, t);
          return currentX;
        };

        aOpts.onUpdate = function () {
          target.setPosition(new Vec3(_targetX.value, target.position.y, target.position.z));
        };

        var bOpts = opts || Object.create(null);

        bOpts.progress = function (startY, endY, currentY, t) {
          currentY = bezier(startY, c0y, c1y, endY, t);
          return currentY;
        };

        bOpts.onUpdate = function () {
          target.setPosition(new Vec3(target.position.x, _targetY.value, target.position.z));
        };

        target['bezierX'] = tween(_targetX).to(duration, {
          value: to.x
        }, aOpts).call(function () {
          target['bezierX'] = null;
        }).start();
        target['bezierY'] = tween(_targetY).to(duration, {
          value: to.y
        }, bOpts).call(function () {
          target['bezierY'] = null;
        }).start();
      }

      function startGameFromEvent(gameId, eventId) {
        director.loadScene("MultiSlot", function () {
          var multiSlotComp = director.getScene().getChildByName('Canvas').getChildByName('MultiSlot');

          if (multiSlotComp) {
            multiSlotComp.emit('LOAD_SELECTED_GAME', gameId, eventId);
          }
        });
      }

      function removeDuplicates(array) {
        return array.filter(function (item, index) {
          return array.indexOf(item) === index;
        });
      }
      /**
       * @returns degree angle
      */


      function getAngleTwoPoint(p1, p2) {
        return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
      }

      function getDistance(p1, p2) {
        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
      }

      function shaking(node, _ref) {
        var _ref$duration = _ref.duration,
            duration = _ref$duration === void 0 ? 0.16 : _ref$duration,
            _ref$distance = _ref.distance,
            distance = _ref$distance === void 0 ? 10 : _ref$distance,
            _ref$repeat = _ref.repeat,
            repeat = _ref$repeat === void 0 ? 1 : _ref$repeat;
        var dur = duration / 8;
        var shake = tween().by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(distance, 0)
        });
        var tweenShake = tween(node).repeat(repeat, shake).start();
        return tweenShake;
      }

      function MD5(e) {
        function h(a, b) {
          var c, d, e, f, g;
          e = a & 2147483648;
          f = b & 2147483648;
          c = a & 1073741824;
          d = b & 1073741824;
          g = (a & 1073741823) + (b & 1073741823);
          return c & d ? g ^ 2147483648 ^ e ^ f : c | d ? g & 1073741824 ? g ^ 3221225472 ^ e ^ f : g ^ 1073741824 ^ e ^ f : g ^ e ^ f;
        }

        function k(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & c | ~b & d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function l(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & d | c & ~d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function m(a, b, d, c, e, f, g) {
          a = h(a, h(h(b ^ d ^ c, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function n(a, b, d, c, e, f, g) {
          a = h(a, h(h(d ^ (b | ~c), e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function p(a) {
          var b = "",
              d = "",
              c;

          for (c = 0; 3 >= c; c++) {
            d = (a >>> 8 * c & 255).toString(), d = "0" + parseInt(d).toString(16), b += d.substr(d.length - 2, 2);
          }

          return b;
        }

        var f = [],
            q,
            r,
            s,
            t,
            a,
            b,
            c,
            d;

        e = function (a) {
          a = a.replace(/\r\n/g, "\n");

          for (var b = "", d = 0; d < a.length; d++) {
            var c = a.charCodeAt(d);
            128 > c ? b += String.fromCharCode(c) : (127 < c && 2048 > c ? b += String.fromCharCode(c >> 6 | 192) : (b += String.fromCharCode(c >> 12 | 224), b += String.fromCharCode(c >> 6 & 63 | 128)), b += String.fromCharCode(c & 63 | 128));
          }

          return b;
        }(e);

        f = function (b) {
          var a,
              c = b.length;
          a = c + 8;

          for (var d = 16 * ((a - a % 64) / 64 + 1), e = Array(d - 1), f = 0, g = 0; g < c;) {
            a = (g - g % 4) / 4, f = g % 4 * 8, e[a] |= b.charCodeAt(g) << f, g++;
          }

          a = (g - g % 4) / 4;
          e[a] |= 128 << g % 4 * 8;
          e[d - 2] = c << 3;
          e[d - 1] = c >>> 29;
          return e;
        }(e);

        a = 1732584193;
        b = 4023233417;
        c = 2562383102;
        d = 271733878;

        for (e = 0; e < f.length; e += 16) {
          q = a, r = b, s = c, t = d, a = k(a, b, c, d, f[e + 0], 7, 3614090360), d = k(d, a, b, c, f[e + 1], 12, 3905402710), c = k(c, d, a, b, f[e + 2], 17, 606105819), b = k(b, c, d, a, f[e + 3], 22, 3250441966), a = k(a, b, c, d, f[e + 4], 7, 4118548399), d = k(d, a, b, c, f[e + 5], 12, 1200080426), c = k(c, d, a, b, f[e + 6], 17, 2821735955), b = k(b, c, d, a, f[e + 7], 22, 4249261313), a = k(a, b, c, d, f[e + 8], 7, 1770035416), d = k(d, a, b, c, f[e + 9], 12, 2336552879), c = k(c, d, a, b, f[e + 10], 17, 4294925233), b = k(b, c, d, a, f[e + 11], 22, 2304563134), a = k(a, b, c, d, f[e + 12], 7, 1804603682), d = k(d, a, b, c, f[e + 13], 12, 4254626195), c = k(c, d, a, b, f[e + 14], 17, 2792965006), b = k(b, c, d, a, f[e + 15], 22, 1236535329), a = l(a, b, c, d, f[e + 1], 5, 4129170786), d = l(d, a, b, c, f[e + 6], 9, 3225465664), c = l(c, d, a, b, f[e + 11], 14, 643717713), b = l(b, c, d, a, f[e + 0], 20, 3921069994), a = l(a, b, c, d, f[e + 5], 5, 3593408605), d = l(d, a, b, c, f[e + 10], 9, 38016083), c = l(c, d, a, b, f[e + 15], 14, 3634488961), b = l(b, c, d, a, f[e + 4], 20, 3889429448), a = l(a, b, c, d, f[e + 9], 5, 568446438), d = l(d, a, b, c, f[e + 14], 9, 3275163606), c = l(c, d, a, b, f[e + 3], 14, 4107603335), b = l(b, c, d, a, f[e + 8], 20, 1163531501), a = l(a, b, c, d, f[e + 13], 5, 2850285829), d = l(d, a, b, c, f[e + 2], 9, 4243563512), c = l(c, d, a, b, f[e + 7], 14, 1735328473), b = l(b, c, d, a, f[e + 12], 20, 2368359562), a = m(a, b, c, d, f[e + 5], 4, 4294588738), d = m(d, a, b, c, f[e + 8], 11, 2272392833), c = m(c, d, a, b, f[e + 11], 16, 1839030562), b = m(b, c, d, a, f[e + 14], 23, 4259657740), a = m(a, b, c, d, f[e + 1], 4, 2763975236), d = m(d, a, b, c, f[e + 4], 11, 1272893353), c = m(c, d, a, b, f[e + 7], 16, 4139469664), b = m(b, c, d, a, f[e + 10], 23, 3200236656), a = m(a, b, c, d, f[e + 13], 4, 681279174), d = m(d, a, b, c, f[e + 0], 11, 3936430074), c = m(c, d, a, b, f[e + 3], 16, 3572445317), b = m(b, c, d, a, f[e + 6], 23, 76029189), a = m(a, b, c, d, f[e + 9], 4, 3654602809), d = m(d, a, b, c, f[e + 12], 11, 3873151461), c = m(c, d, a, b, f[e + 15], 16, 530742520), b = m(b, c, d, a, f[e + 2], 23, 3299628645), a = n(a, b, c, d, f[e + 0], 6, 4096336452), d = n(d, a, b, c, f[e + 7], 10, 1126891415), c = n(c, d, a, b, f[e + 14], 15, 2878612391), b = n(b, c, d, a, f[e + 5], 21, 4237533241), a = n(a, b, c, d, f[e + 12], 6, 1700485571), d = n(d, a, b, c, f[e + 3], 10, 2399980690), c = n(c, d, a, b, f[e + 10], 15, 4293915773), b = n(b, c, d, a, f[e + 1], 21, 2240044497), a = n(a, b, c, d, f[e + 8], 6, 1873313359), d = n(d, a, b, c, f[e + 15], 10, 4264355552), c = n(c, d, a, b, f[e + 6], 15, 2734768916), b = n(b, c, d, a, f[e + 13], 21, 1309151649), a = n(a, b, c, d, f[e + 4], 6, 4149444226), d = n(d, a, b, c, f[e + 11], 10, 3174756917), c = n(c, d, a, b, f[e + 2], 15, 718787259), b = n(b, c, d, a, f[e + 9], 21, 3951481745), a = h(a, q), b = h(b, r), c = h(c, s), d = h(d, t);
        }

        return (p(a) + p(b) + p(c) + p(d)).toLowerCase();
      }

      function getFBAvatar(url, spriteA, defaultAvatar, AvatarAtlas) {
        var dirpath = jsb.fileUtils.getWritablePath() + 'avaImg/';
        var filepath = dirpath + MD5(url) + '.png';

        function loadEnd() {
          assetManager.loadAny({
            url: filepath
          }, function (err, tex) {
            if (err) {
              warn(err);
              spriteA.spriteFrame = defaultAvatar;
            } else {
              var spriteFrame = new SpriteFrame();
              spriteFrame.texture = tex;

              if (spriteFrame) {
                spriteA.spriteFrame = spriteFrame;
              }
            }
          });
        }

        if (sys.os === sys.OS_ANDROID && sys.isNative) {
          if (jsb.fileUtils.isFileExist(filepath)) {
            //remove old file
            jsb.fileUtils.removeFile(filepath);
          }
        }

        var saveFile = function saveFile(data) {
          if (typeof data !== 'undefined') {
            if (!jsb.fileUtils.isDirectoryExist(dirpath)) {
              jsb.fileUtils.createDirectory(dirpath);
            }

            if (jsb.fileUtils.writeValueMapToFile(new Uint8Array(data), filepath)) {
              warn('Remote write file succeed.');
              loadEnd();
            } else {
              spriteA.spriteFrame = defaultAvatar;
              warn('Remote write file failed.');
            }
          } else {
            spriteA.spriteFrame = defaultAvatar;
            warn('Remote download file failed.');
          }
        };

        if (sys.os === sys.OS_IOS && sys.isNative) {
          if (url.indexOf("facebook") !== -1) {
            if (jsb.fileUtils.isFileExist(filepath)) {
              loadEnd();
            }

            var xhr = new XMLHttpRequest();
            xhr.responseType = 'arraybuffer';

            xhr.onreadystatechange = function () {
              log("xhr.readyState  " + xhr.readyState);
              log("xhr.status  " + xhr.status);

              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  saveFile(xhr.response);
                }
              }
            }.bind(this);

            xhr.open("GET", url, true);
            xhr.send();
          } else {
            var spFrame = defaultAvatar;

            if (url) {
              var filename = url.substring(url.lastIndexOf('/') + 1);

              if (filename.match(/avatar_[0-9][0-9].png/)) {
                var num = filename.substring(7, 8);
                var spInt = parseInt(num);

                if (spInt >= 0 && spInt <= 32) {
                  spFrame = filename.split('.')[0];
                } else {
                  spFrame = defaultAvatar;
                }
              } else {
                spFrame = defaultAvatar;
              }
            }

            spriteA.spriteFrame = AvatarAtlas.getSpriteFrame(spFrame);
          }
        } else {
          var _xhr = new XMLHttpRequest();

          _xhr.responseType = 'arraybuffer';

          _xhr.onreadystatechange = function () {
            log("xhr.readyState  " + _xhr.readyState);
            log("xhr.status  " + _xhr.status);

            if (_xhr.readyState === 4) {
              if (_xhr.status === 200) {
                saveFile(_xhr.response);
              } else {
                saveFile(null);
              }
            }
          }.bind(this);

          _xhr.open("GET", url, true);

          _xhr.send();
        }
      }

      function loadAvatarFacebook(avatarSprite, ava, atlas, prefix, leadingZeroLength, avatarDefault) {
        if (prefix === void 0) {
          prefix = 'avatar_';
        }

        if (leadingZeroLength === void 0) {
          leadingZeroLength = 0;
        }

        if (avatarDefault === void 0) {
          avatarDefault = 'avatar_incognito';
        }

        if (!avatarSprite || !avatarSprite.node) return;
        var defaultAvatar = atlas.getSpriteFrame(avatarDefault);
        if (!defaultAvatar) return;

        var _sframe = decodeURIComponent(ava);

        if ((ava + '').indexOf('avatar_') > -1) {
          _sframe = ava || avatarDefault;
        } else {
          if (!isNaN(ava)) {
            ava = Number.parseInt(ava);
          }

          if (lodash.isNumber(ava)) {
            // avatar start from 1
            ava += 1;

            if (leadingZeroLength > 0) {
              var zeroPad = function zeroPad(num, places) {
                return String(num).padStart(places, '0');
              };

              ava = zeroPad(ava, leadingZeroLength);
            }

            _sframe = prefix + ava;
          }
        }

        if (_sframe.indexOf('avatar_') > -1 && _sframe.indexOf("facebook") === -1 && _sframe.indexOf("http") > -1) {
          var avaId = _sframe.split('avatar_');

          var frame = defaultAvatar;

          if (avaId[1]) {
            frame = atlas.getSpriteFrame('avatar_' + avaId[1].replace('.png', ''));
          }

          frame = frame ? frame : defaultAvatar;
          avatarSprite.spriteFrame = frame;
          return false;
        } else if (_sframe.indexOf("http") === -1) {
          var _frame = atlas.getSpriteFrame(_sframe);

          _frame = _frame ? _frame : defaultAvatar;
          avatarSprite.spriteFrame = _frame;
          return false;
        } // else if(cc.sys.isNative){
        //     getFBAvatar(_sframe, avatarSprite, defaultAvatar, atlas);
        // } 
        else {
            if (_sframe.indexOf("facebook") !== -1) {
              _sframe = _sframe.replace("http://", "https://");
            }

            assetManager.loadRemote(decodeURIComponent(ava), {
              ext: 'png'
            }, function (err, imageRes) {
              if (!avatarSprite || !avatarSprite.node) return;

              if (err) {
                avatarSprite.spriteFrame = defaultAvatar;
              } else if (imageRes instanceof Texture2D) {
                var spriteFrame = new SpriteFrame();
                spriteFrame.texture = imageRes;

                if (avatarSprite && avatarSprite.node && avatarSprite.node.getComponent) {
                  var com = avatarSprite.node.getComponent(Sprite);

                  if (!com || isValid(com, true) == false) {
                    com = avatarSprite.node.addComponent(Sprite);
                  }

                  com.spriteFrame = new SpriteFrame();
                  com.spriteFrame.texture = spriteFrame.texture;
                }
              } else {
                avatarSprite.spriteFrame = defaultAvatar;
              }
            });
            return true;
          }
      }

      function setLayerForAllChildrens(target, layer) {
        target.walk(function (it) {
          it.layer = layer;
          it.on(Node.EventType.CHILD_ADDED, function (child) {
            setLayerForAllChildrens(child, child.parent.layer);
          });
        }, function () {});
      }

      function setLayerAlls(target, layer) {
        target.walk(function (it) {
          it.layer = layer;
        }, function () {});
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/appConfig-debug.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6489cRd0MZBGL13/OpCjxhn", "appConfig-debug", undefined);

      var urlConstant = exports('urlConstant', {
        API_URL: "https://api.staging.gemitek.dev/",
        SOCKET_URL: "wss://sock.staging.gemitek.dev",
        LOGIN_IFRAME: true,
        // DEV_ENV:  true,
        URL_TOKEN: 'token',
        URL_CODE: 'code',
        USER_TOKEN: "user_token",
        LOBBY_SCENE_NAME: "lobby-staging-test",
        IPMaster1: "wss://staging.fish.gemitek.dev/lobby/",
        IPMaster2: "wss://staging.fish.gemitek.dev/xwin-lobby/",
        IPMaster3: "wss://staging.fish.gemitek.dev/fish-3-lobby/",
        IPMaster4: "wss://staging.fish.gemitek.dev/lobby-1994/",
        IPMaster5: "wss://zbie.gemitek.dev/zombie-lobby/",
        IPMaster6: "wss://staging.fish.gemitek.dev/lobby-1992/",
        // IPMaster7: "wss://staging.fish.gemitek.dev/lobby/",
        IPMaster7: "wss://staging.fish.gemitek.dev/lobby-1990/",
        IPMaster8: "wss://dev.fish.gemitek.dev/lobby-1988/",
        IPMaster10: "wss://staging.fish.gemitek.dev/lobby-1996/",
        IPMaster11: "wss://dev.fish.gmstd.dev/lobby-1985/"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadingTransition.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, tween, Component, setOpacity, gfBaseEvents, delay, fadeOut, call, registerEvent, removeEvents, gfDataStore;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      delay = module.delay;
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "64cbaM1vRdJnq2EqYQ2YxOz", "gfLoadingTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfLoadingTransition = exports('GfLoadingTransition', (_dec = ccclass('GfLoadingTransition'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfLoadingTransition, _Component);

        function GfLoadingTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "startTime", null);

          return _this;
        }

        var _proto = GfLoadingTransition.prototype;

        _proto.onLoad = function onLoad() {
          setOpacity(this.node, 0);
          this.startTime = Date.now();
          registerEvent(gfBaseEvents.COMMON.LOADING_TRANSITION, this.transition, this);
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
        };

        _proto.transition = function transition() {
          var _this2 = this;

          gfDataStore.instance.setDataStore({
            "isPlayingLoadingTransition": true
          });
          setOpacity(this.node, 255);
          var delayTime = Date.now() - this.startTime > 1 ? 0.25 : 1;
          var tweenTransition = tween(this.node);
          tweenTransition.then(delay(delayTime));
          tweenTransition.then(fadeOut(0.5));
          tweenTransition.then(call(function () {
            gfDataStore.instance.setDataStore({
              "isPlayingLoadingTransition": false
            });
            removeEvents(_this2);

            _this2.node.destroy();
          }));
          tweenTransition.start();
        };

        _proto.refreshPage = function refreshPage() {
          removeEvents(this);
        };

        return GfLoadingTransition;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectBossBoris1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1988.ts', './Config1988.ts', './ReferenceManager1988.ts', './PoolManager1988.ts', './FishManager1988.ts', './Chip1988.ts', './EffectLightning1988.ts', './PanelChip1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, log, instantiate, v3, UITransform, tween, isValid, Component, getPostionInOtherNode, gfBaseEvents, stopAllActions, gfEventEmitter, registerEvent, SetZIndex, removeEvents, EventCode, Config1988, ReferenceManager1988, PoolManager1988, FishManager1988, Chip1988, EffectLightning1988, PanelChip1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      log = module.log;
      instantiate = module.instantiate;
      v3 = module.v3;
      UITransform = module.UITransform;
      tween = module.tween;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }, function (module) {
      PoolManager1988 = module.default;
    }, function (module) {
      FishManager1988 = module.default;
    }, function (module) {
      Chip1988 = module.Chip1988;
    }, function (module) {
      EffectLightning1988 = module.EffectLightning1988;
    }, function (module) {
      PanelChip1988 = module.PanelChip1988;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "6538ej+5LFJVbgqanl4md7x", "EffectBossBoris1988", undefined);

      var DELAY_TIME_STATIC = 0.05;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectBossBoris1988 = exports('EffectBossBoris1988', (_dec = ccclass('EffectBossBoris1988'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EffectBossBoris1988, _Component);

        function EffectBossBoris1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "chip", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "jackpotWinPopup", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "borisStaticPrefab", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectLighting", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "endData", null);

          _defineProperty(_assertThisInitialized(_this), "_borisStatic", null);

          _defineProperty(_assertThisInitialized(_this), "_isTurnOffStatic", true);

          _defineProperty(_assertThisInitialized(_this), "_currTimeDelayStatic", void 0);

          _defineProperty(_assertThisInitialized(_this), "_countChipDroping", void 0);

          _defineProperty(_assertThisInitialized(_this), "_arrInfoEffect", []);

          _defineProperty(_assertThisInitialized(_this), "_winJackPotPopup", null);

          _defineProperty(_assertThisInitialized(_this), "_arrBorisStatic", []);

          return _this;
        }

        var _proto = EffectBossBoris1988.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.DRAGON.DROP_BALL, this.dropChip, this);
          registerEvent(EventCode.GAME_LAYER.PLAY_JACKPOT_BORIS, this.showJackpotWinPopup, this); // nếu chốt xoá tính năng effectBorisFlyWarning thì sẽ xoá hàm
          //registerEvent(EventCode.DRAGON.WARNING, this.effectBorisFlyWarning, this);

          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.resetOnExit, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(EventCode.EFFECT_LAYER.PLAY_EFFECT_LIGHTING, this.createEffectLightning, this);
          registerEvent(gfBaseEvents.DRAGON.ON_END, this.onDragonEnd, this);
        };

        _proto.showJackpotWinPopup = function showJackpotWinPopup() {
          var _this2 = this; //TODO popup win jackpot


          var isHaveDataWinJackpot = this.endData && this.endData.DeskStation != -1;

          if (!isHaveDataWinJackpot) {
            log("player exited or wrong data: " + this.endData);
            return;
          }

          var player = ReferenceManager1988.instance.getPlayerByDeskStation(this.endData.DeskStation);
          var winAmount = this.endData.WinAmount;
          var panelJackpotLayer = ReferenceManager1988.instance.getPanelJackpotLayer();
          var panelJackpotComp = panelJackpotLayer.getComponent("PanelJackpotController1988");

          if (player.isMe) {
            this._winJackPotPopup = instantiate(this.jackpotWinPopup);

            this._winJackPotPopup.getComponent('gfJackpotWinPopup').setWinValue(winAmount);

            this._winJackPotPopup.parent = this.node.parent;
            SetZIndex(this._winJackPotPopup, Config1988.instance.Z_INDEX.NOTIFY + 1);

            this._winJackPotPopup.getComponent('gfJackpotWinPopup').setCallbackHide(function () {
              player.addToDisplayWallet(winAmount);
            });

            var panelChip = panelJackpotComp.getPanelChipByIndex(player.index);
            panelChip.getComponent(PanelChip1988).hide();
          } else {
            this._winJackPotPopup = instantiate(this.jackpotWinPopup);

            this._winJackPotPopup.getComponent('gfJackpotWinPopup').setWinValue(winAmount);

            this._winJackPotPopup.parent = this.node.parent;
            SetZIndex(this._winJackPotPopup, Config1988.instance.Z_INDEX.NOTIFY + 1);
            var info = {
              effect: this._winJackPotPopup,
              deskStation: this.endData.DeskStation
            };

            this._arrInfoEffect.push(info);

            var _panelChip = panelJackpotComp.getPanelChipByIndex(player.index);

            this._winJackPotPopup.getComponent('gfJackpotWinPopup').setCallbackHide(function () {
              var indexEff = _this2._arrInfoEffect.indexOf(info);

              if (indexEff != -1) {
                _this2._arrInfoEffect.splice(indexEff, 1);
              }

              _panelChip.getComponent(PanelChip1988).hide();
            });

            var pos = getPostionInOtherNode(this.node.parent, _panelChip.getComponent(PanelChip1988).frameTextWin.node);

            this._winJackPotPopup.setScale(0.25, 0.25, 1);

            var dir = 1;

            if (player.index == 2 || player.index == 3) {
              dir = -1;
            }

            this._winJackPotPopup.position = v3(pos.x, pos.y + 75 * dir);
            this._winJackPotPopup.getComponent('gfJackpotWinPopup').node.getChildByName("black").active = false;
          }

          this.endData = undefined;
        };

        _proto.dropChip = function dropChip(data) {
          var _this3 = this;

          gfEventEmitter.instance.emit(EventCode.SOUND.CHIP_DROP);
          var DeskStation = data.DeskStation,
              GoldReward = data.GoldReward,
              itemChipID = data.itemChipID;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);
          var panelJackpotLayer = ReferenceManager1988.instance.getPanelJackpotLayer();
          var panelJackpotComp = panelJackpotLayer.getComponent("PanelJackpotController1988");
          var panelChip = panelJackpotComp.getPanelChipByIndex(player.index);
          var trayChip = panelChip.getComponent(PanelChip1988).trayChip;
          var chip = instantiate(this.chip);
          chip.parent = this.node;
          chip.position = this.node.getComponent(UITransform).convertToNodeSpaceAR(data.position);
          var posEndWorldSpace = trayChip.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 0));
          var endPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(posEndWorldSpace);
          var info = {
            effect: chip,
            deskStation: DeskStation
          };

          this._arrInfoEffect.push(info);

          chip.getComponent(Chip1988).onChipFlyToPlayer(endPos, 0, player.isMe, function () {
            gfEventEmitter.instance.emit(EventCode.GAME_LAYER.UPDATE_PANEL_CHIP, {
              DeskStation: DeskStation,
              itemId: itemChipID,
              GoldReward: GoldReward,
              callback: null
            });

            var indexEff = _this3._arrInfoEffect.indexOf(info);

            if (indexEff != -1) {
              _this3._arrInfoEffect.splice(indexEff, 1);
            }
          });
        };

        _proto.effectBorisFlyWarning = function effectBorisFlyWarning() {
          var _this4 = this;

          this._borisStatic = instantiate(this.borisStaticPrefab);
          this._isTurnOffStatic = false;
          this.node.addChild(this._borisStatic);
          this._borisStatic.position = v3(-960, -540);
          this._borisStatic.angle = -20;
          gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_OUT);
          tween(this._borisStatic).to(0.5, {
            position: v3(960, 540, 0)
          }).delay(3).call(function () {
            _this4._borisStatic.position = v3(960, -540);
            _this4._borisStatic.angle = 20;
            gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_OUT);
            gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_THE_ANIMALS);
          }).to(.5, {
            position: v3(-960, 540)
          }).call(function () {
            _this4._isTurnOffStatic = true;
          }).removeSelf().call(function () {
            _this4._borisStatic.destroy();
          }).start();
        };

        _proto.createBorisStatic = function createBorisStatic(_ref) {
          var _this5 = this;

          var position = _ref.position,
              angle = _ref.angle; // @ts-ignore

          var borisStatic = PoolManager1988.instance.createBorisStatic({
            position: position,
            parent: this.node,
            zIndex: 1,
            angle: angle
          });

          this._arrBorisStatic.push(borisStatic);

          var callback = function callback() {
            var index = _this5._arrBorisStatic.indexOf(borisStatic);

            _this5._arrBorisStatic.splice(index, 1);
          };

          borisStatic.play(callback);
        };

        _proto.onDragonEnd = function onDragonEnd(data) {
          if (data.wonJackpot) {
            this.endData = data;
            var player = ReferenceManager1988.instance.getPlayerByDeskStation(data.DeskStation);

            if (player.isMe) {
              player.addGoldReward(data.WinAmount);
            }
          }
        };

        _proto.createEffectLightning = function createEffectLightning() {
          if (!this.endData) {
            return;
          }

          var panelJackpotLayer = ReferenceManager1988.instance.getPanelJackpotLayer();
          var panelJackpotComp = panelJackpotLayer.getComponent("PanelJackpotController1988");
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(this.endData.DeskStation);

          if (player.isActive()) {
            var panelChip = panelJackpotComp.getPanelChipByIndex(player.index);
            this.setupEffectLighting(panelChip.getComponent(PanelChip1988).trayChip, this.node);
          }
        };

        _proto.setupEffectLighting = function setupEffectLighting(nodeStart, parent) {
          var _this6 = this; // @ts-ignore


          var bossBoris = FishManager1988.instance.getBossBoris();
          var startPos = getPostionInOtherNode(parent, nodeStart);
          var endPos = bossBoris.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 0));
          var effectLighting = instantiate(this.effectLighting);
          effectLighting.parent = parent;
          effectLighting.position = startPos;

          this._arrInfoEffect.push(effectLighting);

          gfEventEmitter.instance.emit(EventCode.SOUND.LAST_DAMAGE);

          var callbackRemoveEffect = function callbackRemoveEffect() {
            gfEventEmitter.instance.emit(EventCode.FISH_LAYER.CATCH_BORIS);

            var indexEff = _this6._arrInfoEffect.indexOf(effectLighting);

            if (indexEff != -1) {
              _this6._arrInfoEffect.splice(indexEff, 1);
            }
          };

          effectLighting.getComponent(EffectLightning1988).playEffectLightning(endPos, callbackRemoveEffect);
        };

        _proto.update = function update(dt) {
          if (!this._isTurnOffStatic && this._currTimeDelayStatic >= DELAY_TIME_STATIC) {
            this.createBorisStatic({
              position: this._borisStatic.position,
              angle: this._borisStatic.angle
            });
            this._currTimeDelayStatic = 0;
          } else {
            this._currTimeDelayStatic += dt;
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(_ref2) {
          var DeskStation = _ref2.DeskStation;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

          if (player.isMe) {
            this.resetOnExit();
            return;
          } else {
            if (this._arrInfoEffect && this._arrInfoEffect.length > 0) {
              for (var index = 0; index < this._arrInfoEffect.length; ++index) {
                var info = this._arrInfoEffect[index];

                if (info.deskStation && info.deskStation == DeskStation && isValid(info.effect)) {
                  info.effect.removeFromParent();
                  info.effect.destroy();

                  this._arrInfoEffect.splice(index, 1);
                }
              }
            }

            if (!this.endData) {
              return;
            }

            var isHaveEndDataWinJackpot = this.endData && this.endData.DeskStation == DeskStation;

            if (isHaveEndDataWinJackpot) {
              this.endData.DeskStation = -1;
            }

            if (this.endData.DeskStation === DeskStation) {
              this.endData = undefined;
            }
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          this._isTurnOffStatic = true;
          this._currTimeDelayStatic = 0;

          if (this._borisStatic) {
            stopAllActions(this._borisStatic);

            this._borisStatic.removeFromParent();

            this._borisStatic.destroy();
          }

          this._borisStatic = null;

          if (this._arrInfoEffect && this._arrInfoEffect.length > 0) {
            this._arrInfoEffect.forEach(function (info) {
              var isHaveMoreInfo = info.effect && info.deskStation != undefined && info.deskStation != null;

              if (isHaveMoreInfo && isValid(info.effect)) {
                if (info.effect.getComponent(Chip1988)) {
                  info.effect.getComponent(Chip1988).onStopAllActions();
                }

                info.effect.removeFromParent();
                info.effect.destroy();
              } else if (isValid(info)) {
                info.removeFromParent();
                info.destroy();
              }
            });
          }

          if (this._arrBorisStatic.length > 0) {
            this._arrBorisStatic.forEach(function (borisStatic) {
              borisStatic.returnPool();
            });

            this._arrBorisStatic = [];
          }

          this.endData = undefined;
          this._arrInfoEffect.length = 0;

          if (isValid(this._winJackPotPopup)) {
            this._winJackPotPopup.removeFromParent();

            this._winJackPotPopup.destroy();
          }
        };

        _proto.onDestroy = function onDestroy() {
          stopAllActions(this.node);
          removeEvents(this);
        };

        return EffectBossBoris1988;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "chip", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jackpotWinPopup", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "borisStaticPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "effectLighting", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ScrollViewOptimise.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, rect, Component, setOpacity;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      rect = module.rect;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "6547cfR5o5FmrQN3VeIh2x3", "ScrollViewOptimise", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ScrollViewOptimise = exports('ScrollViewOptimise', (_dec = ccclass('ScrollViewOptimise'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ScrollViewOptimise, _Component);

        function ScrollViewOptimise() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "view", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "content", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = ScrollViewOptimise.prototype;

        _proto.update = function update(dt) {
          var viewUI = this.view.getComponent(UITransform);
          var contentPos = this.content.getPosition();
          var viewRect = rect(-contentPos.x - viewUI.width * viewUI.anchorX, -contentPos.y - viewUI.height * viewUI.anchorY, viewUI.width, viewUI.height);

          for (var i = 0; i < this.content.children.length; i++) {
            var node = this.content.children[i];

            if (viewRect.intersects(node.getComponent(UITransform).getBoundingBox())) {
              setOpacity(node, 255);
            } else {
              setOpacity(node, 0);
            }
          }
        };

        return ScrollViewOptimise;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "view", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfReferenceManager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, isEmpty;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      isEmpty = module.isEmpty;
    }],
    execute: function () {
      cclegacy._RF.push({}, "657249IrpRJl7jQccHifnQ9", "gfReferenceManager", undefined);

      var gfReferenceManager = exports('default', /*#__PURE__*/function () {
        function gfReferenceManager() {
          _defineProperty(this, "CurrentScene", void 0);

          _defineProperty(this, "FishLayer", void 0);

          _defineProperty(this, "PlayerLayer", void 0);

          _defineProperty(this, "HUDLayer", void 0);

          _defineProperty(this, "EffectLayer", void 0);

          _defineProperty(this, "GameLayer", void 0);

          _defineProperty(this, "BtnFreeze", null);

          gfReferenceManager.instance = this;
          this.CurrentScene = null;
          this.FishLayer = null;
          this.PlayerLayer = null;
          this.HUDLayer = null;
          this.EffectLayer = null;
          this.GameLayer = null;
        }

        var _proto = gfReferenceManager.prototype;

        _proto.setData = function setData(data) {
          var _this = this;

          if (!isEmpty(data)) {
            Object.keys(data).forEach(function (key) {
              _this[key] = data[key];
            });
          }
        };

        _proto.getBtnFreeze = function getBtnFreeze() {
          return this.BtnFreeze;
        };

        _proto.getNodeFishLayer = function getNodeFishLayer() {
          return this.FishLayer;
        };

        _proto.getNodeGameLayer = function getNodeGameLayer() {
          return this.GameLayer;
        };

        _proto.getPrefabFishByKind = function getPrefabFishByKind(fishKind) {
          var fish = this.FishLayer.getPrefabFishByKind(fishKind);
          return fish;
        };

        _proto.getPlayerByIndex = function getPlayerByIndex(index) {
          return this.PlayerLayer.getPlayerByIndex(index);
        };

        _proto.getPlayerByDeskStation = function getPlayerByDeskStation(deskStation) {
          return this.PlayerLayer.getPlayerByDeskStation(deskStation);
        };

        _proto.getEffectLayer = function getEffectLayer() {
          return this.EffectLayer;
        };

        _proto.getPlayerLayer = function getPlayerLayer() {
          return this.PlayerLayer;
        };

        _proto.destroy = function destroy() {
          gfReferenceManager.instance = null;
        };

        return gfReferenceManager;
      }());

      _defineProperty(gfReferenceManager, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/loadConfigAsync.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './appConfig.ts', './appConfig-debug.ts', './XOCypher.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, debug, sys, apiObject, urlConstant, urlConstant$1, xorCipher;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      debug = module.debug;
      sys = module.sys;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      urlConstant = module.urlConstant;
    }, function (module) {
      urlConstant$1 = module.urlConstant;
    }, function (module) {
      xorCipher = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "65982XRfqlJUrHV60UubZQG", "loadConfigAsync", undefined);

      var lodash = _;

      var LoadConfigAsync = /*#__PURE__*/function () {
        function LoadConfigAsync() {
          var _this = this;

          _defineProperty(this, "dataUpdate", void 0);

          _defineProperty(this, "dataUpdateProd", void 0);

          _defineProperty(this, "setUpSentry", function () {
            var _this$dataUpdate = _this.dataUpdate,
                IS_PRODUCTION = _this$dataUpdate.IS_PRODUCTION,
                IS_SHOW_STATS = _this$dataUpdate.IS_SHOW_STATS;

            if (typeof Sentry !== 'undefined') {
              if (IS_PRODUCTION) {
                Sentry.init({
                  dsn: 'https://32ab507534bc4befbd5e1b20e223c93d@sentry.io/1780011'
                });
              } else {
                if (IS_SHOW_STATS) {
                  debug.setDisplayStats(true);
                }

                Sentry.init({
                  dsn: 'https://b034a1c4d32e42af90071e62d2bf3290@sentry.io/2655786'
                });
              }
            }
          });

          this.dataUpdate = lodash.cloneDeep(urlConstant);

          if (this.dataUpdate.REMOTE_CONFIG_URL_FULL && !sys.isBrowser) {
            setTimeout(function () {
              apiObject.get({
                apiUrl: _this.dataUpdate.REMOTE_CONFIG_URL_FULL,
                url: '',
                callback: function callback(data) {
                  _this.dataUpdate = lodash.cloneDeep(data);
                  _this.dataUpdate = _this.decryptData(_this.dataUpdate);
                  _this.dataUpdateProd = lodash.cloneDeep(_this.dataUpdate);
                  sys.localStorage.setItem('appConfigLocalStore', JSON.stringify(_this.dataUpdateProd));
                  _this.dataUpdate.IS_FINISHED_REMOTE = true;
                },
                callbackErr: function callbackErr() {
                  var appConfigLocal = sys.localStorage.getItem('appConfigLocalStore');

                  if (appConfigLocal) {
                    appConfigLocal = JSON.parse(appConfigLocal);
                    _this.dataUpdate = lodash.cloneDeep(appConfigLocal);
                  } else {
                    _this.dataUpdate = lodash.cloneDeep(urlConstant);
                  }

                  _this.dataUpdate = _this.decryptData(_this.dataUpdate);
                  _this.dataUpdateProd = lodash.cloneDeep(_this.dataUpdate);
                  _this.dataUpdate.IS_FINISHED_REMOTE = true;
                }
              });
            }, 100);
          } else if (this.dataUpdate.REMOTE_CONFIG_URL && sys.isBrowser) {
            setTimeout(function () {
              var domainNameMitek = typeof mitekGlobalDomain !== 'undefined' ? mitekGlobalDomain : window.location.origin;
              apiObject.get({
                apiUrl: domainNameMitek + _this.dataUpdate.REMOTE_CONFIG_URL,
                params: {
                  t: new Date().getTime()
                },
                url: '',
                callback: function callback(data) {
                  _this.dataUpdate = lodash.cloneDeep(data);
                  _this.dataUpdate = _this.decryptData(_this.dataUpdate);
                  _this.dataUpdateProd = lodash.cloneDeep(_this.dataUpdate);
                  sys.localStorage.setItem('appConfigLocalStore', JSON.stringify(_this.dataUpdateProd));
                  _this.dataUpdate.IS_FINISHED_REMOTE = true;
                },
                callbackErr: function callbackErr() {
                  var appConfigLocal = sys.localStorage.getItem('appConfigLocalStore');

                  if (appConfigLocal) {
                    appConfigLocal = JSON.parse(appConfigLocal);
                    _this.dataUpdate = lodash.cloneDeep(appConfigLocal);
                  } else {
                    _this.dataUpdate = lodash.cloneDeep(urlConstant);
                  }

                  _this.dataUpdate = _this.decryptData(_this.dataUpdate);
                  _this.dataUpdateProd = lodash.cloneDeep(_this.dataUpdate);
                  _this.dataUpdate.IS_FINISHED_REMOTE = true;
                }
              });
            }, 100);
          } else {
            if (sys.localStorage.getItem("enviroment") != null) {
              try {
                if (sys.localStorage.getItem("enviroment").indexOf("test") >= 0) {
                  // check appConfigDebug
                  if (urlConstant$1) {
                    this.dataUpdate = lodash.cloneDeep(urlConstant$1);
                    this.dataUpdate = this.decryptData(this.dataUpdate);
                  } else {
                    this.dataUpdate = lodash.cloneDeep(urlConstant);
                    this.dataUpdate = this.decryptData(this.dataUpdate);
                  }
                } else {
                  this.dataUpdate = lodash.cloneDeep(urlConstant);
                  this.dataUpdate = this.decryptData(this.dataUpdate);
                }
              } catch (e) {
                this.dataUpdate = lodash.cloneDeep(urlConstant);
                this.dataUpdate = this.decryptData(this.dataUpdate);
              }
            } else {
              this.dataUpdate = lodash.cloneDeep(urlConstant);
              this.dataUpdate = this.decryptData(this.dataUpdate);
            }

            this.dataUpdate.IS_FINISHED_REMOTE = true;
          }
        }

        var _proto = LoadConfigAsync.prototype;

        _proto.decryptData = function decryptData(data) {
          if (data.IS_DECODE) {
            Object.keys(data).forEach(function (key) {
              if (key === 'API_URL' || key === 'SOCKET_URL' || key.indexOf('IPMaster') > -1) {
                data[key] = xorCipher.decode('Không Biết Đặt Tên Gì', data[key]);
              }
            });
          }

          delete data.IS_DECODE;
          return data;
        };

        _proto.getConfig = function getConfig() {
          return this.dataUpdate;
        };

        _proto.replaceConfig = function replaceConfig(config) {
          this.dataUpdate = config;
        };

        _proto.switchEnv = function switchEnv(isProd) {
          if (isProd) {
            if (this.dataUpdateProd) {
              this.dataUpdate = lodash.cloneDeep(this.dataUpdateProd);
            } else {
              this.dataUpdate = lodash.cloneDeep(urlConstant);
            }

            this.dataUpdate = this.decryptData(this.dataUpdate);
            this.dataUpdate.IS_FINISHED_REMOTE = true;
          } else {
            this.dataUpdate = lodash.cloneDeep(urlConstant$1);
            this.dataUpdate = this.decryptData(this.dataUpdate);
            this.dataUpdate.IS_FINISHED_REMOTE = true;
          }
        };

        return LoadConfigAsync;
      }();

      var loadConfigAsync = exports('default', new LoadConfigAsync());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfstEV2.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "65e3bCqnVpJ9InktQTkkZKo", "gfstEV2", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfstEV2 = exports('GfstEV2', (_dec = ccclass('GfstEV2'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfstEV2, _Component);

        function GfstEV2() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfstEV2.prototype;

        _proto.start = function start() {
          var spine = this.node.getComponent(sp.Skeleton);
          spine.setAnimation(0, 'start', false);
          spine.addAnimation(0, 'shoot', true);
        };

        return GfstEV2;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfstGroundLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "669b4PXvbdNB7pHnMfLWE20", "gfstGroundLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfstGroundLayer = exports('GfstGroundLayer', (_dec = ccclass('GfstGroundLayer'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfstGroundLayer, _Component);

        function GfstGroundLayer() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfstGroundLayer.prototype;

        _proto.update = function update(dt) {
          var speed = -50;
          var pos = this.node.getPosition();
          this.node.setPosition(pos.x, pos.y + speed * dt, 0);
        };

        return GfstGroundLayer;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PanelComponent1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, warn, Component, stopAllActions;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      warn = module.warn;
      Component = module.Component;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "6797dxc8glATrkh24PytmFL", "PanelComponent1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PanelComponent1988 = exports('PanelComponent1988', (_dec = ccclass('PanelComponent1988'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PanelComponent1988, _Component);

        function PanelComponent1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrTextJackpot", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "arrEffectDecryption", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PanelComponent1988.prototype;

        _proto.show = function show() {
          if (this.node.active) return;
          this.node.active = true;
        };

        _proto.hide = function hide() {
          this.reset();
          if (!this.node.active) return;
          this.node.active = false;
        };

        _proto.getDecryptionByID = function getDecryptionByID(itemID) {
          return this.arrEffectDecryption[itemID - 1];
        };

        _proto.getNodeTextJackPotByID = function getNodeTextJackPotByID(itemID) {
          var node = this.arrTextJackpot[itemID - 1];

          if (!node) {
            warn("getNodeTextJackPotByID: =>> can not find node Text by ID: " + itemID);
            return null;
          }

          return node;
        };

        _proto.resumeData = function resumeData(data) {};

        _proto.resetAllNodeTextJP = function resetAllNodeTextJP() {};

        _proto.resetArrayDecryption = function resetArrayDecryption() {
          this.arrEffectDecryption.forEach(function (node) {
            node && (node.active = false);
          });
        };

        _proto.reset = function reset() {
          stopAllActions(this.node);
          this.unscheduleAllCallbacks();
          this.resetAllNodeTextJP();
          this.resetArrayDecryption();
        };

        return PanelComponent1988;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrTextJackpot", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "arrEffectDecryption", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishLayer1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './ReferenceManager1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, Component, convertAssetArrayToObject, ReferenceManager1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "67c92ITJV9BG6XvWYSWb8c3", "FishLayer1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FishLayer1985 = exports('FishLayer1985', (_dec = ccclass('FishLayer1985'), _dec2 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FishLayer1985, _Component);

        function FishLayer1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "isGroundLayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listPrefabFish", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "fishObjects", {});

          return _this;
        }

        var _proto = FishLayer1985.prototype;

        _proto.onLoad = function onLoad() {
          if (this.isGroundLayer) {
            ReferenceManager1985.instance.setData({
              GroundLayer: this.node
            });
          } else {
            ReferenceManager1985.instance.setData({
              AirLayer: this.node
            });
          }

          if (this.listPrefabFish) {
            this.fishObjects = convertAssetArrayToObject(this.listPrefabFish);
          }

          this.node['getPrefabFishByKind'] = this.getPrefabFishByKind.bind(this); // PhysicsSystem2D.instance.enable = true;
          // PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.All;
        };

        _proto.getPrefabFishByKind = function getPrefabFishByKind(fishKind) {
          return this.fishObjects[fishKind];
        };

        return FishLayer1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isGroundLayer", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listPrefabFish", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptGlobalHUD.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Node, game, director, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Node = module.Node;
      game = module.game;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "68262ZelsRPYoQpLZPfWPEm", "gfptGlobalHUD", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MODE;

      (function (MODE) {
        MODE[MODE["Path"] = 0] = "Path";
        MODE[MODE["Formation"] = 1] = "Formation";
        MODE[MODE["Preview"] = 2] = "Preview";
      })(MODE || (MODE = {}));

      var GfptGlobalHUD = exports('GfptGlobalHUD', (_dec = ccclass('GfptGlobalHUD'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptGlobalHUD, _Component);

        function GfptGlobalHUD() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnPath", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnFormation", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnPreview", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "ExportControl", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfptGlobalHUD.prototype;

        _proto.start = function start() {
          this.enableButtons(MODE.Path);
          game.addPersistRootNode(this.node);
        };

        _proto.onBtnPathClicked = function onBtnPathClicked() {
          this.enableButtons(MODE.Path);
          director.loadScene("ToolPath");
        };

        _proto.onBtnPreviewClicked = function onBtnPreviewClicked() {
          this.enableButtons(MODE.Preview);
          director.loadScene("PreviewPath");
        };

        _proto.onBtnFormationClicked = function onBtnFormationClicked() {
          this.enableButtons(MODE.Formation);
          director.loadScene("ToolFormation");
        };

        _proto.enableButtons = function enableButtons(mode) {
          if (mode === void 0) {
            mode = MODE.Path;
          }

          this.btnPath.interactable = mode != MODE.Path;
          this.btnFormation.interactable = mode != MODE.Formation;
          this.btnPreview.interactable = mode != MODE.Preview; // this.ExportControl.active = mode != MODE.Preview;
        };

        return GfptGlobalHUD;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnPath", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnFormation", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnPreview", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ExportControl", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/event-manager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './logger.ts', './deduplicate.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, logger, Duplicate;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      Duplicate = module.Duplicate;
    }],
    execute: function () {
      cclegacy._RF.push({}, "684e3kgdFNE5qpGdlimZbFy", "event-manager", undefined);

      var NEW_EVENT_MAPPING = {
        'jgr': 'client-join-game-result',
        'sud': 'state-updated',
        'spu': 'state-pushed',
        'jud': 'jackpot-updated',
        'erp': 'error-pushed',
        'mep': 'message-pushed'
      };
      var EventManager = exports('default', /*#__PURE__*/function () {
        function EventManager() {
          _defineProperty(this, "_emitter", void 0);

          _defineProperty(this, "_duplicateEventId", void 0);

          _defineProperty(this, "_waitForEventTimeOutId", void 0);

          this._emitter = new EventEmitter();
          this._duplicateEventId = new Duplicate(1000);
          this._waitForEventTimeOutId = new HashMap();
        }

        var _proto = EventManager.prototype;

        _proto.registerEvent = function registerEvent(eventName, listener) {
          this._emitter.on(eventName, listener);
        };

        _proto.unregisterEvent = function unregisterEvent(eventName, listener) {
          this._emitter.removeListener(eventName, listener);
        };

        _proto.registerOnce = function registerOnce(eventName, listener) {
          this._emitter.once(eventName, listener);
        };

        _proto.removeAllEventListeners = function removeAllEventListeners() {
          this._emitter.removeAllListeners();
        };

        _proto.waitForEvent = function waitForEvent(timeoutMs, verifyFn, timeoutCallback) {
          var timeoutId = setTimeout(function () {
            logger.debug('EventManager - waitForEvent was timeout. %s', verifyFn);
            timeoutCallback();
          }, timeoutMs);

          this._waitForEventTimeOutId.set(timeoutId, verifyFn);

          return timeoutId;
        };

        _proto.removeWaitingQueue = function removeWaitingQueue() {
          this._waitForEventTimeOutId.keys().forEach(function (timeoutId) {
            clearTimeout(timeoutId);
          });

          this._waitForEventTimeOutId.clear();
        };

        _proto.removeWaiting = function removeWaiting(timeoutId) {
          clearTimeout(timeoutId);

          this._waitForEventTimeOutId["delete"](timeoutId);
        };

        _proto.cleanUp = function cleanUp() {
          logger.debug('EventManager - cleanUp.');

          this._emitter.removeAllListeners(); //concerns remove or not?


          this._duplicateEventId.clearAll(); // clear up remaining waitForEventTimeout


          this.removeWaitingQueue();
        };

        _proto.onConnected = function onConnected() {
          logger.debug('EventManager - connected.');

          this._emitter.emit(EventManager.CONNECTED);
        };

        _proto.onPong = function onPong(data) {
          this._emitter.emit(EventManager.PONG, data);
        };

        _proto.onCannotConnect = function onCannotConnect() {
          logger.debug('EventManager - cannotConnect.');

          this._emitter.emit(EventManager.CAN_NOT_CONNECT);
        };

        _proto.onEvent = function onEvent(eventData) {
          var _this = this;

          logger.debug("EventManager - newEvent: %j", eventData);

          if (eventData && eventData.event) {
            eventData.event = NEW_EVENT_MAPPING[eventData.event] ? NEW_EVENT_MAPPING[eventData.event] : eventData.event;
          }

          var event = eventData.event,
              data = eventData.data,
              eventId = eventData.eventId;

          if (!data) {
            logger.error('EventManager - newEvent: data is null.');
            return; // ignore this event
          }

          if (this._duplicateEventId.exists(eventId)) {
            logger.error('EventManager - newEvent: duplicate eventId %s', eventId);
            return; // ignore duplicate eventId
          }

          this._duplicateEventId.insert(eventId);

          this._waitForEventTimeOutId.keys().forEach(function (timeoutId) {
            var verifyFn = _this._waitForEventTimeOutId.get(timeoutId);

            if (verifyFn(eventData)) {
              clearTimeout(timeoutId);

              _this._waitForEventTimeOutId["delete"](timeoutId);
            }
          }); //Add for testing. TODO remove.


          if (event == 'error-pushed') {
            logger.warn('error-pushed %j', eventData);
          }

          this._emitter.emit(event, eventData);
        };

        return EventManager;
      }());

      _defineProperty(EventManager, "CONNECTED", 'connected');

      _defineProperty(EventManager, "PONG", 'pong');

      _defineProperty(EventManager, "CAN_NOT_CONNECT", 'can-not-connect');

      _defineProperty(EventManager, "EXPECTED_EVENT_TIMEOUT", 'expected-event-timeout');

      _defineProperty(EventManager, "MISMATCH_COMMAND_ID", 'mismatch-command');

      _defineProperty(EventManager, "MISMATCH_DATA_VERSION", 'mismatch-version');

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/hashKey.ts", ['cc', './crypto-core.ts'], function (exports) {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6917c03Q9dI0ZrQj5E+tge7", "hashKey", undefined);

      var hash = exports('default', function hash(cipherMethodKey, message) {
        if (cipherMethodKey === void 0) {
          cipherMethodKey = '';
        }

        if (message === void 0) {
          message = '';
        }

        if (!cipherMethodKey) {
          return '';
        }

        var upperCaseCipherMethodKey = cipherMethodKey.trim().toUpperCase();

        if (upperCaseCipherMethodKey.length < 3) {
          return '';
        }

        return CryptoJS[upperCaseCipherMethodKey](message).toString();
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotifyJackpot1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfUtilities.ts', './gfLocalize.ts', './Config1988.ts', './gfNotifyJackpot.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, tween, Layout, setOpacity, stopAllActions, fadeIn, fadeOut, formatString, formatUserName, gfLocalize, Config1988, GfNotifyJackpot;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Layout = module.Layout;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
    }, function (module) {
      formatString = module.formatString;
      formatUserName = module.formatUserName;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      GfNotifyJackpot = module.GfNotifyJackpot;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "6b060IJKHhBUYgzUeOe1ffJ", "NotifyJackpot1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NotifyJackpot1988 = exports('NotifyJackpot1988', (_dec = ccclass('NotifyJackpot1988'), _dec(_class = (_temp = /*#__PURE__*/function (_GfNotifyJackpot) {
        _inheritsLoose(NotifyJackpot1988, _GfNotifyJackpot);

        function NotifyJackpot1988() {
          var _this;

          _this = _GfNotifyJackpot.call(this) || this;

          _defineProperty(_assertThisInitialized(_this), "_animHide", void 0);

          _this._animAppear = 'animation1';
          _this._animIdle = 'animation2';
          _this._animHide = 'animation3';
          return _this;
        }

        var _proto = NotifyJackpot1988.prototype;

        _proto.setMixAll = function setMixAll() {
          var arrAnimation = Object.keys(this.mainAnim.skeletonData._skeletonJson.animations);

          for (var i = 0; i < arrAnimation.length; ++i) {
            for (var j = i + 1; j < arrAnimation.length; j++) {
              if (this.mainAnim.findAnimation(arrAnimation[i]) && this.mainAnim.findAnimation(arrAnimation[j])) {
                this.mainAnim.setMix(arrAnimation[i], arrAnimation[j], 0.25);
              }
            }
          }
        };

        _proto.play = function play(dataInput) {
          var _this2 = this;

          var data = dataInput.data,
              type = dataInput.type;
          this.node.active = true;
          stopAllActions(this.node);
          setOpacity(this.node, 255);
          stopAllActions(this.contentNode);
          this.setupSpineAnim(type);
          this.setMixAll();
          setOpacity(this.contentNode, 0);
          var _GameConfig$instance = Config1988.instance,
              NOTIFY_CONFIG = _GameConfig$instance.NOTIFY_CONFIG,
              NOTIFY_TYPE = _GameConfig$instance.NOTIFY_TYPE;
          this.mainAnim.setAnimation(0, this._animAppear, false);
          this.mainAnim.setCompleteListener(function () {
            _this2.mainAnim.setCompleteListener(function () {});

            var tweenShowRichText = tween(_this2.contentNode).then(fadeIn(0.25));
            var tweenHideRichText = tween(_this2.contentNode).then(fadeOut(0.25));
            tween(_this2.node).delay(0.5).call(function () {
              var str = globalThis._.cloneDeep(gfLocalize.instance.txtJPNotify);

              var jackpotConfig = NOTIFY_CONFIG[NOTIFY_TYPE.JACKPOT];
              str = formatString(str, [formatUserName(data[jackpotConfig.userName]), data[jackpotConfig.goldReward]]);
              str = str.replace(/'/g, '"');
              var objMessage = JSON.parse(str);

              _this2.createNotifyMessage(objMessage);

              _this2.contentNode.getComponent(Layout).updateLayout();

              tweenShowRichText.start();
            }).delay(3.35).call(function () {
              tweenHideRichText.start();
            }).delay(0.5).call(function () {
              _this2.mainAnim.setAnimation(0, _this2._animHide, false);

              _this2.mainAnim.setCompleteListener(function () {
                _this2.mainAnim.clearTrack(0);

                _this2.onStackMessage();
              });
            }).start();
          });
          this.mainAnim.addAnimation(0, this._animIdle, true);
        };

        return NotifyJackpot1988;
      }(GfNotifyJackpot), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameQuest.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './LobbyScene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Sprite, Node, Label, Component, formatMoney, LobbyScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      LobbyScene = module.LobbyScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "6c9a3NtH3hPhpKRbfg0K99V", "GameQuest", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameQuest = exports('GameQuest', (_dec = ccclass('GameQuest'), _dec2 = property({
        type: Sprite
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Label
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameQuest, _Component);

        function GameQuest() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "gameId", null);

          _defineProperty(_assertThisInitialized(_this), "finished", false);

          _defineProperty(_assertThisInitialized(_this), "eventId", '');

          _initializerDefineProperty(_assertThisInitialized(_this), "iconGame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "iconDone", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "reward", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GameQuest.prototype;

        _proto.init = function init(data, eventId) {
          this.eventId = eventId;
          this.gameId = data.serviceIds[0];
          this.iconGame.spriteFrame = LobbyScene.iconList.getSpriteFrame(this.gameId);
          this.finished = data.isComplete;
          this.iconDone.active = this.finished;
          this.reward.string = formatMoney(data.rewardAmount);
          console.log("Reward String " + this.reward.string);
        };

        return GameQuest;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconGame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconDone", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "reward", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OptionController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './Config1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Vec3, Sprite, BlockInputEvents, v3, UIOpacity, Tween, tween, UITransform, Component, v3f, fadeIn, fadeTo, fadeOut, Config1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      BlockInputEvents = module.BlockInputEvents;
      v3 = module.v3;
      UIOpacity = module.UIOpacity;
      Tween = module.Tween;
      tween = module.tween;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      v3f = module.v3f;
      fadeIn = module.fadeIn;
      fadeTo = module.fadeTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      Config1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp, _dec4, _dec5, _dec6, _dec7, _dec8, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp2;

      cclegacy._RF.push({}, "6cee13l9T5CmJ9ckOHzI41h", "OptionController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var itemData = (_dec = ccclass('itemData'), _dec2 = property(Node), _dec3 = property(Vec3), _dec(_class = (_class2 = (_temp = function itemData() {
        _initializerDefineProperty(this, "nodeItem", _descriptor, this);

        _initializerDefineProperty(this, "showPos", _descriptor2, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showPos", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      })), _class2)) || _class);
      var DURATION_SHOW = 0.25;
      var DURATION_HIDE = 0.25;
      var OptionController1985 = exports('OptionController1985', (_dec4 = ccclass('OptionController1985'), _dec5 = property(itemData), _dec6 = property(Sprite), _dec7 = property(Node), _dec8 = property(BlockInputEvents), _dec4(_class4 = (_class5 = (_temp2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(OptionController1985, _Component);

        function OptionController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrNodeButton", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "background", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "backgroundLayout", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "blockInput", _descriptor6, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isShow", false);

          _defineProperty(_assertThisInitialized(_this), "_isMoving", false);

          return _this;
        }

        var _proto = OptionController1985.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMoved, this);
          this.node.on(Node.EventType.TOUCH_END, this.onTouchEnded, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
          this.arrNodeButton.forEach(function (item) {
            item.nodeItem.getComponent(UIOpacity).opacity = 0;
            item.nodeItem.setPosition(v3(0, 0, 0));
            item.nodeItem.active = false;
          });
          this.backgroundLayout.setScale(v3f(0));
          this.backgroundLayout.getComponent(UIOpacity).opacity = 0;
          this._isShow = false;
          this.fixPosHide();
          this.blockInput.onDisable();
        };

        _proto.onTouchMoved = function onTouchMoved(event) {
          var pos = event.getUILocation();

          var _this$node$getPositio = this.node.getPosition(),
              x = _this$node$getPositio.x,
              y = _this$node$getPositio.y,
              z = _this$node$getPositio.z;

          var AppSize = Config1985.instance.AppSize;
          this.node.setPosition(pos.x - AppSize.MaxWidth / 2, pos.y - AppSize.MaxHeight / 2, z);
          this._isMoving = true;
        };

        _proto.onTouchEnded = function onTouchEnded() {
          if (this._isMoving) {
            this._isMoving = false;

            if (this._isShow) {
              this.fixPosShow();
            } else {
              this.fixPosHide();
            }

            return;
          }

          this.onClick();
        };

        _proto.onTouchCancel = function onTouchCancel() {
          this._isMoving = false;

          if (this._isShow) {
            this.fixPosShow();
          } else {
            this.fixPosHide();
          }
        };

        _proto.onClick = function onClick() {
          this._isShow = !this._isShow;

          if (this._isShow) {
            this.playAnimShow();
          } else {
            this.playAnimHide();
          }
        };

        _proto.playAnimShow = function playAnimShow() {
          this.background.grayscale = false;
          var duration = DURATION_SHOW;
          this.blockInput.onEnable();
          this.arrNodeButton.forEach(function (item) {
            item.nodeItem.active = true;
            Tween.stopAllByTarget(item.nodeItem);
            tween(item.nodeItem).parallel(tween().to(duration, {
              position: item.showPos
            }), fadeIn(duration)).start();
          });
          Tween.stopAllByTarget(this.backgroundLayout);
          tween(this.backgroundLayout).parallel(tween().to(duration, {
            scale: v3f(1)
          }), fadeTo(duration, 100)).start();
          this.fixPosShow();
        };

        _proto.playAnimHide = function playAnimHide() {
          this.background.grayscale = true;
          var duration = DURATION_HIDE;
          this.blockInput.onDisable();
          this.arrNodeButton.forEach(function (item) {
            Tween.stopAllByTarget(item.nodeItem);
            tween(item.nodeItem).parallel(tween().to(duration, {
              position: v3(0, 0, 0)
            }), fadeOut(duration)).call(function () {
              item.nodeItem.active = false;
            }).start();
          });
          Tween.stopAllByTarget(this.backgroundLayout);
          tween(this.backgroundLayout).parallel(tween().to(duration, {
            scale: v3f(0)
          }), fadeOut(duration)).start();
          this.fixPosHide();
        };

        _proto.fixPosShow = function fixPosShow() {
          var _this$node$getPositio2 = this.node.getPosition(),
              x = _this$node$getPositio2.x,
              y = _this$node$getPositio2.y,
              z = _this$node$getPositio2.z;

          var AppSize = Config1985.instance.AppSize;
          var widthLayout = this.backgroundLayout.getComponent(UITransform).width;
          var heightLayout = this.backgroundLayout.getComponent(UITransform).height;
          var minPosX = -AppSize.MaxWidth / 2 + widthLayout / 2,
              maxPosX = AppSize.MaxWidth / 2 - widthLayout / 2;
          var minPosY = -AppSize.MaxHeight / 2 + heightLayout / 2,
              maxPosY = AppSize.MaxHeight / 2 - heightLayout / 2;
          var newPosX = x,
              newPosY = y;

          if (x < minPosX) {
            newPosX = minPosX;
          } else if (x > maxPosX) {
            newPosX = maxPosX;
          }

          if (y < minPosY) {
            newPosY = minPosY;
          } else if (y > maxPosY) {
            newPosY = maxPosY;
          }

          Tween.stopAllByTarget(this.node);
          tween(this.node).to(DURATION_SHOW, {
            position: v3(newPosX, newPosY, z)
          }).start();
        };

        _proto.fixPosHide = function fixPosHide() {
          var _this$node$getPositio3 = this.node.getPosition(),
              x = _this$node$getPositio3.x,
              y = _this$node$getPositio3.y,
              z = _this$node$getPositio3.z;

          var AppSize = Config1985.instance.AppSize;
          var width = this.node.getComponent(UITransform).width;
          var minPosX = -AppSize.MaxWidth / 2 + width / 2,
              maxPosX = AppSize.MaxWidth / 2 - width / 2;
          var newPosX = x;

          if (x > 0) {
            newPosX = maxPosX;
          } else {
            newPosX = minPosX;
          }

          Tween.stopAllByTarget(this.node);
          tween(this.node).to(DURATION_HIDE, {
            position: v3(newPosX, y, z)
          }).start();
        };

        return OptionController1985;
      }(Component), _temp2), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "arrNodeButton", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "background", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "backgroundLayout", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "blockInput", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotInfo.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './animateNumberLabel.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Node, Tween, tween, Component, AnimateNumberLabel, gfBaseEvents, fadeOut, fadeIn, gfEventEmitter, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Node = module.Node;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      AnimateNumberLabel = module.AnimateNumberLabel;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "6d1d2Z7MzRN4pmdE/lytPTx", "gfJackpotInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfJackpotInfo = exports('GfJackpotInfo', (_dec = ccclass('GfJackpotInfo'), _dec2 = property(sp.Skeleton), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfJackpotInfo, _Component);

        function GfJackpotInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "jackpotAnim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtValue", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfJackpotInfo.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.onShowJackpotInfo({
            isShow: false,
            amount: 0
          });
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.UPDATE_JACKPOT, this.onUpdateRoomJackpot, this);
          registerEvent(gfBaseEvents.GAME_LAYER.SHOW_JACKPOT_INFO, this.onShowJackpotInfo, this);
          registerEvent(gfBaseEvents.DRAGON.WARNING, this.onDragonWarning, this);
        };

        _proto.onShowJackpotInfo = function onShowJackpotInfo(_ref) {
          var isShow = _ref.isShow,
              amount = _ref.amount;
          this.node.active = isShow;

          if (isShow && amount) {
            if (this.txtValue.getComponent(AnimateNumberLabel).currentValue === undefined) {
              this.txtValue.getComponent(AnimateNumberLabel).currentValue = amount;
            }

            this.onUpdateRoomJackpot(amount);
          }
        };

        _proto.onDragonWarning = function onDragonWarning() {
          var _this2 = this;

          Tween.stopAllByTarget(this.txtValue);
          tween(this.txtValue).then(fadeOut(0.25)).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_APPEAR);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10
            });

            _this2.jackpotAnim.setAnimation(0, "animation", false);

            _this2.jackpotAnim.setCompleteListener(function () {
              tween(_this2.txtValue).then(fadeIn(0.25)).start();
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.RESET_VOLUME);

              _this2.jackpotAnim.setAnimation(0, "idel", true);

              _this2.jackpotAnim.setCompleteListener(function () {});
            });
          }).start();
        };

        _proto.onJPHistoryClick = function onJPHistoryClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onUpdateRoomJackpot = function onUpdateRoomJackpot(amount, time) {
          if (time === void 0) {
            time = 3000;
          }

          if (amount && this.node.active) {
            var newJP = parseInt(amount);
            this.txtValue.getComponent(AnimateNumberLabel).onUpdateValue(newJP, time);
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          if (this.node.active) {
            Tween.stopAllByTarget(this.txtValue);
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfJackpotInfo;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jackpotAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtValue", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SideMenu1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './gfSideMenu.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, sys, UITransform, Sprite, Button, Vec3, systemEvent, SystemEvent, KeyCode, v3, gfBaseEvents, gfEventEmitter, EventsCode1985, GfSideMenu;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      UITransform = module.UITransform;
      Sprite = module.Sprite;
      Button = module.Button;
      Vec3 = module.Vec3;
      systemEvent = module.systemEvent;
      SystemEvent = module.SystemEvent;
      KeyCode = module.KeyCode;
      v3 = module.v3;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      GfSideMenu = module.GfSideMenu;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "6d339MmZyhMhK5jg/za5mkk", "SideMenu1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SideMenu1985 = exports('SideMenu1985', (_dec = ccclass('SideMenu1985'), _dec2 = property({
        type: Node,
        override: true,
        visible: false
      }), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfSideMenu) {
        _inheritsLoose(SideMenu1985, _GfSideMenu);

        function SideMenu1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfSideMenu.call.apply(_GfSideMenu, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeMove", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "mainNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "highLightBox", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "highLight", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "listButton", []);

          _defineProperty(_assertThisInitialized(_this), "scaleY", 1);

          _defineProperty(_assertThisInitialized(_this), "state", false);

          _defineProperty(_assertThisInitialized(_this), "indexFocus", -1);

          _defineProperty(_assertThisInitialized(_this), "isHolding", false);

          return _this;
        }

        var _proto = SideMenu1985.prototype;

        _proto.onLoad = function onLoad() {
          _GfSideMenu.prototype.onLoad.call(this);

          this.listButton = this.mainNode.children.filter(function (node) {
            return node.active;
          });
          this.setUpHighLightBox();
          this.resetHightLight();

          if (!sys.isNative && !sys.isMobile) {
            this.initEventsButton();
          }

          this.mainNode.active = false;
        };

        _proto.setUpHighLightBox = function setUpHighLightBox() {
          var _this$mainNode$getCom = this.mainNode.getComponent(UITransform),
              width = _this$mainNode$getCom.width,
              height = _this$mainNode$getCom.height;

          this.highLightBox.getComponent(UITransform).setContentSize(width, height);
        };

        _proto.setStateTransitionButton = function setStateTransitionButton(node, sprite) {
          node.getChildByName("Sprite").getComponent(Sprite).spriteFrame = sprite;
        };

        _proto.setIndexFocus = function setIndexFocus(button) {
          var _this2 = this;

          this.listButton.forEach(function (child, index) {
            if (child.position.y == button.position.y) {
              return _this2.indexFocus = index;
            }
          });
        };

        _proto.initEventsButton = function initEventsButton() {
          var _this3 = this;

          this.listButton.forEach(function (child) {
            child.on("mouse-down", _this3.mouseDown, _this3);
            child.on("mouse-move", _this3.mouseEnter, _this3);
            child.on("mouse-enter", _this3.mouseEnter, _this3);
            child.on("mouse-leave", _this3.mouseLeave, _this3);
          });
        };

        _proto.mouseEnter = function mouseEnter(e) {
          var button = e.target;
          this.setIndexFocus(button);
          this.updateHighLight();

          if (this.isHolding) {
            this.setStateTransitionButton(button, button.getComponent(Button).pressedSprite);
          }
        };

        _proto.mouseDown = function mouseDown(e) {
          this.isHolding = true;
          var button = e.target;
          this.setStateTransitionButton(button, button.getComponent(Button).pressedSprite);
        };

        _proto.mouseLeave = function mouseLeave(e) {
          this.isHolding = false;
          this.resetHightLight();
          this.resetStateTransitionButton();
        };

        _proto.hideSideBar = function hideSideBar() {
          this.state = !this.state;
          this.scaleY = -this.scaleY;
          this.resetStateTransitionButton();
          this.mainNode.active = this.state;
          this.iconHide.scale = new Vec3(1, this.scaleY, 1);
          this.resetHightLight();
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);

          if (this.state) {
            systemEvent.on(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
          } else {
            systemEvent.off(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
          }
        };

        _proto.onKeyDown = function onKeyDown(event) {
          switch (event.keyCode) {
            case KeyCode.ARROW_UP:
              this.indexFocus = this.indexFocus == -1 ? this.listButton.length - 1 : Math.max(0, this.indexFocus - 1);
              this.updateHighLight();
              break;

            case KeyCode.ARROW_DOWN:
              this.indexFocus = Math.min(this.listButton.length - 1, this.indexFocus + 1);
              this.updateHighLight();
              break;

            case KeyCode.ENTER:
              this.onKeyEnterEvent();
              break;
          }
        };

        _proto.updateHighLight = function updateHighLight() {
          var button = this.listButton[this.indexFocus];
          this.highLight.active = true;
          this.highLight.setPosition(button.getPosition());
          this.resetStateTransitionButton();
          this.setStateTransitionButton(button, button.getComponent(Button).hoverSprite);
        };

        _proto.resetStateTransitionButton = function resetStateTransitionButton() {
          var _this4 = this;

          this.listButton.forEach(function (child) {
            _this4.setStateTransitionButton(child, child.getComponent(Button).normalSprite);
          });
        };

        _proto.resetHightLight = function resetHightLight() {
          this.indexFocus = -1;
          this.highLight.active = false;
        };

        _proto.onKeyEnterEvent = function onKeyEnterEvent() {
          this.listButton[this.indexFocus].emit(Node.EventType.TOUCH_START);
          this.listButton[this.indexFocus].emit(Node.EventType.TOUCH_END);
        };

        _proto.onInfoClick = function onInfoClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_INFO);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.onExitClick = function onExitClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
          gfEventEmitter.instance.emit(EventsCode1985.COMMON.SHOW_OVERLAY_TRANSITION_LOADING);
        };

        _proto.onSettingClick = function onSettingClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_SETTING);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.onJPHistoryClick = function onJPHistoryClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.resetSideMenu = function resetSideMenu() {
          this.unschedule(this.scheduleHide);
          this.isHide = true;
          this.iconHide.scale = v3(-1, 1, 1);
          this.isActionDone = true;
          this.resetHightLight();
        };

        return SideMenu1985;
      }(GfSideMenu), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeMove", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mainNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "highLightBox", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "highLight", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WifiStatus1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfWifiStatus.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, GfWifiStatus;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      GfWifiStatus = module.GfWifiStatus;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "6d6f5gmzkRE9rIry2IvCkor", "WifiStatus1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WifiStatus1988 = exports('WifiStatus1988', (_dec = ccclass('WifiStatus1988'), _dec(_class = /*#__PURE__*/function (_GfWifiStatus) {
        _inheritsLoose(WifiStatus1988, _GfWifiStatus);

        function WifiStatus1988() {
          return _GfWifiStatus.apply(this, arguments) || this;
        }

        var _proto = WifiStatus1988.prototype;

        _proto.onPingUpdate = function onPingUpdate(ms) {
          _GfWifiStatus.prototype.onPingUpdate.call(this, ms);

          this.labelPing.string = this._averagePing + "ms";
        };

        _proto._enableLbl = function _enableLbl(status) {
          this.ping.active = status;
        };

        return WifiStatus1988;
      }(GfWifiStatus)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/custom-uuid.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('default', uuid);

      cclegacy._RF.push({}, "6e637LjFNtEs4Kyg4PNUXY4", "custom-uuid", undefined);

      function uuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
          var r = Math.random() * 16 | 0,
              v = c == 'x' ? r : r & 0x3 | 0x8;
          return v.toString(16);
        });
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StandOnGround1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './Config1985.ts', './MoveComp1985.ts', './FormationConfig1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, sp, gfDataStore, Config1985, MoveComp1985, FormationConfig1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      MoveComp1985 = module.MoveComp1985;
    }, function (module) {
      FormationConfig1985 = module.FormationConfig1985;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _temp, _dec2, _dec3, _dec4, _class4, _class5, _descriptor3, _descriptor4, _temp2;

      cclegacy._RF.push({}, "6e76epFyj1GabCf8lJ6B5cC", "StandOnGround1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AnimationName = (_dec = ccclass('StandAnimationName'), _dec(_class = (_class2 = (_temp = function AnimationName() {
        _initializerDefineProperty(this, "Idle", _descriptor, this);

        _initializerDefineProperty(this, "Die", _descriptor2, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "Idle", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "idle";
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Die", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "hit";
        }
      })), _class2)) || _class);
      var StandOnGround1985 = exports('StandOnGround1985', (_dec2 = ccclass('StandOnGround1985'), _dec3 = property(sp.Skeleton), _dec4 = property(AnimationName), _dec2(_class4 = (_class5 = (_temp2 = /*#__PURE__*/function (_MoveComp) {
        _inheritsLoose(StandOnGround1985, _MoveComp);

        function StandOnGround1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _MoveComp.call.apply(_MoveComp, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "fishAnim", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "AnimName", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = StandOnGround1985.prototype;

        _proto.setUpMove = function setUpMove(data) {
          this.setPosition(data);
          this.fishAnim.setAnimation(0, data.FishID != -1 ? this.AnimName.Idle : this.AnimName.Die, true);
          this.boxCollider.active = data.FishID != -1;
        };

        _proto.setPosition = function setPosition(data) {
          var y = Config1985.instance.AppSize.MaxHeight + Config1985.instance.ISLAND_OFFSET;
          var timeSpent = Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000);
          y += timeSpent * Config1985.instance.BackgroundSpeed;

          if (data.position) {
            this.node.setPosition(data.position);
          } else {
            this.node.setPosition(data.PosX, y, 0);
          }

          if (data.FormationID > 0) {
            var index = data.IndexInGroup - 1;
            this.appendOffset(data.FormationID, index);
          }
        };

        _proto.update = function update(dt) {
          this.updatePosition(dt);
        };

        _proto.updatePosition = function updatePosition(dt) {
          var _this$node$getPositio = this.node.getPosition(),
              x = _this$node$getPositio.x,
              y = _this$node$getPositio.y;

          this.node.setPosition(x, y + Config1985.instance.BackgroundSpeed * dt, 0);

          if (this.node.position.y < -Config1985.instance.ISLAND_OFFSET) {
            this.onComplete && this.onComplete();
          }
        };

        _proto.appendOffset = function appendOffset(formationId, index) {
          var _FormationConfig1985$ = FormationConfig1985[formationId],
              count = _FormationConfig1985$.count,
              pts = _FormationConfig1985$.pts;

          if (index >= count) {
            console.error("IndexInGroup > formation count");
            return;
          }

          var _this$node$getPositio2 = this.node.getPosition(),
              x = _this$node$getPositio2.x,
              y = _this$node$getPositio2.y;

          x += pts[index].x;
          y += pts[index].y;
          this.node.setPosition(x, y, 0);
        };

        _proto.onDie = function onDie(data) {
          this.isDie = true;
          this.fishAnim.setAnimation(0, this.AnimName.Die, true);
          this.playEffectWinInCatchFish(data);
        };

        return StandOnGround1985;
      }(MoveComp1985), _temp2), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "fishAnim", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "AnimName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return {
            Idle: "idle",
            Die: "hit"
          };
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolAssets1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfCustomDataType.ts', './gfNodePoolAssets.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, convertAssetArrayToObject, EnvObjectAsset, gfNodePoolAssets;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      EnvObjectAsset = module.EnvObjectAsset;
    }, function (module) {
      gfNodePoolAssets = module.gfNodePoolAssets;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "6ef4adI8ZRPkbFfD41gJKJO", "NodePoolAssets1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NodePoolAssets1985 = exports('NodePoolAssets1985', (_dec = ccclass('NodePoolAssets1985'), _dec2 = property(EnvObjectAsset), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNodePoolAssets) {
        _inheritsLoose(NodePoolAssets1985, _gfNodePoolAssets);

        function NodePoolAssets1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNodePoolAssets.call.apply(_gfNodePoolAssets, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrEnvObjects", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "envObjectAssets", {});

          return _this;
        }

        var _proto = NodePoolAssets1985.prototype;

        _proto.initMapAssets = function initMapAssets() {
          _gfNodePoolAssets.prototype.initMapAssets.call(this);

          this.envObjectAssets = convertAssetArrayToObject(this.arrEnvObjects);
        };

        _proto.getEnvObjectSprite = function getEnvObjectSprite(kind) {
          if (this.envObjectAssets[kind] && this.envObjectAssets[kind].sprite) {
            return this.envObjectAssets[kind].sprite;
          }

          return null;
        };

        return NodePoolAssets1985;
      }(gfNodePoolAssets), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrEnvObjects", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginStaging.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './globalNetwork.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, EditBox, Label, JsonAsset, Toggle, Node, Button, Prefab, sys, instantiate, game, log, physics, director, Component, apiObject, loadConfigAsync, globalNetwork;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Label = module.Label;
      JsonAsset = module.JsonAsset;
      Toggle = module.Toggle;
      Node = module.Node;
      Button = module.Button;
      Prefab = module.Prefab;
      sys = module.sys;
      instantiate = module.instantiate;
      game = module.game;
      log = module.log;
      physics = module.physics;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _temp;

      cclegacy._RF.push({}, "7042cF+G9VB3aQidFVXOwrG", "LoginStaging", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Login = exports('Login', (_dec = ccclass('Login'), _dec2 = property(EditBox), _dec3 = property(EditBox), _dec4 = property(EditBox), _dec5 = property({
        type: Label
      }), _dec6 = property({
        type: Label
      }), _dec7 = property({
        type: JsonAsset
      }), _dec8 = property({
        type: Toggle
      }), _dec9 = property({
        type: Toggle
      }), _dec10 = property({
        type: Toggle
      }), _dec11 = property({
        type: Node
      }), _dec12 = property({
        type: Node
      }), _dec13 = property({
        type: Button
      }), _dec14 = property({
        type: Prefab
      }), _dec15 = property({
        type: Label
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Login, _Component);

        function Login() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "tokenInput", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "userInput", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "passwordInput", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "errorMsg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "version", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "versionFile", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "toggleStaging", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "toggleExStaging", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "toggleAccount", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "passwordHolder", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "tokenHolder", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnGetToken", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "stateMonitorPrefab", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "physicType", _descriptor14, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "envInfo", {
            stg: {
              userId: '',
              token: '',
              api: 'https://api.staging.gmstd.dev/manage-token-stg/getToken'
            },
            exstg: {
              userId: '',
              token: '',
              api: 'https://api.staging.gmstd.dev/manage-token-ex-stg/getToken'
            },
            account: {
              userId: '',
              password: '',
              api: 'https://api.staging.gmstd.dev/manage-token-ex-stg/getToken'
            },
            current: 'stg'
          });

          return _this;
        }

        var _proto = Login.prototype;

        _proto.onLoad = function onLoad() {
          console.log('Loaded scene login');

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              USER_TOKEN = _loadConfigAsync$getC.USER_TOKEN;

          var userToken = sys.localStorage.getItem(USER_TOKEN);
          var cachedInfo = sys.localStorage.getItem('envInfo');
          if (cachedInfo) this.envInfo = JSON.parse(cachedInfo);

          if (this.envInfo && this.envInfo.current == "stg") {
            this.toggleStaging.isChecked = true;
            this.switchStaging();
          } else if (this.envInfo && this.envInfo.current == "exstg") {
            this.toggleExStaging.isChecked = true;
            this.switchExStaging();
          } else {
            this.toggleAccount.isChecked = true;
            this.switchAccount();
          }

          this.version.string = this.versionFile.json['v'];

          if (sys.isNative) {
            var versionFilePath = jsb.fileUtils.getWritablePath() + 'gemi-hotupdate/' + 'project.manifest';

            if (jsb.fileUtils.isFileExist(versionFilePath)) {
              var str = jsb.fileUtils.getStringFromFile(versionFilePath);

              if (str) {
                var obj = JSON.parse(str);
                this.version.string = obj.version;
              }
            }
          }

          if (this.stateMonitorPrefab) {
            var monitor = instantiate(this.stateMonitorPrefab);
            game.addPersistRootNode(monitor);
          } else {
            log("No StateMonitor");
          }

          if (physics.PhysicsSystem.PHYSICS_PHYSX) {
            this.physicType.string = "PhysicX";
          } else if (physics.PhysicsSystem.PHYSICS_AMMO) {
            this.physicType.string = "PhysicAmmo";
          } else if (physics.PhysicsSystem.PHYSICS_CANNON) {
            this.physicType.string = "PhysicCannon";
          } else {
            this.physicType.string = "PhysicBultin";
          }
        };

        _proto.switchStaging = function switchStaging() {
          if (!this.toggleStaging.isChecked) return;
          this.envInfo.current = 'stg';
          var config = {
            API_URL: "https://api.staging.gmstd.dev/",
            SOCKET_URL: "wss://sock.staging.gmstd.dev",
            LOGIN_USE_TOKEN: true,
            URL_TOKEN: 'token',
            URL_CODE: 'code',
            USER_TOKEN: "user_token",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            IPMaster2: "wss://staging.fish.gmstd.dev/lobby-1998/",
            IPMaster8: "wss://staging.fish.gmstd.dev/lobby-1988/",
            IPMaster10: "wss://staging.fish.gmstd.dev/lobby-1996/"
          };
          this.btnGetToken.interactable = true;
          this.tokenHolder.active = true;
          this.passwordHolder.active = false;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        };

        _proto.switchExStaging = function switchExStaging() {
          if (!this.toggleExStaging.isChecked) return;
          this.envInfo.current = 'exstg';
          var config = {
            API_URL: "https://api.ex-staging.gmstd.dev/",
            SOCKET_URL: "wss://sock.ex-staging.gmstd.dev",
            USER_TOKEN: "user_token",
            URL_TOKEN: "token",
            URL_CODE: "code",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            IPMaster8: "wss://prelive.fish.gmstd.dev/lobby-1988/",
            IPMaster10: "wss://prelive.fish.gmstd.dev/lobby-1996/"
          };
          this.btnGetToken.interactable = true;
          this.tokenHolder.active = true;
          this.passwordHolder.active = false;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        };

        _proto.switchAccount = function switchAccount() {
          if (!this.toggleAccount.isChecked) return;
          this.envInfo.current = 'account';
          var config = {
            API_URL: "https://api2.ex-staging.gmstd.dev/",
            SOCKET_URL: "wss://sock2.ex-staging.gmstd.dev",
            USER_TOKEN: "user_token",
            URL_TOKEN: "token",
            URL_CODE: "code",
            IS_FINISHED_REMOTE: true,
            LOBBY_SCENE_NAME: "Lobby",
            LOGIN_SCENE_NAME: "Login",
            IPMaster1: "wss://prelive.fish.gmstd.dev/lobby/",
            IPMaster2: "wss://staging.fish.gmstd.dev/lobby-1998/",
            IPMaster3: "wss://prelive.fish.gmstd.dev/lobby-1997/",
            IPMaster5: "wss://prelive.fish.gmstd.dev/lobby-1995/",
            IPMaster6: "wss://prelive.fish.gmstd.dev/lobby-1992/",
            IPMaster7: "wss://prelive.fish.gmstd.dev/lobby-1990/",
            IPMaster8: "wss://prelive.fish.gmstd.dev/lobby-1988/",
            IPMaster88: "wss://prelive.fish.gmstd.dev/lobby-1993/"
          };
          this.btnGetToken.interactable = false;
          this.tokenHolder.active = false;
          this.passwordHolder.active = true;
          loadConfigAsync.replaceConfig(config);
          sys.localStorage.setItem('envInfo', JSON.stringify(this.envInfo));
          this.loadUserInfo();
        };

        _proto.loadUserInfo = function loadUserInfo() {
          var currentEnv = this.envInfo.current;
          var userInfo = this.envInfo[currentEnv] || {};
          if (!userInfo) return;
          if (userInfo.token) this.tokenInput.string = userInfo.token;else {
            this.tokenInput.string = '';
          }
          if (userInfo.password) this.passwordInput.string = userInfo.password;else {
            this.passwordInput.string = '';
          }
          this.userInput.string = userInfo.userId || '';
        };

        _proto.getToken = function getToken() {
          var _this2 = this;

          var currentEnv = this.envInfo.current;
          var userInfo = this.envInfo[currentEnv];
          var params = {
            userName: this.userInput.string.replace(/xxxxx_|tek_/g, ''),
            password: '123456'
          };
          apiObject.get({
            url: userInfo.api,
            params: params,
            callback: function callback(data) {
              if (data.code == 200 && data.data) {
                _this2.tokenInput.string = data.data;
              }
            }
          });
        };

        _proto.onLoginPress = function onLoginPress() {
          if (this.envInfo.current == 'account') {
            this.loginAccount();
          } else {
            this.loginToken();
          }
        };

        _proto.loginAccount = function loginAccount() {
          var _this3 = this;

          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOBBY_SCENE_NAME = _loadConfigAsync$getC2.LOBBY_SCENE_NAME,
              USER_TOKEN = _loadConfigAsync$getC2.USER_TOKEN,
              API_URL = _loadConfigAsync$getC2.API_URL;

          var dataPost = {
            username: this.userInput.string,
            password: this.passwordInput.string
          };
          apiObject.post({
            apiUrl: API_URL,
            url: 'client2-tool/login',
            data: dataPost,
            callback: function callback(res) {
              var _res$data = res.data,
                  data = _res$data.data,
                  code = _res$data.code;

              if (code === 200 && data) {
                var token = data.token,
                    refreshToken = data.refreshToken;
                if (!_this3.envInfo[_this3.envInfo.current]) _this3.envInfo[_this3.envInfo.current] = {};
                _this3.envInfo[_this3.envInfo.current].userId = _this3.userInput.string;
                _this3.envInfo[_this3.envInfo.current].password = _this3.passwordInput.string;
                sys.localStorage.setItem('envInfo', JSON.stringify(_this3.envInfo));
                globalNetwork.init(token, refreshToken);
                sys.localStorage.setItem(USER_TOKEN, token);
                director.loadScene(LOBBY_SCENE_NAME);
              } else {
                _this3.errorMsg.string = "Không thể đăng nhập";
              }
            },
            callbackErr: function callbackErr() {
              _this3.errorMsg.string = "Không thể đăng nhập";
            }
          });
        };

        _proto.loginToken = function loginToken() {
          var _this4 = this;

          var _loadConfigAsync$getC3 = loadConfigAsync.getConfig(),
              DEV_ENV = _loadConfigAsync$getC3.DEV_ENV,
              IS_FINISHED_REMOTE = _loadConfigAsync$getC3.IS_FINISHED_REMOTE,
              LOBBY_SCENE_NAME = _loadConfigAsync$getC3.LOBBY_SCENE_NAME,
              USER_TOKEN = _loadConfigAsync$getC3.USER_TOKEN,
              API_URL = _loadConfigAsync$getC3.API_URL;

          var userToken = this.tokenInput.string;
          if (!userToken) return;
          var dataPost = {
            token: userToken
          };
          console.log('Trying login user token ' + userToken);
          apiObject.post({
            url: API_URL + 'auth/token/login',
            data: dataPost,
            callback: function callback(res) {
              console.log('login res ' + JSON.stringify(res));
              var _res$data2 = res.data,
                  data = _res$data2.data,
                  error = _res$data2.error;

              if (data) {
                var token = data.token,
                    userId = data.userId;

                if (token && token != "") {
                  _this4.envInfo[_this4.envInfo.current].token = token;
                  _this4.envInfo[_this4.envInfo.current].userId = userId.replace(/xxxxx_|tek_/g, ''), sys.localStorage.setItem('envInfo', JSON.stringify(_this4.envInfo));
                  sys.localStorage.setItem(USER_TOKEN, token);
                  director.loadScene(LOBBY_SCENE_NAME);
                  _this4.errorMsg.string = "";
                  globalNetwork.setToken(token);
                  globalNetwork.init(token, null, 'portal', 'all');
                } else {
                  _this4.errorMsg.string = "Không thể đăng nhập";
                }
              } else if (error || res.data.errors) {
                switch (res.data.errors[0]) {
                  case "ERROR_TOKEN_EXPRIED":
                    _this4.errorMsg.string = "Token đã expired";
                    break;

                  default:
                    _this4.errorMsg.string = "Không thể đăng nhập";
                    break;
                }
              }
            }
          });
        };

        return Login;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "tokenInput", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "userInput", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "passwordInput", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "errorMsg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "version", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "versionFile", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "toggleStaging", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "toggleExStaging", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "toggleAccount", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "passwordHolder", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "tokenHolder", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "btnGetToken", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "stateMonitorPrefab", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "physicType", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/mock.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "727195EzmhP5IW29jZbM8cI", "mock", undefined);

      var userText = 'user141';
      var pwText = 'pwduser141';
      var mock = exports('mock', {
        userText: userText,
        pwText: pwText
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GunSkill1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './DataStore1985.ts', './Config1985.ts', './gfGunSkill.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, log, Tween, sp, tween, v3, Label, gfBaseEvents, gfEventEmitter, deepCopy, EventsCode1985, ReferenceManager1985, DataStore1985, Config1985, gfGunSkill;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      log = module.log;
      Tween = module.Tween;
      sp = module.sp;
      tween = module.tween;
      v3 = module.v3;
      Label = module.Label;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      deepCopy = module.deepCopy;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfGunSkill = module.gfGunSkill;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "72cdcpouE5IBJYdocwudX/A", "GunSkill1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GunSkill1985 = exports('GunSkill1985', (_dec = ccclass('GunSkill1985'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfGunSkill) {
        _inheritsLoose(GunSkill1985, _gfGunSkill);

        function GunSkill1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfGunSkill.call.apply(_gfGunSkill, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeAimFx", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_cloneListFishCatchLaser", null);

          _defineProperty(_assertThisInitialized(_this), "_deskStation", null);

          return _this;
        }

        var _proto = GunSkill1985.prototype;

        _proto.initObj = function initObj(data) {
          this._cloneListFishCatchLaser = [];
          this._deskStation = data.DeskStation;
          this.isMe = data.DeskStation === DataStore1985.instance.getSelfDeskStation();
          var isHaveSkill = data.skillInfo && data.skillInfo.SkillID > 0;
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);
          player.setIsHaveSkillLaser(false);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, false);

          if (this.isMe) {
            DataStore1985.instance.setDataStore({
              timeHide: null
            });
            DataStore1985.instance.setSelfInfo({
              isLockGun: false,
              skillLock: false
            });
            this.skillEffect.active = false;
            this.nodeAimFx.setScale(0, 1, 1);
          }

          if (isHaveSkill) {
            var dataSpecialGun = {
              DeskStation: data.DeskStation,
              SkillID: data.skillInfo.SkillID
            };
            this.changeSpecialGun(dataSpecialGun);
            player.setIsHaveSkillLaser(true);

            if (this.isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, true);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
            }
          } else if (this.isMe) {
            gfEventEmitter.instance.emit(EventsCode1985.HUD.HUD_ACTIVE_LASER, {
              DeskStation: data.DeskStation,
              isActive: false
            });
          }
        };

        _proto.playerSendFireLaser = function playerSendFireLaser() {
          this._cloneListFishCatchLaser = deepCopy(DataStore1985.instance.getListCatchLaser());
          var data = {
            Angle: this.gun.angle,
            ListFish: this._cloneListFishCatchLaser.length > 0 ? this._cloneListFishCatchLaser : [-1],
            SkillID: Config1985.instance.SkillConfig.LASER
          };
          log('playerSendFireLaser', data.ListFish);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_FIRE_LASER, data);
          this.resetCountDownSkill();
          DataStore1985.instance.setSelfInfo({
            isLockGun: true
          });
        };

        _proto.fireLaser = function fireLaser(data) {
          var _this2 = this;

          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            if (player.isMe) {
              DataStore1985.instance.setSelfInfo({
                isLockGun: true,
                skillLock: 0
              });
              this.resetCountDownSkill();
              gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.LOCK_MOVE_SPACESHIP, true);
              player.addGoldReward(data.TotalReward);
            }
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.FIRE_LASER);
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CLEAR_DROP_GUN_LASER, data.DeskStation);
          this.skillEffect.active = true;
          Tween.stopAllByTarget(this.skillEffect);
          var spine = this.skillEffect.getComponent(sp.Skeleton);
          spine.timeScale = 2;
          spine.setAnimation(0, 'fire', false);
          var duration = spine.findAnimation('fire').duration / spine.timeScale;
          tween(spine).delay(duration * 0.55).call(function () {
            var listFishID = _this2._cloneListFishCatchLaser.length > 0 ? deepCopy(_this2._cloneListFishCatchLaser) : data.ListFish;
            var dataImpact = {
              listFishID: listFishID,
              DeskStation: data.DeskStation
            };
            gfEventEmitter.instance.emit(EventsCode1985.EFFECT_LAYER.PLAY_LIST_EFFECT_IMPACT_LASER, dataImpact);
          }).delay(duration * 0.15).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.CATCH_FISH_BY_SKILL, data);

            var listFishIDNearWin = _this2.getListFishNearWin(data.ListFish);

            gfEventEmitter.instance.emit(EventsCode1985.EFFECT_LAYER.PLAY_LIST_EFFECT_NEAR_WIN_LASER, listFishIDNearWin);
          }).delay(duration * 0.3).call(function () {
            _this2.completedFXFireLaser(data);

            gfEventEmitter.instance.emit(EventsCode1985.EFFECT_LAYER.PLAY_EFFECT_BIG_WIN, data);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, data.DeskStation);
            _this2._cloneListFishCatchLaser = [];
          }).start();
        };

        _proto.getListFishNearWin = function getListFishNearWin(listFishID) {
          var listFishIDImpact = deepCopy(this._cloneListFishCatchLaser);
          listFishID.forEach(function (fish) {
            var index = listFishIDImpact.indexOf(fish.FishID);

            if (index >= 0) {
              listFishIDImpact.splice(index, 1);
            }
          });
          return listFishIDImpact;
        };

        _proto.changeLaserGun = function changeLaserGun(data) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            this.skillEffect.active = true;
            var spine = this.skillEffect.getComponent(sp.Skeleton);
            spine.setAnimation(0, 'idle', true);
            player.setIsHaveSkillLaser(true);

            if (player.isMe) {
              DataStore1985.instance.setDataStore({
                targetState: Config1985.instance.TARGET_LOCK.NONE,
                currentTargetState: Config1985.instance.TARGET_LOCK.NONE
              });
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, true);
              spine.setCompleteListener(function () {});
              this.nodeAimFx.active = true;
              Tween.stopAllByTarget(this.nodeAimFx);
              tween(this.nodeAimFx).to(0.25, {
                scale: v3(1, 1, 1)
              }).call(function () {
                DataStore1985.instance.setSelfInfo({
                  isLockGun: false,
                  skillLock: Config1985.instance.SkillConfig.LASER
                });
                gfEventEmitter.instance.emit(EventsCode1985.HUD.HUD_ACTIVE_LASER, {
                  DeskStation: data.DeskStation,
                  isActive: true
                });
              }).start();
            } else {
              this.nodeAimFx.active = false;
              this.nodeAimFx.setScale(0, 1, 1);
            }
          }
        };

        _proto.completedFXFireLaser = function completedFXFireLaser(data) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);
          DataStore1985.instance.setDataStore({
            listCatchLaser: []
          });
          this.skillEffect.active = false;

          if (player) {
            if (player.isMe) {
              DataStore1985.instance.setSelfInfo({
                isLockGun: false,
                skillLock: 0
              });
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_BOT.TOGGLE_BUTTON, true);
              DataStore1985.instance.setDataStore({
                targetState: Config1985.instance.TARGET_LOCK.NONE,
                currentTargetState: Config1985.instance.TARGET_LOCK.NONE
              });
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
              gfEventEmitter.instance.emit(EventsCode1985.HUD.HUD_ACTIVE_LASER, {
                DeskStation: data.DeskStation,
                isActive: false
              });
              gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.LOCK_MOVE_SPACESHIP, false);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, false);
            }

            player.setIsHaveSkillLaser(false);
          }
        };

        _proto.showSkillTitle = function showSkillTitle() {
          this.skillTitle.active = true;
          Tween.stopAllByTarget(this.skillTitle);
        };

        _proto.showSkillCountDown = function showSkillCountDown() {
          var _this3 = this;

          var countDown = Config1985.instance.SkillConfig.TIMEOUT;
          this.skillCountDown.active = true;
          Tween.stopAllByTarget(this.skillCountDown);
          this.skillCountDown.getComponent(Label).string = countDown.toString();
          tween(this.skillCountDown).delay(1).call(function () {
            countDown--;

            if (countDown <= 0) {
              _this3.resetCountDownSkill();

              log('30s auto fire skill');

              _this3.onPlayerSendFireSkill({
                SkillID: DataStore1985.instance.getSelfInfo().skillLock
              });
            } else {
              _this3.skillCountDown.getComponent(Label).string = countDown.toString();
            }
          }).union().repeat(Config1985.instance.SkillConfig.TIMEOUT).start();
        };

        _proto.resetCountDownSkill = function resetCountDownSkill() {
          if (this.skillTitle) {
            Tween.stopAllByTarget(this.skillTitle);
            this.skillTitle.active = false;
          }

          if (this.skillCountDown) {
            Tween.stopAllByTarget(this.skillCountDown);
            this.skillCountDown.active = false;
            this.skillCountDown.getComponent(Label).string = "0";
          }

          if (this.nodeAimFx) {
            this.nodeAimFx.active = false;
            this.nodeAimFx.setScale(0, 1, 1);
          }
        };

        _proto.resetSkillPlayerDie = function resetSkillPlayerDie() {
          if (this.nodeAimFx) {
            Tween.stopAllByTarget(this.nodeAimFx);
            this.nodeAimFx.active = false;
            this.nodeAimFx.setScale(0, 1, 1);
          }

          if (this.skillEffect) {
            this.skillEffect.active = false;
          }

          this._cloneListFishCatchLaser = [];
          gfEventEmitter.instance.emit(EventsCode1985.HUD.HUD_ACTIVE_LASER, {
            DeskStation: this._deskStation,
            isActive: false
          });
        };

        return GunSkill1985;
      }(gfGunSkill), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeAimFx", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemyBulletManager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "73e49c6at5LeY3rebI0HDUA", "EnemyBulletManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemyBulletManager = exports('default', (_dec = ccclass('EnemyBulletManager'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EnemyBulletManager, _Component);

        function EnemyBulletManager() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = EnemyBulletManager.prototype;

        _proto.start = function start() {};

        return EnemyBulletManager;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup07.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7424fix9kFNka51UE3O3zM5", "gfFishGroup07", undefined);

      var gfFishGroup7 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup7() {}

        gfFishGroup7.create = function create() {
          var AppSize = gfBaseConfig.instance.AppSize;
          var fishCount = [50, 50, 50, 2, 1, 3, 1]; // const fishKind = [13, 3, 4, 25, 43, 25, 30];

          var Y1 = 140;
          var space = 175;
          var speed = 150;
          FishGroupHelper.createFishLine(fishCount[0] / 2, Y1, space, speed);
          FishGroupHelper.createFishLine(fishCount[0] / 2, AppSize.Height - Y1, space, speed);
          var offsetX = 80;
          var timeEach = 5;
          this.makeBezierLine(fishCount[1] / 2, v2(-100, -100), offsetX, 3, timeEach);
          this.makeBezierLine(fishCount[1] / 2, v2(-100, AppSize.Height + 100), offsetX, 3, timeEach);
          this.makeBezierLine(fishCount[2] / 2, v2(-300, 100), offsetX, 6, timeEach, timeEach / 2);
          this.makeBezierLine(fishCount[2] / 2, v2(-300, AppSize.Height - 100), offsetX, 6, timeEach, timeEach / 2);
          gfFishGroupData.updateCustomZIndex(555);
          var bigSpace = 400;
          var midY = 360;
          var bigOffset = -1000;
          var bigSpeed = 120;
          FishGroupHelper.createFishLine(fishCount[3], midY, bigSpace, bigSpeed, bigOffset);
          FishGroupHelper.createFishLine(fishCount[4], midY, bigSpace, bigSpeed, bigOffset - fishCount[3] * bigSpace);
          FishGroupHelper.createFishLine(fishCount[5], midY, bigSpace, bigSpeed, bigOffset - (fishCount[3] + fishCount[4]) * bigSpace);
          FishGroupHelper.createFishLine(fishCount[6], midY, bigSpace, bigSpeed, bigOffset - (fishCount[3] + fishCount[4] + fishCount[5]) * bigSpace);
        };

        gfFishGroup7.makeBezierLine = function makeBezierLine(fishCount, startPos, offsetX, circleCount, moveInTime, circleTime) {
          if (circleTime === void 0) {
            circleTime = moveInTime;
          }

          var AppSize = gfBaseConfig.instance.AppSize;
          var width = (AppSize.Width - offsetX * 2) / circleCount;
          var height = width * 0.7;
          var x = offsetX - startPos.x;

          if (gfFishGroupData.isFlipped()) {
            startPos.x = AppSize.Width - startPos.x;
            startPos.y = AppSize.Height - startPos.y;
          }

          var y = 360 - startPos.y;

          for (var i = 0; i < fishCount; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = i * 1.0;
            var flip = y > 0 ? 1 : -1;
            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: moveInTime,
              points: [v2(gfFishGroupData.flipCoord * x * 0.65, 0), v2(gfFishGroupData.flipCoord * x, y / 3), v2(gfFishGroupData.flipCoord * x, y)]
            });

            for (var j = 0; j < circleCount; ++j) {
              data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: circleTime,
                points: [v2(0, flip * height), v2(gfFishGroupData.flipCoord * width, flip * height), v2(gfFishGroupData.flipCoord * width, 0)]
              });
              flip *= -1;
            }

            data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: moveInTime,
              points: [v2(0, -y / 3), v2(gfFishGroupData.flipCoord * x * 0.35, -y), v2(gfFishGroupData.flipCoord * x, -y)]
            });
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup7;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseConfig.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, Vec2;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Vec2 = module.Vec2;
    }],
    execute: function () {
      cclegacy._RF.push({}, "74a69ZRNVVE0Y3Ky3LtcPr0", "gfBaseConfig", undefined);

      var gfBaseConfig = exports('default', /*#__PURE__*/function () {
        // 2D speed
        // in second
        // 10s
        function gfBaseConfig() {
          var _defineProperty2,
              _position,
              _this = this;

          _defineProperty(this, "IPMasterName", "IPMaster1");

          _defineProperty(this, "IPMaster", "");

          _defineProperty(this, "IPGame", "");

          _defineProperty(this, "token4Game", "");

          _defineProperty(this, "userToken", "");

          _defineProperty(this, "token4Master", "");

          _defineProperty(this, "RoomVersion", "|1");

          _defineProperty(this, "ProdVersion", "|1");

          _defineProperty(this, "ClientType", "|1");

          _defineProperty(this, "GameId", '1999');

          _defineProperty(this, "IsDevMode", false);

          _defineProperty(this, "RoomKind", {
            Normal: "1",
            VIP: "3"
          });

          _defineProperty(this, "GameVersion", "0.5.6");

          _defineProperty(this, "MiniBossSceneKind", 1);

          _defineProperty(this, "SceneName", {
            Lobby: 'ktfLobby1901',
            Game: 'ktfGame1901'
          });

          _defineProperty(this, "LoadingSceneName", 'ktfLoading1901');

          _defineProperty(this, "LOCAL_STORE", {
            LOCAL_LOGIN_VAR: "ktfllv",
            NOT_SHOW_NT: "NSNT",
            MUSIC_VOLUME: "music_volume",
            EFFECT_VOLUME: "effect_volume",
            SHOW_EVENT_INFO: "SEIF"
          });

          _defineProperty(this, "TotalGun", 7);

          _defineProperty(this, "MaxBullet", 20);

          _defineProperty(this, "BotState", {
            INITIALIZED: 1,
            STARTED: 2,
            STOPPED: 3
          });

          _defineProperty(this, "AppSize", {
            Width: 1280,
            Height: 720,
            MaxWidth: 1604
          });

          _defineProperty(this, "realSize", {
            Width: 1280,
            Height: 720
          });

          _defineProperty(this, "SceneBox", {
            Left: 0,
            Bottom: 0,
            Right: 1280,
            Top: 720
          });

          _defineProperty(this, "BulletSpeed", 938);

          _defineProperty(this, "NetFx", {
            NormalNet: 0,
            ExplostionNet: 1,
            IceNet: 2
          });

          _defineProperty(this, "gunRadius", 92);

          _defineProperty(this, "ChangeTarget", 5);

          _defineProperty(this, "TARGET_LOCK", {
            NONE: 0,
            AUTO_FIRE: 1,
            TARGET_ONE: 2,
            TARGET_ALL: 3,
            AUTO_BOT: 4,
            PAUSE: 5
          });

          _defineProperty(this, "SKILL_ITEM", {
            FREEZE: 1
          });

          _defineProperty(this, "POPUP_TYPE", {
            Info: 'PopupInfo',
            Message: 'PopupNotify',
            Tutorial: 'PopupTutorial',
            Setting: 'PopupSetting',
            Chat: 'PopupChatMsg',
            Jackpot: 'PopupHistoryJackpot',
            Auto: 'PopupAutoBot'
          });

          _defineProperty(this, "POPUP_ANIMATION", {
            PULSE: 'PULSE',
            BOUNCE: 'BOUNCE',
            EASE: 'EASE',
            FADE: 'FADE',
            DEFAULT: 'DEFAULT'
          });

          _defineProperty(this, "POPUP_PROMPT", {
            JUST_CONFIRM_BUTTON: 'JUST_CONFIRM_BUTTON',
            CONFIRM_AND_CLOSE_BUTTON: 'CONFIRM_AND_CLOSE_BUTTON',
            CONFIRM_AND_REJECT_BUTTON: 'CONFIRM_AND_REJECT_BUTTON',
            NONE_BUTTON: 'NONE_BUTTON'
          });

          _defineProperty(this, "TIME_COUNTDOWN_ITEM_FREEZE", 10);

          _defineProperty(this, "CursorBase64", "AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAAAAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAH/uwAC/7sAAv+7AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAj/twAZ/6wAJv+tADT/rQAy/60AIv+5ABb/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/vAAI/7EAIP+9HHX/1XbC/9FmxP/SacX/1G67/7cFXf+0ABj/vAAF/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/uwAO/7IAG/+rADb/sA50/9Nt2v//////////////////////xD7A/7ADZ/+rAC3/tQAY/7wACv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAH/7UAGf+pADv/wTiK/+ax3//01///5rXv/+q29v///////////+Kk7//sxvb/8c77/+Cb0v+6H3n/qwAx/7kAFv+8AAP/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/70AC/+vACL/sgpm/+e34P/57P//4abX/8I3iv+wAWj/qgCF//z7///tx/b/ogBz/7YMbP/HTJf/5bbj//ru///ZjMT/qwBO/7QAHP+8AAb/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+9AAr/rQAm/7ktgf/58P//6sXo/7YdeP+pADP/sgAa/7oAGv+yAC//xjmJ/8Epd/+0ACb/uQAW/7AAH/+pAD3/vjqM//HX+P/v0vL/sQll/7EAHv+8AAb/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAG/68AIv+5K4H//////9eHxf+lAEP/tAAd/7wACf+7AAD/ugAA/7wADv+yABD/tAAQ/7wACf+6AAD/uwAA/7wADf+xACL/qgBZ/+m76P/46v//rgZg/7UAG/+7AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+1ABr/sApj//78///Ygsb/pQA5/7sAFf+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAAf+3ABv/pQBK/+y/7P/vx/H/qQBG/7oAFP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/uwAO/6kAOP/oseP/7MLu/6YAQ/+6ABX/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+2ABz/qwBf//v0///Vcbz/qwAo/7wABv+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAP+xABv/wzWO//75//+2DXj/tAAd/7sAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAA/+tACT/yESj//z0//+zBmP/twAU/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAI/6wANf/os+T/4qPZ/6kAM/+9AAn/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAEf+rAEr/8dL3/9h6v/+tACP/vAAB/7oAAP+6AAD/ugAA/7wACP+wACD/sgB2//jm///DM4z/sgAZ/7sAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAf+7AAz/swAQ/7EAEf+5AA7/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAB/6wAI//WeLf/78v2/6YAVf+1ABn/vAAI/7oAAP+6AAD/twAZ/74pdP/Ratf/6bb1/68AaP+7ABn/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAH/ugAV/7EAO/+/KYH/wDGJ/7EASf+4ABv/uwAD/7oAAP+6AAD/ugAA/7oAAP+6AAD/tQAh/70ahv/tw///xEHD/8Mwc/+2ABj/ugAB/7sAAf+sACT/2HjF///////mr/H/qgCI/7IAL/+8AA3/ugAA/7oAAP+6AAD/ugAA/7sACP+wADP/z2Wz////////////3Y/S/7EASf+6AA7/ugAA/7oAAP+6AAD/ugAA/7wADf+wADT/sQCY//LQ/P//////2H7F/6sAJP+7AAL/uwAB/60ANP/RZsT////////////77f//xT+H/7EAD/+6AAD/ugAA/7oAAP+6AAD/tgAJ/7YEZ//++v//////////////////wjKM/7EAEP+7AAD/ugAA/7oAAP+6AAD/sgAP/8U+h//57P/////////////QZMT/rQA0/7sAAf+7AAL/rAAy/9Jqxf///////////+rB6P/BNXj/tAAQ/7oAAP+6AAD/ugAA/7oAAP+3AAn/tARd//jo//////////////////++KID/sgAQ/7sAAP+6AAD/ugAA/7oAAP+0ABD/wTR4/+i66P///////////9Joxf+tADL/uwAB/7sAAv+tACH/1W69//7+///io+z/pAB2/7MAJv+8AAn/ugAA/7oAAP+6AAD/ugAA/7sABv+xACr/wziW//LV+f/45v//0GW0/7AAO/+7AAz/ugAA/7oAAP+6AAD/ugAA/7wACv+xACr/qwCK/+7J/P/57f//13W9/60AIP+7AAL/ugAA/7kAFv+3EV7/yEbB/+/G+v+1AGz/uQAW/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAEf+xACr/tQBg/7gHaf+wADT/ugAV/7sAAf+6AAD/ugAA/7oAAP+6AAD/uwAA/7QAHv/EL43/7sb//7gbqf+9GFz/uQAV/7oAAP+6AAD/vAAE/7QAGP+wAGb/9uL//8pIm/+wAB3/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sABv+3AAr/tgAK/7oACP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAT/qwAp/9yMxf/swu//pwBH/7YAEf+8AAT/ugAA/7oAAP+6AAD/vAAE/6sALP/indX/6rvo/6gAPP+8AA3/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7kAFf+tAFj/9uD//9BerP+uAB7/vAAA/7oAAP+6AAD/ugAA/7oAAP+7AAD/tQAY/7oad//9+///vyyQ/7AAIf+8AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+9AAf/qQAq/9JpvP/35v//rgBS/7kAEv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAr/qgAu/9yJzP/46P//qABW/7cAGv+7AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vQAE/7EAIP+zEnn//////8hMn/+tACL/uwAE/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+5ABb/qgBM//LS+P/puOj/pQBK/7YAHP+8AAP/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/70ACP+xACH/rAJl//vu///gmtL/qQA3/7sAEP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wAAv+zABv/sAlj//jo///swez/rQBh/64AJv+7ABH/uwAB/7oAAP+8AA3/sgAP/7QAEP+9AAn/ugAA/7wABP+5ABb/qgAs/7Ufev/45///6Lbi/6kASf+4ABf/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wABv+yAB3/sARi/+zI6v/03f3/xVGc/6wATf+tACX/tQAg/7AAM//GOIj/wSl5/7EAK/+0AB7/qwAr/68AW//PbrL//PT//96g0P+pAEj/twAa/7sAAv+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7wABf+1ABv/qgBH/9FxtP/13///6sTu/9R8tP+9IIj/sAWU//36///sxvb/qgeG/8Mxjv/akcT/7s/2//DS9f/GUZn/qgA4/7gAGP+7AAL/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAf+6ABT/rAAq/7UIZ//Vdrj/67rw/+zC/v/01P/////////////uy/3/7Mn+/+q16v/NYKf/rwBW/68AJP+8ABD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+8AAf/twAT/64AJf+nAFX/w0PE//////////////////////+2Iaf/qABG/68AIP+6ABL/vAAE/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAC/7QAGv/CJ3P/1njB/9Fmxf/SacT/13W7/70OW/+2ABL/uwAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/vAAI/7cAGP+sACX/rQA0/60AMv+tACH/uQAW/7sABP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7sAAf+7AAL/uwAB/7sAAf+6AAH/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA/7oAAP+6AAD/ugAA//w////wD///4Af//4AB//4AAH/8AAA/+AAAH/AMMA/wP/gP4H/+B+D//gfA//8DgfgfAYHwD4AA8A8AAPAPAADwDwAA8A8AgfgPgYH8PwHA//8H4H/+B+B//AfwH/gP8AQgH/gAAB/8AAA//gAA//+AAf//4A////AP///8H/8=");

          _defineProperty(this, "FISH_KIND", {
            LASER_CRAB: 27,
            DRAGON: 32,
            MINIBOSS: 33,
            KING_LOBSTER: 34,
            LANTERN: 36,
            BOMB: 43,
            BOMB_M: 44,
            DRILL: 46,
            DRILL_M: 47,
            FIRE_STORM: 49,
            KING_CRAB: 50
          });

          _defineProperty(this, "PRIORITY_FISH", [this.FISH_KIND.DRAGON, this.FISH_KIND.MINIBOSS]);

          _defineProperty(this, "NOTIFY_TYPE", {
            SYSTEM: 0,
            JACKPOT: 1,
            MESSAGE_BIG_FISH: 2,
            MESSAGE_SPECIAL_SKILL: 3,
            MESSAGE_DRAGON_BALL: 4,
            MESSAGE_KILL_MINIBOSS: 5,
            MESSAGE_DROP_ITEM_MINIBOSS: 6,
            MESSAGE_EVENT: 7
          });

          _defineProperty(this, "NOTIFY_CONFIG", (_defineProperty2 = {}, _defineProperty2[this.NOTIFY_TYPE.JACKPOT] = {
            userName: 0,
            goldReward: 1
          }, _defineProperty2[this.NOTIFY_TYPE.MESSAGE_BIG_FISH] = {
            userName: 0,
            fishKind: 1,
            multiple: 3,
            goldReward: 2
          }, _defineProperty2[this.NOTIFY_TYPE.MESSAGE_SPECIAL_SKILL] = {
            userName: 0,
            subID: 1,
            goldReward: 2
          }, _defineProperty2[this.NOTIFY_TYPE.MESSAGE_DRAGON_BALL] = {
            userName: 0,
            countBall: 1,
            goldReward: 2
          }, _defineProperty2[this.NOTIFY_TYPE.MESSAGE_KILL_MINIBOSS] = {
            userName: 0,
            fishKind: 1,
            goldReward: 3,
            itemID: 2,
            multiple: 4
          }, _defineProperty2[this.NOTIFY_TYPE.MESSAGE_DROP_ITEM_MINIBOSS] = {
            userName: 0,
            fishKind: 1,
            itemID: 2,
            goldReward: 3,
            multiple: 4
          }, _defineProperty2[this.NOTIFY_TYPE.MESSAGE_EVENT] = {
            userName: 0,
            goldReward: 1
          }, _defineProperty2));

          _defineProperty(this, "Z_INDEX", {
            NOTIFY: 2000,
            MENU: 2099,
            POPUP: 2100,
            WAITING: 2200,
            COIN: 98,
            COIN_LABEL: 99,
            BIGWIN: 100,
            DRAGON_BALL: 101,
            DRAGON: 900,
            BULLET: 999,
            NETFX_ICE: 91,
            NETFX_MINIBOSS: 92,
            NETFX: 93,
            CUTSCENE: 1900
          });

          _defineProperty(this, "NOTIFY_MESSAGE", {
            position: (_position = {}, _position[this.SceneName.Game] = new Vec2(0, 240), _position[this.SceneName.Lobby] = new Vec2(0, 240), _position),
            limited_stack_size: 10
          });

          _defineProperty(this, "NOTIFY_JACKPOT", {
            array_type_notify_jackpot: [this.NOTIFY_TYPE.JACKPOT],
            limited_stack_size: 10
          });

          _defineProperty(this, "AUTO_BOT", {
            DATA_TIMER: ["0'", "30'", "60'", "90'", "120'", "∞"],
            MAX_TIME: 150,
            SPECIAL_ITEM: "i"
          });

          _defineProperty(this, "SOUND_BACKGROUND_CONFIG", {
            MINI_BOSS: "MINI_BOSS",
            DRAGON: "DRAGON",
            LOBBY: "LOBBY",
            IN_GAME: "IN_GAME",
            FISH_GROUP: "FISH_GROUP"
          });

          _defineProperty(this, "DEFAULT_AVATAR", "Avatar0");

          _defineProperty(this, "COIN_TYPE", {
            MY_COIN: 0,
            OTHER_COIN: 1
          });

          _defineProperty(this, "NOTIFY_ENVIRONMENT_CONFIG", {
            ALL: 0,
            IFRAME: 1,
            APP: 2
          });

          _defineProperty(this, "ENVIRONMENT_CONFIG", {
            WEB_APP: 1,
            IFRAME: 2,
            NATIVE_APP: 3
          });

          _defineProperty(this, "GunSkill", {
            LASER: "gun9"
          });

          _defineProperty(this, "SkillConfig", {
            TIMEOUT: 30,
            LASER: 1,
            BOOM: 3,
            FISH_BOMB: 5
          });

          _defineProperty(this, "SHAKE_SCREEN_STYLE", {
            HORIZONTAL: 0,
            VERTICAL: 1,
            CROSS_1: 2,
            //theo hình dấu cộng
            CROSS_2: 3,
            //theo hình dấu nhân
            FULL: 4 //kết hợp cả 2 loại style CROSS

          });

          _defineProperty(this, "BIG_WIN_RATIO", {
            HUGE: 180,
            SUPER: 301,
            BIG_WIN_VALUE: 80
          });

          _defineProperty(this, "waiting_timeout", 15);

          _defineProperty(this, "SOUND_SLIDER", false);

          _defineProperty(this, "POS_WIFI_STATUS", {
            LEFT: new Vec2(-476, -253),
            RIGHT: new Vec2(445, -255)
          });

          _defineProperty(this, "BOSS_PREFAB_NAME", {
            DRAGON: 'Dragon'
          });

          _defineProperty(this, "TURN_ON_WIFI_STATUS", false);

          _defineProperty(this, "LoadGameByPrefab", false);

          _defineProperty(this, "BundleName", 'bundle1901');

          _defineProperty(this, "ScenePrefabs", {});

          _defineProperty(this, "MainGameNode", null);

          _defineProperty(this, "LIST_SPECIAL_FISH_KIND", [27, 32, 33, 43, 44, 46, 47, 49, 50]);

          _defineProperty(this, "Skill", {
            TIMEOUT: 30,
            ID: {
              LASER: 1,
              BOOM: 3,
              FISH_BOMB: 5,
              DRILL: 7,
              FIRE_STORM: 8
            },
            IsGunSkill: function IsGunSkill(skillID) {
              return skillID == _this.Skill.ID.LASER || skillID == _this.Skill.ID.DRILL || skillID == _this.Skill.ID.FIRE_STORM;
            }
          });

          gfBaseConfig.instance = this;
        }

        var _proto = gfBaseConfig.prototype;

        _proto.parseJoinGame = function parseJoinGame(data) {
          this.IPGame = data.Server;
          this.token4Game = data.Token;
        };

        _proto.destroy = function destroy() {
          gfBaseConfig.instance = null;
        };

        _proto.IsSpecialFish = function IsSpecialFish(fishKind) {
          if (this.LIST_SPECIAL_FISH_KIND.indexOf(fishKind) != -1) return true;
          return false;
        };

        _proto.IsCrab = function IsCrab(fishKind) {
          if (fishKind == this.FISH_KIND.BOMB || fishKind == this.FISH_KIND.BOMB_M || fishKind == this.FISH_KIND.LASER_CRAB || fishKind == this.FISH_KIND.DRILL || fishKind == this.FISH_KIND.DRILL_M) return true;
          return false;
        };

        return gfBaseConfig;
      }());

      _defineProperty(gfBaseConfig, "instance", null);

      gfBaseConfig.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BetHandler1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './gfDataStore.ts', './gfNetworkGameEvent.ts', './DataStore1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Slider, Sprite, Label, Node, Button, UITransform, Widget, UIOpacity, Component, formatMoney, gfBaseEvents, gfEventEmitter, gfBaseConfig, getBetValue, EventsCode1985, ReferenceManager1985, gfDataStore, gfNetworkGameEvent, DataStore1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Slider = module.Slider;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      Button = module.Button;
      UITransform = module.UITransform;
      Widget = module.Widget;
      UIOpacity = module.UIOpacity;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      getBetValue = module.getBetValue;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "74b91dRUrVGX6dwWKGyoMHo", "BetHandler1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BetHandler1985 = exports('BetHandler1985', (_dec = ccclass('BetHandler1985'), _dec2 = property(Slider), _dec3 = property(Sprite), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Button), _dec7 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BetHandler1985, _Component);

        function BetHandler1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "sliderBet", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fullSprite", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "betLabel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "betArrow", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnOpenBet", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "betNodeValue", _descriptor6, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_betIndex", 0);

          _defineProperty(_assertThisInitialized(_this), "BET_VALUE", [100, 200, 500, 1000, 2000, 5000, 10000]);

          return _this;
        }

        var _proto = BetHandler1985.prototype;

        _proto.start = function start() {
          this.updateBetValue();
        };

        _proto.updateBetValue = function updateBetValue() {
          var gunValue = gfDataStore.instance.GunValue;

          for (var i = 0; i < this.BET_VALUE.length && i < gunValue.length; ++i) {
            this.BET_VALUE[i] = gunValue[i];
            this.betNodeValue[i].string = gunValue[i];
          }

          this.resumeBetValue();
        };

        _proto.resumeBetValue = function resumeBetValue() {
          var betValue = getBetValue(gfBaseConfig.instance.GameId, gfDataStore.instance.getCurrentRoom());
          this._betIndex = Math.max(0, this.BET_VALUE.indexOf(parseInt(betValue)));

          this._updateBetInfo();
        };

        _proto.onBtnBetClicked = function onBtnBetClicked() {
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK);
          this.sliderBet.node.active = !this.sliderBet.node.active;
          this.scheduleOnce(this._hideBetSlider, 3);
        };

        _proto.lockBet = function lockBet(isLock) {
          if (isLock === void 0) {
            isLock = false;
          }

          if (isLock) {
            if (this.btnOpenBet) this.btnOpenBet.interactable = false;

            if (this.sliderBet.node.active) {
              this.sliderBet.node.active = false;
            }
          } else {
            this._updateBetInfo();
          }
        };

        _proto.onBetSlider = function onBetSlider(evt) {
          var index = Math.min(0.99, evt.progress) * this.BET_VALUE.length | 0;
          this._betIndex = index;

          this._updateBetInfo();

          this._refreshHideBetSlider();
        };

        _proto._refreshHideBetSlider = function _refreshHideBetSlider() {
          this.unschedule(this._hideBetSlider);
          this.scheduleOnce(this._hideBetSlider, 3);
        };

        _proto.onIncreaseBet = function onIncreaseBet() {
          if (this._betIndex + 1 >= this.BET_VALUE.length) return;
          this._betIndex++;
          this.sliderBet.node.active = true;

          this._updateBetInfo();

          this._refreshHideBetSlider();
        };

        _proto._hideBetSlider = function _hideBetSlider() {
          if (this.sliderBet.node.active) {
            this.sliderBet.node.active = false;
          }
        }
        /**
         * onDecreaseBete
         */
        ;

        _proto.onDecreaseBet = function onDecreaseBet() {
          if (this._betIndex - 1 < 0) return;
          this._betIndex--;
          this.sliderBet.node.active = true;

          this._updateBetInfo();

          this._refreshHideBetSlider();
        };

        _proto._updateBetInfo = function _updateBetInfo() {
          this.betLabel.string = formatMoney(this.BET_VALUE[this._betIndex]);
          if (this.btnOpenBet) this.btnOpenBet.interactable = true;
          this.fullSprite.fillRange = (this._betIndex + 1) / this.BET_VALUE.length - 0.01;
          var y = (this.fullSprite.fillRange - 0.5) * this.fullSprite.getComponent(UITransform).height - 25;
          this.betArrow.setPosition(this.betArrow.position.x, y, 0);
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.UPDATE_BULLET, {
            index: this._betIndex
          });
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.UPDATE_BET, this._betIndex + 1);
        };

        _proto.onUpdatePositionBySetting = function onUpdatePositionBySetting() {
          if (DataStore1985.instance.isSwitchHUDSkillToLeft) {
            this.node.getComponent(Widget).isAlignLeft = true;
            this.node.getComponent(Widget).isAlignRight = false;
            this.node.getComponent(Widget).editorLeft = 65;
          } else {
            this.node.getComponent(Widget).isAlignRight = true;
            this.node.getComponent(Widget).isAlignLeft = false;
            this.node.getComponent(Widget).right = -10;
          }
        };

        _proto.setOpacity = function setOpacity(opacity) {
          this.node.getComponent(UIOpacity).opacity = opacity;
        };

        _proto.checkUpdateGunByWallet = function checkUpdateGunByWallet() {
          var config = DataStore1985.instance.getGunValue();
          var hudController = ReferenceManager1985.instance.getHUDControllerLayer();
          var wallet = hudController.getInfoUser().wallet;
          var displayWallet = wallet.getDisplayWallet();
          var realWallet = wallet.getRealWallet();

          if (displayWallet < this.BET_VALUE[this._betIndex]) {
            if (displayWallet < config[0]) {
              if (realWallet < config[0]) {
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
                this.showPopupNoMoney();
              }

              return false;
            }

            if (config[this._betIndex] >= displayWallet) {
              for (var i = this._betIndex - 1; i >= 0; --i) {
                if (config[i] <= wallet) {
                  this._betIndex = i;
                  break;
                }
              }

              this._updateBetInfo();
            }
          }

          return true;
        };

        _proto.showPopupNoMoney = function showPopupNoMoney() {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME);
        };

        return BetHandler1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sliderBet", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fullSprite", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "betLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "betArrow", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnOpenBet", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "betNodeValue", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupJackpotHistory.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfPopupBase.ts', './gfLocalize.ts', './gfBaseHistory.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, gfBaseConfig, GfPopupBase, gfLocalize, GfBaseHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "76e0epdjAJPD6DVl+YUvUni", "gfPopupJackpotHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupJackpotHistory = exports('GfPopupJackpotHistory', (_dec = ccclass('GfPopupJackpotHistory'), _dec2 = property(GfBaseHistory), _dec3 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupJackpotHistory, _GfPopupBase);

        function GfPopupJackpotHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "history", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pageIndexLabel", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopupJackpotHistory.prototype;

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          var data = this.getData();
          this.history.openPanel(data);
        };

        _proto.getData = function getData() {
          return {
            gameId: gfBaseConfig.instance.GameId,
            jpList: "GRAND",
            jpPrefix: "ktf_",
            url: "jackpothistory/fish"
          };
        };

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.hide = function hide(animStyle) {
          _GfPopupBase.prototype.hide.call(this, animStyle);

          this.history.closePanel();
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.jackpotHistory);
          this.pageIndexLabel.string = gfLocalize.instance.txtPopup.txtPageIndex;
        };

        return GfPopupJackpotHistory;
      }(GfPopupBase), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "history", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pageIndexLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBigWinWheel.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, _createClass, cclegacy, _decorator, Label, sp, warn, sys, tween, v3, Component, setOpacity, getPostionInOtherNode, gfBaseEvents, stopAllActions, gfEventEmitter, gfBaseConfig, formatCoin, removeEvents, gfReferenceManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      sp = module.sp;
      warn = module.warn;
      sys = module.sys;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      formatCoin = module.formatCoin;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "79331f9p6hCPr9MJNRIF8dW", "gfBigWinWheel", undefined);

      var SKIN_NAME = {
        WIN: "Thang",
        BIG_WIN: "Thang Lon",
        SUPER_WIN: "Thang Cuc Lon",
        MEGA_WIN: "Thang Sieu Lon"
      };
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBigWinWheel = exports('gfBigWinWheel', (_dec = ccclass('gfBigWinWheel'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfBigWinWheel, _Component);

        function gfBigWinWheel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "txtCoin", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "txtCoinOther", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spine", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_skiName", void 0);

          _defineProperty(_assertThisInitialized(_this), "tweenCoin", void 0);

          _defineProperty(_assertThisInitialized(_this), "_tweenHide", void 0);

          _defineProperty(_assertThisInitialized(_this), "_tweenHideLabel", void 0);

          _defineProperty(_assertThisInitialized(_this), "_coinValue", 0);

          _defineProperty(_assertThisInitialized(_this), "_winValue", 0);

          _defineProperty(_assertThisInitialized(_this), "_tweenRL", null);

          _defineProperty(_assertThisInitialized(_this), "_isShowing", false);

          _defineProperty(_assertThisInitialized(_this), "_duration", 2.5);

          _defineProperty(_assertThisInitialized(_this), "_ballWaiting", 0);

          _defineProperty(_assertThisInitialized(_this), "_isDragonBigWin", false);

          _defineProperty(_assertThisInitialized(_this), "_currentSkinName", '');

          _defineProperty(_assertThisInitialized(_this), "_existBoard", false);

          _defineProperty(_assertThisInitialized(_this), "lblCoin", void 0);

          _defineProperty(_assertThisInitialized(_this), "_originPos", null);

          _defineProperty(_assertThisInitialized(_this), "_animShow", "AllAppear");

          _defineProperty(_assertThisInitialized(_this), "_animIdle", "AllIdle");

          _defineProperty(_assertThisInitialized(_this), "_animHide", "AllDisappear");

          _defineProperty(_assertThisInitialized(_this), "index", -1);

          return _this;
        }

        var _proto = gfBigWinWheel.prototype;

        _proto.onLoad = function onLoad() {
          this.lblCoin = null;
          this._originPos = this.node.getPosition();
          this.initEvent();
        };

        _proto.initEvent = function initEvent() {//@TODO: split dragon ball to dedicated games
        };

        _proto.showAnimation = function showAnimation(data) {
          if (!this.node.active) {
            this.show(data);
          } else {
            this.updateData(data);
          }
        };

        _proto.show = function show(data) {
          var gold = data.gold,
              bet = data.bet,
              isMe = data.isMe;

          if (!gold) {
            warn('BigWin without Gold!!!');
            return;
          }

          this.node.active = true;
          this.reset();
          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.node.active = true;
          this._winValue += gold;

          this._tweenCoin({
            winAmount: this._winValue,
            isMe: isMe
          });

          var skinName = this.getSkinByBet(bet);

          this._playSpinAnim(skinName);
        };

        _proto.reset = function reset() {
          this.resetLabels();
          stopAllActions(this.node);
          if (!this._originPos) this._originPos = this.node.getPosition();
          this.node.position = this._originPos;
          this.node.setScale(1, 1);
          setOpacity(this.node, 255);
        };

        _proto.resetLabels = function resetLabels() {
          var arr = [this.txtCoin, this.txtCoinOther];
          arr.forEach(function (item) {
            stopAllActions(item.node);
            item.node.angle = 0;
            item.node.setScale(1, 1);
            item.node.active = false;
            item.string = "";
          });
          arr.length = 0;
        };

        _proto.getSkinByBet = function getSkinByBet(bet) {
          var skinName = SKIN_NAME.BIG_WIN;

          if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.SUPER) {
            skinName = SKIN_NAME.MEGA_WIN;
          } else if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.HUGE) {
            skinName = SKIN_NAME.SUPER_WIN;
          }

          return skinName;
        };

        _proto._playSpinAnim = function _playSpinAnim(skinName) {
          this._currentSkinName = skinName;
          this.spine.setSkin(skinName);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this.spine.setAnimation(0, this._animShow, false);
          this.spine.addAnimation(0, this._animIdle, true);
          tween(this.node).delay(0.5).call(function () {
            skinName === SKIN_NAME.MEGA_WIN ? gfEventEmitter.instance.emit(gfBaseEvents.SOUND.MEGA_WIN) : gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BIG_WIN);
          }).start();
        };

        _proto.updateData = function updateData(data) {
          var gold = data.gold,
              bet = data.bet,
              isMe = data.isMe;
          var skinName = this.getSkinByBet(bet);

          if (this.tweenCoin) {
            if (!gold) {
              warn('BigWin without Gold!!!');
              return;
            }

            if (skinName !== this._currentSkinName) {
              this._playSpinAnim(skinName);
            }

            this._winValue += gold;

            this._tweenCoin({
              winAmount: this._winValue,
              isMe: isMe
            });
          } else {
            //closing
            this.show(data);
          }
        };

        _proto.onBallEnter = function onBallEnter() {
          this.node.active = true;

          var _ReferenceManager$ins = gfReferenceManager.instance.getPlayerByIndex(this.index),
              isMe = _ReferenceManager$ins.isMe;

          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;

          this._resetTxtAngle();

          --this._ballWaiting;

          if (this._ballWaiting === 0) {
            this.spine.setAnimation(0, "RibbonAppear", false);
            this.spine.addAnimation(0, "AllIdle", true);

            this._tweenCoin({
              winAmount: this._winValue,
              isMe: isMe
            });

            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_PLAYER_BIGWIN);
          }
        };

        _proto.showDragonBalls = function showDragonBalls(_ref) {
          var winValue = _ref.winValue,
              ballCount = _ref.ballCount;
          this.node.active = true;

          if (this.tweenCoin) {
            this._coinValue = 0;
            this.tweenCoin.stop();
            var player = gfReferenceManager.instance.getPlayerByIndex(this.index);

            if (player.isMe) {
              player.addToDisplayWallet(this._winValue);
            }
          }

          var _ReferenceManager$ins2 = gfReferenceManager.instance.getPlayerByIndex(this.index),
              isMe = _ReferenceManager$ins2.isMe;

          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.reset();
          this._ballWaiting = ballCount;
          this._isDragonBigWin = true;
          var skiName = ballCount > 5 ? SKIN_NAME.MEGA_WIN : ballCount > 4 ? SKIN_NAME.SUPER_WIN : ballCount > 2 ? SKIN_NAME.BIG_WIN : SKIN_NAME.WIN;
          this.spine.setSkin(skiName);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this._winValue = winValue | 0;
          this.lblCoin.string = "";
          this.spine.setAnimation(0, "SpinnerAppear", false);
          this.spine.addAnimation(0, "SpinnerIdle", true);
        };

        _proto.showDragonBallsJackpot = function showDragonBallsJackpot(_ref2) {
          var winValue = _ref2.winValue;
          this.node.active = true;
          this.lblCoin = this.txtCoinOther;
          this.reset();
          this._skiName = SKIN_NAME.MEGA_WIN;
          this.spine.setSkin(SKIN_NAME.MEGA_WIN);

          if (sys.isNative) {
            this.spine.setToSetupPose();
          }

          this._winValue = winValue | 0;
          this.lblCoin.string = "";
          this.lblCoin.node.active = true;
          this.spine.setAnimation(0, this._animShow, false);
          this.spine.addAnimation(0, this._animIdle, true);

          this._tweenCoin({
            winAmount: this._winValue,
            isMe: false
          });
        };

        _proto._updateCoinWin = function _updateCoinWin() {
          this.lblCoin.string = formatCoin(this._coinValue);
          this.lblCoin.node.angle = 0;
        };

        _proto._tweenCoin = function _tweenCoin(data) {
          var _this2 = this;

          var winAmount = data.winAmount,
              isMe = data.isMe;

          if (this.tweenCoin) {
            this.tweenCoin.stop();

            this._resetTxtAngle();
          }

          var curCoinValue = this.coinValue;
          this.tweenCoin = tween(this).to(this._duration, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this2.coinValue = curCoinValue + ratio * (winAmount - curCoinValue);
            }
          }).call(function () {
            if (isMe) {
              _this2._tweenRL = tween(_this2.lblCoin.node).repeat(5, tween(_this2.lblCoin.node).to(0.25, {
                angle: -10
              }).to(0.25, {
                angle: 10
              }).start()).to(0.25, {
                angle: 0
              });

              _this2._tweenRL.start();
            }
          }).delay(1).call(function () {
            _this2.hideAnimation(true);
          });
          this.tweenCoin.start();
        };

        _proto._resetTxtAngle = function _resetTxtAngle() {
          this.txtCoinOther.node.angle = 0;
          this.txtCoin.node.angle = 0;

          if (this.lblCoin) {
            this.lblCoin.node.active = true;
            stopAllActions(this.lblCoin);
            this.lblCoin.node.angle = 0;
          }
        } //@TODO: REFACTOR THIS!!!!
        ;

        _proto.hideAnimation = function hideAnimation(playEffect) {
          var _this3 = this;

          if (playEffect === void 0) {
            playEffect = true;
          }

          var winValue = this._winValue;

          if (playEffect) {
            var stepMoveOut = 20;

            if (this.index > 1) {
              stepMoveOut *= -1;
            }

            var player = gfReferenceManager.instance.getPlayerByIndex(this.index);
            var endPos = this._originPos;
            if (player) endPos = getPostionInOtherNode(this.node.parent, player.gun);
            this.spine.setAnimation(0, "AllDisappear", false);

            if (this.lblCoin) {
              tween(this.lblCoin.node).to(0.25, {
                scale: v3(0, 0, 0)
              }).start();
            }

            tween(this.node).to(0.23, {
              position: v3(this.node.position.x, this.node.position.y + stepMoveOut, 0)
            }).delay(0.1).to(0.4, {
              position: endPos,
              scale: v3(0, 0, 0)
            }).call(function () {
              if (player.isMe) {
                player.addToDisplayWallet(winValue);
              }

              _this3.onFinish();
            }).start();
          } else {
            if (this.tweenCoin) {
              this.tweenCoin.stop();
            }

            if (this._ballWaiting > 0) {
              gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_PLAYER_BIGWIN);
            }

            this.onFinish();
          }
        };

        _proto.onUserExitBoard = function onUserExitBoard() {
          this._existBoard = true;
        };

        _proto.onFinish = function onFinish() {
          this.reset();
          this.node.active = false;
          this._isDragonBigWin = false;
          this._coinValue = 0;
          this._winValue = 0;
        };

        _proto.isShowingDragonBall = function isShowingDragonBall() {
          return this._isDragonBigWin;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);

          if (this.tweenCoin) {
            this.tweenCoin.stop();
          }
        };

        _createClass(gfBigWinWheel, [{
          key: "coinValue",
          get: function get() {
            return this._coinValue;
          },
          set: function set(value) {
            this._coinValue = value;

            this._updateCoinWin();
          }
        }]);

        return gfBigWinWheel;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "txtCoin", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "txtCoinOther", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadGameByPrefabs.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gameCommonUtils.ts', './gfLoadingScene.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, instantiate, Component, gameCommonUtils, gfLoadingScene;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfLoadingScene = module.gfLoadingScene;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "7a48ekGgQRHo4B2Q39iQQjS", "gfLoadGameByPrefabs", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfLoadGameByPrefab = exports('GfLoadGameByPrefab', (_dec = ccclass('GfLoadGameByPrefab'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfLoadGameByPrefab, _Component);

        function GfLoadGameByPrefab() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "persistNodeContainer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "Loading", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "Game", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "Lobby", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfLoadGameByPrefab.prototype;

        _proto.onLoad = function onLoad() {
          var loadingNode = instantiate(this.Loading);
          loadingNode.getComponent(gfLoadingScene).setGameAndLobbyPrefab(this.Game, this.Lobby, this.persistNodeContainer);
          this.node.addChild(loadingNode);
          gameCommonUtils.handleReleaseBundle();
        };

        return GfLoadGameByPrefab;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "persistNodeContainer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "Loading", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "Game", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "Lobby", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishGroupMgr1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfFishGroup13.ts', './gfFishGroup15.ts', './gfFishGroup16.ts', './gfFishGroup12.ts', './gfFishGroupMgr.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfFishGroup13, gfFishGroup15, gfFishGroup16, gfFishGroup12, gfFishGroupMgr;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfFishGroup13 = module.default;
    }, function (module) {
      gfFishGroup15 = module.default;
    }, function (module) {
      gfFishGroup16 = module.default;
    }, function (module) {
      gfFishGroup12 = module.default;
    }, function (module) {
      gfFishGroupMgr = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7a69cdXlStC4rBJRbmwr2Kd", "FishGroupMgr1988", undefined);

      var ccclass = _decorator.ccclass;
      var FishGroupMgr1988 = exports('FishGroupMgr1988', (_dec = ccclass('FishGroupMgr1988'), _dec(_class = /*#__PURE__*/function (_gfFishGroupMgr) {
        _inheritsLoose(FishGroupMgr1988, _gfFishGroupMgr);

        function FishGroupMgr1988() {
          return _gfFishGroupMgr.apply(this, arguments) || this;
        }

        var _proto = FishGroupMgr1988.prototype;

        _proto.createFishGroup1 = function createFishGroup1() {
          gfFishGroup15.create();
        };

        _proto.createFishGroup2 = function createFishGroup2() {
          gfFishGroup16.create();
        };

        _proto.createFishGroup3 = function createFishGroup3() {
          gfFishGroup12.create();
        };

        _proto.createFishGroup4 = function createFishGroup4() {
          gfFishGroup13.create();
        };

        return FishGroupMgr1988;
      }(gfFishGroupMgr)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptSavedItem.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfptDataType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Sprite, Graphics, UITransform, v3, Color, Component, Round, gfptEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Graphics = module.Graphics;
      UITransform = module.UITransform;
      v3 = module.v3;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      Round = module.Round;
      gfptEvent = module.gfptEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "7b158DFY4JNFqGiOLC79ho/", "gfptSavedItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptSavedItem = exports('GfptSavedItem', (_dec = ccclass('GfptSavedItem'), _dec2 = property(Label), _dec3 = property(Sprite), _dec4 = property(Graphics), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptSavedItem, _Component);

        function GfptSavedItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "label", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "highLight", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "graphics", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "index", 0);

          _defineProperty(_assertThisInitialized(_this), "MAX_VALUE", void 0);

          _defineProperty(_assertThisInitialized(_this), "drawBoardWidth", 0);

          _defineProperty(_assertThisInitialized(_this), "drawBoardHeight", 0);

          return _this;
        }

        var _proto = GfptSavedItem.prototype;

        _proto.setLabel = function setLabel(index, name) {
          this.index = index;
          this.label.string = name;
        };

        _proto.setHeight = function setHeight(height) {
          if (height === void 0) {
            height = 50;
          }

          this.getComponent(UITransform).height = height;
        };

        _proto.setData = function setData(exportData, MAX_VALUE, width, height) {
          if (MAX_VALUE === void 0) {
            MAX_VALUE = 0;
          }

          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }

          if (!exportData) return;
          this.MAX_VALUE = MAX_VALUE;
          this.drawBoardWidth = width;
          this.drawBoardHeight = height;

          if (this.MAX_VALUE == 0) {
            var bgNode = this.graphics.node.parent;
            var oldWidth = bgNode.getComponent(UITransform).width;
            var newWidth = bgNode.getComponent(UITransform).height * width / height;
            bgNode.setPosition(bgNode.position.x + (oldWidth - newWidth) / 2, bgNode.position.y, 0);
            bgNode.getComponent(UITransform).width = newWidth;
          }

          return;
        };

        _proto.updateBezier = function updateBezier(exportData) {
          this.graphics.clear();
          if (exportData.pts.pts1.length < 2) return;
          var yellows = exportData.pts.pts1;
          var blues = exportData.pts.pts2;
          this.graphics.circle(this.convertLogicToCoord(yellows[0].x), this.convertLogicToCoord(yellows[0].y), 3);
          this.graphics.fill();

          for (var i = 0; i < yellows.length - 1; ++i) {
            var p0 = v3(this.convertLogicToCoord(yellows[i].x), this.convertLogicToCoord(yellows[i].y), 0);
            var p1 = v3(this.convertLogicToCoord(blues[i].x), this.convertLogicToCoord(blues[i].y), 0);
            var p2 = v3(this.convertLogicToCoord(blues[i + 1].x), this.convertLogicToCoord(blues[i + 1].y), 0);
            var p3 = v3(this.convertLogicToCoord(yellows[i + 1].x), this.convertLogicToCoord(yellows[i + 1].y), 0);
            this.drawBezier(p0, p1, p2, p3);
          }

          this.graphics.close();
        };

        _proto.convertLogicToCoord = function convertLogicToCoord(y) {
          var _this$graphics$getCom = this.graphics.getComponent(UITransform),
              height = _this$graphics$getCom.height;

          if (this.MAX_VALUE > 0) {
            return Round(y * height / this.MAX_VALUE);
          }

          return Round(y * height / this.drawBoardHeight);
        };

        _proto.drawBezier = function drawBezier(p0, p1, p2, p3) {
          //symmetric point
          p2.x = 2 * p3.x - p2.x;
          p2.y = 2 * p3.y - p2.y;
          this.graphics.circle(p3.x, p3.y, 3);
          this.graphics.fill();
          this.graphics.moveTo(p0.x, p0.y);
          this.graphics.bezierCurveTo(p1.x, p1.y, p2.x, p2.y, p3.x, p3.y);
          this.graphics.stroke();
        };

        _proto.updateLinearLine = function updateLinearLine(value) {
          var _this$graphics$node$g = this.graphics.node.getComponent(UITransform),
              width = _this$graphics$node$g.width,
              height = _this$graphics$node$g.height,
              anchorX = _this$graphics$node$g.anchorX,
              anchorY = _this$graphics$node$g.anchorY;

          var pos = this.graphics.node.getPosition();
          var x0 = pos.x - width * anchorX;
          var x1 = pos.x + width * (1 - anchorX);
          var yPos = pos.y + height * (value / height - anchorY);
          this.graphics.clear();
          this.graphics.moveTo(x0, yPos);
          this.graphics.lineTo(x1, yPos);
          this.graphics.stroke();
          this.graphics.close();
        };

        _proto.onClicked = function onClicked() {
          this.node.dispatchEvent(new gfptEvent("ITEM_CLICKED", {
            index: this.index
          }));
          this.enableHighLight(true);
        };

        _proto.enableHighLight = function enableHighLight(enable) {
          if (enable === void 0) {
            enable = true;
          }

          this.highLight.color = new Color(this.highLight.color.r, this.highLight.color.g, this.highLight.color.b, enable ? 1 : 100);
        };

        return GfptSavedItem;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "highLight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "graphics", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup16.ts", ['cc', './utils.ts', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, randRange, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      randRange = module.randRange;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7b8e7KUSfRLaY7u1Cklhkf6", "gfFishGroup16", undefined);

      var gfFishGroup16 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup16() {}

        gfFishGroup16.create = function create() {
          var COUNT_FISH = {
            TOP_BOTTOM: 10,
            TOP_TOP: 5,
            TOP_TOP_SUB: 8,
            BOTTOM_BOTTOM_SUB: 8,
            BOTTOM_BOTTOM: 5,
            BOTTOM_TOP: 10
          };
          var TotalTime = 35;
          var AppSize = gfBaseConfig.instance.AppSize;
          var flip = !gfFishGroupData.isFlipped();
          var CONFIG_LINE_FISH = [{
            posYStart: !flip ? -120 : AppSize.Height + 120,
            posYEnd: !flip ? 150 : AppSize.Height - 150,
            totalFish: COUNT_FISH.TOP_BOTTOM,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 120 : -120,
            posYEnd: !flip ? AppSize.Height - 150 : 150,
            totalFish: COUNT_FISH.BOTTOM_TOP,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }, {
            posYStart: !flip ? -120 : AppSize.Height + 120,
            posYEnd: !flip ? 100 : AppSize.Height - 100,
            totalFish: COUNT_FISH.TOP_TOP,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 120 : -120,
            posYEnd: !flip ? AppSize.Height - 100 : 100,
            totalFish: COUNT_FISH.BOTTOM_BOTTOM,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }, {
            posYStart: !flip ? -120 : AppSize.Height + 120,
            posYEnd: !flip ? 100 : AppSize.Height - 100,
            totalFish: COUNT_FISH.TOP_TOP_SUB,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 120 : -120,
            posYEnd: !flip ? AppSize.Height - 100 : 100,
            totalFish: COUNT_FISH.BOTTOM_BOTTOM_SUB,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }];
          var yPos = gfBaseConfig.instance.AppSize.Height / 2;
          var left = -500;
          var right = gfBaseConfig.instance.AppSize.Width - left;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [right, -right];
            left = _ref[0];
            right = _ref[1];
          }

          var fishSpeed = 90; //Leader

          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 0.0
          });
          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos + 100),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 4.3
          });
          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 2.9
          });
          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos - 100),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 4.3
          }); //Selena

          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 6.1
          }); //Khoan  

          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos + 98),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 9.1,
            distanceTime: 1.9
          }); //Gian

          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos - 98),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 9.1,
            distanceTime: 1.9
          });
          this.createLineFishGroup({
            count: 1,
            startPos: v2(left, yPos),
            distanceTime: 0,
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 11.2
          });
          this.createLineFishGroup({
            count: 5,
            startPos: v2(left, yPos + 120),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 12.9,
            distanceTime: 1.0
          });
          this.createLineFishGroup({
            count: 5,
            startPos: v2(left, yPos),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 12.9,
            distanceTime: 1.0
          });
          this.createLineFishGroup({
            count: 5,
            startPos: v2(left, yPos - 120),
            distanceX: right,
            fishSpeed: fishSpeed,
            delayTime: 12.9,
            distanceTime: 1.0
          }); //Line fish

          for (var i = 0; i < 4; i++) {
            var config = CONFIG_LINE_FISH[i];
            this.createMiniLineFishGroup(AppSize, flip, config);
          }
        };

        gfFishGroup16.createMiniLineFishGroup = function createMiniLineFishGroup(AppSize, flip, config) {
          var offsetX = AppSize.Width / config.totalFish;
          var moveInTime = 2.0;
          var stayTime = config.totalTime;
          var moveOutTime = 3.0;

          for (var i = 0; i < config.totalFish; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var random = randRange(500, -500);
            var endPos = config.angle === 90 ? v2(random, 720) : v2(random, -720);
            var posX = flip ? (config.totalFish - i) * offsetX - offsetX / 2 : i * offsetX + offsetX / 2;
            var startPos = v2(posX, config.posYStart);
            var moveAction = new FishMoveActions(startPos, config.angle);
            var distanceY = config.posYEnd - startPos.y;
            moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: 0,
              y: distanceY
            });
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: stayTime
            });
            var timeMove = randRange(moveOutTime * 10 - 5, moveOutTime * 10) / 10;
            moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: timeMove,
              x: 0,
              y: endPos.y,
              motion: 'quartOut'
            });
            data.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        gfFishGroup16.createLineFishGroup = function createLineFishGroup(_ref2) {
          var count = _ref2.count,
              startPos = _ref2.startPos,
              distanceX = _ref2.distanceX,
              fishSpeed = _ref2.fishSpeed,
              delayTime = _ref2.delayTime,
              distanceTime = _ref2.distanceTime;

          if (!distanceTime) {
            distanceTime = 0;
          }

          var AppSize = gfBaseConfig.instance.AppSize;
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var dir = center.x > startPos.x ? 1 : -1;
          var moveInTime = Math.abs(distanceX) / fishSpeed;

          for (var i = 0; i < count; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = i * distanceTime + delayTime;
            var moveAction = new FishMoveActions(startPos);
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveInTime,
              x: distanceX + 200 * dir,
              y: 0
            });
            data.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup16;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Formation1985.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7d52f46N15ByppEl72nD4eb", "Formation1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Formation = [//formation 1:
      [{
        offx: 0,
        offy: 0,
        angle: 0,
        r: 0
      }], //formation 2:
      [{
        offx: 0,
        offy: 0,
        angle: 0,
        r: 0
      }, {
        offx: -1,
        offy: 0,
        angle: 180,
        r: 1.1
      }, {
        offx: -2,
        offy: 0,
        angle: 180,
        r: 2
      }], //formation 3:
      [{
        offx: 0,
        offy: 0,
        angle: 0,
        r: 0
      }, {
        offx: -1.1,
        offy: 0,
        angle: 180,
        r: 1.1
      }, {
        offx: -2,
        offy: 0,
        angle: 180,
        r: 2
      }, {
        offx: -3,
        offy: 0,
        angle: 180,
        r: 3
      }], //formation 4:
      [{
        offx: 0,
        offy: 0,
        angle: 0,
        r: 0
      }, {
        offx: -1.1,
        offy: 0,
        angle: 180,
        r: 1.1
      }, {
        offx: -2,
        offy: 0,
        angle: 180,
        r: 2
      }, {
        offx: -3,
        offy: 0,
        angle: 180,
        r: 3
      }, {
        offx: -4,
        offy: 0,
        angle: 180,
        r: 4
      }], //formation 5:
      [{
        offx: 0,
        offy: 0,
        angle: 0,
        r: 0
      }, {
        offx: -1.1,
        offy: 0,
        angle: 180,
        r: 1.1
      }, {
        offx: -2,
        offy: 0,
        angle: 180,
        r: 2
      }, {
        offx: -3,
        offy: 0,
        angle: 180,
        r: 3
      }, {
        offx: -4,
        offy: 0,
        angle: 180,
        r: 4
      }, {
        offx: -5,
        offy: 0,
        angle: 180,
        r: 5
      }], //formation 6:
      [{
        offx: 0,
        offy: 0,
        angle: 0,
        r: 0
      }, {
        offx: -1,
        offy: 1,
        angle: 135,
        r: 1.1
      }, {
        offx: -1,
        offy: -1,
        angle: -135,
        r: 1.1
      }], //formation 7:
      [{
        offx: 0,
        offy: 0,
        angle: 0,
        r: 0
      }, {
        offx: -1,
        offy: 1,
        angle: 135,
        r: 1.1
      }, {
        offx: -1,
        offy: -1,
        angle: -135,
        r: 1.1
      }, {
        offx: -2,
        offy: 2,
        angle: 135,
        r: 2
      }, {
        offx: -2,
        offy: -2,
        angle: -135,
        r: 2
      }], //formation 8:
      [{
        offx: 0,
        offy: 0,
        angle: 0,
        r: 0
      }, {
        offx: -1,
        offy: 1,
        angle: 135,
        r: 1.1
      }, {
        offx: -1,
        offy: 1,
        angle: -135,
        r: 1.1
      }, {
        offx: -2,
        offy: 2,
        angle: 135,
        r: 2
      }, {
        offx: -2,
        offy: -2,
        angle: -135,
        r: 2
      }, {
        offx: -3,
        offy: 3,
        angle: 135,
        r: 3
      }, {
        offx: -3,
        offy: -3,
        angle: -135,
        r: 3
      }]];
      var Formation1985 = exports('default', (_dec = ccclass('Formation1985'), _dec(_class = /*#__PURE__*/function () {
        function Formation1985() {} // i_f: id formation
        // i_d: id in formation


        Formation1985.getOffsetById = function getOffsetById(i_f, i_d) {
          i_f = i_f % Formation.length;
          i_d = i_d % Formation[i_f].length;
          return Formation[i_f][i_d];
        };

        Formation1985.getRatio = function getRatio() {
          return 10;
        };

        return Formation1985;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCustomDataType.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, cclegacy, _decorator, AnimationClip, sp, SpriteFrame, Font;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AnimationClip = module.AnimationClip;
      sp = module.sp;
      SpriteFrame = module.SpriteFrame;
      Font = module.Font;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp, _dec4, _dec5, _dec6, _class4, _class5, _descriptor3, _descriptor4, _temp2, _dec7, _dec8, _dec9, _class7, _class8, _descriptor5, _descriptor6, _temp3, _dec10, _dec11, _dec12, _class10, _class11, _descriptor7, _descriptor8, _temp4, _dec13, _dec14, _dec15, _class13, _class14, _descriptor9, _descriptor10, _temp5, _dec16, _dec17, _dec18, _class16, _class17, _descriptor11, _descriptor12, _temp6, _dec19, _dec20, _dec21, _class19, _class20, _descriptor13, _descriptor14, _temp7, _dec22, _dec23, _dec24, _class22, _class23, _descriptor15, _descriptor16, _temp8, _dec25, _dec26, _class25, _class26, _descriptor17, _descriptor18, _temp9, _dec27, _dec28, _dec29, _class28, _class29, _descriptor19, _descriptor20, _temp10, _dec30, _dec31, _dec32, _class31, _class32, _descriptor21, _descriptor22, _temp11;

      cclegacy._RF.push({}, "7e8d4aBKjZHD7Jyk/cIgLo4", "gfCustomDataType", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          string = _decorator.string;
      var gfSpriteFishAsset = exports('gfSpriteFishAsset', (_dec = ccclass('gfSpriteFishAsset'), _dec2 = property(AnimationClip), _dec3 = property({
        visible: true
      }), _dec(_class = (_class2 = (_temp = function gfSpriteFishAsset() {
        _initializerDefineProperty(this, "animation", _descriptor, this);

        _initializerDefineProperty(this, "_name", _descriptor2, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "animation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_name", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));
      var gfSpineFishAsset = exports('gfSpineFishAsset', (_dec4 = ccclass('gfSpineFishAsset'), _dec5 = property(sp.SkeletonData), _dec6 = property({
        visible: true
      }), _dec4(_class4 = (_class5 = (_temp2 = function gfSpineFishAsset() {
        _initializerDefineProperty(this, "animation", _descriptor3, this);

        _initializerDefineProperty(this, "_name", _descriptor4, this);
      }, _temp2), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "animation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "_name", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class5)) || _class4));
      var gfBulletAsset = exports('gfBulletAsset', (_dec7 = ccclass('gfBulletAsset'), _dec8 = property(SpriteFrame), _dec9 = property({
        visible: true
      }), _dec7(_class7 = (_class8 = (_temp3 = function gfBulletAsset() {
        _initializerDefineProperty(this, "sprite", _descriptor5, this);

        _initializerDefineProperty(this, "_name", _descriptor6, this);
      }, _temp3), (_descriptor5 = _applyDecoratedDescriptor(_class8.prototype, "sprite", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class8.prototype, "_name", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class8)) || _class7));
      var gfFreezeItemFXAsset = exports('gfFreezeItemFXAsset', (_dec10 = ccclass('gfFreezeItemFXAsset'), _dec11 = property(AnimationClip), _dec12 = property({
        visible: true
      }), _dec10(_class10 = (_class11 = (_temp4 = function gfFreezeItemFXAsset() {
        _initializerDefineProperty(this, "animation", _descriptor7, this);

        _initializerDefineProperty(this, "_name", _descriptor8, this);
      }, _temp4), (_descriptor7 = _applyDecoratedDescriptor(_class11.prototype, "animation", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor8 = _applyDecoratedDescriptor(_class11.prototype, "_name", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class11)) || _class10));
      var gfNetFXAsset = exports('gfNetFXAsset', (_dec13 = ccclass('gfNetFXAsset'), _dec14 = property(sp.SkeletonData), _dec15 = property({
        visible: true
      }), _dec13(_class13 = (_class14 = (_temp5 = function gfNetFXAsset() {
        _initializerDefineProperty(this, "animation", _descriptor9, this);

        _initializerDefineProperty(this, "_name", _descriptor10, this);
      }, _temp5), (_descriptor9 = _applyDecoratedDescriptor(_class14.prototype, "animation", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor10 = _applyDecoratedDescriptor(_class14.prototype, "_name", [_dec15], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class14)) || _class13));
      var gfCoinAsset = exports('gfCoinAsset', (_dec16 = ccclass('gfCoinAsset'), _dec17 = property(AnimationClip), _dec18 = property({
        visible: true
      }), _dec16(_class16 = (_class17 = (_temp6 = function gfCoinAsset() {
        _initializerDefineProperty(this, "animation", _descriptor11, this);

        _initializerDefineProperty(this, "_name", _descriptor12, this);
      }, _temp6), (_descriptor11 = _applyDecoratedDescriptor(_class17.prototype, "animation", [_dec17], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor12 = _applyDecoratedDescriptor(_class17.prototype, "_name", [_dec18], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class17)) || _class16));
      var gfDragonBallAsset = exports('gfDragonBallAsset', (_dec19 = ccclass('gfDragonBallAsset'), _dec20 = property(SpriteFrame), _dec21 = property({
        visible: true
      }), _dec19(_class19 = (_class20 = (_temp7 = function gfDragonBallAsset() {
        _initializerDefineProperty(this, "sprite", _descriptor13, this);

        _initializerDefineProperty(this, "_name", _descriptor14, this);
      }, _temp7), (_descriptor13 = _applyDecoratedDescriptor(_class20.prototype, "sprite", [_dec20], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor14 = _applyDecoratedDescriptor(_class20.prototype, "_name", [_dec21], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class20)) || _class19));
      var gfLabelCoinAsset = exports('gfLabelCoinAsset', (_dec22 = ccclass('gfLabelCoinAsset'), _dec23 = property(Font), _dec24 = property({
        visible: true
      }), _dec22(_class22 = (_class23 = (_temp8 = function gfLabelCoinAsset() {
        _initializerDefineProperty(this, "font", _descriptor15, this);

        _initializerDefineProperty(this, "_name", _descriptor16, this);
      }, _temp8), (_descriptor15 = _applyDecoratedDescriptor(_class23.prototype, "font", [_dec23], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor16 = _applyDecoratedDescriptor(_class23.prototype, "_name", [_dec24], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class23)) || _class22));
      var gfJackpotStatic = exports('gfJackpotStatic', (_dec25 = ccclass('gfJackpotStatic'), _dec26 = property(SpriteFrame), _dec25(_class25 = (_class26 = (_temp9 = function gfJackpotStatic() {
        _initializerDefineProperty(this, "name", _descriptor17, this);

        _initializerDefineProperty(this, "static", _descriptor18, this);
      }, _temp9), (_descriptor17 = _applyDecoratedDescriptor(_class26.prototype, "name", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor18 = _applyDecoratedDescriptor(_class26.prototype, "static", [_dec26], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class26)) || _class25));
      var gfGunSkeletonData = exports('gfGunSkeletonData', (_dec27 = ccclass('gfGunSkeletonData'), _dec28 = property({
        visible: true
      }), _dec29 = property(sp.SkeletonData), _dec27(_class28 = (_class29 = (_temp10 = function gfGunSkeletonData() {
        _initializerDefineProperty(this, "_name", _descriptor19, this);

        _initializerDefineProperty(this, "animation", _descriptor20, this);
      }, _temp10), (_descriptor19 = _applyDecoratedDescriptor(_class29.prototype, "_name", [_dec28], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor20 = _applyDecoratedDescriptor(_class29.prototype, "animation", [_dec29], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class29)) || _class28));
      var EnvObjectAsset = exports('EnvObjectAsset', (_dec30 = ccclass('EnvObjectAsset'), _dec31 = property({
        visible: true
      }), _dec32 = property(SpriteFrame), _dec30(_class31 = (_class32 = (_temp11 = function EnvObjectAsset() {
        _initializerDefineProperty(this, "_name", _descriptor21, this);

        _initializerDefineProperty(this, "sprite", _descriptor22, this);
      }, _temp11), (_descriptor21 = _applyDecoratedDescriptor(_class32.prototype, "_name", [_dec31], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor22 = _applyDecoratedDescriptor(_class32.prototype, "sprite", [_dec32], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class32)) || _class31));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/deduplicate.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './queue-fifo.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, Queue;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Queue = module.Queue;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7f83c20UP9P8a82JYkL4Hcq", "deduplicate", undefined);

      var Duplicate = exports('Duplicate', /*#__PURE__*/function () {
        function Duplicate(maxSize) {
          if (maxSize === void 0) {
            maxSize = 1000;
          }

          _defineProperty(this, "maxSize", 1000);

          _defineProperty(this, "queue", void 0);

          _defineProperty(this, "hashMap", void 0);

          this.maxSize = maxSize;
          this.queue = new Queue(maxSize);
          this.hashMap = new HashMap();
        }

        var _proto = Duplicate.prototype;

        _proto.insert = function insert(element) {
          if (this.queue.size() >= this.maxSize) {
            this.hashMap["delete"](this.queue.dequeue());
          }

          this.queue.enqueue(element);
          this.hashMap.set(element, true);
        };

        _proto.exists = function exists(element) {
          return this.hashMap.has(element);
        };

        _proto.clearAll = function clearAll() {
          this.queue.clear();
          this.hashMap.clear();
        };

        return Duplicate;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseCellHistory.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, Label, Component, formatMoney, addZero, formatUserName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
      addZero = module.addZero;
    }, function (module) {
      formatUserName = module.formatUserName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "80122TukRxO4YAoD+vE5lcq", "gfBaseCellHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBaseCellHistory = exports('GfBaseCellHistory', (_dec = ccclass('GfBaseCellHistory'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBaseCellHistory, _Component);

        function GfBaseCellHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "time", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "account", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bet", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "winAmount", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "height", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfBaseCellHistory.prototype;

        _proto.onLoad = function onLoad() {
          this.node.getComponent(UITransform).height = this.height;
        };

        _proto.updateData = function updateData(data) {
          if (!data) return;
          this.time.getComponent(Label).string = this.formatTimeStamp(data.time);
          this.account.getComponent(Label).string = formatUserName(data.dn);
          this.bet.getComponent(Label).string = formatMoney(data.betAmt);
          this.winAmount.getComponent(Label).string = formatMoney(data.jpAmt);
        };

        _proto.formatTimeStamp = function formatTimeStamp(ts) {
          var d = new Date(ts);
          var h = addZero(d.getHours());
          var m = addZero(d.getMinutes());
          var s = addZero(d.getSeconds());
          var t = addZero(d.getDate()) + '/' + addZero(d.getMonth() + 1) + '/' + d.getFullYear() + ' ' + h + ':' + m + ':' + s;
          return t;
        };

        _proto.formatTimeStampNew = function formatTimeStampNew(data) {
          var date = new Date(data);
          var year = date.getFullYear() + 1900;
          var month = "0" + date.getMonth() + 1;
          var day = "0" + date.getUTCDate();
          var hours = date.getHours();
          var minutes = "0" + date.getMinutes();
          var seconds = "0" + date.getSeconds();
          var formattedTime = day.substr(-2) + "/" + month.substr(-2) + "/" + year + " " + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
          return formattedTime;
        };

        return GfBaseCellHistory;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "time", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "account", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bet", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "height", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 50;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Chip1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfUtilities.ts', './Config1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, v3, tween, UIOpacity, isValid, warn, Sprite, sp, Component, setOpacity, getRandomInt, fadeOut, stopAllActions, isPointInScreen, Config1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      v3 = module.v3;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      isValid = module.isValid;
      warn = module.warn;
      Sprite = module.Sprite;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      fadeOut = module.fadeOut;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      isPointInScreen = module.isPointInScreen;
    }, function (module) {
      Config1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "808e5LRUJ9MDKHo5zAh4cXK", "Chip1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ANIM_EFFECT_DROP_CHIP_OTHER_PLAYER = "Chip_Xanh";
      var ANIM_EFFECT_DROP_CHIP_MY_PLAYER = "Chip_Cam";
      var Chip1988 = exports('Chip1988', (_dec = ccclass('Chip1988'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(SpriteFrame), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Chip1988, _Component);

        function Chip1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeMain", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectDropChip", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "arrSpriteFrameChip", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = Chip1988.prototype;

        _proto.onLoad = function onLoad() {
          this.node['onChipFlyToPlayer'] = this.onChipFlyToPlayer.bind(this);
        };

        _proto.onChipFlyToPlayer = function onChipFlyToPlayer(pos, index, isMe, callback) {
          var _this2 = this;

          if (isMe === void 0) {
            isMe = false;
          }

          this.nodeMain.active = true;
          this.nodeMain.scale.set(v3(0));
          this.effectDropChip.active = true;
          setOpacity(this.effectDropChip, 0);
          this.effectDropChip.scale.set(v3(0, 0, 1));
          this.setupSpriteChip(isMe);
          this.setupAnimEffectDropChip(isMe);
          var appearTime = 0.25;
          var moveTime = 0.5;
          var standTime = 0.75;
          var dest = this.calculateMovePoint();
          var tweenEffect = tween(this.effectDropChip).to(appearTime, {
            scale: v3(1.2, 1.2, 1)
          });
          var tweenEffect1 = tween(this.effectDropChip.getComponent(UIOpacity)).to(appearTime, {
            opacity: 255
          });
          var tweenMainItem = tween(this.nodeMain).to(appearTime, {
            scale: v3(1, 1, 1)
          });
          var tweenEffect2 = tween(this.effectDropChip).to(moveTime, {
            scale: v3(1.2, 1.2, 1)
          });
          var tweenMainItem2 = tween(this.nodeMain).to(moveTime, {
            scale: v3(1.5, 1.5, 1)
          });
          tweenEffect.start();
          tweenEffect1.start();
          tweenMainItem.start();
          tween(this.node).to(appearTime, {
            position: dest
          }).delay(standTime).call(function () {
            tweenEffect2.start();
            tweenMainItem2.start();
          }).delay(index * 0.25).to(moveTime, {
            position: pos,
            scale: v3(0.3, 0.3, 1)
          }, {
            easing: "cubicOut"
          }).then(fadeOut(0.5)).removeSelf().call(function () {
            callback && callback();
            if (isValid(_this2.node)) _this2.node.destroy();
          }).start();
        };

        _proto.setupSpriteChip = function setupSpriteChip(isMe) {
          var spriteFrame = isMe ? this.arrSpriteFrameChip[0] : this.arrSpriteFrameChip[1];

          if (!spriteFrame) {
            warn("Chip1988 setSpriteChip can not find spriteFrame, maybr missing data in prefab");
            return;
          }

          this.nodeMain.getComponent(Sprite).spriteFrame = spriteFrame;
        };

        _proto.setupAnimEffectDropChip = function setupAnimEffectDropChip(isMe) {
          var spine = this.effectDropChip.getComponent(sp.Skeleton);
          var animationName = isMe ? ANIM_EFFECT_DROP_CHIP_MY_PLAYER : ANIM_EFFECT_DROP_CHIP_OTHER_PLAYER;
          spine.setAnimation(0, animationName, true);
        };

        _proto.calculateMovePoint = function calculateMovePoint() {
          var x = this.node.position.x;
          var y = this.node.position.y;
          var pos = v3(this.node.position.x, Config1988.instance.AppSize.Height / 2, 1);

          while (!isPointInScreen(pos)) {
            pos.x = pos.x < Config1988.instance.AppSize.Width / 2 ? pos.x + 150 : pos.x - 150;
          }

          x = pos.x;
          pos = v3(Config1988.instance.AppSize.Width / 2, this.node.position.y);

          while (!isPointInScreen(pos)) {
            pos.y = pos.y < Config1988.instance.AppSize.Height / 2 ? pos.y + 150 : pos.y - 150;
          }

          var randX = getRandomInt(-100, 100);
          var randY = getRandomInt(-100, 100);
          randX = randX >= 0 ? randX + 100 : randX - 100;
          randY = randY >= 0 ? randY + 100 : randY - 100;
          return v3(x + randX, y + randY, 1);
        };

        _proto.onStopAllActions = function onStopAllActions() {
          stopAllActions(this.node);
          stopAllActions(this.effectDropChip);
          stopAllActions(this.nodeMain);
        };

        _proto.onDestroy = function onDestroy() {
          this.onStopAllActions();
        };

        return Chip1988;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeMain", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "effectDropChip", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "arrSpriteFrameChip", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/md5.ts", ['cc', './crypto-core.ts'], function () {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "81536ybHJVDSYQVBRQE319w", "md5", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Constants table

      var T = []; // Compute constants

      (function () {
        for (var i = 0; i < 64; i++) {
          T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
        }
      })();
      /**
       * MD5 hash algorithm.
       */


      var MD5 = C_algo.MD5 = Hasher.extend({
        _doReset: function _doReset() {
          this._hash = new WordArray.init([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]);
        },
        _doProcessBlock: function _doProcessBlock(M, offset) {
          // Swap endian
          for (var i = 0; i < 16; i++) {
            // Shortcuts
            var offset_i = offset + i;
            var M_offset_i = M[offset_i];
            M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
          } // Shortcuts


          var H = this._hash.words;
          var M_offset_0 = M[offset + 0];
          var M_offset_1 = M[offset + 1];
          var M_offset_2 = M[offset + 2];
          var M_offset_3 = M[offset + 3];
          var M_offset_4 = M[offset + 4];
          var M_offset_5 = M[offset + 5];
          var M_offset_6 = M[offset + 6];
          var M_offset_7 = M[offset + 7];
          var M_offset_8 = M[offset + 8];
          var M_offset_9 = M[offset + 9];
          var M_offset_10 = M[offset + 10];
          var M_offset_11 = M[offset + 11];
          var M_offset_12 = M[offset + 12];
          var M_offset_13 = M[offset + 13];
          var M_offset_14 = M[offset + 14];
          var M_offset_15 = M[offset + 15]; // Working varialbes

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3]; // Computation

          a = FF(a, b, c, d, M_offset_0, 7, T[0]);
          d = FF(d, a, b, c, M_offset_1, 12, T[1]);
          c = FF(c, d, a, b, M_offset_2, 17, T[2]);
          b = FF(b, c, d, a, M_offset_3, 22, T[3]);
          a = FF(a, b, c, d, M_offset_4, 7, T[4]);
          d = FF(d, a, b, c, M_offset_5, 12, T[5]);
          c = FF(c, d, a, b, M_offset_6, 17, T[6]);
          b = FF(b, c, d, a, M_offset_7, 22, T[7]);
          a = FF(a, b, c, d, M_offset_8, 7, T[8]);
          d = FF(d, a, b, c, M_offset_9, 12, T[9]);
          c = FF(c, d, a, b, M_offset_10, 17, T[10]);
          b = FF(b, c, d, a, M_offset_11, 22, T[11]);
          a = FF(a, b, c, d, M_offset_12, 7, T[12]);
          d = FF(d, a, b, c, M_offset_13, 12, T[13]);
          c = FF(c, d, a, b, M_offset_14, 17, T[14]);
          b = FF(b, c, d, a, M_offset_15, 22, T[15]);
          a = GG(a, b, c, d, M_offset_1, 5, T[16]);
          d = GG(d, a, b, c, M_offset_6, 9, T[17]);
          c = GG(c, d, a, b, M_offset_11, 14, T[18]);
          b = GG(b, c, d, a, M_offset_0, 20, T[19]);
          a = GG(a, b, c, d, M_offset_5, 5, T[20]);
          d = GG(d, a, b, c, M_offset_10, 9, T[21]);
          c = GG(c, d, a, b, M_offset_15, 14, T[22]);
          b = GG(b, c, d, a, M_offset_4, 20, T[23]);
          a = GG(a, b, c, d, M_offset_9, 5, T[24]);
          d = GG(d, a, b, c, M_offset_14, 9, T[25]);
          c = GG(c, d, a, b, M_offset_3, 14, T[26]);
          b = GG(b, c, d, a, M_offset_8, 20, T[27]);
          a = GG(a, b, c, d, M_offset_13, 5, T[28]);
          d = GG(d, a, b, c, M_offset_2, 9, T[29]);
          c = GG(c, d, a, b, M_offset_7, 14, T[30]);
          b = GG(b, c, d, a, M_offset_12, 20, T[31]);
          a = HH(a, b, c, d, M_offset_5, 4, T[32]);
          d = HH(d, a, b, c, M_offset_8, 11, T[33]);
          c = HH(c, d, a, b, M_offset_11, 16, T[34]);
          b = HH(b, c, d, a, M_offset_14, 23, T[35]);
          a = HH(a, b, c, d, M_offset_1, 4, T[36]);
          d = HH(d, a, b, c, M_offset_4, 11, T[37]);
          c = HH(c, d, a, b, M_offset_7, 16, T[38]);
          b = HH(b, c, d, a, M_offset_10, 23, T[39]);
          a = HH(a, b, c, d, M_offset_13, 4, T[40]);
          d = HH(d, a, b, c, M_offset_0, 11, T[41]);
          c = HH(c, d, a, b, M_offset_3, 16, T[42]);
          b = HH(b, c, d, a, M_offset_6, 23, T[43]);
          a = HH(a, b, c, d, M_offset_9, 4, T[44]);
          d = HH(d, a, b, c, M_offset_12, 11, T[45]);
          c = HH(c, d, a, b, M_offset_15, 16, T[46]);
          b = HH(b, c, d, a, M_offset_2, 23, T[47]);
          a = II(a, b, c, d, M_offset_0, 6, T[48]);
          d = II(d, a, b, c, M_offset_7, 10, T[49]);
          c = II(c, d, a, b, M_offset_14, 15, T[50]);
          b = II(b, c, d, a, M_offset_5, 21, T[51]);
          a = II(a, b, c, d, M_offset_12, 6, T[52]);
          d = II(d, a, b, c, M_offset_3, 10, T[53]);
          c = II(c, d, a, b, M_offset_10, 15, T[54]);
          b = II(b, c, d, a, M_offset_1, 21, T[55]);
          a = II(a, b, c, d, M_offset_8, 6, T[56]);
          d = II(d, a, b, c, M_offset_15, 10, T[57]);
          c = II(c, d, a, b, M_offset_6, 15, T[58]);
          b = II(b, c, d, a, M_offset_13, 21, T[59]);
          a = II(a, b, c, d, M_offset_4, 6, T[60]);
          d = II(d, a, b, c, M_offset_11, 10, T[61]);
          c = II(c, d, a, b, M_offset_2, 15, T[62]);
          b = II(b, c, d, a, M_offset_9, 21, T[63]); // Intermediate hash value

          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
        },
        _doFinalize: function _doFinalize() {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
          var nBitsTotalL = nBitsTotal;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;
          data.sigBytes = (dataWords.length + 1) * 4; // Hash final blocks

          this._process(); // Shortcuts


          var hash = this._hash;
          var H = hash.words; // Swap endian

          for (var i = 0; i < 4; i++) {
            // Shortcut
            var H_i = H[i];
            H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
          } // Return final computed hash


          return hash;
        },
        clone: function clone() {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      });

      function FF(a, b, c, d, x, s, t) {
        var n = a + (b & c | ~b & d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function GG(a, b, c, d, x, s, t) {
        var n = a + (b & d | c & ~d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function HH(a, b, c, d, x, s, t) {
        var n = a + (b ^ c ^ d) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }

      function II(a, b, c, d, x, s, t) {
        var n = a + (c ^ (b | ~d)) + x + t;
        return (n << s | n >>> 32 - s) + b;
      }
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.MD5('message');
       *     var hash = CryptoJS.MD5(wordArray);
       */


      C.MD5 = Hasher._createHelper(MD5);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacMD5(message, key);
       */

      C.HmacMD5 = Hasher._createHmacHelper(MD5);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimUtils.ts", ['cc', './utils.ts'], function (exports) {
  'use strict';

  var cclegacy, UIOpacity, tween, formatMoney;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
    }, function (module) {
      formatMoney = module.formatMoney;
    }],
    execute: function () {
      exports({
        fadeIn: fadeIn,
        fadeOut: fadeOut,
        fadeTo: fadeTo,
        getOpacity: getOpacity,
        setOpacity: setOpacity,
        tweenMoney: tweenMoney
      });

      cclegacy._RF.push({}, "815ccOKTWNAjKVvmajqY+tC", "AnimUtils", undefined);

      function fadeTo(target, duration, opacity, options) {
        var uiOpacity = target.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = target.addComponent(UIOpacity);
        var tweenFade = tween(uiOpacity);
        tweenFade.to(duration, {
          opacity: opacity
        }, options).start();
        target.tweenFade = tweenFade;
        return tweenFade;
      }

      function fadeIn(target, duration, options) {
        return fadeTo(target, duration, 255, options);
      }

      function fadeOut(target, duration, options) {
        return fadeTo(target, duration, 0, options);
      }

      function getOpacity(node) {
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        return uiOpacity.opacity;
      }

      function setOpacity(node, opacity) {
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        uiOpacity.opacity = opacity;
      }

      function tweenMoney(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value));
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoveToPlayer1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfUtilities.ts', './ReferenceManager1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, tween, UITransform, v3, misc, v2, Tween, Animation, Component, getDistance, getRandomInt, fadeIn, moveTo, call, getRotation, ReferenceManager1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      UITransform = module.UITransform;
      v3 = module.v3;
      misc = module.misc;
      v2 = module.v2;
      Tween = module.Tween;
      Animation = module.Animation;
      Component = module.Component;
    }, function (module) {
      getDistance = module.getDistance;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      fadeIn = module.fadeIn;
      moveTo = module.moveTo;
      call = module.call;
    }, function (module) {
      getRotation = module.getRotation;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "8208b+2lmdGgrQfnC/YSHmk", "MoveToPlayer1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SPEED_COIN_FLY = 950;
      var DISTANCE_CAN_FORCE_FLY = 300;
      var DISTANCE_FINAL = 50;
      var TIME_WAIT = 2;
      var MoveToPlayer1985 = exports('MoveToPlayer1985', (_dec = ccclass('MoveToPlayer1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MoveToPlayer1985, _Component);

        function MoveToPlayer1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_ship", null);

          _defineProperty(_assertThisInitialized(_this), "_isCanFly", false);

          _defineProperty(_assertThisInitialized(_this), "_scheduleFlyToPlayer", null);

          _defineProperty(_assertThisInitialized(_this), "_vectorX", null);

          _defineProperty(_assertThisInitialized(_this), "_vectorY", null);

          _defineProperty(_assertThisInitialized(_this), "_canForceFly", false);

          return _this;
        }

        var _proto = MoveToPlayer1985.prototype;

        _proto.setFlyToPlayer = function setFlyToPlayer(index, deskStation) {
          var _this2 = this;

          this._ship = ReferenceManager1985.instance.getPlayerByDeskStation(deskStation);
          var xRandom = this.getRandomPosXDrop(index);
          var yRandom = this.getRandomPosYDrop(index);
          var action = tween(this.node);
          action.then(fadeIn(0.01));
          action.then(moveTo(0.175, this.node.position.x + xRandom / 2, this.node.position.y + 100, this.node.position.z));
          action.then(call(function () {
            _this2.playSoundDrop();
          }));
          action.then(moveTo(0.5, this.node.position.x + xRandom, this.node.position.y + yRandom, this.node.position.z, 'bounceOut'));
          action.then(call(function () {
            _this2._canForceFly = true;
          }));
          action.delay(0.15 + 0.05 * index + TIME_WAIT);
          action.then(call(function () {
            _this2._isCanFly = true;
          }));
          action.start();
        };

        _proto.calculatorsVector = function calculatorsVector() {
          var startPos = this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0));

          var endPos = this._ship.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0));

          var angle = getRotation(endPos, startPos);
          this._vectorX = Math.cos(misc.degreesToRadians(angle));
          this._vectorY = Math.sin(misc.degreesToRadians(angle));
        };

        _proto.update = function update(dt) {
          var coinPos = this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0));

          var shipPos = this._ship.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0));

          var distance = getDistance(v2(coinPos.x, coinPos.y), v2(shipPos.x, shipPos.y));

          if (!this._isCanFly) {
            if (distance <= DISTANCE_CAN_FORCE_FLY && this._canForceFly) {
              Tween.stopAllByTarget(this.node);
              this._isCanFly = true;
            }
          } else if (distance <= DISTANCE_FINAL) {
            this.onFinish();
          } else {
            this.calculatorsVector();
            var delta = dt * SPEED_COIN_FLY;
            var x = this.node.position.x,
                y = this.node.position.y;
            x += this._vectorX * delta;
            y += this._vectorY * delta;
            this.node.setPosition(x, y, 0);
          }
        };

        _proto.playSoundDrop = function playSoundDrop() {//@TODO overwrite
        };

        _proto.playSoundPick = function playSoundPick() {//@TODO overwrite
        };

        _proto.onFinish = function onFinish() {
          this.onComplete();
          var animation = this.node.getComponent(Animation);

          if (animation) {
            animation.stop();
          }

          this.playSoundPick();
          this.node.removeFromParent();
          this.node.destroy();
        };

        _proto.onComplete = function onComplete() {//@TODO overwrite
        };

        _proto.getRandomPosXDrop = function getRandomPosXDrop(index) {
          if (index === void 0) {
            index = 0;
          }

          return index % 2 === 0 ? 15 + Math.random() * 5 : -(5 + Math.random() * 15);
        };

        _proto.getRandomPosYDrop = function getRandomPosYDrop(index) {
          if (index === void 0) {
            index = 0;
          }

          return index % 2 === 0 ? getRandomInt(-5, 5) * 7.5 - 50 : getRandomInt(-5, 5) * 7.5 + 50;
        };

        return MoveToPlayer1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyDev.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Node, _decorator, director, Component, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      director = module.director;
      Component = module.Component;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "82220qRjXFBT5RKRiUWVVoZ", "LobbyDev", undefined);

      var _cc$_decorator = _decorator,
          ccclass = _cc$_decorator.ccclass,
          property = _cc$_decorator.property;
      var LobbyDev = exports('LobbyDev', (_dec = ccclass('LobbyDev'), _dec2 = property({
        displayName: "List Game",
        type: Node
      }), _dec3 = property({
        displayName: "Login",
        type: Node
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_cc$Component) {
        _inheritsLoose(LobbyDev, _cc$Component);

        function LobbyDev() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _cc$Component.call.apply(_cc$Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listGame", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnLogin", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LobbyDev.prototype;

        _proto.onLoad = function onLoad() {
          this._bindEvents();
        };

        _proto.start = function start() {// [3]
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto._bindEvents = function _bindEvents() {
          var arrView = this.listGame.children;
          var length = arrView.length;

          var _loop = function _loop(i) {
            var view = arrView[i];
            view.off("click");
            view.on("click", function (event) {
              var sceneName = view.name;
              director.loadScene(sceneName);
            });
          };

          for (var i = 0; i < length; i++) {
            _loop(i);
          }

          if (this.btnLogin) {
            this.btnLogin.off('click');
            this.btnLogin.on('click', function () {
              var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
                  LOGIN_SCENE_NAME = _loadConfigAsync$getC.LOGIN_SCENE_NAME;

              if (LOGIN_SCENE_NAME) {
                director.loadScene(LOGIN_SCENE_NAME);
              }
            });
          }
        };

        return LobbyDev;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listGame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnLogin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineFish1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfSpineFish.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './PoolManager1988.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Collider2D, Contact2DType, BoxCollider2D, tween, UITransform, v3, ParticleSystem2D, Tween, setOpacity, gfBaseEvents, v3f, stopAllActions, delay, fadeOut, scaleTo, call, gfMoveByDistance, gfEventEmitter, gfSpineFish, EventCode, DataStore1988, Config1988, PoolManager1988;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      BoxCollider2D = module.BoxCollider2D;
      tween = module.tween;
      UITransform = module.UITransform;
      v3 = module.v3;
      ParticleSystem2D = module.ParticleSystem2D;
      Tween = module.Tween;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      v3f = module.v3f;
      stopAllActions = module.stopAllActions;
      delay = module.delay;
      fadeOut = module.fadeOut;
      scaleTo = module.scaleTo;
      call = module.call;
      gfMoveByDistance = module.gfMoveByDistance;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfSpineFish = module.gfSpineFish;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      PoolManager1988 = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "823d2FMY5dBxLSEbBzwP2tp", "SpineFish1988", undefined);

      var COLLIDER_POISON_TAG = 1001;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineFish1988 = exports('SpineFish1988', (_dec = ccclass('SpineFish1988'), _dec(_class = (_temp = /*#__PURE__*/function (_gfSpineFish) {
        _inheritsLoose(SpineFish1988, _gfSpineFish);

        function SpineFish1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfSpineFish.call.apply(_gfSpineFish, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "poisonEffect", null);

          _defineProperty(_assertThisInitialized(_this), "_isFake", false);

          return _this;
        }

        var _proto = SpineFish1988.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        };

        _proto.initFishData = function initFishData(data) {
          _gfSpineFish.prototype.initFishData.call(this, data);

          this._isFake = data.isFake;
          var FISH_KIND = Config1988.instance.FISH_KIND;

          if (this.getKind() === FISH_KIND.BOMB || DataStore1988.instance.isPlayingPoison) {
            this.playPoisonEffect();
          }
        };

        _proto.playPoisonEffect = function playPoisonEffect() {
          if (this.checkDie() || this.poisonEffect) return;
          this.poisonEffect = PoolManager1988.instance.getPoisonEffect();
          this.poisonEffect.node.setScale(v3f(Math.min(1.0, this.node.getComponent(BoxCollider2D).size.width / 90)));
          this.updatePoisonPosition();
        };

        _proto.updatePoisonPosition = function updatePoisonPosition() {
          var point = this.convertToRelativePoint(this._targetPoint);
          this.poisonEffect.node.setPosition(point.x, point.y, 0);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other) {
          if (other.tag == COLLIDER_POISON_TAG) {
            this.playPoisonEffect();
          }
        };

        _proto.update = function update(dt) {
          _gfSpineFish.prototype.update.call(this, dt);

          if (this.poisonEffect) {
            this.updatePoisonPosition();
          }
        };

        _proto.onPlayEffectWinInCatchFish = function onPlayEffectWinInCatchFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
            data: data,
            fishKind: this.getKind(),
            fishPos: this.getLockPositionByWorldSpace()
          });
        };

        _proto.onCatch = function onCatch(data) {
          var _this2 = this; //super.onCatch(data);


          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.processItemInCatchFish(data);
          this.onPlayEffectWinInCatchFish(data);
          stopAllActions(this.node);
          this.resetColor();
          this.setDie(true);
          this.playEffectDie();
          var listAction = tween(this.node);

          if (this.getKind() === Config1988.instance.FISH_KIND.BOMB) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.TRIGGER_BOMB, this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 1)));
            listAction.then(delay(0.3));
            listAction.call(function () {
              tween(_this2.fishAnim.node).then(fadeOut(0.3)).start();
            });
            listAction.then(fadeOut(0.3));
          } else if (data.SkillID === Config1988.instance.SkillConfig.DRILL) {
            if (data.DeskStation === DataStore1988.instance.getSelfDeskStation()) {
              DataStore1988.instance.setSelfInfo({
                isLockGun: true,
                skillLock: true,
                currentSkillID: Config1988.instance.SkillConfig.DRILL
              });
              DataStore1988.instance.saveCurrentTarget();
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, data.DeskStation);
            }

            gfEventEmitter.instance.emit(EventCode.EFFECT_LAYER.DROP_GUN_DRILL, {
              fishPos: this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 1)),
              deskStation: data.DeskStation
            });
            listAction.then(delay(0.5));
            listAction.then(scaleTo(0.2, 0, 0));
          } else if (data.SkillID === Config1988.instance.SkillConfig.LASER) {
            if (data.DeskStation === DataStore1988.instance.getSelfDeskStation()) {
              DataStore1988.instance.setSelfInfo({
                isLockGun: true,
                skillLock: true,
                currentSkillID: Config1988.instance.SkillConfig.LASER
              });
              DataStore1988.instance.saveCurrentTarget();
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, data.DeskStation);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, {
              fishPos: this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 1)),
              deskStation: data.DeskStation
            });
            listAction.then(delay(0.5));
            listAction.then(scaleTo(0.2, 0, 0));
          } else if (data.isSkill && data.skillID == Config1988.instance.FISH_KIND.BOMB) {
            listAction.then(tween().call(function () {
              _this2.changeAnimationSpeed(6);
            }));
            listAction.then(delay(0.5));
            listAction.then(call(function () {
              if (_this2.poisonEffect) {
                _this2.poisonEffect.getComponent(ParticleSystem2D).emissionRate = 0;
              }
            }));
            listAction.then(scaleTo(1, 0));
          } else {
            listAction.then(delay(1));
            listAction.call(function () {
              tween(_this2.fishAnim.node).then(fadeOut(0.5)).start();
            });
            listAction.then(fadeOut(0.5));
          }

          listAction.then(call(function () {
            _this2.onDie();
          }));
          listAction.start();
        };

        _proto.isAvailable = function isAvailable() {
          return !this.checkDie() && !this.checkOutScene() && !this.isFake();
        };

        _proto.isFake = function isFake() {
          return this._isFake;
        };

        _proto.moveOut = function moveOut(delayTime) {
          var _this3 = this;

          if (!delayTime) {
            delayTime = 0.0;
          }

          if (this.checkDie()) return;

          if (this.checkOutScene()) {
            this.onDie();
            return;
          }

          tween(this.node).delay(delayTime).then(gfMoveByDistance(8, Config1988.instance.AppSize.Width * 1.5)).call(function () {
            _this3.onDie();
          }).start();
        };

        _proto.unuse = function unuse() {
          _gfSpineFish.prototype.unuse.call(this);

          Tween.stopAllByTarget(this.fishAnim.node);
          setOpacity(this.fishAnim.node, 255);

          if (this.poisonEffect) {
            this.poisonEffect.returnPool();
            this.poisonEffect = null;
          }
        };

        return SpineFish1988;
      }(gfSpineFish), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EV1FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, misc, UITransform, v3, getRotation, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      misc = module.misc;
      UITransform = module.UITransform;
      v3 = module.v3;
    }, function (module) {
      getRotation = module.getRotation;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "824212DioBHtKRFeyD2Kw7P", "EV1FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EV1FireBullet = exports('EV1FireBullet', (_dec = ccclass('EV1FireBullet'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(EV1FireBullet, _EnemyFireBullet);

        function EV1FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "gun", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "target", null);

          _defineProperty(_assertThisInitialized(_this), "timeStopRotate", 0);

          _defineProperty(_assertThisInitialized(_this), "rotateSpeed", 30);

          return _this;
        }

        var _proto = EV1FireBullet.prototype;

        _proto.setupFire = function setupFire(data) {
          _EnemyFireBullet.prototype.setupFire.call(this, data);

          this.gun.active = true;
          this.target = this.findTarget();
        };

        _proto.fire = function fire(timeLate) {
          if (timeLate === void 0) {
            timeLate = 0;
          }

          var distance = 2000;
          var angle = misc.degreesToRadians(this.gun.angle - 90);
          this.timeStopRotate = 0.5;
          var srcPos0 = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[0].getWorldPosition());
          var destPos0 = v3(this.node.position.x + Math.cos(angle) * distance, this.node.position.y + Math.sin(angle) * distance, 0);
          this.createBullet(BulletConfig.EV1, srcPos0, destPos0, -timeLate);
          var srcPos1 = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[1].getWorldPosition());
          var destPos1 = v3(destPos0.x + (srcPos1.x - srcPos0.x) * 4, destPos0.y + (srcPos1.y - srcPos0.y), 0);
          this.createBullet(BulletConfig.EV1, srcPos1, destPos1, -timeLate);
          var srcPos2 = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[2].getWorldPosition());
          var destPos2 = v3(destPos0.x + (srcPos2.x - srcPos0.x) * 4, destPos0.y + (srcPos2.y - srcPos0.y), 0);
          this.createBullet(BulletConfig.EV1, srcPos2, destPos2, -timeLate);
        };

        _proto.update = function update(dt) {
          _EnemyFireBullet.prototype.update.call(this, dt);

          if (this.timeStopRotate > 0) {
            this.timeStopRotate = Math.max(0, this.timeStopRotate - dt);
          }

          this.rotateToTarget(dt);
        };

        _proto.rotateToTarget = function rotateToTarget(dt) {
          if (this.isDie || this.timeStopRotate > 0) return;

          if (!this.target || !this.target.isActive()) {
            this.target = this.findTarget();
          }

          if (!this.target) return;
          var destPos0 = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.target.node.worldPosition);
          var destAngle = getRotation(destPos0, this.node.getPosition()) + 90;
          var angle = destAngle - this.gun.angle;
          if (angle > 180) angle -= 360;
          if (angle < -180) angle += 360;
          var sign = angle > 0 ? 1 : -1;
          this.gun.angle = this.gun.angle + sign * Math.min(Math.abs(angle), this.rotateSpeed * dt);
        };

        _proto.onDie = function onDie() {
          _EnemyFireBullet.prototype.onDie.call(this);

          this.gun.active = false;
        };

        return EV1FireBullet;
      }(EnemyFireBullet), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/appConfig.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "82634jcjK1PNK85UaqLUOhU", "appConfig", undefined);

      var urlConstant = exports('urlConstant', {
        API_URL: "https://api.staging.gemitek.dev/",
        SOCKET_URL: "wss://sock.staging.gemitek.dev",
        LOGIN_IFRAME: true,
        // DEV_ENV:  true,
        URL_TOKEN: 'token',
        URL_CODE: 'code',
        USER_TOKEN: "user_token",
        LOBBY_SCENE_NAME: "lobby-staging-test",
        IPMaster1: "wss://staging.fish.gemitek.dev/lobby/",
        IPMaster2: "wss://staging.fish.gemitek.dev/xwin-lobby/",
        IPMaster3: "wss://staging.fish.gemitek.dev/fish-3-lobby/",
        IPMaster4: "wss://staging.fish.gemitek.dev/lobby-1994/",
        IPMaster5: "wss://zbie.gemitek.dev/zombie-lobby/",
        IPMaster6: "wss://staging.fish.gemitek.dev/lobby-1992/",
        // IPMaster7: "wss://staging.fish.gemitek.dev/lobby/",
        IPMaster7: "wss://staging.fish.gemitek.dev/lobby-1990/",
        IPMaster8: "wss://dev.fish.gemitek.dev/lobby-1988/",
        IPMaster10: "wss://staging.fish.gemitek.dev/lobby-1996/",
        IPMaster12: "wss://dev.fish.gmstd.dev/lobby-1985/"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/x64-core.ts", ['cc', './crypto-core.ts'], function (exports) {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "831f4MLuttBKYuR24inm+u/", "x64-core", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var Base = C_lib.Base;
      var X32WordArray = C_lib.WordArray;
      /**
       * x64 namespace.
       */

      var C_x64 = exports('default', C.x64 = {});
      /**
       * A 64-bit word.
       */

      var X64Word = C_x64.Word = Base.extend({
        /**
         * Initializes a newly created 64-bit word.
         *
         * @param {number} high The high 32 bits.
         * @param {number} low The low 32 bits.
         *
         * @example
         *
         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
         */
        init: function init(high, low) {
          this.high = high;
          this.low = low;
        }
        /**
         * Bitwise NOTs this word.
         *
         * @return {X64Word} A new x64-Word object after negating.
         *
         * @example
         *
         *     var negated = x64Word.not();
         */
        // not: function () {
        // var high = ~this.high;
        // var low = ~this.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise ANDs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to AND with this word.
         *
         * @return {X64Word} A new x64-Word object after ANDing.
         *
         * @example
         *
         *     var anded = x64Word.and(anotherX64Word);
         */
        // and: function (word) {
        // var high = this.high & word.high;
        // var low = this.low & word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise ORs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to OR with this word.
         *
         * @return {X64Word} A new x64-Word object after ORing.
         *
         * @example
         *
         *     var ored = x64Word.or(anotherX64Word);
         */
        // or: function (word) {
        // var high = this.high | word.high;
        // var low = this.low | word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Bitwise XORs this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to XOR with this word.
         *
         * @return {X64Word} A new x64-Word object after XORing.
         *
         * @example
         *
         *     var xored = x64Word.xor(anotherX64Word);
         */
        // xor: function (word) {
        // var high = this.high ^ word.high;
        // var low = this.low ^ word.low;
        // return X64Word.create(high, low);
        // },

        /**
         * Shifts this word n bits to the left.
         *
         * @param {number} n The number of bits to shift.
         *
         * @return {X64Word} A new x64-Word object after shifting.
         *
         * @example
         *
         *     var shifted = x64Word.shiftL(25);
         */
        // shiftL: function (n) {
        // if (n < 32) {
        // var high = (this.high << n) | (this.low >>> (32 - n));
        // var low = this.low << n;
        // } else {
        // var high = this.low << (n - 32);
        // var low = 0;
        // }
        // return X64Word.create(high, low);
        // },

        /**
         * Shifts this word n bits to the right.
         *
         * @param {number} n The number of bits to shift.
         *
         * @return {X64Word} A new x64-Word object after shifting.
         *
         * @example
         *
         *     var shifted = x64Word.shiftR(7);
         */
        // shiftR: function (n) {
        // if (n < 32) {
        // var low = (this.low >>> n) | (this.high << (32 - n));
        // var high = this.high >>> n;
        // } else {
        // var low = this.high >>> (n - 32);
        // var high = 0;
        // }
        // return X64Word.create(high, low);
        // },

        /**
         * Rotates this word n bits to the left.
         *
         * @param {number} n The number of bits to rotate.
         *
         * @return {X64Word} A new x64-Word object after rotating.
         *
         * @example
         *
         *     var rotated = x64Word.rotL(25);
         */
        // rotL: function (n) {
        // return this.shiftL(n).or(this.shiftR(64 - n));
        // },

        /**
         * Rotates this word n bits to the right.
         *
         * @param {number} n The number of bits to rotate.
         *
         * @return {X64Word} A new x64-Word object after rotating.
         *
         * @example
         *
         *     var rotated = x64Word.rotR(7);
         */
        // rotR: function (n) {
        // return this.shiftR(n).or(this.shiftL(64 - n));
        // },

        /**
         * Adds this word with the passed word.
         *
         * @param {X64Word} word The x64-Word to add with this word.
         *
         * @return {X64Word} A new x64-Word object after adding.
         *
         * @example
         *
         *     var added = x64Word.add(anotherX64Word);
         */
        // add: function (word) {
        // var low = (this.low + word.low) | 0;
        // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
        // var high = (this.high + word.high + carry) | 0;
        // return X64Word.create(high, low);
        // }

      });
      /**
       * An array of 64-bit words.
       *
       * @property {Array} words The array of CryptoJS.x64.Word objects.
       * @property {number} sigBytes The number of significant bytes in this word array.
       */

      var X64WordArray = C_x64.WordArray = Base.extend({
        /**
         * Initializes a newly created word array.
         *
         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
         *
         * @example
         *
         *     var wordArray = CryptoJS.x64.WordArray.create();
         *
         *     var wordArray = CryptoJS.x64.WordArray.create([
         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
         *     ]);
         *
         *     var wordArray = CryptoJS.x64.WordArray.create([
         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
         *     ], 10);
         */
        init: function init(words, sigBytes) {
          words = this.words = words || [];

          if (sigBytes != undefined) {
            this.sigBytes = sigBytes;
          } else {
            this.sigBytes = words.length * 8;
          }
        },

        /**
         * Converts this 64-bit word array to a 32-bit word array.
         *
         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
         *
         * @example
         *
         *     var x32WordArray = x64WordArray.toX32();
         */
        toX32: function toX32() {
          // Shortcuts
          var x64Words = this.words;
          var x64WordsLength = x64Words.length; // Convert

          var x32Words = [];

          for (var i = 0; i < x64WordsLength; i++) {
            var x64Word = x64Words[i];
            x32Words.push(x64Word.high);
            x32Words.push(x64Word.low);
          }

          return X32WordArray.create(x32Words, this.sigBytes);
        },

        /**
         * Creates a copy of this word array.
         *
         * @return {X64WordArray} The clone.
         *
         * @example
         *
         *     var clone = x64WordArray.clone();
         */
        clone: function clone() {
          var clone = Base.clone.call(this); // Clone "words" array

          var words = clone.words = this.words.slice(0); // Clone each X64Word object

          var wordsLength = words.length;

          for (var i = 0; i < wordsLength; i++) {
            words[i] = words[i].clone();
          }

          return clone;
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EC1Bullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './EnemyBulletWithTrail.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, EnemyBulletWithTrail;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      EnemyBulletWithTrail = module.EnemyBulletWithTrail;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "83c7ePOEtpPy7V+1fc5LR++", "EC1Bullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EC1Bullet = exports('EC1Bullet', (_dec = ccclass('EC1Bullet'), _dec(_class = /*#__PURE__*/function (_EnemyBulletWithTrail) {
        _inheritsLoose(EC1Bullet, _EnemyBulletWithTrail);

        function EC1Bullet() {
          return _EnemyBulletWithTrail.apply(this, arguments) || this;
        }

        return EC1Bullet;
      }(EnemyBulletWithTrail)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptAirSelect.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfptDataType.ts', './gfptSavedItem.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, gfptEvent, GfptSavedItem;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfptEvent = module.gfptEvent;
    }, function (module) {
      GfptSavedItem = module.GfptSavedItem;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "8406bpZwzBDKYc/0wsg9hmD", "gfptAirSelect", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptAirSelect = exports('GfptAirSelect', (_dec = ccclass('GfptAirSelect'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfptSavedItem) {
        _inheritsLoose(GfptAirSelect, _GfptSavedItem);

        function GfptAirSelect() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfptSavedItem.call.apply(_GfptSavedItem, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "spine", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "index", 0);

          return _this;
        }

        var _proto = GfptAirSelect.prototype;

        _proto.start = function start() {
          this.index = parseInt(this.label.string);
        };

        _proto.onClicked = function onClicked() {
          this.node.dispatchEvent(new gfptEvent("ITEM_CLICKED", {
            spineData: this.spine.skeletonData
          }));
          this.enableHighLight(true);
        };

        return GfptAirSelect;
      }(GfptSavedItem), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLightning1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, sp, instantiate, v3, UITransform, tween, isValid, Component, stopAllActions, v2Distance, getRotation;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      sp = module.sp;
      instantiate = module.instantiate;
      v3 = module.v3;
      UITransform = module.UITransform;
      tween = module.tween;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "847baPS6D5HAoLyevIqPc4C", "EffectLightning1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DEFAULT_HEIGHT = 533;
      var EffectLightning1988 = exports('EffectLightning1988', (_dec = ccclass('EffectLightning1988'), _dec2 = property(Prefab), _dec3 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EffectLightning1988, _Component);

        function EffectLightning1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "lightning", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sphere", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_lightingFX", null);

          return _this;
        }

        var _proto = EffectLightning1988.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.playEffectLightning = function playEffectLightning(endPos, callback) {
          var _this2 = this;

          this._lightingFX = instantiate(this.lightning);
          this.node.addChild(this._lightingFX);
          this._lightingFX.position = v3(0, 0, 0);
          endPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(endPos);
          var distance = v2Distance(this._lightingFX.position, endPos);
          var scaleY = distance / DEFAULT_HEIGHT;
          this._lightingFX.scale.y *= scaleY;
          var angle = getRotation(endPos, this._lightingFX.position);
          this._lightingFX.angle = -(90 - angle);
          var duration = this.sphere.findAnimation("Laser_Elip").duration;
          tween(this.node).delay(duration).call(function () {
            callback && callback();
          }).removeSelf().call(function () {
            _this2.node.destroy();
          }).start();
        };

        _proto.onDestroy = function onDestroy() {
          stopAllActions(this.node);

          if (isValid(this._lightingFX)) {
            this._lightingFX.destroy();
          }
        };

        return EffectLightning1988;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lightning", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sphere", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetBundle1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfAssetBundle.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, gfAssetBundle;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfAssetBundle = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "84922/zJzdNMYI0vXODY8cS", "AssetBundle1988", undefined);

      var AssetBundle1988 = exports('default', /*#__PURE__*/function (_gfAssetBundle) {
        _inheritsLoose(AssetBundle1988, _gfAssetBundle);

        function AssetBundle1988() {
          var _this;

          _this = _gfAssetBundle.call(this) || this;
          AssetBundle1988.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = AssetBundle1988.prototype;

        _proto.destroy = function destroy() {
          _gfAssetBundle.prototype.destroy.call(this);

          AssetBundle1988.instance = null;
        };

        return AssetBundle1988;
      }(gfAssetBundle));

      _defineProperty(AssetBundle1988, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotInfo1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfJackpotInfo.ts', './gfDataStore.ts', './EventsCode1988.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, tween, gfBaseEvents, stopAllActions, gfEventEmitter, registerEvent, removeEvents, GfJackpotInfo, gfDataStore, EventCode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      GfJackpotInfo = module.GfJackpotInfo;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      EventCode = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "84ac4h/MMhMJqrj39ZuxoCy", "JackpotInfo1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_CONFIG = {
        blink: 1.5,
        session_1: 20,
        session_2: 15,
        session_3: 15
      };
      var SKIN_NAME = {
        skin_1: "blue",
        skin_2: "yellow",
        skin_3: "orange",
        skin_4: "red"
      };
      var ANIMATION_NAME = {
        idle: "animation",
        mix: "mix"
      };
      var JackpotInfo1988 = exports('JackpotInfo1988', (_dec = ccclass('JackpotInfo1988'), _dec(_class = (_temp = /*#__PURE__*/function (_GfJackpotInfo) {
        _inheritsLoose(JackpotInfo1988, _GfJackpotInfo);

        function JackpotInfo1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfJackpotInfo.call.apply(_GfJackpotInfo, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_isWarned", false);

          _defineProperty(_assertThisInitialized(_this), "_lostTime", 0);

          return _this;
        }

        var _proto = JackpotInfo1988.prototype;

        _proto.initEvents = function initEvents() {
          _GfJackpotInfo.prototype.initEvents.call(this);

          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
          registerEvent(gfBaseEvents.DRAGON.CREATE, this.playAnimBossAppear, this);
          registerEvent(EventCode.GAME_LAYER.BORIS_END, this.resetSkinJackpotInfo, this);
        };

        _proto.onDragonWarning = function onDragonWarning() {
          var _this2 = this;

          gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_WARNING);
          stopAllActions(this.node);
          this.jackpotAnim.setAnimation(0, ANIMATION_NAME.mix, true);
          tween(this.node).delay(3).call(function () {
            _this2.jackpotAnim.setAnimation(0, ANIMATION_NAME.idle, true);
          }).start();
        };

        _proto.playAnimBossAppear = function playAnimBossAppear(data) {
          this._lostTime = Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000);
          stopAllActions(this.node);

          if (data.isResume) {
            this.resumeAnimBossAppear();
          } else {
            tween(this.node).then(this.animSwitchStateBoss(SKIN_NAME.skin_2, TIME_CONFIG.session_1 - TIME_CONFIG.blink)).then(this.animSwitchStateBoss(SKIN_NAME.skin_3, TIME_CONFIG.session_2 - TIME_CONFIG.blink)).then(this.animSwitchStateBoss(SKIN_NAME.skin_4, TIME_CONFIG.session_3 - TIME_CONFIG.blink)).then(this.animComingToEnd()).start();
          }
        };

        _proto.resumeAnimBossAppear = function resumeAnimBossAppear() {
          if (this._lostTime > 0 && this._lostTime <= 20) {
            this.jackpotAnim.setSkin(SKIN_NAME.skin_2);
            var dur = TIME_CONFIG.session_1 - this._lostTime;
            tween(this.node).delay(dur).then(this.animSwitchStateBoss(SKIN_NAME.skin_3, TIME_CONFIG.session_2 - TIME_CONFIG.blink)).then(this.animSwitchStateBoss(SKIN_NAME.skin_4, TIME_CONFIG.session_3 - TIME_CONFIG.blink)).then(this.animComingToEnd()).start();
          } else if (this._lostTime > 20 && this._lostTime <= 35) {
            this.jackpotAnim.setSkin(SKIN_NAME.skin_3);

            var _dur = TIME_CONFIG.session_2 - (this._lostTime - TIME_CONFIG.session_1);

            tween(this.node).delay(_dur).then(this.animSwitchStateBoss(SKIN_NAME.skin_4, TIME_CONFIG.session_3 - TIME_CONFIG.blink)).then(this.animComingToEnd()).start();
          } else if (this._lostTime > 35 && this._lostTime <= 60) {
            this.jackpotAnim.setSkin(SKIN_NAME.skin_4);

            var _dur2 = TIME_CONFIG.session_3 - (this._lostTime - (TIME_CONFIG.session_1 + TIME_CONFIG.session_2));

            _dur2 = _dur2 > 0 ? _dur2 : 0;
            tween(this.node).delay(_dur2).then(this.animComingToEnd()).start();
          }
        };

        _proto.animSwitchStateBoss = function animSwitchStateBoss(skinName, durSession) {
          var _this3 = this;

          return tween().call(function () {
            _this3.jackpotAnim.setAnimation(0, ANIMATION_NAME.mix, true);
          }).delay(TIME_CONFIG.blink / 2).call(function () {
            _this3.jackpotAnim.setSkin(skinName);
          }).delay(TIME_CONFIG.blink / 2).call(function () {
            _this3.jackpotAnim.setAnimation(0, ANIMATION_NAME.idle, true);
          }).delay(durSession);
        };

        _proto.animComingToEnd = function animComingToEnd() {
          var _this4 = this;

          return tween().call(function () {
            _this4.jackpotAnim.setAnimation(0, ANIMATION_NAME.mix, true);
          });
        };

        _proto.resetSkinJackpotInfo = function resetSkinJackpotInfo() {
          stopAllActions(this.node);
          this.jackpotAnim.setSkin(SKIN_NAME.skin_1);
          this.jackpotAnim.setAnimation(0, ANIMATION_NAME.idle, true);
        };

        _proto.resetOnExit = function resetOnExit() {
          _GfJackpotInfo.prototype.resetOnExit.call(this);

          this.resetSkinJackpotInfo();
        };

        _proto.onDestroy = function onDestroy() {
          _GfJackpotInfo.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return JackpotInfo1988;
      }(GfJackpotInfo), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptCoordGraphics.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Graphics, UITransform, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      UITransform = module.UITransform;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "84b70DkJsVPgpubGUzkP6rh", "gfptCoordGraphics", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MAX_LINE = 300;
      var GfptCoordGraphics = exports('GfptCoordGraphics', (_dec = ccclass('GfptCoordGraphics'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptCoordGraphics, _Component);

        function GfptCoordGraphics() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfptCoordGraphics.prototype;

        _proto.start = function start() {
          this.redraw();
        };

        _proto.redraw = function redraw(cell) {
          if (cell === void 0) {
            cell = 50;
          }

          var graphics = this.node.getComponent(Graphics);

          var _this$node$getCompone = this.node.getComponent(UITransform),
              width = _this$node$getCompone.width,
              height = _this$node$getCompone.height;

          graphics.clear();
          var scale = this.node.worldScale.x;
          var left = -width / 2 / scale;
          var right = width / 2 / scale;
          var top = height / 2 / scale;
          var bottom = -height / 2 / scale;
          graphics.lineWidth = 4 / scale;
          graphics.moveTo(0, top);
          graphics.lineTo(0, bottom);
          graphics.moveTo(left, 0);
          graphics.lineTo(right, 0);
          graphics.stroke();
          graphics.lineWidth = 2 / scale;
          var lineCount = Math.min(width / cell / scale, MAX_LINE);

          for (var i = 0; i < lineCount; ++i) {
            graphics.moveTo(i * cell, top);
            graphics.lineTo(i * cell, bottom);
            graphics.moveTo(-i * cell, top);
            graphics.lineTo(-i * cell, bottom);
          }

          for (var _i = 0; _i < lineCount; ++_i) {
            graphics.moveTo(left, _i * cell);
            graphics.lineTo(right, _i * cell);
            graphics.moveTo(left, -_i * cell);
            graphics.lineTo(right, -_i * cell);
          }

          graphics.stroke();
          graphics.close();
        };

        return GfptCoordGraphics;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ExplodeController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './Config1985.ts', './gfExplosionSpine.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, Config1985, gfExplosionSpine;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfExplosionSpine = module.gfExplosionSpine;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "852938wNAVFMICzZZgEk8Rs", "ExplodeController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EXPLODE_CONFIG = [[1, 4, 11], [3, 7, 8, 14, 15, 16, 17, 18, 19], [2, 5, 10, 12, 41], [6, 9, 13]];
      var FishGround = [3, 7, 8, 14, 16, 15, 17, 18, 19, 40];
      var ExplodeController1985 = exports('ExplodeController1985', (_dec = ccclass('ExplodeController1985'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.SkeletonData), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfExplosionSpine) {
        _inheritsLoose(ExplodeController1985, _gfExplosionSpine);

        function ExplodeController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfExplosionSpine.call.apply(_gfExplosionSpine, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "spine", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listSpine", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "scrollSpeed", -50);

          _defineProperty(_assertThisInitialized(_this), "isGround", false);

          return _this;
        }

        var _proto = ExplodeController1985.prototype;

        _proto.onLoad = function onLoad() {
          this.scrollSpeed = Config1985.instance.BackgroundSpeed;
        };

        _proto.initData = function initData(FishKind) {
          var _this2 = this;

          FishGround.forEach(function (element) {
            if (element == FishKind) {
              return _this2.isGround = true;
            }
          });
          var explode = this.getExplode(FishKind);
          this.spine.skeletonData = this.listSpine[explode];
        };

        _proto.getExplode = function getExplode(FishKind) {
          var result = 0;
          EXPLODE_CONFIG.forEach(function (arr, index) {
            arr.forEach(function (child) {
              if (child == FishKind) {
                return result = index;
              }
            });
          });
          return result;
        };

        _proto.onEnable = function onEnable() {
          var _this3 = this;

          this.scheduleOnce(function () {
            _this3.spine.setAnimation(0, _this3.animationName, false);

            _this3.spine.setCompleteListener(function () {
              _this3.spine.skeletonData = null;

              _this3.returnPool();
            });
          }, 0);
        };

        _proto.returnPool = function returnPool() {
          this.unscheduleAllCallbacks();

          _gfExplosionSpine.prototype.returnPool.call(this);
        };

        _proto.update = function update(dt) {
          if (!this.isGround) return;
          var y = this.node.position.y + this.scrollSpeed * dt;
          this.node.setPosition(this.node.position.x, y, 0);
        };

        return ExplodeController1985;
      }(gfExplosionSpine), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listSpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfstAnimationItem.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfptDataType.ts', './gfptSavedItem.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfptEvent, GfptSavedItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfptEvent = module.gfptEvent;
    }, function (module) {
      GfptSavedItem = module.GfptSavedItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "85b1bif+hpICaxxfp+9n/Jn", "gfstAnimationItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfstAnimationItem = exports('GfstAnimationItem', (_dec = ccclass('GfstAnimationItem'), _dec(_class = /*#__PURE__*/function (_GfptSavedItem) {
        _inheritsLoose(GfstAnimationItem, _GfptSavedItem);

        function GfstAnimationItem() {
          return _GfptSavedItem.apply(this, arguments) || this;
        }

        var _proto = GfstAnimationItem.prototype;

        _proto.onClicked = function onClicked() {
          this.node.dispatchEvent(new gfptEvent("ITEM_CLICKED", {
            index: this.index,
            str: this.label.string
          }));
          this.enableHighLight(true);
        };

        return GfstAnimationItem;
      }(GfptSavedItem)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDataStore.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, gfBaseConfig, isEmpty;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      isEmpty = module.isEmpty;
    }],
    execute: function () {
      cclegacy._RF.push({}, "85e1bKgh5VG1ZymH+Qp38JU", "gfDataStore", undefined);

      var gfDataStore = exports('default', /*#__PURE__*/function () {
        function gfDataStore() {
          _defineProperty(this, "listJackpotBet", void 0);

          _defineProperty(this, "selfInfo", void 0);

          _defineProperty(this, "GunValue", void 0);

          _defineProperty(this, "targetState", void 0);

          _defineProperty(this, "currentTargetState", void 0);

          _defineProperty(this, "jackpotValue", void 0);

          _defineProperty(this, "currentRoom", void 0);

          _defineProperty(this, "currentSceneName", void 0);

          _defineProperty(this, "IPGame", void 0);

          _defineProperty(this, "token4Game", void 0);

          _defineProperty(this, "token4Master", void 0);

          _defineProperty(this, "deltaTime", void 0);

          _defineProperty(this, "ActionLastTime", void 0);

          _defineProperty(this, "mousePos", void 0);

          _defineProperty(this, "listCatchLaser", void 0);

          _defineProperty(this, "isEnableBGM", void 0);

          _defineProperty(this, "isEnableSFX", void 0);

          _defineProperty(this, "currSound", void 0);

          _defineProperty(this, "currMusic", void 0);

          _defineProperty(this, "reachMaxNumBullet", void 0);

          _defineProperty(this, "botSetting", void 0);

          _defineProperty(this, "FireSpeed", void 0);

          _defineProperty(this, "ChangeTarget", void 0);

          _defineProperty(this, "oldTarget", void 0);

          _defineProperty(this, "curBGMusic", void 0);

          _defineProperty(this, "timeHide", void 0);

          _defineProperty(this, "isPlayingLoadingTransition", false);

          gfDataStore.instance = this;
          this.selfInfo = {
            UserID: "",
            Wallet: 0,
            PromotionWallet: 0,
            Username: "TestUser",
            Avatar: "Avatar0",
            DeskStation: null,
            LockFish: null,
            LockFishKind: -1,
            isLockGun: false,
            skillLaser: false,
            autoState: 0,
            listItem: {},
            DeskId: '',
            TargetTime: null,
            isPriorityTargetBoss: false,
            skillLock: 0,
            cpm: null,
            pek: null,
            isReadyToPlay: false
          };
          this.listJackpotBet = "50-60-70-80-90-a0-b0";
          this.GunValue = [];
          this.targetState = 0;
          this.currentTargetState = 0;
          this.jackpotValue = 0;
          this.currentRoom = null;
          this.currentSceneName = null;
          this.IPGame = "";
          this.token4Game = "";
          this.token4Master = "";
          this.deltaTime = 0;
          this.ActionLastTime = 0;
          this.mousePos = null;
          this.listCatchLaser = [];
          this.isEnableBGM = false;
          this.isEnableSFX = false;
          this.currSound = 0;
          this.currMusic = 0;
          this.reachMaxNumBullet = false;
          this.ChangeTarget = 5;
          this.botSetting = {
            fishKindArr: [],
            bulletValue: 0,
            duration: 0,
            botStarted: 0,
            autoCountdown: 0,
            bulletIndex: 0
          };
          this.FireSpeed = {
            NORMAL: 0.25,
            TURBO: 0.15
          };
          this.oldTarget = {
            targetState: null,
            LockFishKind: null,
            LockFishID: null
          };
          this.curBGMusic = null;
          this.timeHide = null;
        }

        var _proto = gfDataStore.prototype;

        _proto.setSelfInfo = function setSelfInfo(data) {
          var _this = this;

          if (!isEmpty(data)) {
            Object.keys(data).forEach(function (key) {
              _this.selfInfo[key] = data[key];
            });
          }
        };

        _proto.getSelfInfo = function getSelfInfo() {
          return this.selfInfo;
        };

        _proto.getJackpotValue = function getJackpotValue() {
          return this.jackpotValue;
        };

        _proto.setDataStore = function setDataStore(dataStore) {
          var _this2 = this;

          if (!isEmpty(dataStore)) {
            Object.keys(dataStore).forEach(function (key) {
              _this2[key] = dataStore[key];
            });
          }
        };

        _proto.parseLoginGame = function parseLoginGame(data) {
          var _this3 = this;

          if (!isEmpty(data)) {
            Object.keys(data).forEach(function (key) {
              _this3.selfInfo[key] = data[key];
            });

            if (data.BetConfig) {
              this.parseBetConfig(data.BetConfig);
            }

            if (data.KindID) {
              this.currentRoom = data.KindID;
            }

            if (data.itemInfo) {
              this.parseListItemConfig(data.itemInfo.listItem);
            }

            this.parseFireSpeed(data.FireSpeed);

            if (data.TargetTime) {
              this.ChangeTarget = data.TargetTime;
            } // console.log("===> data login: "+ JSON.stringify(data));

          }
        };

        _proto.parseFireSpeed = function parseFireSpeed(data) {
          if (!data.FireSpeed) return;
          this.FireSpeed.NORMAL = data[1];
          this.FireSpeed.TURBO = data[0];
        };

        _proto.getCurrentSceneName = function getCurrentSceneName() {
          return this.currentSceneName;
        };

        _proto.getCurrentRoom = function getCurrentRoom() {
          return this.currentRoom;
        };

        _proto.setCurrentRoom = function setCurrentRoom(kind) {
          this.currentRoom = kind;
        } //ID = 1 : ice
        ;

        _proto.parseListItemConfig = function parseListItemConfig(lstItem) {
          for (var i = 0; i < lstItem.length; i++) {
            this.selfInfo.listItem[lstItem[i].ID] = lstItem[i].amount;
          }
        };

        _proto.parseBetConfig = function parseBetConfig(data) {
          for (var i = 0; i < data.length; ++i) {
            this.GunValue[i] = data[i];
          }
        };

        _proto.clearSelfInfo = function clearSelfInfo() {
          this.selfInfo.DeskId = '';
        };

        _proto.getSelfDeskStation = function getSelfDeskStation() {
          return this.selfInfo.DeskStation;
        };

        _proto.getBulletIndex = function getBulletIndex(bulletMultiple) {
          for (var i = 0; i < this.GunValue.length; ++i) {
            if (bulletMultiple == this.GunValue[i]) return i;
          }

          return 0;
        };

        _proto.getGunValue = function getGunValue() {
          return this.GunValue;
        };

        _proto.getTotalGun = function getTotalGun() {
          return this.GunValue.length;
        };

        _proto.checkWallet = function checkWallet() {
          return this.selfInfo.Wallet > 0;
        };

        _proto.getWallet = function getWallet() {
          return this.selfInfo.Wallet;
        };

        _proto.getTargetState = function getTargetState() {
          return this.targetState;
        };

        _proto.getCurrentTargetStage = function getCurrentTargetStage() {
          return this.currentTargetState;
        };

        _proto.getMousePos = function getMousePos() {
          return this.mousePos;
        };

        _proto.getListCatchLaser = function getListCatchLaser() {
          return this.listCatchLaser;
        };

        _proto.getIsEnableSFX = function getIsEnableSFX() {
          return this.isEnableSFX;
        };

        _proto.setIsEnableSFX = function setIsEnableSFX(isEnableSFX) {
          this.isEnableSFX = isEnableSFX;
        };

        _proto.getIsEnableBGM = function getIsEnableBGM() {
          return this.isEnableBGM;
        };

        _proto.setIsEnableBGM = function setIsEnableBGM(isEnableBGM) {
          this.isEnableBGM = isEnableBGM;
        };

        _proto.getCurrentSFXVolume = function getCurrentSFXVolume() {
          return this.currSound;
        };

        _proto.setCurrentSFXVolume = function setCurrentSFXVolume(volume) {
          this.currSound = volume;
        };

        _proto.getCurrentBGMVolume = function getCurrentBGMVolume() {
          return this.currMusic;
        };

        _proto.setCurrentBGMVolume = function setCurrentBGMVolume(volume) {
          this.currMusic = volume;
        };

        _proto.getCurBGMusic = function getCurBGMusic() {
          return this.curBGMusic;
        };

        _proto.setCurBGMusic = function setCurBGMusic(curBGMusic) {
          this.curBGMusic = curBGMusic;
        };

        _proto.updateDeltaTime = function updateDeltaTime(serverTime) {
          if (serverTime) {
            this.deltaTime = Date.now() - serverTime;
          } else {
            this.deltaTime = 0;
          }
        };

        _proto.getTime = function getTime() {
          return Date.now() - this.deltaTime;
        };

        _proto.setBotSetting = function setBotSetting(data) {
          var _this4 = this;

          if (!isEmpty(data)) {
            Object.keys(data).forEach(function (key) {
              _this4.botSetting[key] = data[key];
            });
          }
        };

        _proto.getBotSetting = function getBotSetting() {
          return this.botSetting;
        };

        _proto.isAutoBot = function isAutoBot() {
          return this.selfInfo.autoState === gfBaseConfig.instance.BotState.STARTED;
        };

        _proto.isAutoPaused = function isAutoPaused() {
          return this.targetState === gfBaseConfig.instance.TARGET_LOCK.PAUSE;
        };

        _proto.isReachMaxNumBullet = function isReachMaxNumBullet() {
          return this.reachMaxNumBullet;
        };

        _proto.saveCurrentTarget = function saveCurrentTarget() {
          if (this.targetState === gfBaseConfig.instance.TARGET_LOCK.NONE) return;
          this.oldTarget.targetState = this.targetState;
          this.oldTarget.LockFishKind = this.selfInfo.LockFishKind;

          if (this.selfInfo.LockFish) {
            this.oldTarget.LockFishID = this.selfInfo.LockFish._FishID;
          }
        };

        _proto.getTimeHide = function getTimeHide() {
          return this.timeHide;
        };

        _proto.clearOldTarget = function clearOldTarget() {
          this.oldTarget = {
            targetState: null,
            LockFishKind: null,
            LockFishID: null
          };
        };

        _proto.getOldTarget = function getOldTarget() {
          return this.oldTarget;
        };

        _proto.getIsReadyToPlay = function getIsReadyToPlay() {
          return this.selfInfo.isReadyToPlay;
        };

        _proto.destroy = function destroy() {
          gfDataStore.instance = null;
        };

        return gfDataStore;
      }());

      _defineProperty(gfDataStore, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupInfo.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfPopupBase.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, gfBaseConfig, GfPopupBase;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "86ccdM66AJJAayV+JjIdCJn", "gfPopupInfo", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupInfo = exports('GfPopupInfo', (_dec = ccclass('GfPopupInfo'), _dec2 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupInfo, _GfPopupBase);

        function GfPopupInfo() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "pageIndexLabel", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopupInfo.prototype;

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.updateTabs = function updateTabs() {// To Do
        };

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          this.updateTabs();
        };

        return GfPopupInfo;
      }(GfPopupBase), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageIndexLabel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBlurScrollViewController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ScrollView, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ScrollView = module.ScrollView;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "87203rJC/1E/Jn5Osdeq22d", "gfBlurScrollViewController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBlurScrollViewController = exports('gfBlurScrollViewController', (_dec = ccclass('gfBlurScrollViewController'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfBlurScrollViewController, _Component);

        function gfBlurScrollViewController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "decor_top", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "decor_bot", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfBlurScrollViewController.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(ScrollView.EventType.SCROLLING, this.onScrolling, this);
          this.decor_top.active = false;
        };

        _proto.onScrolling = function onScrolling() {
          var scrollOffset = this.node.getComponent(ScrollView).getScrollOffset();

          if (scrollOffset.y <= 0) {
            this.decor_top.active = false;
            this.decor_bot.active = true;
            return;
          }

          if (scrollOffset.y >= this.node.getComponent(ScrollView).getMaxScrollOffset().y) {
            this.decor_bot.active = false;
            this.decor_top.active = true;
            return;
          }

          this.decor_top.active = true;
          this.decor_bot.active = true;
        };

        _proto.onDestroy = function onDestroy() {
          this.node.off(ScrollView.EventType.SCROLLING, this.onScrolling, this);
        };

        return gfBlurScrollViewController;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "decor_top", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "decor_bot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ReferenceManager1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfReferenceManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, gfReferenceManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfReferenceManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "88426z/fahL2IJtYH0AJ1yk", "ReferenceManager1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ReferenceManager1988 = exports('default', (_dec = ccclass('ReferenceManager1988'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfReferenceManager) {
        _inheritsLoose(ReferenceManager1988, _gfReferenceManager);

        function ReferenceManager1988() {
          var _this;

          _this = _gfReferenceManager.call(this) || this;

          _defineProperty(_assertThisInitialized(_this), "PanelJackpotLayer", void 0);

          _defineProperty(_assertThisInitialized(_this), "FishEffectLayer", null);

          ReferenceManager1988.instance = _assertThisInitialized(_this);
          _this.PanelJackpotLayer = null;
          return _this;
        }

        var _proto = ReferenceManager1988.prototype;

        _proto.getPanelJackpotLayer = function getPanelJackpotLayer() {
          return this.PanelJackpotLayer;
        };

        _proto.getPlayerByDeskStation = function getPlayerByDeskStation(deskStation) {
          return this.getPlayerLayer().getPlayerByDeskStation(deskStation);
        };

        _proto.getFishEffectLayer = function getFishEffectLayer() {
          return this.FishEffectLayer;
        };

        _proto.destroy = function destroy() {
          ReferenceManager1988.instance = null;
        };

        return ReferenceManager1988;
      }(gfReferenceManager), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ReferenceManager1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfReferenceManager.ts', './NodePoolConfig1985.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, gfReferenceManager, NodePoolConfig1985;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      NodePoolConfig1985 = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "888a9zhozhLiY2fSUXZZfrc", "ReferenceManager1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ReferenceManager1985 = exports('default', (_dec = ccclass('ReferenceManager1985'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfReferenceManager) {
        _inheritsLoose(ReferenceManager1985, _gfReferenceManager);

        function ReferenceManager1985() {
          var _this;

          _this = _gfReferenceManager.call(this) || this;

          _defineProperty(_assertThisInitialized(_this), "spaceShipLayer", null);

          _defineProperty(_assertThisInitialized(_this), "HUDControllerLayer", null);

          _defineProperty(_assertThisInitialized(_this), "GroundLayer", null);

          _defineProperty(_assertThisInitialized(_this), "AirLayer", null);

          _defineProperty(_assertThisInitialized(_this), "EnvObjectGroundLayer", null);

          ReferenceManager1985.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = ReferenceManager1985.prototype;

        _proto.getPlayerByDeskStation = function getPlayerByDeskStation(deskStation) {
          return this.spaceShipLayer.getSpaceShipByDeskStation(deskStation);
        };

        _proto.getSpaceShipLayer = function getSpaceShipLayer() {
          return this.spaceShipLayer;
        };

        _proto.getHUDControllerLayer = function getHUDControllerLayer() {
          return this.HUDControllerLayer;
        };

        _proto.getGroundLayer = function getGroundLayer() {
          return this.GroundLayer;
        };

        _proto.getAirLayer = function getAirLayer() {
          return this.AirLayer;
        };

        _proto.getEnvObjectGroundLayer = function getEnvObjectGroundLayer() {
          return this.EnvObjectGroundLayer;
        };

        _proto.getPrefabFishByKind = function getPrefabFishByKind(fishKind) {
          var configFish = NodePoolConfig1985.instance.getFishConfig(fishKind);
          var fish = null;

          if (configFish.isGroundLayer) {
            fish = this.GroundLayer.getPrefabFishByKind(fishKind);
          } else {
            fish = this.AirLayer.getPrefabFishByKind(fishKind);
          }

          return fish;
        };

        _proto.destroy = function destroy() {
          ReferenceManager1985.instance = null;
        };

        return ReferenceManager1985;
      }(gfReferenceManager), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/loadToken.ts", ['cc', './gfBaseConfig.ts', './serviceRest.ts', './loadConfigAsync.ts', './gameCommonUtils.ts', './gfMainFSM.ts', './gfMainController.ts'], function () {
  'use strict';

  var cclegacy, sys, gfBaseConfig, apiObject, loadConfigAsync, gameCommonUtils, gfMainFSM, gfMainController;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfMainController = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "88d7c1GD6JP/Z/c7ShJ3QBQ", "loadToken", undefined);

      var getUrlParam = gameCommonUtils.getUrlParam; // MainController1988.prototype.initToken =

      gfMainController.prototype.initToken = function () {
        var _this = this;

        var CONFIG = loadConfigAsync.getConfig();
        var LOGIN_IFRAME = CONFIG.LOGIN_IFRAME,
            URL_TOKEN = CONFIG.URL_TOKEN,
            USER_TOKEN = CONFIG.USER_TOKEN,
            DEV_ENV = CONFIG.DEV_ENV,
            TOKEN_VALUE = CONFIG.TOKEN_VALUE,
            IS_FINISHED_REMOTE = CONFIG.IS_FINISHED_REMOTE,
            API_URL = CONFIG.API_URL,
            IS_PRODUCTION = CONFIG.IS_PRODUCTION;

        if (!IS_FINISHED_REMOTE) {
          setTimeout(function () {
            _this.initToken();
          }, 100);
          return;
        }

        gfBaseConfig.instance.IsDevMode = DEV_ENV != null && DEV_ENV == true;
        gfBaseConfig.instance.IPMaster = CONFIG[gfBaseConfig.instance.IPMasterName];
        var clientType = '';
        var defaultClientType = 1;

        if (LOGIN_IFRAME) {
          gfBaseConfig.instance.GameId = getUrlParam('gameId') ? getUrlParam('gameId') : gfBaseConfig.instance.GameId;
          gfBaseConfig.instance.RoomVersion = getUrlParam('version') ? "|" + getUrlParam('version') : IS_PRODUCTION ? gfBaseConfig.instance.ProdVersion : gfBaseConfig.instance.RoomVersion;
          gfBaseConfig.instance.ClientType = gfBaseConfig.instance.ClientType ? gfBaseConfig.instance.ClientType : "|" + defaultClientType;
          clientType = getUrlParam('clientType') ? "|" + getUrlParam('clientType') : gfBaseConfig.instance.ClientType;
        }

        getToken();
      };

      var getToken = function getToken() {
        var envInfo = {
          stg: {
            userId: '',
            token: '',
            api: 'https://api.staging.gmstd.dev/manage-token-stg/getToken'
          }
        };
        var username;

        if (sys.isNative) {
          username = '556';
        } else {
          username = getUrlParam('u');

          if (!username) {
            username = '556';
          }
        }

        var userInfo = envInfo["stg"];
        var params = {
          userName: 'game_user' + username,
          password: '123456'
        };
        apiObject.get({
          apiUrl: userInfo.api,
          url: '',
          params: params,
          callback: function callback(data) {
            if (data.code == 200 && data.data) {
              var defaultClientType = 1;
              var clientType = getUrlParam('clientType') ? "|" + getUrlParam('clientType') : "|" + defaultClientType;
              var token = data.data;
              gfBaseConfig.instance.userToken = token;
              token += gfBaseConfig.instance.RoomVersion + clientType;
              gfBaseConfig.instance.token4Master = token;

              gfMainFSM.instance._fsm.goLoginLobby();
            }
          }
        });
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupSettingSlider.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfPopupBase.ts', './gfLocalize.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sys, ProgressBar, Slider, Label, gfBaseEvents, gfEventEmitter, gfBaseConfig, gfDataStore, GfPopupBase, gfLocalize;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      ProgressBar = module.ProgressBar;
      Slider = module.Slider;
      Label = module.Label;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfLocalize = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "8a501SMzE5PkIMcK0VBOwS7", "gfPopupSettingSlider", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupSettingSlider = exports('GfPopupSettingSlider', (_dec = ccclass('GfPopupSettingSlider'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupSettingSlider, _GfPopupBase);

        function GfPopupSettingSlider() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnJackpotHistory", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bgmSliderNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sfxSliderNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "handlerBgm", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "handlerSfx", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopupSettingSlider.prototype;

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initObj = function initObj() {
          var _this2 = this;

          _GfPopupBase.prototype.initObj.call(this);

          if (sys.isNative) {
            this.handlerBgm.off('touchend');
            this.handlerBgm.off('touchcancel');
            this.handlerSfx.off('touchend');
            this.handlerSfx.off('touchcancel');
            this.handlerBgm.on('touchend', function () {
              _this2.onBtnMusicClick();
            });
            this.handlerBgm.on('touchcancel', function () {
              _this2.onBtnMusicClick();
            });
            this.handlerSfx.on('touchend', function () {
              _this2.onBtnEffectClick();
            });
            this.handlerSfx.on('touchcancel', function () {
              _this2.onBtnEffectClick();
            });
            this.bgmSliderNode.off('touchend');
            this.bgmSliderNode.off('touchcancel');
            this.sfxSliderNode.off('touchend');
            this.sfxSliderNode.off('touchcancel');
            this.bgmSliderNode.on('touchend', function () {
              _this2.onBtnMusicClick();
            });
            this.bgmSliderNode.on('touchcancel', function () {
              _this2.onBtnMusicClick();
            });
            this.sfxSliderNode.on('touchend', function () {
              _this2.onBtnEffectClick();
            });
            this.sfxSliderNode.on('touchcancel', function () {
              _this2.onBtnEffectClick();
            });
          }

          this.setInitialized(true);
        };

        _proto.updateSlider = function updateSlider() {
          this.sfxSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = gfDataStore.instance.getCurrentSFXVolume();
          this.sfxSliderNode.getComponent(Slider).progress = gfDataStore.instance.getCurrentSFXVolume();
          this.bgmSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = gfDataStore.instance.getCurrentBGMVolume();
          this.bgmSliderNode.getComponent(Slider).progress = gfDataStore.instance.getCurrentBGMVolume();
        };

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          this.updateSlider();
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.setting);
        };

        _proto.onBtnJPHistory = function onBtnJPHistory() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onSliderSFX = function onSliderSFX(event) {
          this.sfxSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = event.progress;

          if (!sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, event.progress);
          }
        };

        _proto.onSliderBGM = function onSliderBGM(event) {
          this.bgmSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = event.progress;

          if (!sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, event.progress);
          }
        };

        _proto.onBtnMusicClick = function onBtnMusicClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.bgmSliderNode.getComponent(Slider).progress);
        };

        _proto.onBtnEffectClick = function onBtnEffectClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.sfxSliderNode.getComponent(Slider).progress);
        };

        return GfPopupSettingSlider;
      }(GfPopupBase), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnJackpotHistory", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bgmSliderNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sfxSliderNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "handlerBgm", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "handlerSfx", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptResizeWindowPortrait.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, ResolutionPolicy, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8a577TFl1dMp6/vU7TwCcaN", "gfptResizeWindowPortrait", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptResizeWindowPortrait = exports('GfptResizeWindowPortrait', (_dec = ccclass('GfptResizeWindowPortrait'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptResizeWindowPortrait, _Component);

        function GfptResizeWindowPortrait() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfptResizeWindowPortrait.prototype;

        _proto.start = function start() {
          this.resize();
          view.setResizeCallback(this.resize);
        };

        _proto.resize = function resize() {
          var dWidth = 720;
          var dHeight = 1280;
          var designRatio = dWidth / dHeight;
          var frameSize = view.getFrameSize();
          var screenRatio = frameSize.width / frameSize.height;

          if (screenRatio < designRatio) {
            view.setDesignResolutionSize(dWidth, dHeight, ResolutionPolicy.FIXED_WIDTH);
          } else {
            view.setDesignResolutionSize(dWidth, dHeight, ResolutionPolicy.FIXED_HEIGHT);
          }
        };

        return GfptResizeWindowPortrait;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EV3FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, v2, UITransform, v3, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
      UITransform = module.UITransform;
      v3 = module.v3;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "8b8d8sW9idHAYO27+2TBIBr", "EV3FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EV3FireBullet = exports('EV3FireBullet', (_dec = ccclass('EV3FireBullet'), _dec(_class = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(EV3FireBullet, _EnemyFireBullet);

        function EV3FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "FIRE_POS", [v2(-300, -1000), v2(-120, -1000), v2(120, -1000), v2(300, -1000)]);

          return _this;
        }

        var _proto = EV3FireBullet.prototype;

        _proto.fire = function fire(timeLate) {
          var _this2 = this;

          var _loop = function _loop(i) {
            var delay = Math.floor(i / _this2.FIRE_POS.length) * 0.25;

            _this2.scheduleOnce(function () {
              _this2.fireBullet(i % _this2.FIRE_POS.length);
            }, delay - timeLate);
          };

          for (var i = 0; i < this.BulletCount; ++i) {
            _loop(i);
          }
        };

        _proto.fireBullet = function fireBullet(index) {
          if (this.isDie) return;
          var srcPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[0].getWorldPosition());
          var destPos = v3(srcPos.x + this.FIRE_POS[index].x, srcPos.y + this.FIRE_POS[index].y, 0);
          this.createBullet(BulletConfig.EV3, srcPos, destPos);
        };

        return EV3FireBullet;
      }(EnemyFireBullet), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyLayer1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1985.ts', './Config1985.ts', './gfLobbyLayer.ts', './PageViewLobbyComponent1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sp, warn, gfEventEmitter, EventsCode1985, Config1985, gfLobbyLayer, PageViewLobbyComponent1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      warn = module.warn;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfLobbyLayer = module.gfLobbyLayer;
    }, function (module) {
      PageViewLobbyComponent1985 = module.PageViewLobbyComponent1985;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "8bfdat2UJtIz5gGhu/KVf75", "LobbyLayer1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LobbyLayer1985 = exports('LobbyLayer1985', (_dec = ccclass('LobbyLayer1985'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(PageViewLobbyComponent1985), _dec5 = property(sp.Skeleton), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfLobbyLayer) {
        _inheritsLoose(LobbyLayer1985, _gfLobbyLayer);

        function LobbyLayer1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfLobbyLayer.call.apply(_gfLobbyLayer, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnNext", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnPrev", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pageViewMission", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fxButtonStart", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "overlay", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LobbyLayer1985.prototype;

        _proto.onLoad = function onLoad() {
          _gfLobbyLayer.prototype.onLoad.call(this);

          this.fxButtonStart.node.active = false;
        };

        _proto.onButtonNext = function onButtonNext() {
          this.pageViewMission.onNext();
        };

        _proto.onButtonPrev = function onButtonPrev() {
          this.pageViewMission.onPreview();
        };

        _proto.onButtonSelect = function onButtonSelect() {
          var _this2 = this;

          this.fxButtonStart.node.active = true;
          this.fxButtonStart.setToSetupPose();
          this.fxButtonStart.setAnimation(0, "animation", false);
          var dur = this.fxButtonStart.getCurrent(0).animation.duration;
          gfEventEmitter.instance.emit(EventsCode1985.COMMON.SHOW_OVERLAY_TRANSITION_LOADING, dur);
          this.fxButtonStart.setCompleteListener(function () {
            _this2.fxButtonStart.setCompleteListener(function () {});

            _this2.fxButtonStart.node.active = false;

            _this2.onJoinRoom();
          });
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.START_BUTTON);
        };

        _proto.getRoomID = function getRoomID() {
          var pageMissionIndex = this.pageViewMission.getPageIndex();

          switch (pageMissionIndex) {
            case 0:
              return 1;

            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
              return 0;
          }
        };

        _proto.onJoinRoom = function onJoinRoom() {
          var roomID = this.getRoomID().toString();

          switch (roomID) {
            case Config1985.instance.RoomKind.Normal:
              this.onRoomNormalClick();
              break;

            case Config1985.instance.RoomKind.VIP:
              this.onRoomVipClick();
              break;

            default:
              warn("room lock");
          }
        };

        return LobbyLayer1985;
      }(gfLobbyLayer), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnPrev", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageViewMission", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fxButtonStart", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfAssetBundle.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfPoolManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, Prefab, assetManager, gfBaseConfig, gfPoolManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      Prefab = module.Prefab;
      assetManager = module.assetManager;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8c97dRruwtJ64FqLt6xq3zu", "gfAssetBundle", undefined);

      var gfAssetBundle = exports('default', /*#__PURE__*/function () {
        function gfAssetBundle() {
          _defineProperty(this, "GameBundle", void 0);

          gfAssetBundle.instance = this;
        }

        var _proto = gfAssetBundle.prototype;

        _proto.loadVipRoomAssets = function loadVipRoomAssets(callback) {
          var _this = this;

          var listBoss = Object.keys(gfBaseConfig.instance.BOSS_PREFAB_NAME);

          if (listBoss.length > 0) {
            var _loop = function _loop(i) {
              _this.GameBundle.load(gfBaseConfig.instance.BOSS_PREFAB_NAME[listBoss[i]], Prefab, function (err, prefab) {
                gfPoolManager.instance.instantiateBoss(prefab);

                if (listBoss.length - 1 === i) {
                  callback && callback();
                }
              });
            };

            for (var i = 0; i < listBoss.length; i++) {
              _loop(i);
            }
          } else {
            callback && callback();
          }
        };

        _proto.releaseVipRoomAssets = function releaseVipRoomAssets() {
          var listBoss = Object.keys(gfBaseConfig.instance.BOSS_PREFAB_NAME);

          if (listBoss.length > 0) {
            for (var i = 0; i < listBoss.length; i++) {
              this.GameBundle.release(gfBaseConfig.instance.BOSS_PREFAB_NAME[listBoss[i]], Prefab);
            }

            gfPoolManager.instance.releaseBoss();
          }
        };

        _proto.releaseLoadingAssets = function releaseLoadingAssets() {
          if (!this.GameBundle) return;
          this.GameBundle.release('./Scenes/' + gfBaseConfig.instance.LoadingSceneName);
        };

        _proto.destroy = function destroy() {
          if (!this.GameBundle) return;
          this.GameBundle.releaseAll();
          assetManager.removeBundle(this.GameBundle);
          this.GameBundle = null;
          gfAssetBundle.instance = null;
        };

        return gfAssetBundle;
      }());

      _defineProperty(gfAssetBundle, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, v2, Vec2, gfBaseConfig;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      Vec2 = module.Vec2;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8c9ccA7FZJNLrZ2ku3l/5YH", "Config1988", undefined);

      var Config1988 = exports('default', /*#__PURE__*/function (_gfBaseConfig) {
        _inheritsLoose(Config1988, _gfBaseConfig);

        function Config1988() {
          var _position;

          var _this;

          _this = _gfBaseConfig.call(this) || this;

          _defineProperty(_assertThisInitialized(_this), "SOUND_SLIDER", void 0);

          _defineProperty(_assertThisInitialized(_this), "BOSS_PREFAB_NAME", {
            DRAGON: 'BossBoris1988'
          });

          _defineProperty(_assertThisInitialized(_this), "GunSkill", void 0);

          Config1988.instance = _assertThisInitialized(_this);
          _this.GameId = '1988';
          _this.GameVersion = "1.1.9";
          _this.SceneName.Lobby = 'ktfLobby1988';
          _this.SceneName.Game = 'ktfGame1988';
          _this.IPMasterName = "IPMaster8";
          _this.IPMaster = "IPMaster8";
          _this.RoomVersion = "|10";
          _this.ProdVersion = "|1";
          _this.ClientType = "|1";
          _this.SOUND_SLIDER = true;
          _this.BundleName = 'bundle1988';
          _this.NOTIFY_MESSAGE = {
            position: (_position = {}, _position[_this.SceneName.Game] = v2(0, 330), _position[_this.SceneName.Lobby] = v2(0, 240), _position),
            limited_stack_size: 10
          };
          _this.FISH_KIND = {
            LASER_CRAB: 27,
            DRAGON: 63,
            MINIBOSS: 33,
            BOMB: 47,
            DRILL: 46,
            SELENA: 30,
            ROACH: 24
          };
          _this.GunSkill = {
            LASER: "GunLaser",
            DRILL: "GunDrill"
          };
          _this.SkillConfig = {
            TIMEOUT: 30,
            LASER: 27,
            BOOM: 3,
            FISH_BOMB: 47,
            DRILL: 46
          };
          _this.SHAKE_SCREEN_STYLE = {
            HORIZONTAL: 0,
            VERTICAL: 1,
            CROSS_1: 2,
            //theo hình dấu cộng
            CROSS_2: 3,
            //theo hình dấu nhân
            FULL: 4 //kết hợp cả 2 loại style CROSS

          };
          _this.SOUND_BACKGROUND_CONFIG = {
            MINI_BOSS: "MINI_BOSS",
            DRAGON: "DRAGON",
            LOBBY: "LOBBY",
            IN_GAME: "IN_GAME",
            FISH_GROUP: "FISH_GROUP"
          };
          _this.SOUND_SLIDER = true;
          _this.POS_WIFI_STATUS = {
            LEFT: new Vec2(-368, -282),
            RIGHT: new Vec2(325, -282)
          };
          _this.TURN_ON_WIFI_STATUS = true;
          _this.DEFAULT_AVATAR = "avatar_default";
          _this.LOCAL_STORE.MUSIC_VOLUME = "enableBackgroundMusic";
          _this.LOCAL_STORE.EFFECT_VOLUME = "enableSound";
          return _this;
        }

        var _proto = Config1988.prototype;

        _proto.destroy = function destroy() {
          _gfBaseConfig.prototype.destroy.call(this);

          Config1988.instance = null;
        };

        return Config1988;
      }(gfBaseConfig));

      _defineProperty(Config1988, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptSavedFormationList.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfptSavedList.ts', './gfptSavedFormationItem.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, instantiate, GfptSavedList, GfptSavedFormationItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
    }, function (module) {
      GfptSavedList = module.GfptSavedList;
    }, function (module) {
      GfptSavedFormationItem = module.GfptSavedFormationItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8d1eb2ijghIIJOGpG9eamPa", "gfptSavedFormationList", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptSavedFormationList = exports('GfptSavedFormationList', (_dec = ccclass('GfptSavedFormationList'), _dec(_class = /*#__PURE__*/function (_GfptSavedList) {
        _inheritsLoose(GfptSavedFormationList, _GfptSavedList);

        function GfptSavedFormationList() {
          return _GfptSavedList.apply(this, arguments) || this;
        }

        var _proto = GfptSavedFormationList.prototype;

        _proto.updateContent = function updateContent(data) {
          var _this = this;

          this.content.destroyAllChildren();
          this.content.removeAllChildren();
          if (data.length == 0) return;

          var _loop = function _loop(i) {
            var item = instantiate(_this.itemPrefab).getComponent(GfptSavedFormationItem);

            _this.content.addChild(item.node);

            item.setLabel(i, data[i].name); // item.setHeight(this.itemHeight);

            _this.scheduleOnce(function () {
              //push to next frame, wait for widget resize
              item.setData(data[i], _this.MAX_VALUE, _this.drawBoardWidth, _this.drawBoardHeight);
            }, 0);
          };

          for (var i = 0; i < data.length; ++i) {
            _loop(i);
          }

          this.clearHighLight();
        };

        return GfptSavedFormationList;
      }(GfptSavedList)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWaitingLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfNetworkGameEvent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, tween, error, game, Component, setOpacity, gfBaseEvents, rotateBy, gfEventEmitter, gfBaseConfig, SetZIndex, registerEvent, removeEvents, gfNetworkGameEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      tween = module.tween;
      error = module.error;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      rotateBy = module.rotateBy;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "8d8a86RmJFPCo4Pf9LXTbJf", "gfWaitingLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfWaitingLayer = exports('gfWaitingLayer', (_dec = ccclass('gfWaitingLayer'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfWaitingLayer, _Component);

        function gfWaitingLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "iconWaiting", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfWaitingLayer.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.WAITING);
          this.hideWaiting();
          this.initEvents();
          this.runIconAction();
        };

        _proto.runIconAction = function runIconAction() {
          tween(this.iconWaiting).repeatForever(rotateBy(2, 360)).start();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.SHOW_WAITING, this.showWaiting, this);
          registerEvent(gfBaseEvents.COMMON.HIDE_WAITING, this.hideWaiting, this);
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
        };

        _proto.showWaiting = function showWaiting(needTimeout) {
          var _this2 = this;

          if (needTimeout === void 0) {
            needTimeout = false;
          }

          this.node.active = true;
          setOpacity(this.node, 255);

          if (needTimeout) {
            this.scheduleOnce(function () {
              _this2.hideWaiting();

              error("Waiting Timeout!");
              gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_PROMPT, gfNetworkGameEvent.MSG_CODE.WAITING_TIMEOUT);
            }, gfBaseConfig.instance.waiting_timeout);
          }
        };

        _proto.hideWaiting = function hideWaiting() {
          this.unscheduleAllCallbacks();
          this.node.active = false;
          setOpacity(this.node, 0);
        };

        _proto.refreshPage = function refreshPage() {
          game.removePersistRootNode(this.node);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfWaitingLayer;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconWaiting", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptMainPath.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfUtilities.ts', './gfptDataType.ts', './gfptDrawPanel.ts', './gfptMovingObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Intersection2D, Component, gfEventEmitter, registerEvent, removeEvents, VALUE_TYPE, gEvent, ExportName, gData, GfptDrawPanel, GfptMovingObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Intersection2D = module.Intersection2D;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      VALUE_TYPE = module.VALUE_TYPE;
      gEvent = module.gEvent;
      ExportName = module.ExportName;
      gData = module.gData;
    }, function (module) {
      GfptDrawPanel = module.GfptDrawPanel;
    }, function (module) {
      GfptMovingObject = module.GfptMovingObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "8e122E4UENG0pxI0fzLhTW9", "gfptMainPath", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfptMainPath = exports('gfptMainPath', (_dec = ccclass('gfptMainPath'), _dec2 = property(GfptDrawPanel), _dec3 = property(GfptDrawPanel), _dec4 = property(GfptDrawPanel), _dec5 = property(Node), _dec6 = property(GfptMovingObject), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfptMainPath, _Component);

        function gfptMainPath() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "pathPanel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "speedPanel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "scalePanel", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "touchListener", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "movingObj", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "holdingPanel", void 0);

          return _this;
        }

        var _proto = gfptMainPath.prototype;

        _proto.onLoad = function onLoad() {
          gfEventEmitter.instance = new gfEventEmitter();
        };

        _proto.start = function start() {
          this.touchListener.on(Node.EventType.TOUCH_START, this.onUserStartTouch, this);
          this.touchListener.on(Node.EventType.TOUCH_MOVE, this.onUserMoveTouch, this);
          this.touchListener.on(Node.EventType.TOUCH_END, this.onUserEndTouch, this);
          this.touchListener.on(Node.EventType.TOUCH_CANCEL, this.onUserEndTouch, this);
          this.pathPanel.EditMode = VALUE_TYPE.Curve;
          this.node.on("OBJ_MOVE_DONE", this.onObjMoveDone, this);
          this.pathPanel.setSavedListItemHeight(100);
          registerEvent(gEvent.IMPORT_DATA, this.importAllData, this);
          registerEvent(gEvent.IMPORT_ONE_DATA, this.importOneData, this);
          this.importAllData();
          this.setupExportName();
        };

        _proto.setupExportName = function setupExportName() {
          this.pathPanel.exportName = ExportName.PATH;
          this.speedPanel.exportName = ExportName.SPEED;
          this.scalePanel.exportName = ExportName.SCALE;
        };

        _proto.onUserStartTouch = function onUserStartTouch(event) {
          var uiPos = event.getUILocation();

          if (Intersection2D.pointInPolygon(uiPos, this.pathPanel.getDrawBoardBox().worldPoints)) {
            this.pathPanel.onMouseTouch(uiPos);
            this.holdingPanel = this.pathPanel;
          } else if (Intersection2D.pointInPolygon(uiPos, this.speedPanel.getDrawBoardBox().worldPoints)) {
            this.speedPanel.onMouseTouch(uiPos);
            this.holdingPanel = this.speedPanel;
          } else if (Intersection2D.pointInPolygon(uiPos, this.scalePanel.getDrawBoardBox().worldPoints)) {
            this.scalePanel.onMouseTouch(uiPos);
            this.holdingPanel = this.scalePanel;
          }
        };

        _proto.onUserMoveTouch = function onUserMoveTouch(event) {
          var uiPos = event.getUILocation();

          if (this.holdingPanel) {
            this.holdingPanel.onMouseMove(uiPos);
          }
        };

        _proto.onUserEndTouch = function onUserEndTouch(event) {
          this.holdingPanel = null;
        };

        _proto.onBtnMoveClicked = function onBtnMoveClicked() {
          var exportData = this.pathPanel.getExportData();
          if (exportData.pts.pts1.length < 2) return;
          this.movingObj.setPath(exportData.pts);
          this.movingObj.setSpeed(this.speedPanel.getExportData());
          this.movingObj.setScale(this.scalePanel.getExportData());
          this.movingObj.move();
          this.pathPanel.dotHolder.active = false;
        };

        _proto.onObjMoveDone = function onObjMoveDone() {
          this.pathPanel.dotHolder.active = true;
        };

        _proto.importAllData = function importAllData() {
          this.pathPanel.savedList = gData.path;
          this.speedPanel.savedList = gData.speed;
          this.scalePanel.savedList = gData.scale;
          this.pathPanel.reloadData();
          this.speedPanel.reloadData();
          this.scalePanel.reloadData();
        };

        _proto.importOneData = function importOneData(data) {
          var path = data.path,
              speed = data.speed,
              scale = data.scale;

          if (path) {
            this.pathPanel.importData(path, false);
          } else if (speed) {
            this.speedPanel.importData(speed, false);
          } else if (scale) {
            this.scalePanel.importData(scale, false);
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfptMainPath;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pathPanel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "speedPanel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "scalePanel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "touchListener", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "movingObj", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SideMenu1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfUtilities.ts', './gfSideMenu.ts', './EventsCode1988.ts', './DataStore1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, v3, Button, tween, stopAllActions, registerEvent, flipX, removeEvents, GfSideMenu, EventCode, DataStore1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      v3 = module.v3;
      Button = module.Button;
      tween = module.tween;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      registerEvent = module.registerEvent;
      flipX = module.flipX;
      removeEvents = module.removeEvents;
    }, function (module) {
      GfSideMenu = module.GfSideMenu;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "8e326jb+aFMWYBZg2r6BJ4j", "SideMenu1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SideMenu1988 = exports('SideMenu1988', (_dec = ccclass('SideMenu1988'), _dec2 = property(Node), _dec3 = property({
        type: Node,
        visible: false,
        override: true
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfSideMenu) {
        _inheritsLoose(SideMenu1988, _GfSideMenu);

        function SideMenu1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfSideMenu.call.apply(_GfSideMenu, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrNodeButton", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeMove", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SideMenu1988.prototype;

        _proto.onLoad = function onLoad() {
          _GfSideMenu.prototype.onLoad.call(this);

          DataStore1988.instance.isSideMenuOpened = false;
        };

        _proto.initEvents = function initEvents() {
          _GfSideMenu.prototype.initEvents.call(this);

          registerEvent(EventCode.GAME_LAYER.CLOSE_ALL_MENU, this.onClose, this);
        };

        _proto.hideSideBar = function hideSideBar() {
          if (!this.isActionDone) return;
          this.unschedule(this.scheduleHide);
          this.isActionDone = false;
          var posX = -19;
          this.isHide = !this.isHide;

          if (this.isHide) {
            posX = this.frameWidth * 1.2;
            DataStore1988.instance.isSideMenuOpened = false;
          } else {
            flipX(this.iconHide);
            DataStore1988.instance.isSideMenuOpened = true;
            this.scheduleOnce(this.scheduleHide, 3);
          }

          var baseEasing = this.isHide ? 'sineIn' : 'sineOut'; //this.nodeMove.stopAllActions();

          this.runActionAllButton(posX, baseEasing);
        };

        _proto.onClose = function onClose() {
          if (!DataStore1988.instance.isSideMenuOpened) return;else {
            this.hideSideBar();
          }
        };

        _proto.runActionAllButton = function runActionAllButton(posX, easing) {
          var _this2 = this;

          var _loop = function _loop(i) {
            var button = _this2.arrNodeButton[i];
            button.getComponent(Button).interactable = false;
            tween(button).delay(i * 0.15).to(0.3, {
              position: v3(posX, button.position.y, button.position.z)
            }, {
              easing: easing
            }).call(function () {
              if (i == _this2.arrNodeButton.length - 1) {
                _this2.isActionDone = true;

                if (_this2.isHide) {
                  flipX(_this2.iconHide);
                }

                _this2.arrNodeButton.forEach(function (node) {
                  node.getComponent(Button).interactable = true;
                });
              }
            }).start();
          };

          for (var i = 0; i < this.arrNodeButton.length; ++i) {
            _loop(i);
          }
        };

        _proto.stopActionAllButton = function stopActionAllButton() {
          for (var i = 0; i < this.arrNodeButton.length; ++i) {
            var button = this.arrNodeButton[i];
            stopAllActions(button);
            button.position = v3(this.frameWidth * 1.2, button.position.y, button.position.z);
          }
        };

        _proto.onInfoClick = function onInfoClick() {
          _GfSideMenu.prototype.onInfoClick.call(this);

          this.arrNodeButton[2].getComponent(Button).interactable = false;
        };

        _proto.onExitClick = function onExitClick() {
          _GfSideMenu.prototype.onExitClick.call(this);

          this.arrNodeButton[0].getComponent(Button).interactable = false;
        };

        _proto.onSettingClick = function onSettingClick() {
          _GfSideMenu.prototype.onSettingClick.call(this);

          this.arrNodeButton[1].getComponent(Button).interactable = false;
        };

        _proto.onJPHistoryClick = function onJPHistoryClick() {
          _GfSideMenu.prototype.onJPHistoryClick.call(this);

          this.arrNodeButton[3].getComponent(Button).interactable = false;
        };

        _proto.resetSideMenu = function resetSideMenu() {
          this.unschedule(this.scheduleHide);
          this.isHide = true;
          this.iconHide.scale = v3(-1, 1, 1);
          this.stopActionAllButton();
          this.isActionDone = true;
        };

        _proto.onDestroy = function onDestroy() {
          _GfSideMenu.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return SideMenu1988;
      }(GfSideMenu), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrNodeButton", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "nodeMove", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/state-machine.min.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      var _cjsExports;

      loader.define(module.meta.url, function (exports$1, _require, module, __filename, __dirname) {
        var require = loader.createRequireWithReqMap({}, _require);

        (function () {
          !function (t, n) {
            "object" == typeof exports$1 && "object" == typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define("StateMachine", [], n) : "object" == typeof exports$1 ? exports$1.StateMachine = n() : t.StateMachine = n();
          }(this, function () {
            return function (t) {
              function n(e) {
                if (i[e]) return i[e].exports;
                var s = i[e] = {
                  i: e,
                  l: !1,
                  exports: {}
                };
                return t[e].call(s.exports, s, s.exports, n), s.l = !0, s.exports;
              }

              var i = {};
              return n.m = t, n.c = i, n.i = function (t) {
                return t;
              }, n.d = function (t, i, e) {
                n.o(t, i) || Object.defineProperty(t, i, {
                  configurable: !1,
                  enumerable: !0,
                  get: e
                });
              }, n.n = function (t) {
                var i = t && t.__esModule ? function () {
                  return t["default"];
                } : function () {
                  return t;
                };
                return n.d(i, "a", i), i;
              }, n.o = function (t, n) {
                return Object.prototype.hasOwnProperty.call(t, n);
              }, n.p = "", n(n.s = 5);
            }([function (t, n, i) {
              t.exports = function (t, n) {
                var i, e, s;

                for (i = 1; i < arguments.length; i++) {
                  e = arguments[i];

                  for (s in e) {
                    e.hasOwnProperty(s) && (t[s] = e[s]);
                  }
                }

                return t;
              };
            }, function (t, n, i) {
              var e = i(0);
              t.exports = {
                build: function build(t, n) {
                  var i,
                      s,
                      r,
                      o = n.plugins;

                  for (i = 0, s = o.length; i < s; i++) {
                    r = o[i], r.methods && e(t, r.methods), r.properties && Object.defineProperties(t, r.properties);
                  }
                },
                hook: function hook(t, n, i) {
                  var e,
                      s,
                      r,
                      o,
                      a = t.config.plugins,
                      f = [t.context];

                  for (i && (f = f.concat(i)), e = 0, s = a.length; e < s; e++) {
                    o = a[e], (r = a[e][n]) && r.apply(o, f);
                  }
                }
              };
            }, function (t, n, i) {
              function e(t) {
                if (0 === t.length) return t;
                var n,
                    i,
                    e = t.split(/[_-]/);
                if (1 === e.length && e[0][0].toLowerCase() === e[0][0]) return t;

                for (i = e[0].toLowerCase(), n = 1; n < e.length; n++) {
                  i = i + e[n].charAt(0).toUpperCase() + e[n].substring(1).toLowerCase();
                }

                return i;
              }

              e.prepended = function (t, n) {
                return n = e(n), t + n[0].toUpperCase() + n.substring(1);
              }, t.exports = e;
            }, function (t, n, i) {
              function e(t, n) {
                t = t || {}, this.options = t, this.defaults = n.defaults, this.states = [], this.transitions = [], this.map = {}, this.lifecycle = this.configureLifecycle(), this.init = this.configureInitTransition(t.init), this.data = this.configureData(t.data), this.methods = this.configureMethods(t.methods), this.map[this.defaults.wildcard] = {}, this.configureTransitions(t.transitions || []), this.plugins = this.configurePlugins(t.plugins, n.plugin);
              }

              var s = i(0),
                  r = i(2);
              s(e.prototype, {
                addState: function addState(t) {
                  this.map[t] || (this.states.push(t), this.addStateLifecycleNames(t), this.map[t] = {});
                },
                addStateLifecycleNames: function addStateLifecycleNames(t) {
                  this.lifecycle.onEnter[t] = r.prepended("onEnter", t), this.lifecycle.onLeave[t] = r.prepended("onLeave", t), this.lifecycle.on[t] = r.prepended("on", t);
                },
                addTransition: function addTransition(t) {
                  this.transitions.indexOf(t) < 0 && (this.transitions.push(t), this.addTransitionLifecycleNames(t));
                },
                addTransitionLifecycleNames: function addTransitionLifecycleNames(t) {
                  this.lifecycle.onBefore[t] = r.prepended("onBefore", t), this.lifecycle.onAfter[t] = r.prepended("onAfter", t), this.lifecycle.on[t] = r.prepended("on", t);
                },
                mapTransition: function mapTransition(t) {
                  var n = t.name,
                      i = t.from,
                      e = t.to;
                  return this.addState(i), "function" != typeof e && this.addState(e), this.addTransition(n), this.map[i][n] = t, t;
                },
                configureLifecycle: function configureLifecycle() {
                  return {
                    onBefore: {
                      transition: "onBeforeTransition"
                    },
                    onAfter: {
                      transition: "onAfterTransition"
                    },
                    onEnter: {
                      state: "onEnterState"
                    },
                    onLeave: {
                      state: "onLeaveState"
                    },
                    on: {
                      transition: "onTransition"
                    }
                  };
                },
                configureInitTransition: function configureInitTransition(t) {
                  return "string" == typeof t ? this.mapTransition(s({}, this.defaults.init, {
                    to: t,
                    active: !0
                  })) : "object" == typeof t ? this.mapTransition(s({}, this.defaults.init, t, {
                    active: !0
                  })) : (this.addState(this.defaults.init.from), this.defaults.init);
                },
                configureData: function configureData(t) {
                  return "function" == typeof t ? t : "object" == typeof t ? function () {
                    return t;
                  } : function () {
                    return {};
                  };
                },
                configureMethods: function configureMethods(t) {
                  return t || {};
                },
                configurePlugins: function configurePlugins(t, n) {
                  t = t || [];
                  var i, e, s;

                  for (i = 0, e = t.length; i < e; i++) {
                    s = t[i], "function" == typeof s && (t[i] = s = s()), s.configure && s.configure(this);
                  }

                  return t;
                },
                configureTransitions: function configureTransitions(t) {
                  var n,
                      i,
                      e,
                      s,
                      r,
                      o = this.defaults.wildcard;

                  for (i = 0; i < t.length; i++) {
                    for (e = t[i], s = Array.isArray(e.from) ? e.from : [e.from || o], r = e.to || o, n = 0; n < s.length; n++) {
                      this.mapTransition({
                        name: e.name,
                        from: s[n],
                        to: r
                      });
                    }
                  }
                },
                transitionFor: function transitionFor(t, n) {
                  var i = this.defaults.wildcard;
                  return this.map[t][n] || this.map[i][n];
                },
                transitionsFor: function transitionsFor(t) {
                  var n = this.defaults.wildcard;
                  return Object.keys(this.map[t]).concat(Object.keys(this.map[n]));
                },
                allStates: function allStates() {
                  return this.states;
                },
                allTransitions: function allTransitions() {
                  return this.transitions;
                }
              }), t.exports = e;
            }, function (t, n, i) {
              function e(t, n) {
                this.context = t, this.config = n, this.state = n.init.from, this.observers = [t];
              }

              var s = i(0),
                  r = i(6),
                  o = i(1),
                  a = [null, []];
              s(e.prototype, {
                init: function init(t) {
                  if (s(this.context, this.config.data.apply(this.context, t)), o.hook(this, "init"), this.config.init.active) return this.fire(this.config.init.name, []);
                },
                is: function is(t) {
                  return Array.isArray(t) ? t.indexOf(this.state) >= 0 : this.state === t;
                },
                isPending: function isPending() {
                  return this.pending;
                },
                can: function can(t) {
                  return !this.isPending() && !!this.seek(t);
                },
                cannot: function cannot(t) {
                  return !this.can(t);
                },
                allStates: function allStates() {
                  return this.config.allStates();
                },
                allTransitions: function allTransitions() {
                  return this.config.allTransitions();
                },
                transitions: function transitions() {
                  return this.config.transitionsFor(this.state);
                },
                seek: function seek(t, n) {
                  var i = this.config.defaults.wildcard,
                      e = this.config.transitionFor(this.state, t),
                      s = e && e.to;
                  return "function" == typeof s ? s.apply(this.context, n) : s === i ? this.state : s;
                },
                fire: function fire(t, n) {
                  return this.transit(t, this.state, this.seek(t, n), n);
                },
                transit: function transit(t, n, i, e) {
                  var s = this.config.lifecycle,
                      r = this.config.options.observeUnchangedState || n !== i;
                  return i ? this.isPending() ? this.context.onPendingTransition(t, n, i) : (this.config.addState(i), this.beginTransit(), e.unshift({
                    transition: t,
                    from: n,
                    to: i,
                    fsm: this.context
                  }), this.observeEvents([this.observersForEvent(s.onBefore.transition), this.observersForEvent(s.onBefore[t]), r ? this.observersForEvent(s.onLeave.state) : a, r ? this.observersForEvent(s.onLeave[n]) : a, this.observersForEvent(s.on.transition), r ? ["doTransit", [this]] : a, r ? this.observersForEvent(s.onEnter.state) : a, r ? this.observersForEvent(s.onEnter[i]) : a, r ? this.observersForEvent(s.on[i]) : a, this.observersForEvent(s.onAfter.transition), this.observersForEvent(s.onAfter[t]), this.observersForEvent(s.on[t])], e)) : this.context.onInvalidTransition(t, n, i);
                },
                beginTransit: function beginTransit() {
                  this.pending = !0;
                },
                endTransit: function endTransit(t) {
                  return this.pending = !1, t;
                },
                failTransit: function failTransit(t) {
                  throw this.pending = !1, t;
                },
                doTransit: function doTransit(t) {
                  this.state = t.to;
                },
                observe: function observe(t) {
                  if (2 === t.length) {
                    var n = {};
                    n[t[0]] = t[1], this.observers.push(n);
                  } else this.observers.push(t[0]);
                },
                observersForEvent: function observersForEvent(t) {
                  for (var n, i = 0, e = this.observers.length, s = []; i < e; i++) {
                    n = this.observers[i], n[t] && s.push(n);
                  }

                  return [t, s, !0];
                },
                observeEvents: function observeEvents(t, n, i, e) {
                  if (0 === t.length) return this.endTransit(void 0 === e || e);
                  var s = t[0][0],
                      r = t[0][1],
                      a = t[0][2];
                  if (n[0].event = s, s && a && s !== i && o.hook(this, "lifecycle", n), 0 === r.length) return t.shift(), this.observeEvents(t, n, s, e);
                  var f = r.shift(),
                      c = f[s].apply(f, n);
                  return c && "function" == typeof c.then ? c.then(this.observeEvents.bind(this, t, n, s))["catch"](this.failTransit.bind(this)) : !1 === c ? this.endTransit(!1) : this.observeEvents(t, n, s, c);
                },
                onInvalidTransition: function onInvalidTransition(t, n, i) {
                  throw new r("transition is invalid in current state", t, n, i, this.state);
                },
                onPendingTransition: function onPendingTransition(t, n, i) {
                  throw new r("transition is invalid while previous transition is still in progress", t, n, i, this.state);
                }
              }), t.exports = e;
            }, function (t, n, i) {
              function e(t) {
                return r(this || {}, t);
              }

              function s() {
                var t, n;
                "function" == typeof arguments[0] ? (t = arguments[0], n = arguments[1] || {}) : (t = function t() {
                  this._fsm.apply(this, arguments);
                }, n = arguments[0] || {});
                var i = new u(n, e);
                return o(t.prototype, i), t.prototype._fsm.config = i, t;
              }

              function r(t, n) {
                return o(t, new u(n, e)), t._fsm(), t;
              }

              function o(t, n) {
                if ("object" != typeof t || Array.isArray(t)) throw Error("StateMachine can only be applied to objects");
                c.build(t, n), Object.defineProperties(t, d), a(t, l), a(t, n.methods), n.allTransitions().forEach(function (n) {
                  t[f(n)] = function () {
                    return this._fsm.fire(n, [].slice.call(arguments));
                  };
                }), t._fsm = function () {
                  this._fsm = new h(this, n), this._fsm.init(arguments);
                };
              }

              var a = i(0),
                  f = i(2),
                  c = i(1),
                  u = i(3),
                  h = i(4),
                  l = {
                is: function is(t) {
                  return this._fsm.is(t);
                },
                can: function can(t) {
                  return this._fsm.can(t);
                },
                cannot: function cannot(t) {
                  return this._fsm.cannot(t);
                },
                observe: function observe() {
                  return this._fsm.observe(arguments);
                },
                transitions: function transitions() {
                  return this._fsm.transitions();
                },
                allTransitions: function allTransitions() {
                  return this._fsm.allTransitions();
                },
                allStates: function allStates() {
                  return this._fsm.allStates();
                },
                onInvalidTransition: function onInvalidTransition(t, n, i) {
                  return this._fsm.onInvalidTransition(t, n, i);
                },
                onPendingTransition: function onPendingTransition(t, n, i) {
                  return this._fsm.onPendingTransition(t, n, i);
                }
              },
                  d = {
                state: {
                  configurable: !1,
                  enumerable: !0,
                  get: function get() {
                    return this._fsm.state;
                  },
                  set: function set(t) {
                    throw Error("use transitions to change state");
                  }
                }
              };
              e.version = "3.0.1", e.factory = s, e.apply = r, e.defaults = {
                wildcard: "*",
                init: {
                  name: "init",
                  from: "none"
                }
              }, t.exports = e;
            }, function (t, n, i) {
              t.exports = function (t, n, i, e, s) {
                this.message = t, this.transition = n, this.from = i, this.to = e, this.current = s;
              };
            }]);
          });
        })();

        _cjsExports = exports('default', module.exports);
      });

      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);
    }
  };
});

System.register("chunks:///_virtual/gfSoundBase.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './Sound.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, sys, Node, AudioSource, warn, log, tween, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents, gfDataStore, Sound;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Node = module.Node;
      AudioSource = module.AudioSource;
      warn = module.warn;
      log = module.log;
      tween = module.tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      Sound = module.Sound;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "8ee22qaiExGPqA1k6oJTZ63", "gfSoundBase", undefined);

      var ccclass = _decorator.ccclass;
      var MAX_AUDIOINSTANCES_ANDROID = 13;
      var MAX_AUDIOINSTANCES_IOS = 24;
      var MAX_AUDIOINSTANCES_WEB = 24;
      var GfSoundBase = exports('GfSoundBase', (_dec = ccclass('GfSoundBase'), _dec(_class = (_temp = /*#__PURE__*/function (_Sound) {
        _inheritsLoose(GfSoundBase, _Sound);

        function GfSoundBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Sound.call.apply(_Sound, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "scheduleResetVolume", null);

          _defineProperty(_assertThisInitialized(_this), "currSoundBigwin", null);

          _defineProperty(_assertThisInitialized(_this), "coinLoopId", null);

          _defineProperty(_assertThisInitialized(_this), "maxAudioChannel", 24);

          _defineProperty(_assertThisInitialized(_this), "oldCurrentTime", 0);

          _defineProperty(_assertThisInitialized(_this), "sfxChannel", []);

          return _this;
        }

        var _proto = GfSoundBase.prototype;

        _proto.onLoad = function onLoad() {
          if (sys.OS.ANDROID) {
            this.maxAudioChannel = MAX_AUDIOINSTANCES_ANDROID;
          } else if (sys.OS.IOS) {
            this.maxAudioChannel = MAX_AUDIOINSTANCES_IOS;
          } else {
            this.maxAudioChannel = MAX_AUDIOINSTANCES_WEB;
          }

          this.initEvents();
          var isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          var isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null || isEnableBGM != undefined ? JSON.parse(isEnableBGM.toString()) : true;
          this.isEnableSFX = isEnableSFX != null || isEnableSFX != undefined ? JSON.parse(isEnableSFX.toString()) : true;
          this.onExtendedLoad();
        };

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          {
            globalThis['sound'] = this;
          }
          this.loadCacheConfig();
          this.createUserGestureNode();
          this.userGestureNode.on(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
          this.musicList.forEach(function (soundObj) {
            var _this2$setMusicMap, _this2$setMusicMap2;

            if (!soundObj.audioFile) return;

            if (soundObj.soundId == '') {
              soundObj.soundId = soundObj.audioFile.name;
            }

            _this2.setMusicMap((_this2$setMusicMap = {}, _this2$setMusicMap[soundObj.soundId] = soundObj, _this2$setMusicMap));

            var audioSource = _this2.node.addComponent(AudioSource);

            audioSource.playOnAwake = false;
            audioSource.volume = 0;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();

            _this2.setMusicMap((_this2$setMusicMap2 = {}, _this2$setMusicMap2[soundObj.soundId] = {
              audioSource: audioSource
            }, _this2$setMusicMap2));
          });
          this.sfxList.forEach(function (soundObj) {
            if (!soundObj.audioFile) return;

            if (soundObj.soundId == '') {
              soundObj.soundId = soundObj.audioFile.name;
            }

            _this2.createPoolSoundEffect(soundObj);
          });

          if (this.isDebug) {
            warn("musicList", this.musicList.map(function (soundObj) {
              return soundObj.soundId;
            }));
            warn("sfxList", this.sfxList.map(function (soundObj) {
              return soundObj.soundId;
            }));
          }
        };

        _proto.createPoolSoundEffect = function createPoolSoundEffect(soundObj) {
          var sfxMap = this.getSfxMap();

          if (!sfxMap[soundObj.soundId]) {
            sfxMap[soundObj.soundId] = {
              arrAudioSource: [],
              currentIndexPlay: 0
            };
          }

          if (sfxMap[soundObj.soundId].arrAudioSource.length >= soundObj.maxCount) {
            return;
          }

          for (var i = 0; i < soundObj.maxCount; i++) {
            var audioSource = this.node.addComponent(AudioSource);
            audioSource.playOnAwake = false;
            audioSource.volume = 0;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            audioSource["index"] = sfxMap[soundObj.soundId].length;
            audioSource["ignorCheckMaxChannel"] = soundObj.ignorCheckMaxChannel;
            sfxMap[soundObj.soundId].arrAudioSource.push(audioSource);
          }
        };

        _proto.resetAudioMaps = function resetAudioMaps() {
          var sfxMap = this.getSfxMap();
          var musicMap = this.getMusicMap();

          for (var key in musicMap) {
            var musicObj = musicMap[key];

            if (musicObj && musicObj.destroyedOnSwitchMode) {
              musicMap[key] = null;
              delete musicMap[key];
            }
          }

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          for (var _key2 in this.sfxList) {
            var soudObj = this.sfxList[_key2];

            if (soudObj && soudObj.destroyedOnSwitchMode) {
              sfxMap[_key2].arrAudioSource.forEach(function (audioSource) {});

              delete sfxMap[_key2];
            }
          }
        }
        /**
         * @sfx_API 
         * */
        ;

        _proto.playSoundSfx = function playSoundSfx(id, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.isEnableSFX) return;
          volume = this.isMuteEffect ? 0 : volume > 0 ? volume : this.sfxVolume;
          var sfxMap = this.getSfxMap();

          if (sfxMap.hasOwnProperty(id)) {
            var audioSource = this.getAudioSource(id);

            if (audioSource) {
              this.discardOnePlayingIfNeeded();
              this.addOnePlayingToSfxChannel(audioSource);
              audioSource.play();
              audioSource.loop = loop;

              if (typeof volume !== "undefined") {
                audioSource.volume = volume;
              }
            }

            this.isDebug && log("%cSOUND playSfx", "color: blue", id);
            return audioSource;
          } else {
            warn("SOUND playSfx, do not have sfx: " + id);
            return null;
          }
        };

        _proto.addOnePlayingToSfxChannel = function addOnePlayingToSfxChannel(audioSource) {
          var _this3 = this;

          var index = this.sfxChannel.indexOf(audioSource);

          if (index > -1) {
            this.scheduleOnce(function () {
              _this3.removeSfxPlayingFromChannel(audioSource);
            }, this.getDuration(audioSource));
            this.sfxChannel.push(audioSource);
          }
        };

        _proto.discardOnePlayingIfNeeded = function discardOnePlayingIfNeeded() {
          if (this.sfxChannel.length < this.maxAudioChannel - 1) {
            return;
          }

          var audioInfoToDiscard;

          for (var i = 0; i < this.sfxChannel.length; ++i) {
            var audioSource = this.sfxChannel[i];

            if (!audioSource.ignorCheckMaxChannel) {
              audioInfoToDiscard = audioSource;
              return;
            }
          }

          if (audioInfoToDiscard) {
            audioInfoToDiscard.stop();
            this.removeSfxPlayingFromChannel(audioInfoToDiscard);
          }
        };

        _proto.resetSfxChannel = function resetSfxChannel() {
          this.sfxChannel.length = 0;
          this.unscheduleAllCallbacks();
        };

        _proto.removeSfxPlayingFromChannel = function removeSfxPlayingFromChannel(audioSource) {
          var index = this.sfxChannel.indexOf(audioSource);
          this.sfxChannel.splice(index, 1);
        };

        _proto.getAudioSource = function getAudioSource(id) {
          var sfxMap = this.getSfxMap();

          for (var i = 0; i < sfxMap[id].arrAudioSource.length; ++i) {
            var audioSource = sfxMap[id].arrAudioSource[i];

            if (!audioSource.playing) {
              return audioSource;
            }
          }

          return null;
        };

        _proto.stopSfx = function stopSfx(id) {
          var sfxMap = this.getSfxMap();

          if (sfxMap.hasOwnProperty(id)) {
            var arrAudioSource = sfxMap[id].arrAudioSource;
            arrAudioSource.forEach(function (audioSource) {
              audioSource.playing && audioSource.stop();
            });
          } else {
            warn("SOUND stopSfx, do not have sfx: " + id);
          }
        };

        _proto.stopAllEffects = function stopAllEffects() {
          var sfxMap = this.getSfxMap();

          for (var key in sfxMap) {
            this.stopSfx(key);
          }
        };

        _proto.pauseAllEffects = function pauseAllEffects() {
          var sfxMap = this.getSfxMap();

          for (var key in sfxMap) {
            var arrAudioSource = sfxMap[key].arrAudioSource;
            arrAudioSource.forEach(function (audioSource) {
              if (audioSource.playing) {
                audioSource.pause();
              }
            });
            this.isDebug && log("%cSOUND pauseAllEffects", "color: orange", key);
          }
        };

        _proto.setEffectVolume = function setEffectVolume(volume, immediate) {
          volume = volume < 0 ? 0 : volume;
          this.sfxVolume = volume;
          var sfxMap = this.getSfxMap();

          for (var key in sfxMap) {
            var arrAudioSource = sfxMap[key].arrAudioSource;
            arrAudioSource.forEach(function (audioSource) {
              audioSource.volume = volume;
            });
          }
        }
        /**
         * @canNotStop 
         */
        ;

        _proto.playSfxOneShot = function playSfxOneShot(id, volume) {
          if (!this.isEnableSFX || this.isMuteEffect) return;
          var sfxMap = this.getSfxMap();

          if (sfxMap.hasOwnProperty(id)) {
            var audioSource = sfxMap[id].arrAudioSource[0];
            volume = volume || this.sfxVolume;
            audioSource && audioSource.playOneShot(audioSource.clip, volume);
          } else {
            warn("SOUND, playSfxOneShot: do not have sfx: " + id);
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.CLOSE_SCENE, this.stopAllSound, this);
          registerEvent(gfBaseEvents.SOUND.RESET_VOLUME, this.onResumeSound, this);
          registerEvent(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, this.playBackGroundMusic, this);
          registerEvent(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.updateMusicVolume, this);
          registerEvent(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.updateEffectVolume, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.onResetAllSound, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.onGameHide, this);
        };

        _proto.onExtendedLoad = function onExtendedLoad() {
          gfDataStore.instance.setDataStore({
            "isEnableBGM": this.isEnableBGM,
            "isEnableSFX": this.isEnableSFX
          });
          var effectVolume = 0;
          var musicVolume = 0;

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            var storeMusicVolume = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.MUSIC_VOLUME);

            if (storeMusicVolume != null) {
              var volume = parseFloat(storeMusicVolume);

              if (this.isEnableBGM && volume > 0) {
                musicVolume = volume;
              }
            }

            var storeEffectVolume = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.EFFECT_VOLUME);

            if (storeEffectVolume != null) {
              var _volume = parseFloat(storeEffectVolume);

              if (this.isEnableSFX && _volume > 0) {
                effectVolume = _volume;
              }
            }
          }

          if (this.isEnableBGM && !musicVolume) musicVolume = 1;
          if (this.isEnableSFX && !effectVolume) effectVolume = 1;
          gfDataStore.instance.setCurrentBGMVolume(musicVolume);
          gfDataStore.instance.setCurrentSFXVolume(effectVolume);
          this.updateMusicVolume(gfDataStore.instance.getCurrentBGMVolume());
          this.updateEffectVolume(gfDataStore.instance.getCurrentSFXVolume());
        };

        _proto.playFishSFX = function playFishSFX(id, loop, ratio, ignorMute) {
          if (loop === void 0) {
            loop = false;
          }

          if (ratio === void 0) {
            ratio = 1;
          }

          if (ignorMute === void 0) {
            ignorMute = false;
          }

          var volume = ignorMute ? gfDataStore.instance.getCurrentSFXVolume() * ratio : this.sfxVolume * ratio;
          var soundID = this.playSoundSfx(id, loop, volume);
          return soundID;
        };

        _proto.playFishBGM = function playFishBGM(id, loop, ratio) {
          if (loop === void 0) {
            loop = false;
          }

          if (ratio === void 0) {
            ratio = 1;
          }

          var volume = gfDataStore.instance.getCurrentBGMVolume() * ratio;
          var soundID = this.playMusic(id, loop, volume);
          return soundID;
        };

        _proto.updateMusicVolume = function updateMusicVolume(_musicVolume) {
          _musicVolume = parseFloat(_musicVolume);
          this.setMusicVolume(_musicVolume);

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.MUSIC_VOLUME, _musicVolume);
          }

          if (_musicVolume <= 0) {
            this.isEnableBGM = false;
          } else {
            this.isEnableBGM = true;
          }

          gfDataStore.instance.setIsEnableBGM(this.isEnableBGM);
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM.toString());
          this.isEnableBGM = true; // Allways true, only set volume

          this.MUSIC_VOLUME = gfDataStore.instance.setCurrentBGMVolume(_musicVolume);
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          volume = volume < 0 ? 0 : volume;
          this.musicVolume = volume;

          for (var key in this.getMusicMap()) {
            var musicObj = this.getMusicMap()[key];
            if (musicObj) musicObj.audioSource.volume = volume;
          }
        };

        _proto.updateEffectVolume = function updateEffectVolume(_effectVolume) {
          _effectVolume = parseFloat(_effectVolume);
          this.setEffectVolume(_effectVolume);
          gfDataStore.instance.setCurrentSFXVolume(_effectVolume);

          if (gfBaseConfig.instance.SOUND_SLIDER) {
            sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.EFFECT_VOLUME, _effectVolume);
          }

          if (_effectVolume <= 0) {
            this.isEnableSFX = false;
          } else {
            this.isEnableSFX = true;
          }

          gfDataStore.instance.setIsEnableSFX(this.isEnableSFX);
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX.toString());
        };

        _proto.playBackGroundMusic = function playBackGroundMusic(data, init) {};

        _proto.onResetAllSound = function onResetAllSound() {
          this.stopAllEffects();
          this.onResumeSound();

          if (this.checkIsIphone() && this.currentMusic && this.oldCurrentTime) {
            this.resumeBGMOnIphone();
          }
        };

        _proto.onResumeSound = function onResumeSound() {
          if (!gfDataStore || !gfDataStore.instance) return;
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume());
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume());

          if (sys.OS.ANDROID) {
            this.resumeMusic();
          }
        };

        _proto.resumeBGMOnIphone = function resumeBGMOnIphone() {
          var _this4 = this;

          var sound = this.currentMusic.audioSource;
          tween(sound).call(function () {
            _this4.currentMusic && !_this4.currentMusic.audioSource.playing && sound.play();
          }).call(function () {
            _this4.currentMusic && _this4.currentMusic.audioSource.playing && sound.pause();
          }).call(function () {
            sound.currentTime = _this4.oldCurrentTime;
            _this4.currentMusic && !_this4.currentMusic.audioSource.playing && sound.play();
            _this4.oldCurrentTime = 0;
          }).start();
        };

        _proto.stopAllSound = function stopAllSound() {
          this.stopAllEffects();
          this.stopMusic();
        };

        _proto.refreshPage = function refreshPage() {
          this.stopAllSound();
          this.destroy();
          removeEvents(this);
        }
        /**
         * @music_API
         *  */
        ;

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          if (this.getMusicMap().hasOwnProperty(id) == false) return null;
          volume = this.isMuteMusic ? 0 : volume > 0 ? volume : 0;

          if (this.currentMusic && this.currentMusic.soundId == id && !this.currentMusic.audioSource.playing) {
            this.currentMusic.audioSource.play();
            this.currentMusic.audioSource.loop = loop;
            this.currentMusic.audioSource.volume = volume;
          } else {
            if (this.currentMusic && this.currentMusic.soundId == id) return this.currentMusic;
            if (this.currentMusic) this.currentMusic.audioSource.stop();
            this.currentMusic = this.getMusicMap()[id];

            if (this.currentMusic) {
              this.currentMusic.audioSource.play();
              this.currentMusic.audioSource.loop = loop;
              this.currentMusic.audioSource.volume = volume;
            }
          }

          this.isDebug && log("%cSOUND playMusic", "color:red", id);
          return this.currentMusic;
        };

        _proto.resumeMusic = function resumeMusic() {
          this.currentMusic && this.currentMusic.audioSource.state == 2 && this.currentMusic.audioSource.play();
        };

        _proto.stopSound = function stopSound(id) {
          if (!id) return;
          id.stop();
        };

        _proto.getDuration = function getDuration(id) {
          if (!id) return 0;
          return id.duration;
        };

        _proto.checkIsIphone = function checkIsIphone() {
          return sys.OS.IOS && sys.isNative;
        };

        _proto.onGameHide = function onGameHide() {
          this.stopAllEffects();

          if (this.checkIsIphone() && this.currentMusic) {
            this.oldCurrentTime = this.currentMusic.audioSource.currentTime;
            this.stopMusic();
          } else {
            this.pauseMusic();
          }

          this.resetSfxChannel();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfSoundBase;
      }(Sound), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HotUpdate.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './UpdatePanel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, log, sys, game, Component, UpdatePanel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      sys = module.sys;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      UpdatePanel = module.UpdatePanel;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "8ee7ate7OVDEph2ruFCYLQZ", "HotUpdate", undefined);

      var jsb = window.jsb;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var HotUpdate = exports('HotUpdate', (_dec = ccclass('HotUpdate'), _dec2 = property(UpdatePanel), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(HotUpdate, _Component);

        function HotUpdate() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "panel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "manifestFileName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "storageDownloadPath", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "maximumRetry", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "autodownload", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_updating", false);

          _defineProperty(_assertThisInitialized(_this), "_canRetry", false);

          _defineProperty(_assertThisInitialized(_this), "_storagePath", '');

          _defineProperty(_assertThisInitialized(_this), "_am", null);

          _defineProperty(_assertThisInitialized(_this), "_checkListener", null);

          _defineProperty(_assertThisInitialized(_this), "_updateListener", null);

          _defineProperty(_assertThisInitialized(_this), "_failCount", 0);

          _defineProperty(_assertThisInitialized(_this), "versionCompareHandle", function (versionA, versionB) {
            console.log("JS Custom Version Compare: version A is " + versionA + " version B is " + versionB);
            var vA = versionA.split('.');
            var vB = versionB.split('.');

            for (var i = 0; i < vA.length; ++i) {
              var a = parseInt(vA[i]);
              var b = parseInt(vB[i] || '0');

              if (a === b) {
                continue;
              } else {
                return a - b;
              }
            }

            if (vB.length > vA.length) {
              return -1;
            } else {
              return 0;
            }
          });

          return _this;
        }

        var _proto = HotUpdate.prototype;

        _proto.onLoad = function onLoad() {
          if (!jsb) {
            return;
          }

          var writablePath = jsb.fileUtils ? jsb.fileUtils.getWritablePath() : '/';
          this._storagePath = "" + writablePath + this.storageDownloadPath;
          console.log('Storage path for remote asset : ' + this._storagePath);
          this._am = new jsb.AssetsManager('', this._storagePath, this.versionCompareHandle);
          var panel = this.panel; //TODO MD5 compare check

          this._am.setVerifyCallback(this._verifyFileHandle.bind(this));

          this.loadManifest();
          this.checkUpdate();
        };

        _proto._verifyFileHandle = function _verifyFileHandle(path, asset) {
          var compressed = asset.compressed;
          var expectedMD5 = asset.md5;
          var relativePath = asset.path;
          var size = asset.size;

          if (compressed) {
            log("Verification passed: " + relativePath);
            return true;
          } else {
            //TODO implement md5 content, it's too lagging
            var fileSize = jsb.fileUtils.getFileSize(path);

            if (size == fileSize) {
              log("Verification passed: " + relativePath);
              return true;
            }

            log("Verification failed: " + relativePath + " " + size + "/" + fileSize);
            return false;
          }
        };

        _proto.loadManifest = function loadManifest() {
          if (sys.isNative) {
            if (jsb.fileUtils.isFileExist(this.manifestFileName)) {
              var path = jsb.fileUtils.fullPathForFilename(this.manifestFileName);
              log("find manifest at path " + path);

              this._am.loadLocalManifest(path);
            } else {
              log("cant find manifest");
            }
          }
        };

        _proto.loadManifestFromString = function loadManifestFromString(customManifestStr) {
          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            log('load custom manifest');
            var manifest = new jsb.Manifest(customManifestStr, this._storagePath);

            this._am.loadLocalManifest(manifest, this._storagePath);
          }
        };

        _proto.checkUpdate = function checkUpdate() {
          if (!this._am) return;

          if (this._updating) {
            this.panel.info.string = 'Checking version';
            return;
          }

          this._updating = true;

          if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
            log("Failed to checkUpdate, need to load manifest first");
          }

          if (!this._am.getLocalManifest() || !this._am.getLocalManifest().isLoaded()) {
            log("Failed to load local manifest ...");
            return;
          }

          this._am.setEventCallback(this.checkCb.bind(this));

          this._am.checkUpdate();
        };

        _proto.checkCb = function checkCb(event) {
          console.log('Code: ' + event.getEventCode());
          var hasNewVersion = false;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              log("No local manifest file found, hot update skipped.");
              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              log("Fail to download manifest file, hot update skipped.");
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              log("Already up to date with the latest remote version.");
              break;

            case jsb.EventAssetsManager.NEW_VERSION_FOUND:
              log('New version found');
              hasNewVersion = true;
              this.panel.node.active = true;
              this.panel.byteProgress.progress = 0;
              break;

            default:
              return;
          }

          this._am.setEventCallback(null);

          this._checkListener = null;
          this._updating = false;

          if (hasNewVersion && this.autodownload) {
            this.hotUpdate();
          }
        };

        _proto.hotUpdate = function hotUpdate() {
          if (this._am && !this._updating) {
            this._updating = true;

            this._am.setEventCallback(this.updateCb.bind(this));

            if (this._am.getState() === jsb.AssetsManager.State.UNINITED) {
              log("Failed to load hotupdate, need load manifest first");
            }

            this._failCount = 0;

            this._am.update();
          }
        };

        _proto.updateCb = function updateCb(event) {
          var doFinishJob = false;
          var failed = false;

          switch (event.getEventCode()) {
            case jsb.EventAssetsManager.ERROR_NO_LOCAL_MANIFEST:
              log("No local manifest file found, hot update skipped.");
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_PROGRESSION:
              var percent = event.getPercent();

              if (!isNaN(percent)) {
                this.panel.byteProgress.progress = percent;
                this.panel.info.string = "Updating..." + Math.floor(percent * 100) + "%";
              }

              var msg = event.getMessage();

              if (msg) {
                log("Updated file: " + msg);
              }

              break;

            case jsb.EventAssetsManager.ERROR_DOWNLOAD_MANIFEST:
            case jsb.EventAssetsManager.ERROR_PARSE_MANIFEST:
              log("Fail to download manifest file, hot update skipped.");
              failed = true;
              break;

            case jsb.EventAssetsManager.ALREADY_UP_TO_DATE:
              log("Already up to date with the latest remote version.");
              failed = true;
              break;

            case jsb.EventAssetsManager.UPDATE_FINISHED:
              log("Update finished. " + event.getMessage());
              doFinishJob = true;
              break;

            case jsb.EventAssetsManager.UPDATE_FAILED:
              log("Update failed. " + event.getMessage());
              this._updating = false;
              this._canRetry = true;
              break;

            case jsb.EventAssetsManager.ERROR_UPDATING:
              log("Asset update error: " + event.getAssetId() + ", " + event.getMessage());
              break;

            case jsb.EventAssetsManager.ERROR_DECOMPRESS:
              this.panel.info.string = event.getMessage();
              break;
          }

          if (failed) {
            this._am.setEventCallback(null);

            this._updateListener = null;
            this._updating = false;
          }

          if (this._canRetry) {
            if (this._failCount < this.maximumRetry) {
              this._failCount += 1;
              this.retry();
            } else {
              this.panel.info.string = "Failed to update new version, restart game to try again";
            }
          }

          if (doFinishJob) {
            this._am.setEventCallback(null);

            this._updateListener = null;
            var searchPaths = jsb.fileUtils.getSearchPaths();

            var newPaths = this._am.getLocalManifest().getSearchPaths();

            console.log(JSON.stringify(newPaths));
            Array.prototype.unshift.apply(searchPaths, newPaths);
            localStorage.setItem('HotUpdateSearchPaths', JSON.stringify(searchPaths));
            jsb.fileUtils.setSearchPaths(searchPaths);
            setTimeout(function () {
              game.restart();
            }, 1000);
          }
        };

        _proto.retry = function retry() {
          if (!this._updating && this._canRetry) {
            this._canRetry = false;
            this.panel.info.string = "Retry failed Assets...";

            this._am.downloadFailedAssets();
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this._updateListener) {
            this._am.setEventCallback(null);

            this._updateListener = null;
          }
        };

        return HotUpdate;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "manifestFileName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'project.manifest';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "storageDownloadPath", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'gemi-hotupdate';
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "maximumRetry", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 3;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "autodownload", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptExportController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfUtilities.ts', './gfptDataType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, EditBox, Component, gfEventEmitter, registerEvent, removeEvents, gEvent, ExportName, gData;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gEvent = module.gEvent;
      ExportName = module.ExportName;
      gData = module.gData;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "8f49b23L85PZbkXksf1lYUs", "gfptExportController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptExportController = exports('GfptExportController', (_dec = ccclass('GfptExportController'), _dec2 = property(EditBox), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptExportController, _Component);

        function GfptExportController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "exportBox", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "fileSelector", null);

          return _this;
        }

        var _proto = GfptExportController.prototype;

        _proto.start = function start() {
          this.initFile();
          registerEvent(gEvent.EXPORT_ONE_DATA, this.export1Data, this);
        };

        _proto.initFile = function initFile() {
          var x = document.createElement("INPUT");
          x.setAttribute("type", "file");
          x.id = 'file-selector';
          x.style.visibility = "hidden";
          document.body.appendChild(x);
          this.fileSelector = document.getElementById('file-selector');
          var self = this;
          this.fileSelector.addEventListener('change', function (event) {
            var file = event.target.files[0];
            var fr = new FileReader();

            fr.onload = function () {
              var config = fr.result.toString();
              self.renderConfig(config);
            };

            fr.readAsText(file);
          });
        };

        _proto.onBtnExportClicked = function onBtnExportClicked() {
          var path = gData.path;
          var speed = gData.speed;
          var scale = gData.scale;
          var formation = gData.formation;
          this.exportBox.string = JSON.stringify({
            path: path,
            speed: speed,
            scale: scale,
            formation: formation
          });
        };

        _proto.renderConfig = function renderConfig(data) {
          data = data.replace(/(\r\n|\n|\r)/gm, "");
          var exportData = "";

          try {
            exportData = JSON.parse(data);
            this.exportBox.string = data;
            this.onBtnImportClicked();
          } catch (err) {
            console.error(err);
            return;
          }
        };

        _proto.onBtnImportClicked = function onBtnImportClicked() {
          var exportData;

          try {
            exportData = JSON.parse(this.exportBox.string);
          } catch (err) {
            console.error(err);
            return;
          }

          var _exportData = exportData,
              path = _exportData.path,
              speed = _exportData.speed,
              scale = _exportData.scale,
              formation = _exportData.formation;

          if (path && speed && scale && formation) {
            this.convertData(path, ExportName.PATH);
            this.convertData(speed, ExportName.SPEED);
            this.convertData(scale, ExportName.SCALE);
            this.convertData(formation, ExportName.FORMATION);
            gData.path = path;
            gData.speed = speed;
            gData.scale = scale;
            gData.formation = formation;
            gfEventEmitter.instance.emit(gEvent.IMPORT_DATA);
          } else {
            gfEventEmitter.instance.emit(gEvent.IMPORT_ONE_DATA, exportData);
          }
        };

        _proto.convertData = function convertData(path, prefix) {
          if (prefix === void 0) {
            prefix = "";
          }

          var now = Date.now();

          for (var i = 0; i < path.length; ++i) {
            var p = path[i];

            if (!p.id) {
              var f = {
                id: (++now).toString(),
                name: prefix + " " + (i + 1),
                type: p.type
              };
              if (p.value) f.value = p.value;
              if (p.pts) f.pts = p.pts;
              if (p.data) f.pts = p.data;
              if (p.pos) f.pts = p.pos;
              if (p.count) f.count = p.count;
              if (p.space) f.space = p.space;
              path[i] = f;
            }
          }
        };

        _proto.makeDataSave = function makeDataSave() {
          var path = gData.path;
          var speed = gData.speed;
          var scale = gData.scale;
          var formation = gData.formation;
          var dataSave = JSON.stringify({
            path: path,
            speed: speed,
            scale: scale,
            formation: formation
          });
          dataSave = dataSave.substring(0, 1) + "\n" + dataSave.substring(1);
          dataSave = dataSave.replace('"path":[', '\t"path":[');
          dataSave = dataSave.replace('],"speed":[', '\n\t],\n\t"speed":[');
          dataSave = dataSave.replace('],"scale":[', '\n\t],\n\t"scale":[');
          dataSave = dataSave.replace('],"formation":[', '\n\t],\n\t"formation":[');
          dataSave = dataSave.substring(0, dataSave.length - 2) + "\n\t" + dataSave.substring(dataSave.length - 2);
          dataSave = dataSave.substring(0, dataSave.length - 1) + "\n" + dataSave.substring(dataSave.length - 1);
          dataSave = dataSave.replace(new RegExp('{"id"', 'g'), '\n\t\t{"id"');
          return dataSave;
        };

        _proto.onBtnSaveFileClick = function onBtnSaveFileClick() {
          var dataSave = this.makeDataSave();
          var filename = "pathConfig.json";

          if (!dataSave) {
            console.error("Console.save: No data save");
            return;
          }

          var blob = new Blob([dataSave], {
            type: "text/json"
          }),
              e = document.createEvent("MouseEvents"),
              a = document.createElement("a");
          a.download = filename;
          a.href = window.URL.createObjectURL(blob);
          a.dataset.downloadurl = ["text/json", a.download, a.href].join(":");
          e.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
          a.dispatchEvent(e);
        };

        _proto.onBtnLoadFileClick = function onBtnLoadFileClick() {
          this.fileSelector.click();
        };

        _proto.export1Data = function export1Data(data, name) {
          var _JSON$stringify;

          this.exportBox.string = JSON.stringify((_JSON$stringify = {}, _JSON$stringify[name] = data, _JSON$stringify));
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfptExportController;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "exportBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptResizeWindow.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, ResolutionPolicy, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "8f633pK81ZAoLkO1zyw1wrT", "gfptResizeWindow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptResizeWindow = exports('GfptResizeWindow', (_dec = ccclass('GfptResizeWindow'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptResizeWindow, _Component);

        function GfptResizeWindow() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfptResizeWindow.prototype;

        _proto.start = function start() {
          view.setResizeCallback(this.resize);
          this.resize();
        };

        _proto.resize = function resize() {
          var dWidth = 1560;
          var dHeight = 720;
          var designRatio = dWidth / dHeight;
          var frameSize = view.getFrameSize();
          var screenRatio = frameSize.width / frameSize.height;

          if (screenRatio < designRatio) {
            view.setDesignResolutionSize(dWidth, dHeight, ResolutionPolicy.FIXED_WIDTH);
          } else {
            view.setDesignResolutionSize(dWidth, dHeight, ResolutionPolicy.FIXED_HEIGHT);
          }
        };

        return GfptResizeWindow;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Config1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, KeyCode, v3, v2, gfBaseConfig;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      KeyCode = module.KeyCode;
      v3 = module.v3;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8f88dE1El1LqYCtDPrlU2ku", "Config1985", undefined);

      var Config1985 = exports('default', /*#__PURE__*/function (_gfBaseConfig) {
        _inheritsLoose(Config1985, _gfBaseConfig);

        function Config1985() {
          var _position;

          var _this;

          _this = _gfBaseConfig.call(this) || this;

          _defineProperty(_assertThisInitialized(_this), "BackgroundSpeed", -50);

          _defineProperty(_assertThisInitialized(_this), "DEFAULT_AVATAR", "avatar_01");

          _defineProperty(_assertThisInitialized(_this), "AppSize", {
            Width: 720,
            Height: 1250,
            MaxWidth: 720,
            MaxHeight: 1560
          });

          _defineProperty(_assertThisInitialized(_this), "realSize", {
            Width: 720,
            Height: 1280
          });

          _defineProperty(_assertThisInitialized(_this), "SceneBox", {
            Left: 0,
            Bottom: 0,
            Right: 720,
            Top: 1280
          });

          _defineProperty(_assertThisInitialized(_this), "Controller", {
            AUTO_FIRE: {
              id: 0,
              defaultHotkey: KeyCode.KEY_Q
            },
            SPECIAL_SKILL: {
              id: 1,
              defaultHotkey: KeyCode.KEY_W
            },
            INCREASE_BET: {
              id: 2,
              defaultHotkey: KeyCode.KEY_E
            },
            DECREASE_BET: {
              id: 3,
              defaultHotkey: KeyCode.KEY_D
            },
            OPEN_MENU: {
              id: 4,
              defaultHotkey: KeyCode.ESCAPE
            },
            OPEN_SETTING: {
              id: 5,
              defaultHotkey: KeyCode.DIGIT_2
            },
            OPEN_INFO: {
              id: 6,
              defaultHotkey: KeyCode.DIGIT_3
            },
            OPEN_JACKPOT_HISTORY: {
              id: 7,
              defaultHotkey: KeyCode.DIGIT_4
            },
            EXIT_ROOM: {
              id: 8,
              defaultHotkey: KeyCode.DIGIT_5
            }
          });

          _defineProperty(_assertThisInitialized(_this), "MOVE_MODE", {
            TAP: 0,
            DRAG: 1
          });

          _defineProperty(_assertThisInitialized(_this), "ISLAND_OFFSET", 400);

          _defineProperty(_assertThisInitialized(_this), "FISH_KIND", {
            LASER_CRAB: 41,
            DRAGON: 32,
            MINIBOSS: 33,
            KING_LOBSTER: 34,
            LANTERN: 36,
            BOMB: 40,
            BOMB_M: 44,
            DRILL: 46,
            DRILL_M: 47,
            FIRE_STORM: 49,
            KING_CRAB: 50
          });

          _defineProperty(_assertThisInitialized(_this), "ENV_OBJECT_CONFIG", {
            "101": {
              pos: {
                "1": v3(0, 35, 0)
              }
            },
            "102": {
              pos: {
                "1": v3(-64, -49, 0)
              }
            },
            "103": {
              pos: {
                "1": v3(1, 35, 0)
              }
            },
            "104": {
              pos: {
                "1": v3(-125, -161, 0),
                "2": v3(25, 145, 0),
                "3": v3(-187, 204, 0)
              }
            },
            "105": {
              pos: {
                "1": v3(-239, -194, 0),
                "2": v3(-252, 109, 0),
                "3": v3(160, 128, 0)
              }
            }
          });

          _defineProperty(_assertThisInitialized(_this), "SkillConfig", {
            TIMEOUT: 30,
            LASER: 1,
            BOOM: 3,
            FISH_BOMB: 5,
            SKILL_ULTIMATE: 2
          });

          _defineProperty(_assertThisInitialized(_this), "SpaceShipConfig", [{
            Name: "AIRCRAFT_SMALL",
            SkillID: 0,
            AnimName: ['lv1', 'lv2', 'lv3']
          }, {
            Name: "AIRCRAFT_MID_RANGE",
            SkillID: 1,
            AnimName: ['lv1', 'lv2', 'lv3']
          }, {
            Name: "AIRCRAFT_HEAVY",
            SkillID: 2,
            AnimName: ['lv1', 'lv2', 'lv3']
          }]);

          _defineProperty(_assertThisInitialized(_this), "AirLayerBaseZIndex", 400);

          _defineProperty(_assertThisInitialized(_this), "SafeZoneOffsetX", 37.5);

          _defineProperty(_assertThisInitialized(_this), "CoinMultiply", [2, 5, 9, 15, 20, 30, 50, 100, 150, 200, 250, 300, 350, 400, 450]);

          _defineProperty(_assertThisInitialized(_this), "NetFx", {
            NormalNet: 0,
            ExplostionNet: 1,
            IceNet: 2,
            ElectricNet: 3
          });

          _defineProperty(_assertThisInitialized(_this), "SkillSpecialMilestone", [50000, 200000, 500000]);

          _defineProperty(_assertThisInitialized(_this), "BIG_WIN_RATIO", {
            HUGE: 120,
            SUPER: 200,
            BIG_WIN_VALUE: 80
          });

          _defineProperty(_assertThisInitialized(_this), "Z_INDEX", {
            NOTIFY: 2000,
            MENU: 2099,
            POPUP: 2100,
            WAITING: 2200,
            COIN: 98,
            COIN_LABEL: 800,
            BIGWIN: 850,
            DRAGON_BALL: 101,
            DRAGON: 900,
            BULLET: 999,
            NETFX_ICE: 91,
            NETFX_MINIBOSS: 92,
            NETFX: 93,
            CUTSCENE: 1900
          });

          Config1985.instance = _assertThisInitialized(_this);
          _this.GameId = '1985';
          _this.GameVersion = "0.1.0";
          _this.SceneName.Lobby = 'ktfLobby1985';
          _this.SceneName.Game = 'ktfGame1985';
          _this.IPMasterName = "IPMaster12";
          _this.IPMaster = "IPMaster12";
          _this.RoomVersion = "|1";
          _this.ProdVersion = "|1";
          _this.ClientType = "|1";
          _this.SOUND_SLIDER = true;
          _this.BundleName = 'bundle1985';
          _this.TURN_ON_WIFI_STATUS = true;
          _this.NOTIFY_MESSAGE = {
            position: (_position = {}, _position[_this.SceneName.Game] = v2(0, 730), _position[_this.SceneName.Lobby] = v2(0, 730), _position),
            limited_stack_size: 10
          };
          return _this;
        }

        var _proto = Config1985.prototype;

        _proto.updateSkillSpecialMilestone = function updateSkillSpecialMilestone(data) {
          this.SkillSpecialMilestone = data;
        };

        _proto.destroy = function destroy() {
          _gfBaseConfig.prototype.destroy.call(this);

          Config1985.instance = null;
        };

        return Config1985;
      }(gfBaseConfig));

      _defineProperty(Config1985, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AntialiasConfig.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, macro, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      macro = module.macro;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "91475cv2pxCx7TABC+Sdx/j", "AntialiasConfig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // SET ENABLE_WEBGL_ANTIALIAS HERE

      if (sys.isNative) macro.ENABLE_WEBGL_ANTIALIAS = false;
      console.log("ENABLE_WEBGL_ANTIALIAS " + macro.ENABLE_WEBGL_ANTIALIAS);
      var AntialiasConfig = exports('AntialiasConfig', (_dec = ccclass('AntialiasConfig'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AntialiasConfig, _Component);

        function AntialiasConfig() {
          return _Component.apply(this, arguments) || this;
        }

        return AntialiasConfig;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginDev.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, Node, _decorator, director, sys, Component, Label, apiObject, loadConfigAsync;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      _decorator = module._decorator;
      director = module.director;
      sys = module.sys;
      Component = module.Component;
      Label = module.Label;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "92923CnVDdKsaOVS+yBf9Ay", "LoginDev", undefined);

      var _cc$_decorator = _decorator,
          ccclass = _cc$_decorator.ccclass,
          property = _cc$_decorator.property;
      var LoginDev = exports('LoginDev', (_dec = ccclass('LoginDev'), _dec2 = property({
        displayName: "List User",
        type: Node
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_cc$Component) {
        _inheritsLoose(LoginDev, _cc$Component);

        function LoginDev() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _cc$Component.call.apply(_cc$Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listUser", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoginDev.prototype;

        _proto.onLoad = function onLoad() {
          this._bindEvents();
        };

        _proto.start = function start() {// [3]
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto._bindEvents = function _bindEvents() {
          var _this2 = this;

          var startIdx = 100;
          var arrView = this.listUser.children;
          var length = arrView.length;

          var _loop = function _loop(i) {
            var view = arrView[i];
            var userId = arrView[i].getChildByName("Label").getComponent(Label);
            var currentIndex = i + 1;
            userId.string = "User " + currentIndex;
            view.off("click");
            view.on("click", function (event) {
              var indexUser = startIdx + currentIndex;
              var userName = 'user' + indexUser;
              var password = 'pwduser' + indexUser;

              _this2.loginSuccess({
                userText: userName,
                pwText: password
              });
            });
          };

          for (var i = 0; i < length; i++) {
            _loop(i);
          }
        };

        _proto.loginSuccess = function loginSuccess(_ref) {
          var _this3 = this;

          var userText = _ref.userText,
              pwText = _ref.pwText;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              IS_FINISHED_REMOTE = _loadConfigAsync$getC.IS_FINISHED_REMOTE,
              LOBBY_SCENE_NAME = _loadConfigAsync$getC.LOBBY_SCENE_NAME,
              API_URL = _loadConfigAsync$getC.API_URL,
              USER_TOKEN = _loadConfigAsync$getC.USER_TOKEN;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this3.loginSuccess({
                userText: userText,
                pwText: pwText
              });
            }, 100);
            return;
          }

          var dataPost = {
            userName: userText,
            password: pwText,
            fingerPrint: 'test'
          };
          apiObject.post({
            url: 'auth/login',
            data: dataPost,
            callback: function callback(res) {
              var _res$data = res.data,
                  data = _res$data.data,
                  error = _res$data.error;

              if (data) {
                director.loadScene(LOBBY_SCENE_NAME);
                sys.localStorage.setItem(USER_TOKEN, data.token);
              }
            },
            callbackErr: function callbackErr() {},
            apiUrl: API_URL
          });
        };

        return LoginDev;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listUser", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Sound.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, AudioSource, warn, UITransform, Size, log, sys, Component, CustomAudioClip;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      AudioSource = module.AudioSource;
      warn = module.warn;
      UITransform = module.UITransform;
      Size = module.Size;
      log = module.log;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      CustomAudioClip = module.CustomAudioClip;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

      cclegacy._RF.push({}, "9292cCzeGpJ2qYW3aEq3Ldq", "Sound", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Sound = exports('Sound', (_dec = ccclass('Sound'), _dec2 = property(CustomAudioClip), _dec3 = property(CustomAudioClip), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Sound, _Component);

        function Sound() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "musicList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sfxList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "musicVolume", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sfxVolume", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "isDebug", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "dynamicLoading", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "storageKeyBGM", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "storageKeySFX", _descriptor8, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "currentMusic", void 0);

          _defineProperty(_assertThisInitialized(_this), "isEnableBGM", false);

          _defineProperty(_assertThisInitialized(_this), "isEnableSFX", false);

          _defineProperty(_assertThisInitialized(_this), "enableMusicFunc", void 0);

          _defineProperty(_assertThisInitialized(_this), "MUSIC_VOLUME", 1);

          _defineProperty(_assertThisInitialized(_this), "isMuteMusic", false);

          _defineProperty(_assertThisInitialized(_this), "isMuteEffect", false);

          _defineProperty(_assertThisInitialized(_this), "userGestureNode", void 0);

          _defineProperty(_assertThisInitialized(_this), "musicMap", {});

          _defineProperty(_assertThisInitialized(_this), "sfxMap", {});

          return _this;
        }

        var _proto = Sound.prototype;

        _proto.onLoad = function onLoad() {
          var _this2 = this;

          {
            globalThis['sound'] = this;
          }

          _Component.prototype.onLoad.call(this);

          this.loadCacheConfig();
          this.createUserGestureNode();
          this.userGestureNode.on(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
          this.musicList.forEach(function (soundObj) {
            _this2.musicMap[soundObj.soundId] = soundObj;

            var audioSource = _this2.node.addComponent(AudioSource);

            audioSource.playOnAwake = false;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            _this2.musicMap[soundObj.soundId].audioSource = audioSource;
          });
          this.sfxList.forEach(function (soundObj) {
            _this2.sfxMap[soundObj.soundId] = soundObj;

            var audioSource = _this2.node.addComponent(AudioSource);

            audioSource.playOnAwake = false;
            audioSource.clip = soundObj.audioFile;
            audioSource.stop();
            _this2.sfxMap[soundObj.soundId].audioSource = audioSource;
          });

          if (this.isDebug) {
            warn("musicList", this.musicList.map(function (soundObj) {
              return soundObj.soundId;
            }));
            warn("sfxList", this.sfxList.map(function (soundObj) {
              return soundObj.soundId;
            }));
          }

          if (this.dynamicLoading) {
            this.node.on('SET_UP_AUDIO_DATABASE', this.mappingAudioFiles.bind(this));
          }
        };

        _proto.mappingAudioFiles = function mappingAudioFiles(evt) {
          var _this3 = this;

          evt.propagationStopped = true;

          if (evt.details) {
            var audioList = evt.details.audioList;

            if (audioList && audioList.length > 0) {
              audioList.forEach(function (audioObj) {
                if (audioObj.isMusic) {
                  if (!_this3.musicMap[audioObj.soundId]) {
                    _this3.musicMap[audioObj.soundId] = audioObj;
                  }
                } else if (audioObj.isEffect) {
                  if (!_this3.sfxMap[audioObj.soundId]) {
                    _this3.sfxMap[audioObj.soundId] = audioObj;
                  }
                }
              });
            } else {
              this.resetAudioMaps();
            }
          }
        };

        _proto.resetAudioMaps = function resetAudioMaps() {
          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];

            if (musicObj && musicObj.destroyedOnSwitchMode) {
              this.musicMap[key] = null;
              delete this.musicMap[key];
            }
          }

          if (this.currentMusic && this.currentMusic.destroyedOnSwitchMode) {
            this.currentMusic = null;
          }

          for (var _key2 in this.sfxMap) {
            var soudObj = this.sfxMap[_key2];

            if (soudObj && soudObj.destroyedOnSwitchMode) {
              this.sfxMap[_key2] = null;
              delete this.sfxMap[_key2];
            }
          }
        };

        _proto.createUserGestureNode = function createUserGestureNode() {
          if (!this.userGestureNode) {
            this.userGestureNode = new Node("UserGesture");
            this.userGestureNode.parent = this.node.parent;
            this.userGestureNode.active = true;
            this.userGestureNode.setPosition(0, 0);
            this.userGestureNode.layer = this.node.layer;
            var transform = this.userGestureNode.addComponent(UITransform);
            transform.setContentSize(new Size(2024, 1200));
            this.userGestureNode.setSiblingIndex(this.userGestureNode.parent.children.length);
          }
        };

        _proto.startPlayWithUserGesture = function startPlayWithUserGesture() {
          this.playMainBGM();
          this.userGestureNode.off(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
        }
        /**
         * @music_API
         *  */
        ;

        _proto.playMusic = function playMusic(id, loop, volume) {
          if (loop === void 0) {
            loop = true;
          }

          if (!this.isEnableBGM) return;
          if (this.musicMap.hasOwnProperty(id) == false) return null;
          volume = this.isMuteMusic ? 0 : volume > 0 ? volume : this.musicVolume;

          if (this.currentMusic && this.currentMusic.soundId == id && !this.currentMusic.audioSource.playing) {
            this.currentMusic.audioSource.play();
            this.currentMusic.audioSource.loop = loop;
            this.currentMusic.audioSource.volume = volume;
          } else {
            if (this.currentMusic && this.currentMusic.soundId == id) return this.currentMusic;
            if (this.currentMusic) this.currentMusic.audioSource.stop();
            this.currentMusic = this.musicMap[id];

            if (this.currentMusic) {
              this.currentMusic.audioSource.play();
              this.currentMusic.audioSource.loop = loop;
              this.currentMusic.audioSource.volume = volume;
            }
          }

          this.isDebug && log("%cSOUND playMusic", "color:red", id);
          return this.currentMusic;
        };

        _proto.stopMusic = function stopMusic() {
          this.currentMusic && this.currentMusic.audioSource.playing && this.currentMusic.audioSource.stop();
        };

        _proto.pauseMusic = function pauseMusic() {
          this.currentMusic && this.currentMusic.audioSource.playing && this.currentMusic.audioSource.pause();
        };

        _proto.setMusicVolume = function setMusicVolume(volume) {
          volume = volume < 0.01 ? 0.01 : volume;
          this.musicVolume = volume;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = volume;
          }
        };

        _proto.muteMusic = function muteMusic() {
          this.isMuteMusic = true;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = 0;
          }
        };

        _proto.unmuteMusic = function unmuteMusic() {
          this.isMuteMusic = false;

          for (var key in this.musicMap) {
            var musicObj = this.musicMap[key];
            if (musicObj) musicObj.audioSource.volume = this.musicVolume;
          }
        }
        /**
         * @sfx_API 
         * */
        ;

        _proto.playSfx = function playSfx(id, loop, volume) {
          if (loop === void 0) {
            loop = false;
          }

          if (!this.isEnableSFX) return;
          volume = this.isMuteEffect ? 0 : volume > 0 ? volume : this.sfxVolume;

          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];

            if (soundObj) {
              soundObj.audioSource.play();
              soundObj.audioSource.loop = loop;

              if (typeof volume !== "undefined") {
                soundObj.audioSource.volume = volume;
              }
            }

            this.isDebug && log("%cSOUND playSfx", "color: blue", id);
            return soundObj;
          } else {
            warn("SOUND playSfx, do not have sfx: " + id);
            return null;
          }
        };

        _proto.stopSfx = function stopSfx(id) {
          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];
            soundObj && soundObj.audioSource.playing && soundObj.audioSource.stop();
          } else {
            warn("SOUND stopSfx, do not have sfx: " + id);
          }
        };

        _proto.stopAllEffects = function stopAllEffects() {
          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];
            if (soundObj) this.stopSfx(soundObj.soundId);
          }
        };

        _proto.pauseAllEffects = function pauseAllEffects() {
          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];

            if (soundObj && soundObj.audioSource.playing) {
              soundObj.audioSource.pause();
              this.isDebug && log("%cSOUND pauseAllEffects", "color: orange", soundObj.soundId);
            }
          }
        };

        _proto.muteAllEffects = function muteAllEffects() {
          this.isMuteEffect = true;
          this.setEffectVolume(0, true);
        };

        _proto.unmuteAllEffects = function unmuteAllEffects() {
          this.isMuteEffect = false;
          this.setEffectVolume(this.sfxVolume, true);
        };

        _proto.setEffectVolume = function setEffectVolume(volume, immediate) {
          volume = volume < 0 ? 0 : volume;

          for (var key in this.sfxMap) {
            var soundObj = this.sfxMap[key];
            if (soundObj) soundObj.audioSource.volume = volume;
          }
        }
        /**
         * @canNotStop 
         */
        ;

        _proto.playSfxOneShot = function playSfxOneShot(id, volume) {
          if (!this.isEnableSFX || this.isMuteEffect) return;

          if (this.sfxMap.hasOwnProperty(id)) {
            var soundObj = this.sfxMap[id];
            volume = volume || this.sfxVolume;
            soundObj && soundObj.audioSource.playOneShot(soundObj.audioFile, volume);
          } else {
            warn("SOUND, playSfxOneShot: do not have sfx: " + id);
          }
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this.stopMusic();
          this.stopAllEffects();
        }
        /**@control_setting */
        ;

        _proto.loadCacheConfig = function loadCacheConfig() {
          var isEnableBGM = sys.localStorage.getItem(this.storageKeyBGM);
          var isEnableSFX = sys.localStorage.getItem(this.storageKeySFX);
          this.isEnableBGM = isEnableBGM != null ? JSON.parse(isEnableBGM) : true;
          this.isEnableSFX = isEnableSFX != null ? JSON.parse(isEnableSFX) : true;
        };

        _proto.bgmToggle = function bgmToggle() {
          this.setBgmEnable(!this.isEnableBGM);
        };

        _proto.setBgmEnable = function setBgmEnable(enable) {
          var _this4 = this;

          this.isEnableBGM = enable;
          sys.localStorage.setItem(this.storageKeyBGM, this.isEnableBGM);

          if (this.enableMusicFunc) {
            clearTimeout(this.enableMusicFunc);
          }

          this.enableMusicFunc = setTimeout(function () {
            if (_this4.isEnableBGM) {
              _this4.playMainBGM();
            } else {
              _this4.pauseMusic();
            }

            _this4.enableMusicFunc = null;
          }, 100);
        };

        _proto.sfxToggle = function sfxToggle() {
          this.setEffectEnable(!this.isEnableBGM);
        };

        _proto.setEffectEnable = function setEffectEnable(enable) {
          this.isEnableSFX = enable;
          sys.localStorage.setItem(this.storageKeySFX, this.isEnableSFX);

          if (this.isEnableSFX) {
            this.unmuteAllEffects();
          } else {
            this.muteAllEffects();
          }
        }
        /**@implements */
        ;

        _proto.playMainBGM = function playMainBGM() {
          this.playMusic('MUSIC_MAIN');
        };

        _proto.playSFXClick = function playSFXClick() {
          this.playSfxOneShot('CLICK');
        };

        _proto.getSfxMap = function getSfxMap() {
          return this.sfxMap;
        };

        _proto.setSfxMap = function setSfxMap(data) {
          var _this5 = this;

          if (data) {
            Object.keys(data).forEach(function (key) {
              if (!_this5.sfxMap[key]) {
                _this5.sfxMap[key] = {};
              }

              Object.assign(_this5.sfxMap[key], data[key]);
            });
          }
        };

        _proto.getMusicMap = function getMusicMap() {
          return this.musicMap;
        };

        _proto.setMusicMap = function setMusicMap(data) {
          var _this6 = this;

          if (data) {
            Object.keys(data).forEach(function (key) {
              if (!_this6.musicMap[key]) {
                _this6.musicMap[key] = {};
              }

              Object.assign(_this6.musicMap[key], data[key]);
            });
          }
        };

        _proto.onDisable = function onDisable() {
          this.stopAllAudio();
          this.userGestureNode.off(Node.EventType.TOUCH_START, this.startPlayWithUserGesture, this);
        };

        _proto.test = function test() {
          this.playMusic("MUSIC_MAIN", true);
        };

        return Sound;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "musicList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "musicVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.8;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sfxVolume", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "dynamicLoading", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "storageKeyBGM", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableBackgroundMusic";
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "storageKeySFX", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "enableSound";
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LobbyLayer1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfDataStore.ts', './gfNetworkParser.ts', './EventsCode1988.ts', './gfLobbyLayer.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, log, warn, formatMoney, loadAvatarFacebook, gfEventEmitter, formatUserName, removeEvents, gfDataStore, gfNetworkParser, EventCode, gfLobbyLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      log = module.log;
      warn = module.warn;
    }, function (module) {
      formatMoney = module.formatMoney;
      loadAvatarFacebook = module.loadAvatarFacebook;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      formatUserName = module.formatUserName;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      gfLobbyLayer = module.gfLobbyLayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "92b8abW7v1A2JAmfWCgDR2K", "LobbyLayer1988", undefined);

      var ccclass = _decorator.ccclass;
      var LobbyLayer1988 = exports('LobbyLayer1988', (_dec = ccclass('LobbyLayer1988'), _dec(_class = /*#__PURE__*/function (_gfLobbyLayer) {
        _inheritsLoose(LobbyLayer1988, _gfLobbyLayer);

        function LobbyLayer1988() {
          return _gfLobbyLayer.apply(this, arguments) || this;
        }

        var _proto = LobbyLayer1988.prototype;

        _proto.onUpdateInfo = function onUpdateInfo() {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          this.txtUserName.string = formatUserName(selfInfo.Username);
          this.txtUserName.updateRenderData(true);
          this.txtWallet.string = formatMoney(selfInfo.Wallet) + " $";
          this.txtWallet.updateRenderData(true);

          if (this.avatarAtlas && loadAvatarFacebook) {
            if (selfInfo.Avatar && selfInfo.Avatar.indexOf('Avatar') === 0) {
              selfInfo.Avatar = selfInfo.Avatar.replace('Avatar', '');
            }

            loadAvatarFacebook(this.avatarSprite, selfInfo.Avatar, this.avatarAtlas, 'avatar_', 2);
          }
        };

        _proto.onUpdateLobbyWallet = function onUpdateLobbyWallet(data) {
          this.txtWallet.string = formatMoney(data) + " $";
          this.txtWallet.updateRenderData(true);
        };

        _proto.onRoomBossClick = function onRoomBossClick() {
          log("::LobbyLayer:: onRoomBossClick");
        };

        _proto.onRoomNormalClick = function onRoomNormalClick() {
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          _gfLobbyLayer.prototype.onRoomNormalClick.call(this);

          gfEventEmitter.instance.emit(EventCode.SOUND.CLICK_BUTTON_JOIN_GAME);
        };

        _proto.onRoomVipClick = function onRoomVipClick() {
          if (!gfEventEmitter || !gfEventEmitter.instance) return;

          if (!gfNetworkParser.instance.isAvailable()) {
            warn('Network socket closed');
            return;
          }

          _gfLobbyLayer.prototype.onRoomVipClick.call(this);

          gfEventEmitter.instance.emit(EventCode.SOUND.CLICK_BUTTON_JOIN_GAME);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return LobbyLayer1988;
      }(gfLobbyLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectLockFish.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Sprite, sp, UITransform, Component, getPostionInOtherNode, gfBaseEvents, registerEvent, v2Distance, getRotation, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      sp = module.sp;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "92b8e7acB5GVobQJX1aITvv", "gfEffectLockFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfEffectLockFish = exports('gfEffectLockFish', (_dec = ccclass('gfEffectLockFish'), _dec2 = property(Node), _dec3 = property(Sprite), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfEffectLockFish, _Component);

        function gfEffectLockFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "iconTarget", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "iconDot", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isFollowTarget", false);

          _defineProperty(_assertThisInitialized(_this), "_animAimName", "aim");

          _defineProperty(_assertThisInitialized(_this), "_targetFish", void 0);

          _defineProperty(_assertThisInitialized(_this), "_canPlayEffect", void 0);

          _defineProperty(_assertThisInitialized(_this), "_startPos", void 0);

          return _this;
        }

        var _proto = gfEffectLockFish.prototype; // LIFE-CYCLE CALLBACKS:

        _proto.onLoad = function onLoad() {
          this._targetFish = null;
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.STOP_LOCK_FISH, this.stopFollow, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.START_LOCK_FISH, this.startFollow, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
        };

        _proto.stopFollow = function stopFollow() {
          this._isFollowTarget = false;
        };

        _proto.startFollow = function startFollow(fish, nodeGun) {
          if (this._canPlayEffect) {
            this._canPlayEffect = false;
            this.playChangeTargetAnim();
          }

          this.node.active = true;
          this._isFollowTarget = true;
          this._targetFish = fish;
          this._startPos = getPostionInOtherNode(this.node, nodeGun);

          this._calculatorInfo();
        };

        _proto.playChangeTargetAnim = function playChangeTargetAnim() {
          if (this.iconTarget && this.iconTarget.getComponent(sp.Skeleton)) {
            this.iconTarget.getComponent(sp.Skeleton).setAnimation(0, this._animAimName, false);
          }
        };

        _proto._calculatorInfo = function _calculatorInfo() {
          var endPos = this._targetFish.getLockPositionByNodeSpace(this.node);

          if (!endPos) return;
          var distance = v2Distance(this._startPos, endPos);
          this.iconDot.node.setPosition(this._startPos);
          this.iconDot.node.getComponent(UITransform).width = distance;
          this.iconDot.node.angle = getRotation(endPos, this._startPos);
          this.iconTarget.setPosition(endPos);
        };

        _proto.resetOnExit = function resetOnExit() {
          this._isFollowTarget = false;
          this._targetFish = null;
          this.node.active = false;
        };

        _proto.update = function update() {
          if (!this._isFollowTarget) {
            this.node.active = false;
            this._canPlayEffect = true;
          } else if (this._targetFish && !this._targetFish._isOutScreen && !this._targetFish.checkDie()) {
            this._calculatorInfo();
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfEffectLockFish;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "iconTarget", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "iconDot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfEffectDragon.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfPoolManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, UITransform, instantiate, isValid, Component, getPostionInOtherNode, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, SetZIndex, removeEvents, gfReferenceManager, gfDataStore, gfPoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "93b13lotKtOj6+NH+FDVxEc", "gfEffectDragon", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfEffectDragon = exports('GfEffectDragon', (_dec = ccclass('GfEffectDragon'), _dec2 = property(Prefab), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfEffectDragon, _Component);

        function GfEffectDragon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "dragonDieSmallExplosionPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "jackpotStarPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "jackpotWinAmountPopup", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "cutSceneName", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "effectLayer", void 0);

          _defineProperty(_assertThisInitialized(_this), "endData", void 0);

          _defineProperty(_assertThisInitialized(_this), "jackpotStarFX", void 0);

          _defineProperty(_assertThisInitialized(_this), "JPWinPopup", void 0);

          _defineProperty(_assertThisInitialized(_this), "needUpdateWallet", void 0);

          _defineProperty(_assertThisInitialized(_this), "_ballList", []);

          _defineProperty(_assertThisInitialized(_this), "_ballDropping", void 0);

          _defineProperty(_assertThisInitialized(_this), "_bigWinPlaying", void 0);

          return _this;
        }

        var _proto = GfEffectDragon.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this.effectLayer = this.node.getComponent('gfEffectLayer');

          for (var i = 0; i < 4; ++i) {
            this._ballList[i] = [];
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.onRefresh, this);
          registerEvent(gfBaseEvents.DRAGON.BIG_EXPLOSION, this.dragonDieBigExplosion, this);
          registerEvent(gfBaseEvents.DRAGON.SMALL_EXPLOSION, this.dragonDieSmallExplosion, this);
          registerEvent(gfBaseEvents.DRAGON.DROP_BALL, this.dragonDropBall, this);
          registerEvent(gfBaseEvents.DRAGON.PLAY_DRAGON_BALL_JACKPOT, this.playDragonBallJackpot, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_BALL_DROP, this.onBallDropDone, this);
          registerEvent(gfBaseEvents.DRAGON.ON_END, this.onDragonEnd, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_JACKPOT_STAR, this.playDragonBallBigWin, this);
          registerEvent(gfBaseEvents.DRAGON.ADD_BALL_TO_PLAYER, this.addBallToPlayer, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_PLAYER_BIGWIN, this.onDonePlayerBigWin, this);
          registerEvent(gfBaseEvents.DRAGON.SHOW_JACKPOT_WINAMOUNT, this.onJackpotStarDone, this);
          registerEvent(gfBaseEvents.DRAGON.JACKPOT_WINAMOUNT_POPUP_CLOSE, this.updatePlayerWallet, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.REMOVE_BALL, this.removeAllBallsUser, this);
          registerEvent(gfBaseEvents.DRAGON.WARNING, this.onDragonWarning, this);
        } //
        ;

        _proto.dragonDieBigExplosion = function dragonDieBigExplosion(position) {
          var JPExplostion = gfPoolManager.instance.createBigExplosion({
            position: this.node.getComponent(UITransform).convertToNodeSpaceAR(position)
          });
          SetZIndex(JPExplostion, gfBaseConfig.instance.Z_INDEX.POPUP + 10);
        };

        _proto.dragonDieSmallExplosion = function dragonDieSmallExplosion(positions) {
          var _this2 = this;

          positions.forEach(function (pos, i) {
            _this2.scheduleOnce(function () {
              var explosion = instantiate(_this2.dragonDieSmallExplosionPrefab);
              explosion.parent = _this2.node;
              explosion.position = _this2.node.getComponent(UITransform).convertToNodeSpaceAR(pos);
            }, i * 0.15);
          });
        };

        _proto.dragonDropBall = function dragonDropBall(data) {
          var _this3 = this;

          var dragonPosition = this.node.getComponent(UITransform).convertToNodeSpaceAR(data.position);
          data.forEach(function (d) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(d.DeskStation);
            var playerIndex = player.index;
            var playerBallCount = _this3._ballList[playerIndex].length;

            for (var i = playerBallCount; i < d.Balls; ++i) {
              var ball = gfPoolManager.instance.getDragonBall(i);
              ball.node.parent = _this3.node;
              ball.dropToPlayer(dragonPosition, player.getBallHolder(i), d.DeskStation);

              _this3._ballList[playerIndex].push(ball);

              ++_this3._ballDropping;
            }
          });
        };

        _proto.addBallToPlayer = function addBallToPlayer(_ref) {
          var ballCount = _ref.ballCount,
              playerIndex = _ref.playerIndex;
          var player = gfReferenceManager.instance.getPlayerByIndex(playerIndex);

          for (var i = this._ballList[playerIndex].length; i < ballCount; ++i) {
            var ball = gfPoolManager.instance.getDragonBall(i);
            ball.addToPlayer(player.getBallHolder(i));

            this._ballList[playerIndex].push(ball);
          }
        };

        _proto.onDragonEnd = function onDragonEnd(data) {
          var _this4 = this;

          this.endData = data;

          if (data.wonJackpot) {
            this.endData.jackpotAmount = this.getJackpotWinAmount();
          }

          data.Result.forEach(function (result) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(result.DeskStation);

            if (player.isMe) {
              player.addGoldReward(result.WinAmount);

              if (result.DeskStation === _this4.endData.DeskStation) {
                _this4.needUpdateWallet = true;
              }
            }
          });

          if (data.Result && this._ballDropping === 0) {
            this.playDragonEndEffect();
          }
        };

        _proto.onBallDropDone = function onBallDropDone() {
          --this._ballDropping;

          if (this._ballDropping === 0) {
            if (this.endData) {
              this.playDragonEndEffect();
            }
          }
        };

        _proto.playDragonEndEffect = function playDragonEndEffect() {
          if (this.endData.wonJackpot) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

            if (player && player.isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.ADD_ANIM_TO_QUEUE_ANIM, "JACKPOT", this.endData);
            } else {
              this.playDragonBallJackpot();
            }
          } else {
            this.playDragonBallBigWin();
          }
        };

        _proto.playDragonBallJackpot = function playDragonBallJackpot() {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

          if (player.isActive()) {
            this.jackpotStarFX = instantiate(this.jackpotStarPrefab);
            this.jackpotStarFX.parent = this.node;
            var ballList = this._ballList[player.index];
            this.jackpotStarFX.getComponent('gfJackpotStarFX').playAnimation(ballList);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.COLLECT_BALL);
          } else {
            this.playDragonBallBigWin();
          }
        };

        _proto.playWheelDragonBallsJackpot = function playWheelDragonBallsJackpot(deskStation, winAmount) {
          var playerIndex = gfReferenceManager.instance.getPlayerByDeskStation(deskStation).index;

          var wheel = this.effectLayer._getWheel(playerIndex);

          wheel.showDragonBallsJackpot({
            winValue: winAmount
          });
        };

        _proto.playDragonBallBigWin = function playDragonBallBigWin() {
          var _this5 = this;

          this.endData.Result.forEach(function (result) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(result.DeskStation);

            if (player.isActive()) {
              if (result.DeskStation === _this5.endData.DeskStation) {
                if (!player.isMe) {
                  _this5.playWheelDragonBallsJackpot(result.DeskStation, result.WinAmount);
                }
              } else if (result.WinAmount) {
                _this5.playWheelDragonBallsWin(result.DeskStation, result.WinAmount);
              }
            }
          });
          this.onFinishState();
        };

        _proto.playWheelDragonBallsWin = function playWheelDragonBallsWin(deskStation, winValue) {
          var playerIndex = gfReferenceManager.instance.getPlayerByDeskStation(deskStation).index;
          var ballList = this._ballList[playerIndex];
          if (!ballList || ballList.length <= 0) return;
          ++this._bigWinPlaying;
          var isValidBall = true;

          var wheel = this.effectLayer._getWheel(playerIndex);

          for (var i = 0; i < ballList.length; i++) {
            var ball = ballList[i];
            var pos = getPostionInOtherNode(this.node, ball.node);

            if (!ball.node.parent) {
              isValidBall = false;
              break;
            }

            ball.node.setParent(this.node);
            ball.node.active = true;
            ball.node.position = pos;
            var destination = getPostionInOtherNode(this.node, wheel.node);
            ball.moveToBigWinEffect({
              ballIndex: i,
              position: destination,
              playerIndex: playerIndex
            });
          }

          if (isValidBall) {
            wheel.showDragonBalls({
              winValue: winValue,
              ballCount: ballList.length
            });
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BALL_REWARD);
          }

          ballList.length = 0;
        };

        _proto.onJackpotStarDone = function onJackpotStarDone() {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

          if (player.isMe) {
            this.showJPBoss();
          }
        };

        _proto.getJackpotWinAmount = function getJackpotWinAmount() {
          for (var i = 0; i < this.endData.Result.length; ++i) {
            var result = this.endData.Result[i];

            if (result.DeskStation === this.endData.DeskStation) {
              return result.WinAmount;
            }
          }

          return 0;
        };

        _proto.showJPBoss = function showJPBoss() {
          gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.SHOW_CUT_SCENE, this.cutSceneName, this.endData);
        };

        _proto.updatePlayerWallet = function updatePlayerWallet() {
          if (this.endData) {
            var player = gfReferenceManager.instance.getPlayerByDeskStation(this.endData.DeskStation);

            if (player && player.isMe) {
              player.addToDisplayWallet(this.endData.jackpotAmount);
            }
          }

          this.needUpdateWallet = false;
          this.onFinishState();
        };

        _proto.onDonePlayerBigWin = function onDonePlayerBigWin() {
          --this._bigWinPlaying;
          this.onFinishState();
        };

        _proto.onFinishState = function onFinishState() {
          if (this._bigWinPlaying > 0 || this.needUpdateWallet) return;
          this.onRefresh();
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_ALL_BIGWIN);
        };

        _proto.removeAllBalls = function removeAllBalls() {
          this._ballList.forEach(function (arr) {
            arr.forEach(function (ball) {
              ball.returnPool();
            });
            arr.length = 0;
          });

          this._ballDropping = 0;
        };

        _proto.removeAllBallsUser = function removeAllBallsUser(data) {
          var _this6 = this;

          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          var ballList = this._ballList[player.index];
          this._ballList[player.index] = [];
          ballList.forEach(function (ball) {
            if (ball.isDropping()) {
              _this6.onBallDropDone();
            }

            if (!ball.isInJackpotStar()) {
              ball.returnPool();
            }
          });
        };

        _proto.onDragonWarning = function onDragonWarning() {
          gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.HIDE_CUT_SCENE, this.cutSceneName);
        };

        _proto.removeAllEffects = function removeAllEffects() {
          if (this.jackpotStarFX) {
            if (isValid(this.jackpotStarFX)) {
              this.jackpotStarFX.destroy();
            }

            this.jackpotStarFX = null;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.CUT_SCENE.HIDE_CUT_SCENE, this.cutSceneName);
        };

        _proto.onRefresh = function onRefresh() {
          this.removeAllBalls();
          this.removeAllEffects();
          this.endData = null;
          this.unscheduleAllCallbacks();
        };

        _proto.getMyTotalBall = function getMyTotalBall() {
          return this.getTotalBallOfUser(gfDataStore.instance.getSelfDeskStation());
        };

        _proto.getTotalBallOfUser = function getTotalBallOfUser(deskStation) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);

          if (player) {
            return this._ballList[player.index].length;
          }

          return 0;
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();
          removeEvents(this);
        };

        return GfEffectDragon;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dragonDieSmallExplosionPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jackpotStarPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "jackpotWinAmountPopup", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "cutSceneName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup17.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "94f2antKEdIdIb9aGxYo4Py", "gfFishGroup17", undefined);

      var gfFishGroup17 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup17() {}

        gfFishGroup17.create = function create() {
          var yPos = gfBaseConfig.instance.AppSize.Height / 2;
          var left = -600;
          var deltaX = 410;
          var right = gfBaseConfig.instance.AppSize.Width - left;

          if (gfFishGroupData.isFlipped()) {
            var _ref = [right, left];
            left = _ref[0];
            right = _ref[1];
            deltaX = -deltaX;
          }

          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 80,
            startPos: v2(right, yPos),
            radius: 250
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 30,
            startPos: v2(right, yPos),
            radius: 180
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 16,
            startPos: v2(right - deltaX, yPos),
            radius: 100
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 16,
            startPos: v2(right + deltaX, yPos),
            radius: 100
          });
          this.createCircleFishGroup({
            moveTime: 61,
            moveScale: 2,
            count: 1,
            startPos: v2(right, yPos),
            radius: 0
          });
        };

        gfFishGroup17.createCircleFishGroup = function createCircleFishGroup(_ref2) {
          var moveTime = _ref2.moveTime,
              moveScale = _ref2.moveScale,
              count = _ref2.count,
              startPos = _ref2.startPos,
              radius = _ref2.radius;
          var flip = -gfFishGroupData.flipCoord;
          var moveOffset = flip * moveScale * (gfBaseConfig.instance.AppSize.Width + 150);
          var angleStep = 360 / count;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var fishPos = v2(startPos.x + Math.cos(i * angleStep * Math.PI / 180) * radius * gfFishGroupData.flipCoord, startPos.y + Math.sin(i * angleStep * Math.PI / 180) * radius * gfFishGroupData.flipCoord);
            fishInfo.moveAction = new FishMoveActions(fishPos);
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveTime,
              x: moveOffset,
              y: 0
            });
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        return gfFishGroup17;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/message-manager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './logger.ts', './socket-manager.ts', './routing-event.ts', './deduplicate.ts', './custom-uuid.ts', './player-info-state-manager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, logger, SocketManager, RoutingEvent, Duplicate, uuid, playerInfoStateManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      SocketManager = module.SocketManager;
    }, function (module) {
      RoutingEvent = module.RoutingEvent;
    }, function (module) {
      Duplicate = module.Duplicate;
    }, function (module) {
      uuid = module.default;
    }, function (module) {
      playerInfoStateManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "952b3tPx6hHeaijOgIuozK+", "message-manager", undefined);

      var MessageManager = /*#__PURE__*/function () {
        function MessageManager() {
          _defineProperty(this, "_config", {});

          _defineProperty(this, "_messageIdServiceIdMap", void 0);

          _defineProperty(this, "_cachedMessage", []);

          _defineProperty(this, "_socketManager", void 0);

          _defineProperty(this, "_routingEventHandler", void 0);

          _defineProperty(this, "_duplicateMessageId", void 0);

          _defineProperty(this, "playerStateInfo", void 0);

          _defineProperty(this, "_intervalExtendToken", void 0);

          this._routingEventHandler = new RoutingEvent();
          this._duplicateMessageId = new Duplicate(1000);
          this._messageIdServiceIdMap = new HashMap();
          this.playerStateInfo = playerInfoStateManager;
          this._intervalExtendToken = null;
        }

        var _proto = MessageManager.prototype;

        _proto.initSocket = function initSocket(socketUrl, token, refreshToken, data, env, games, apiUrl) {
          var _this = this;

          var serviceRest = data.serviceRest,
              urlVerifyToken = data.urlVerifyToken; // validate

          if (!socketUrl) {
            throw new Error('Updated url must not empty.');
          }

          if (!token) {
            throw new Error('Updated token must not empty.');
          }

          if (this._config.url === socketUrl && this._config.token === token) {
            return; // ignore update config.
          }

          logger.debug("MessageManager - Update new config: %j", {
            socketUrl: socketUrl,
            token: token
          });
          this.closeAndCleanUp();

          if (Array.isArray(socketUrl)) {
            socketUrl = socketUrl[parseInt(Math.random() * 10000) % socketUrl.length];
          }

          this._config.url = socketUrl;
          this._config.token = token;
          this._config.refreshToken = refreshToken;
          this._config.env = env;
          this._config.games = games;

          this.playerStateInfo._registerSystemState(this);

          this.playerStateInfo.setToken(token);

          if (serviceRest) {
            logger.debug("MessageManager - Authen token: %s", token);
            serviceRest.post({
              url: urlVerifyToken,
              data: {
                token: token
              },
              callback: function callback(res) {
                var data = res.data;

                if (data.data && data.data.userId) {
                  logger.debug("MessageManager - Authen token success.", token);
                  data = data.data;

                  _this.playerStateInfo.setUserId(data.userId);

                  _this.playerStateInfo.setToken(data.token);

                  _this.playerStateInfo.setDisplayName(data.displayName);

                  _this.playerStateInfo.setWalletBalance({
                    data: {
                      amount: parseInt(data.wallet),
                      availableAmount: parseInt(data.wallet),
                      version: parseInt(data.walletVersion),
                      pAmt: parseInt(data.pWallet),
                      pAvaiAmt: parseInt(data.pWallet),
                      pVer: parseInt(data.walletVersion)
                    }
                  });

                  _this._initSocket();
                } else {
                  logger.debug("MessageManager - Authen token fail.");

                  _this._routingEventHandler.onCannotAuthen();

                  _this.closeAndCleanUp();
                }
              },
              callbackErr: function callbackErr() {
                logger.debug("Authen token error");

                _this._routingEventHandler.onCannotAuthen();

                _this.closeAndCleanUp();
              },
              apiUrl: apiUrl
            });
          } else {
            this._initSocket();
          }
        };

        _proto.subscribe = function subscribe(channelName) {
          if (channelName === void 0) {
            channelName = '';
          }

          if (this._socketManager) {
            this._socketManager.subscribe(channelName);
          } else {
            throw new Error("Haven't init socket connection. Please update config.");
          }
        };

        _proto.unSubscribe = function unSubscribe(channelName) {
          if (channelName === void 0) {
            channelName = '';
          }

          if (this._socketManager) {
            this._socketManager.unSubscribe(channelName);
          }
        };

        _proto.sendMessage = function sendMessage(serviceId, payload, messageId) {
          if (serviceId === void 0) {
            serviceId = '';
          }

          if (payload === void 0) {
            payload = {};
          }

          if (messageId === void 0) {
            messageId = '';
          }

          messageId = messageId || uuid();

          this._messageIdServiceIdMap.set(messageId, serviceId);

          if (this._socketManager) {
            if (this._socketManager.isAbleSendingData()) {
              logger.debug("MessageManager - sendMessage: %s - %j", serviceId, payload);

              this._socketManager.sendMessage({
                messageId: messageId,
                data: payload
              });
            } else {
              this._cachedMessage.push({
                serviceId: serviceId,
                payload: payload,
                messageId: messageId
              });

              this._initSocket();
            }
          } else {
            this._cachedMessage.push({
              serviceId: serviceId,
              payload: payload,
              messageId: messageId
            });
          }

          return messageId;
        }
        /**
         *
         * @param {*} chatData : {serviceId, groupId, content, sender}
         */
        ;

        _proto.sendChatMessage = function sendChatMessage(chatData) {
          if (chatData === void 0) {
            chatData = {};
          }

          if (this._socketManager) {
            var chatMessage = {
              messageId: uuid(),
              data: chatData
            };
            logger.debug("MessageManager - sendChatMessage: %j", chatMessage);

            this._socketManager.sendChatMessage(chatMessage);
          } else {
            logger.error('sendChatMessage: _socketManager was not setup.');
          }
        };

        _proto.removeSendingMessage = function removeSendingMessage(listMessageId) {
          if (listMessageId === void 0) {
            listMessageId = '';
          }

          if (this._socketManager) {
            this._socketManager.removeSendingMessage(listMessageId);
          }
        };

        _proto.registerGame = function registerGame(serviceId, commandHandler, eventHander) {
          if (serviceId === void 0) {
            serviceId = '';
          }

          this._routingEventHandler.registerGame(serviceId, commandHandler, eventHander);
        };

        _proto.unregisterGame = function unregisterGame(serviceId) {
          if (serviceId === void 0) {
            serviceId = '';
          }

          this._routingEventHandler.unregisterGame(serviceId);
        }
        /**
         * - clean up handler.
         * - clean up config.
         * - clean up socket.
         */
        ;

        _proto.closeAndCleanUp = function closeAndCleanUp() {
          logger.debug("MessageManager - closeAndCleanUp.");

          this._routingEventHandler.onCannotConnect();

          this._routingEventHandler.cleanUp();

          this._config = {};

          this._duplicateMessageId.clearAll();

          this._messageIdServiceIdMap.clear();

          this._cachedMessage = [];

          if (this._socketManager) {
            this._socketManager.close();

            this._socketManager = null;
          }

          this.playerStateInfo.cleanUp();

          this._stopIntervalExtendToken();
        };

        _proto._startIntervalExtendToken = function _startIntervalExtendToken() {
          var _this2 = this;

          this._stopIntervalExtendToken();

          this._intervalExtendToken = setInterval(function () {
            _this2.sendMessage('0000', {
              event: 'exTkn',
              data: {
                tkn: _this2.playerStateInfo.getToken(),
                cId: uuid(),
                sId: '0000'
              }
            });
          }, 5 * 60 * 1000);
        };

        _proto._stopIntervalExtendToken = function _stopIntervalExtendToken() {
          clearInterval(this._intervalExtendToken);
          this._intervalExtendToken = null;
        };

        _proto._initSocket = function _initSocket() {
          var _this3 = this;

          logger.debug("MessageManager - _initSocket.");

          if (!this._socketManager || !this._socketManager.isAbleSendingData()) {
            logger.debug("MessageManager - _initSocket - new socket.");
            this._socketManager = new SocketManager({
              url: this._config.url,
              token: this._config.token,
              refreshToken: this._config.refreshToken,
              env: this._config.env,
              games: this._config.games,
              reconnectionAttempts: 999999,
              // times
              reconnectionDelay: 500,
              nextTickIn: 150,
              //ms
              numberRetrySendingMessage: 10 // times

            });

            this._handleSocketEvent();

            this._handleSocketStatus();

            this._cachedMessage.forEach(function (_ref) {
              var _ref$serviceId = _ref.serviceId,
                  serviceId = _ref$serviceId === void 0 ? '' : _ref$serviceId,
                  _ref$payload = _ref.payload,
                  payload = _ref$payload === void 0 ? {} : _ref$payload,
                  _ref$messageId = _ref.messageId,
                  messageId = _ref$messageId === void 0 ? '' : _ref$messageId;

              _this3.sendMessage(serviceId, payload, messageId);
            });

            this._cachedMessage = [];
          } else {
            logger.debug("MessageManager - _initSocket - exist socket.");
          }
        };

        _proto._handleSocketEvent = function _handleSocketEvent() {
          var _this4 = this;

          logger.debug("MessageManager - _handleSocketEvent.");

          this._socketManager.registerEvent(SocketManager.NEW_MESSAGE_EVENT, function (message) {
            if (_this4._duplicateMessageId.exists(message.messageId)) {
              return;
            }

            _this4._duplicateMessageId.insert(message.messageId);

            _this4._routingEventHandler.onEvent(message.data);
          });

          this._socketManager.registerEvent(SocketManager.SEND_MESSAGE_SUCCESS_EVENT, function (messageId) {
            var serviceId = _this4._messageIdServiceIdMap.get(messageId);

            if (serviceId) {
              _this4._routingEventHandler.onAck(serviceId, messageId);

              _this4._messageIdServiceIdMap["delete"](messageId);
            }
          });

          this._socketManager.registerEvent(SocketManager.CAN_NOT_SEND_MESSAGE_EVENT, function (messageId) {
            var serviceId = _this4._messageIdServiceIdMap.get(messageId);

            if (serviceId) {
              _this4._messageIdServiceIdMap["delete"](messageId);

              _this4._routingEventHandler.onCannotSendMessage(serviceId, messageId);
            }
          });

          this._socketManager.registerEvent(SocketManager.UPDATE_TOKEN, function (_ref2) {
            var token = _ref2.token;

            _this4.playerStateInfo.setToken(token);
          });
        };

        _proto._handleSocketStatus = function _handleSocketStatus() {
          var _this5 = this;

          logger.debug("MessageManager - _handleSocketStatus.");

          this._socketManager.registerEvent(SocketManager.CAN_NOT_CONNECT_EVENT, function () {
            _this5._routingEventHandler.onCannotConnect();

            _this5.closeAndCleanUp();
          });

          this._socketManager.registerEvent(SocketManager.CONNECTED_EVENT, function () {
            _this5._routingEventHandler.onConnected();
          });

          this._socketManager.registerEvent(SocketManager.POOR_CONNECTION, function () {
            _this5._routingEventHandler.onNetworkStatus(SocketManager.POOR_CONNECTION);
          });

          this._socketManager.registerEvent(SocketManager.DISCONNECTED_CONNECTION, function () {
            _this5._routingEventHandler.onNetworkWarning(SocketManager.DISCONNECTED_CONNECTION);
          });

          this._socketManager.registerEvent(SocketManager.POPUP_DISCONNECTED_EVENT, function () {
            _this5._routingEventHandler.onShowPopupDisconnected(SocketManager.POPUP_DISCONNECTED_EVENT);
          });

          this._socketManager.registerEvent(SocketManager.PONG_EVENT, function (data) {
            _this5._routingEventHandler.onPong(data);
          });
        };

        _proto.getSocket = function getSocket() {
          return this._socketManager.getSocket();
        };

        return MessageManager;
      }();

      var messageManager = exports('default', new MessageManager());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemyBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './Config1985.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, misc, getRotation, Config1985, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      misc = module.misc;
    }, function (module) {
      getRotation = module.getRotation;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "9534dDLXxdDyK3hMmLfi7qr", "EnemyBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemyBullet = exports('EnemyBullet', (_dec = ccclass('EnemyBullet'), _dec(_class = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(EnemyBullet, _gfNode);

        function EnemyBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "moveSpeed", 100);

          _defineProperty(_assertThisInitialized(_this), "vectorX", void 0);

          _defineProperty(_assertThisInitialized(_this), "vectorY", void 0);

          _defineProperty(_assertThisInitialized(_this), "delayTime", void 0);

          _defineProperty(_assertThisInitialized(_this), "_isDie", void 0);

          return _this;
        }

        var _proto = EnemyBullet.prototype;

        _proto.init = function init(from, to, moveSpeed, delay) {
          if (moveSpeed === void 0) {
            moveSpeed = 400;
          }

          if (delay === void 0) {
            delay = 0;
          }

          this._isDie = false;
          this.node.setPosition(from);
          var angle = getRotation(to, from);
          this.node.angle = angle + 90;
          this.moveSpeed = moveSpeed;
          this.vectorX = Math.cos(misc.degreesToRadians(angle));
          this.vectorY = Math.sin(misc.degreesToRadians(angle));
          this.delayTime = delay;
        };

        _proto.update = function update(dt) {
          if (this._isDie) {
            this.onDie();
            return;
          }

          if (this.delayTime > 0) {
            this.delayTime -= dt;
          }

          if (this.delayTime > 0) return;
          dt -= this.delayTime;
          this.delayTime = 0;
          this.updatePosition(dt);
        };

        _proto.updatePosition = function updatePosition(dt) {
          var delta = dt * this.moveSpeed;
          var _this$node$position = this.node.position,
              x = _this$node$position.x,
              y = _this$node$position.y;
          x += this.vectorX * delta;
          y += this.vectorY * delta;
          this.node.setPosition(x, y, 0);
          var _Config1985$instance$ = Config1985.instance.AppSize,
              Width = _Config1985$instance$.Width,
              MaxHeight = _Config1985$instance$.MaxHeight;
          var screenOffset = 1000;

          if (x > Width + screenOffset || x < -screenOffset || y > MaxHeight + screenOffset || y < -screenOffset) {
            this._isDie = true;
          }
        };

        _proto.isDie = function isDie() {
          return this._isDie;
        };

        _proto.setIsDie = function setIsDie(isDie) {
          this._isDie = isDie;
        };

        _proto.onHit = function onHit() {
          this._isDie = true;
        };

        _proto.onDie = function onDie() {
          this.returnPool();
        };

        return EnemyBullet;
      }(gfNode), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupInfoPageView.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfPopupInfo.ts', './gfLocalize.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, PageView, Button, Label, gfBaseEvents, gfEventEmitter, GfPopupInfo, gfLocalize;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      PageView = module.PageView;
      Button = module.Button;
      Label = module.Label;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfPopupInfo = module.GfPopupInfo;
    }, function (module) {
      gfLocalize = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "9614fioKR9P/5tS213bx92q", "gfPopupInfoPageView", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupInfoPageView = exports('GfPopupInfoPageView', (_dec = ccclass('GfPopupInfoPageView'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupInfo) {
        _inheritsLoose(GfPopupInfoPageView, _GfPopupInfo);

        function GfPopupInfoPageView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupInfo.call.apply(_GfPopupInfo, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "pageViewNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnNext", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnBack", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "title", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_currInfoID", 0);

          _defineProperty(_assertThisInitialized(_this), "_pageView", null);

          return _this;
        }

        var _proto = GfPopupInfoPageView.prototype;

        _proto.initObj = function initObj() {
          if (this.getInitialized()) {
            if (this._currInfoID > 0) {
              this.initPage();
            }

            return;
          }

          _GfPopupInfo.prototype.initObj.call(this);

          this.initPage();
        };

        _proto.initPage = function initPage() {
          this._currInfoID = 0;
          this._pageView = this.pageViewNode.getComponent(PageView);

          this._pageView.node.on('page-turning', this.pageViewEvent, this);

          this._pageView.scrollToPage(this._currInfoID);

          this.activeButtons(this._currInfoID);
        };

        _proto.pageViewEvent = function pageViewEvent() {
          this._currInfoID = this._pageView.getCurrentPageIndex();
          this.activeButtons(this._currInfoID);
        };

        _proto.initLanguage = function initLanguage() {
          this.title[0] = gfLocalize.instance.popupTitle.infoHSC;
          this.title[1] = gfLocalize.instance.popupTitle.infoTNDB;
          this.title[2] = gfLocalize.instance.popupTitle.infoKN;
          this.title[3] = gfLocalize.instance.popupTitle.infoHuRong;
          this.title[4] = gfLocalize.instance.popupTitle.infoHuRong;
          this.title[5] = gfLocalize.instance.popupTitle.miniboss;
          this.title[6] = gfLocalize.instance.popupTitle.miniboss;
        };

        _proto.next = function next() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);

          this._pageView.scrollToPage(this._currInfoID + 1);

          this._currInfoID++;
          this.activeButtons(this._currInfoID);
        };

        _proto.previous = function previous() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);

          this._pageView.scrollToPage(this._currInfoID - 1);

          this._currInfoID--;
          this.activeButtons(this._currInfoID);
        };

        _proto.activeButtons = function activeButtons(id) {
          var btnNext = this.btnNext,
              btnBack = this.btnBack,
              popupTitle = this.popupTitle;

          var totalInfo = this._pageView.node.getChildByName('view').getChildByName('content').children.length;

          if (id >= totalInfo - 1) {
            id = totalInfo - 1;
            btnNext.getComponent(Button).interactable = false;
          } else {
            btnNext.getComponent(Button).interactable = true;
          }

          if (id <= 0) {
            id = 0;
            btnBack.getComponent(Button).interactable = false;
          } else {
            btnBack.getComponent(Button).interactable = true;
          }

          this._currInfoID = id;

          if (popupTitle) {
            if (popupTitle.getComponent(Label)) {
              // const textData = this.titles;
              popupTitle.getComponent(Label).string = this.title[this._currInfoID]; // textData[this.curInfoID];
            }
          }
        };

        _proto.resetInfo = function resetInfo() {
          this._pageView.scrollToPage(0, 0.01);

          this._currInfoID = 0;
          this.activeButtons(this._currInfoID);
        };

        _proto.onClose = function onClose() {
          _GfPopupInfo.prototype.onClose.call(this);

          this.resetInfo();
        };

        return GfPopupInfoPageView;
      }(GfPopupInfo), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "pageViewNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "title", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [""];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Drill1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfBaseFish.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Color, Node, Collider2D, Contact2DType, BoxCollider2D, misc, sp, v3, tween, MotionStreak, Tween, Component, setOpacity, getRandomInt, gfEventEmitter, getRotation, deepCopy, gfBaseFish, EventCode, DataStore1988, Config1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      Node = module.Node;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      BoxCollider2D = module.BoxCollider2D;
      misc = module.misc;
      sp = module.sp;
      v3 = module.v3;
      tween = module.tween;
      MotionStreak = module.MotionStreak;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      getRotation = module.getRotation;
      deepCopy = module.deepCopy;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "97008xI5G1Npbi+O/S3SVAl", "Drill1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var STATE = {
        NORMAL: 1,
        NORMAL_SLOWDOWN: 2,
        DAMAGED: 3,
        EXPLOSION: 4,
        NONE_ACTION: 0
      };
      var DRILL_CONFIG = {
        HIT_COLOR: new Color(230, 30, 30, 255),
        SPEED: 2730 * 0.67,
        MAX_SPEED: 2,
        MIN_SPEED: 0.7,
        SCALE: {
          start: 2 / 3,
          normal: 1,
          medium: 1.5,
          high: 3
        }
      };
      var RATIO_DIE = 60;
      var Drill1988 = exports('Drill1988', (_dec = ccclass('Drill1988'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Drill1988, _Component);

        function Drill1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "mainGun", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "motionStreak1", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "motionStreak2", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_radian", 0);

          _defineProperty(_assertThisInitialized(_this), "_currentState", STATE.NONE_ACTION);

          _defineProperty(_assertThisInitialized(_this), "_mainMaterial", null);

          _defineProperty(_assertThisInitialized(_this), "_dataCatchFish", null);

          _defineProperty(_assertThisInitialized(_this), "_vectorX", null);

          _defineProperty(_assertThisInitialized(_this), "_vectorY", null);

          _defineProperty(_assertThisInitialized(_this), "_lastPos", null);

          _defineProperty(_assertThisInitialized(_this), "_isDie", true);

          return _this;
        }

        var _proto = Drill1988.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.node.getComponent(BoxCollider2D).enabled = false;
          this._currentState = STATE.NONE_ACTION;
          setOpacity(this.mainGun, 0);
        };

        _proto.initData = function initData(data) {
          setOpacity(this.mainGun, 255);
          this._vectorX = Math.cos(misc.degreesToRadians(this.node.angle));
          this._vectorY = Math.sin(misc.degreesToRadians(this.node.angle));
          this._dataCatchFish = data;
          this.node.getComponent(BoxCollider2D).enabled = true;
          this._mainMaterial = this.mainGun.getComponent(sp.Skeleton);
          this._isDie = false;

          if (data.isResume) {
            this.setupResume(data);
          } else {
            this.setState(STATE.NORMAL);
            this.node.scale = v3(DRILL_CONFIG.SCALE.start, DRILL_CONFIG.SCALE.start, 1);
            tween(this.node).to(0.5, {
              scale: v3(DRILL_CONFIG.SCALE.normal, DRILL_CONFIG.SCALE.normal, 1)
            }).start();
          }
        };

        _proto.setupResume = function setupResume(data) {
          gfEventEmitter.instance.emit(EventCode.FISH_LAYER.CREATE_LIST_FISH_FAKE, this._dataCatchFish.ListFish); // -1s anim shake drill

          var timeLost = data.BuildTick ? Math.max(0, (DataStore1988.instance.getTime() - data.BuildTick) / 1000) - 1 : 0;
          var curTime = 0;
          var dt = 1 / 60;
          this._currentState = STATE.NORMAL;

          while (curTime <= timeLost) {
            this.updatePosition(dt, true);
            curTime += dt;
          }
        };

        _proto.applyHitColor = function applyHitColor() {
          if (this._mainMaterial) {
            this._mainMaterial.color = DRILL_CONFIG.HIT_COLOR;
          }
        };

        _proto.resetColor = function resetColor() {
          if (this._mainMaterial) {
            this._mainMaterial.color = new Color(255, 255, 255, 255);
          }
        };

        _proto.onMoveToPlayer = function onMoveToPlayer(startPos, endPos, angle, callback) {
          var _this2 = this;

          this._currentState = STATE.NONE_ACTION;
          this.motionStreak1.active = false;
          this.motionStreak2.active = false;
          this.node.angle = angle;
          this.node.scale = v3(DRILL_CONFIG.SCALE.start, DRILL_CONFIG.SCALE.start, 1);
          this.node.setPosition(startPos);
          tween(this.node).delay(0).call(function () {
            setOpacity(_this2.mainGun, 255);
          }).delay(0.85).parallel(tween().to(1, {
            position: endPos
          }, {
            easing: 'sineIn'
          }), tween().to(0.35, {
            scale: v3(DRILL_CONFIG.SCALE.medium, DRILL_CONFIG.SCALE.medium, 1)
          }).to(0.65, {
            scale: v3(DRILL_CONFIG.SCALE.start, DRILL_CONFIG.SCALE.start, 1)
          })).delay(0.58).call(function () {
            callback && callback();
          }).removeSelf().call(function () {
            _this2.node.removeFromParent();

            _this2.node.destroy();
          }).start();
        };

        _proto.playAnimDrillFire = function playAnimDrillFire() {
          this.motionStreak1.active = true;
          this.motionStreak2.active = true;
          var motionStreak1 = this.motionStreak1.getComponent(MotionStreak);
          var motionStreak2 = this.motionStreak2.getComponent(MotionStreak);
          motionStreak1.stroke = 0;
          motionStreak2.stroke = 0;
          tween(motionStreak1).to(1.5, {
            stroke: 110
          }).start();
          tween(motionStreak2).to(1.5, {
            stroke: 85
          }).start();
          this.mainGun.getComponent(sp.Skeleton).setAnimation(0, "fire", true);
        };

        _proto.playAnimDrillSlowdown = function playAnimDrillSlowdown() {
          var motionStreak1 = this.motionStreak1.getComponent(MotionStreak);
          var motionStreak2 = this.motionStreak2.getComponent(MotionStreak);
          tween(motionStreak1).to(this._caculateTimeTweenOffMotion(), {
            stroke: 0
          }).start();
          tween(motionStreak2).to(this._caculateTimeTweenOffMotion(), {
            stroke: 0
          }).start();
        };

        _proto.playAnimDrillDamaged = function playAnimDrillDamaged() {
          var _this3 = this;

          this.mainGun.getComponent(sp.Skeleton).setAnimation(0, "idle", true);

          if (!this._dataCatchFish.isResume) {
            gfEventEmitter.instance.emit(EventCode.FISH_LAYER.CREATE_LIST_FISH_FAKE, this._dataCatchFish.ListFish);
          }

          tween(this.node).parallel(tween().by(2, {
            angle: 360
          }), tween().repeat(2, tween().call(function () {
            _this3.playAnimHit(0.5);
          }).to(0.5, {
            scale: v3(DRILL_CONFIG.SCALE.medium, DRILL_CONFIG.SCALE.medium, 1)
          }).to(0.5, {
            scale: v3(DRILL_CONFIG.SCALE.normal, DRILL_CONFIG.SCALE.normal, 1)
          }))).repeatForever().start();
        };

        _proto.playAnimHit = function playAnimHit(duration) {
          var _this4 = this;

          if (duration === void 0) {
            duration = 0.1;
          }

          tween(this.mainGun).call(function () {
            _this4.applyHitColor();
          }).delay(duration).call(function () {
            _this4.resetColor();
          }).delay(duration).start();
        };

        _proto.playAnimStateExplosion = function playAnimStateExplosion() {
          var _this5 = this;

          var lastPos = v3(640, 360, 1);
          var moveTime = 1.125;
          this.removeAllTween();
          Tween.stopAllByTarget(this.node);
          tween(this.node).parallel(tween().to(moveTime, {
            position: lastPos
          }), tween().by(moveTime, {
            angle: 90
          }), tween().repeat(7, tween().call(function () {
            _this5.playAnimHit(0.05);
          }).delay(0.15)), tween().to(moveTime / 3, {
            scale: v3(DRILL_CONFIG.SCALE.high, DRILL_CONFIG.SCALE.high, 1)
          }).to(moveTime * 2 / 3, {
            scale: v3(DRILL_CONFIG.SCALE.normal, DRILL_CONFIG.SCALE.normal, 1)
          })).call(function () {
            _this5.applyHitColor();

            gfEventEmitter.instance.emit(EventCode.EFFECT_LAYER.DRILL_EXPLOSION, {
              nodeDrill: _this5.node,
              deskStation: _this5._dataCatchFish.DeskStation
            });
          }).delay(0.55).call(function () {
            gfEventEmitter.instance.emit(EventCode.FISH_LAYER.CATCH_FISH_BY_SKILL, _this5._dataCatchFish);
            setOpacity(_this5.mainGun, 0);
          }).delay(1).call(function () {
            gfEventEmitter.instance.emit(EventCode.EFFECT_LAYER.PLAY_EFFECT_BIGWIN, _this5._dataCatchFish);
            gfEventEmitter.instance.emit(EventCode.EFFECT_LAYER.REMOVE_DRILL, {
              nodeDrill: _this5.node,
              deskStation: _this5._dataCatchFish.DeskStation
            });
            _this5._isDie = true;

            _this5.node.removeFromParent();

            _this5.node.destroy();
          }).start();
        };

        _proto.update = function update(dt) {
          if (this._currentState == STATE.EXPLOSION || this._currentState == STATE.NONE_ACTION || this._isDie) return;

          if (this._lastPos) {
            this.updatePosition(dt);
            if (this._currentState == STATE.NORMAL || this._currentState == STATE.NORMAL_SLOWDOWN) this.node.angle = getRotation(this.node.getPosition(), this._lastPos);
          }

          this._lastPos = this.node.getPosition();
        };

        _proto.setState = function setState(nextState) {
          if (nextState == this._currentState) return;

          switch (nextState) {
            case STATE.NORMAL:
              this.playAnimDrillFire();
              break;

            case STATE.NORMAL_SLOWDOWN:
              this.playAnimDrillSlowdown();
              break;

            case STATE.DAMAGED:
              this.playAnimDrillDamaged();
              break;

            case STATE.EXPLOSION:
              this.node.getComponent(BoxCollider2D).enabled = false;
              this.playAnimStateExplosion();
          }

          this._currentState = nextState;
        };

        _proto._caculateTimeTweenOffMotion = function _caculateTimeTweenOffMotion() {
          var radian = Math.PI / 2;
          var time = radian / 0.8;
          return time;
        };

        _proto.caculateMultipleSpeedAndState = function caculateMultipleSpeedAndState(dt) {
          var nextState = this._currentState;
          var multipleSpeed = 1 + Math.sin(this._radian);
          multipleSpeed = multipleSpeed > DRILL_CONFIG.MAX_SPEED ? DRILL_CONFIG.MAX_SPEED : multipleSpeed < DRILL_CONFIG.MIN_SPEED ? DRILL_CONFIG.MIN_SPEED : multipleSpeed;

          switch (this._currentState) {
            case STATE.NORMAL:
              if (this._radian >= Math.PI / 2) {
                nextState = STATE.NORMAL_SLOWDOWN;
              } else {
                this._radian += dt;
              }

              break;

            case STATE.NORMAL_SLOWDOWN:
              if (this._radian >= Math.PI) {
                nextState = STATE.DAMAGED;
              } else {
                this._radian += dt;
              }

              break;

            case STATE.DAMAGED:
              if (this._radian >= Math.PI * 3 / 2) {
                nextState = STATE.EXPLOSION;
              } else {
                this._radian += dt;
              }

              break;
          }

          return {
            nextState: nextState,
            multipleSpeed: multipleSpeed
          };
        };

        _proto.updatePosition = function updatePosition(dt, isResume) {
          if (isResume === void 0) {
            isResume = false;
          }

          var _this$caculateMultipl = this.caculateMultipleSpeedAndState(dt),
              nextState = _this$caculateMultipl.nextState,
              multipleSpeed = _this$caculateMultipl.multipleSpeed;

          var isCollision = false;
          var delta = dt * DRILL_CONFIG.SPEED * multipleSpeed;
          var SceneBox = Config1988.instance.SceneBox;

          if (this.node.position.x > SceneBox.Right) {
            this._vectorX *= -1;
            this.node.position.x = SceneBox.Right;
            gfEventEmitter.instance.emit(EventCode.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 10,
              countStep: 1,
              shakeStyle: Config1988.instance.SHAKE_SCREEN_STYLE.HORIZONTAL
            });
            isCollision = true;
          } else if (this.node.position.x < SceneBox.Left) {
            this._vectorX *= -1;
            this.node.position.x = SceneBox.Left;
            gfEventEmitter.instance.emit(EventCode.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 10,
              countStep: 1,
              shakeStyle: Config1988.instance.SHAKE_SCREEN_STYLE.HORIZONTAL
            });
            isCollision = true;
          }

          if (this.node.position.y > SceneBox.Top) {
            this._vectorY *= -1;
            this.node.position.y = SceneBox.Top;
            gfEventEmitter.instance.emit(EventCode.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 10,
              countStep: 1,
              shakeStyle: Config1988.instance.SHAKE_SCREEN_STYLE.VERTICAL
            });
            isCollision = true;
          } else if (this.node.position.y < SceneBox.Bottom) {
            this._vectorY *= -1;
            this.node.position.y = SceneBox.Bottom;
            gfEventEmitter.instance.emit(EventCode.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 5,
              countStep: 1,
              shakeStyle: Config1988.instance.SHAKE_SCREEN_STYLE.VERTICAL
            });
            isCollision = true;
          }

          this.node.position.x += this._vectorX * delta;
          this.node.position.y += this._vectorY * delta;

          if (isCollision) {
            if (!isResume) {
              this.playAnimHit();
              var haveTrail = true;

              if (this._currentState == STATE.DAMAGED || this._currentState == STATE.EXPLOSION) {
                haveTrail = false;
              }

              gfEventEmitter.instance.emit(EventCode.SOUND.DRILL_HIT_WALL, haveTrail);
            }

            this.setState(nextState);
          }
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var fish = other.getComponent(gfBaseFish);
          if (!fish) return;

          var _this$getFishByID = this.getFishByID(fish.getId()),
              fishInfo = _this$getFishByID.fishInfo,
              index = _this$getFishByID.index;

          if (fishInfo) {
            var randomDie = getRandomInt(1, 100);

            if (randomDie <= RATIO_DIE) {
              this._dataCatchFish.ListFish.splice(index, 1);

              var data = deepCopy(this._dataCatchFish);
              data.ListFish = [fishInfo];
              gfEventEmitter.instance.emit(EventCode.FISH_LAYER.CATCH_FISH_BY_SKILL, data);
            }
          }
        };

        _proto.getFishByID = function getFishByID(ID) {
          for (var i = 0; i < this._dataCatchFish.ListFish.length; ++i) {
            var fishInfo = deepCopy(this._dataCatchFish.ListFish[i]);

            if (+fishInfo.FishID == +ID) {
              return {
                fishInfo: fishInfo,
                index: i
              };
            }
          }

          return {
            fishInfo: null,
            index: undefined
          };
        };

        _proto.setDie = function setDie() {
          this._isDie = true;
        };

        _proto.removeAllTween = function removeAllTween() {
          Tween.stopAllByTarget(this.motionStreak1.getComponent(MotionStreak));
          Tween.stopAllByTarget(this.motionStreak2.getComponent(MotionStreak));
          Tween.stopAllByTarget(this.node);
          Tween.stopAllByTarget(this.mainGun);
        };

        return Drill1988;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "mainGun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "motionStreak1", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "motionStreak2", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoveObjectByPath1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfUtilities.ts', './CurvePoint1985.ts', './MoveDataType1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Component, v3f, v2Distance, getRotation, CurvePoint1985, FORMATION_TYPE, Round, VALUE_TYPE;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      v3f = module.v3f;
    }, function (module) {
      v2Distance = module.v2Distance;
      getRotation = module.getRotation;
    }, function (module) {
      CurvePoint1985 = module.CurvePoint1985;
    }, function (module) {
      FORMATION_TYPE = module.FORMATION_TYPE;
      Round = module.Round;
      VALUE_TYPE = module.VALUE_TYPE;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "975b8sy2BZHjqp/oXoxZy3D", "MoveObjectByPath1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;

      var gfptSpeedScaleData = /*#__PURE__*/function () {
        function gfptSpeedScaleData() {
          _defineProperty(this, "curve", new CurvePoint1985());

          _defineProperty(this, "type", void 0);

          _defineProperty(this, "value", void 0);
        }

        var _proto = gfptSpeedScaleData.prototype;

        _proto.setData = function setData(data) {
          if (data.type == VALUE_TYPE.Linear) {
            this.type = VALUE_TYPE.Linear;
            this.value = data.value;
          } else {
            this.curve.setData(data.pts);
            this.type = VALUE_TYPE.Curve;
          }
        };

        _proto.getValue = function getValue(step) {
          if (this.type == VALUE_TYPE.Linear) {
            return this.value;
          }

          var value = this.curve.getPoint(step);

          if (!value) {
            return this.curve.getLastPoint().y;
          }

          return value.y;
        };

        return gfptSpeedScaleData;
      }();

      var MoveObjectByPath1985 = exports('MoveObjectByPath1985', (_dec = ccclass('MoveObjectByPath1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MoveObjectByPath1985, _Component);

        function MoveObjectByPath1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "pathCurve", new CurvePoint1985());

          _defineProperty(_assertThisInitialized(_this), "speedData", new gfptSpeedScaleData());

          _defineProperty(_assertThisInitialized(_this), "scaleData", new gfptSpeedScaleData());

          _defineProperty(_assertThisInitialized(_this), "isMoving", void 0);

          _defineProperty(_assertThisInitialized(_this), "currStep", void 0);

          return _this;
        }

        var _proto2 = MoveObjectByPath1985.prototype;

        _proto2.start = function start() {// [3]
        };

        _proto2.setPath = function setPath(data) {
          this.pathCurve.setData(data);
        };

        _proto2.setSpeed = function setSpeed(data) {
          this.speedData.setData(data);
        };

        _proto2.setScale = function setScale(data) {
          this.scaleData.setData(data);
        };

        _proto2.setFormation = function setFormation(formation, index) {
          if (formation.type == FORMATION_TYPE.Shape) {
            //@HACK
            if (index >= formation.pts.length) {
              index = formation.pts.length - 1;
            } //@END-HACK


            this.pathCurve.applyOffset(formation.pts[index]);
          } else {
            this.pathCurve.applySpace(formation.space * index * this.scaleData.getValue(0));
          }
        };

        _proto2.move = function move() {
          this.unscheduleAllCallbacks();
          this.isMoving = true;
          this.currStep = 0;
          var p0 = this.pathCurve.getPoint(0);
          var scale = this.scaleData.getValue(0);
          this.node.setPosition(p0.x, p0.y, 0);
          this.node.setScale(scale, scale, 1);
        };

        _proto2.update = function update(dt) {
          if (!this.isMoving) return;
          var distanceMoved = this.speedData.getValue(this.currStep) * dt * this.scaleData.getValue(this.currStep);
          var nextPoint = this.pathCurve.getPoint(this.currStep + 1);

          if (!nextPoint) {
            this.moveDone();
            return;
          }

          var distanceToNextPoint = v2Distance(this.node.getPosition(), nextPoint);

          while (distanceMoved > distanceToNextPoint) {
            distanceMoved -= distanceToNextPoint;
            this.node.setPosition(nextPoint.x, nextPoint.y, 0);
            ++this.currStep;
            nextPoint = this.pathCurve.getPoint(this.currStep + 1);

            if (!nextPoint) {
              this.moveDone();
              return;
            }

            distanceToNextPoint = v2Distance(this.node.getPosition(), nextPoint);
          }

          var ratio = distanceMoved / distanceToNextPoint;
          var currPos = this.node.getPosition();
          var x = Round(currPos.x + (nextPoint.x - currPos.x) * ratio);
          var y = Round(currPos.y + (nextPoint.y - currPos.y) * ratio);
          this.node.setPosition(x, y, 0);
          this.node.setScale(v3f(this.scaleData.getValue(this.currStep)));
          var lastAngle = getRotation(nextPoint, this.pathCurve.getPoint(this.currStep));
          var nextAngle = getRotation(this.pathCurve.getPoint(this.currStep + 2), nextPoint);
          var angle = nextAngle - lastAngle;
          if (angle > 180) angle -= 360;
          if (angle < -180) angle += 360;
          this.node.angle = lastAngle + angle * ratio + 90;
        };

        _proto2.moveDone = function moveDone() {
          var _this2 = this;

          this.isMoving = false;
          this.scheduleOnce(function () {
            _this2.node.onDie();
          }, 0.5);
        };

        return MoveObjectByPath1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FXSkillUltimateController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MoveComp1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component, MoveComp1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }, function (module) {
      MoveComp1985 = module.MoveComp1985;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "97a9fzcfylIrpj6b1eTsz1A", "FXSkillUltimateController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FXSkillUltimateController1985 = exports('FXSkillUltimateController1985', (_dec = ccclass('FXSkillUltimateController1985'), _dec2 = property(sp.SkeletonData), _dec3 = property(sp.SkeletonData), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FXSkillUltimateController1985, _Component);

        function FXSkillUltimateController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listSpineData", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spineDataBomb", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FXSkillUltimateController1985.prototype;

        _proto.setAnimationData = function setAnimationData(data) {
          var skillID = data.skillID,
              typeFX = data.typeFX;
          var spine = this.node.getComponent(sp.Skeleton);
          spine.skeletonData = this.listSpineData[typeFX];
          var animName = spine._skeleton.data.animations[skillID].name;
          var loop = typeFX === 0 ? false : true;
          spine.setAnimation(0, animName, loop);
        };

        _proto.setAnimationSkillBomb = function setAnimationSkillBomb() {
          var spine = this.node.getComponent(sp.Skeleton);
          spine.skeletonData = this.spineDataBomb;
          spine.setAnimation(0, "Fx_Nearwin_smoke", true);
        };

        _proto.update = function update(dt) {
          var moveComp = this.node.parent.getComponent(MoveComp1985);

          if (moveComp.isDie && moveComp.isValid) {
            this.node.removeFromParent();
            this.node.destroy();
            return;
          }

          var position = moveComp.getBoxCollider().getPosition();
          this.node.setPosition(position);
        };

        return FXSkillUltimateController1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSpineData", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineDataBomb", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomEnum.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, _decorator, Enum;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
    }],
    execute: function () {
      exports({
        DialogContent: void 0,
        DialogTitle: void 0,
        DistanceType: void 0,
        HorizontalExpandDirection: void 0,
        IndicatorAngel: void 0,
        NotifyWinEffect: void 0,
        PaylineType: void 0,
        PerformanceLevel: void 0,
        QUEST_DISPLAY: void 0,
        QUEST_STATE: void 0,
        SLOT_SCREEN_MODE: void 0,
        SlotGameMode: void 0,
        SlotSceneType: void 0,
        StateGameMode: void 0,
        TOP_PLAYER_DISPLAY: void 0,
        TutorialCommandType: void 0,
        TutorialTriggerType: void 0,
        VerticalExpandDirection: void 0,
        WalletType: void 0,
        WinEffectLevel: void 0
      });

      cclegacy._RF.push({}, "98561X/zvpHDb4kZud08kR7", "CustomEnum", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PaylineType;

      (function (PaylineType) {
        PaylineType[PaylineType["Traditional"] = 0] = "Traditional";
        PaylineType[PaylineType["AllWaysToWin"] = 1] = "AllWaysToWin";
        PaylineType[PaylineType["Others"] = 9] = "Others";
      })(PaylineType || (PaylineType = exports('PaylineType', {})));

      Enum(PaylineType);
      var SlotGameMode;

      (function (SlotGameMode) {
        SlotGameMode[SlotGameMode["NormalGame"] = 0] = "NormalGame";
        SlotGameMode[SlotGameMode["FreeGame"] = 1] = "FreeGame";
        SlotGameMode[SlotGameMode["BonusGame"] = 2] = "BonusGame";
        SlotGameMode[SlotGameMode["TopUpGame"] = 3] = "TopUpGame";
        SlotGameMode[SlotGameMode["JackpotGame"] = 4] = "JackpotGame";
        SlotGameMode[SlotGameMode["GambleGame"] = 5] = "GambleGame";
        SlotGameMode[SlotGameMode["RespinGame"] = 6] = "RespinGame";
        SlotGameMode[SlotGameMode["Others"] = 9] = "Others";
      })(SlotGameMode || (SlotGameMode = exports('SlotGameMode', {})));

      Enum(SlotGameMode);
      var StateGameMode;

      (function (StateGameMode) {
        StateGameMode[StateGameMode["NormalGame"] = 1] = "NormalGame";
        StateGameMode[StateGameMode["FreeGame"] = 2] = "FreeGame";
        StateGameMode[StateGameMode["FreespinOption"] = 3] = "FreespinOption";
        StateGameMode[StateGameMode["BonusGame"] = 4] = "BonusGame";
        StateGameMode[StateGameMode["RespinGame"] = 5] = "RespinGame";
        StateGameMode[StateGameMode["Others"] = 9] = "Others";
      })(StateGameMode || (StateGameMode = exports('StateGameMode', {})));

      Enum(StateGameMode);
      var SlotSceneType;

      (function (SlotSceneType) {
        SlotSceneType[SlotSceneType["JackpotWin"] = 0] = "JackpotWin";
        SlotSceneType[SlotSceneType["BigWin"] = 1] = "BigWin";
        SlotSceneType[SlotSceneType["FreespinOption"] = 2] = "FreespinOption";
        SlotSceneType[SlotSceneType["Setting"] = 3] = "Setting";
        SlotSceneType[SlotSceneType["JackpotHistory"] = 4] = "JackpotHistory";
        SlotSceneType[SlotSceneType["BetHistory"] = 5] = "BetHistory";
        SlotSceneType[SlotSceneType["GameInfo"] = 6] = "GameInfo";
        SlotSceneType[SlotSceneType["TotalWinPanel"] = 7] = "TotalWinPanel";
        SlotSceneType[SlotSceneType["FreeGameOption"] = 8] = "FreeGameOption";
        SlotSceneType[SlotSceneType["IntroBonusGame"] = 9] = "IntroBonusGame";
        SlotSceneType[SlotSceneType["IntroFreeGame"] = 10] = "IntroFreeGame";
        SlotSceneType[SlotSceneType["IntroNormalGame"] = 11] = "IntroNormalGame";
        SlotSceneType[SlotSceneType["ExtraBetPopup"] = 12] = "ExtraBetPopup";
        SlotSceneType[SlotSceneType["IntroJackpotGame"] = 13] = "IntroJackpotGame";
        SlotSceneType[SlotSceneType["Loading"] = 14] = "Loading";
        SlotSceneType[SlotSceneType["BetLinePanel"] = 15] = "BetLinePanel";
        SlotSceneType[SlotSceneType["TotalWinBonus"] = 16] = "TotalWinBonus";
        SlotSceneType[SlotSceneType["IntroFreeSpinOption"] = 17] = "IntroFreeSpinOption";
        SlotSceneType[SlotSceneType["GameInfoPayable"] = 18] = "GameInfoPayable";
        SlotSceneType[SlotSceneType["Other"] = 99] = "Other";
      })(SlotSceneType || (SlotSceneType = exports('SlotSceneType', {})));

      Enum(SlotSceneType);
      var DistanceType;

      (function (DistanceType) {
        DistanceType[DistanceType["Near"] = 0] = "Near";
        DistanceType[DistanceType["Middle"] = 1] = "Middle";
        DistanceType[DistanceType["Far"] = 2] = "Far";
        DistanceType[DistanceType["VeryFar"] = 3] = "VeryFar";
      })(DistanceType || (DistanceType = exports('DistanceType', {})));

      Enum(DistanceType);
      var IndicatorAngel;

      (function (IndicatorAngel) {
        IndicatorAngel[IndicatorAngel["top"] = 180] = "top";
        IndicatorAngel[IndicatorAngel["left"] = -90] = "left";
        IndicatorAngel[IndicatorAngel["right"] = 90] = "right";
      })(IndicatorAngel || (IndicatorAngel = exports('IndicatorAngel', {})));

      Enum(IndicatorAngel);
      var TutorialCommandType;

      (function (TutorialCommandType) {
        TutorialCommandType[TutorialCommandType["EnableButton"] = 0] = "EnableButton";
        TutorialCommandType[TutorialCommandType["DisableButton"] = 1] = "DisableButton";
        TutorialCommandType[TutorialCommandType["HighlightObject"] = 2] = "HighlightObject";
        TutorialCommandType[TutorialCommandType["RevertHighlightObject"] = 3] = "RevertHighlightObject";
        TutorialCommandType[TutorialCommandType["SetPosition"] = 4] = "SetPosition";
        TutorialCommandType[TutorialCommandType["SetRotation"] = 5] = "SetRotation";
        TutorialCommandType[TutorialCommandType["SetScale"] = 6] = "SetScale";
        TutorialCommandType[TutorialCommandType["SetContentSize"] = 7] = "SetContentSize";
        TutorialCommandType[TutorialCommandType["SetOpacity"] = 8] = "SetOpacity";
        TutorialCommandType[TutorialCommandType["ShowObject"] = 9] = "ShowObject";
        TutorialCommandType[TutorialCommandType["HideObject"] = 10] = "HideObject";
        TutorialCommandType[TutorialCommandType["AddFlag"] = 11] = "AddFlag";
        TutorialCommandType[TutorialCommandType["RemoveFlag"] = 12] = "RemoveFlag";
        TutorialCommandType[TutorialCommandType["BlockTouch"] = 14] = "BlockTouch";
        TutorialCommandType[TutorialCommandType["UnBlockTouch"] = 15] = "UnBlockTouch";
        TutorialCommandType[TutorialCommandType["WaitForTrigger"] = 16] = "WaitForTrigger";
        TutorialCommandType[TutorialCommandType["EditDialog"] = 17] = "EditDialog";
        TutorialCommandType[TutorialCommandType["MoveTo"] = 18] = "MoveTo";
        TutorialCommandType[TutorialCommandType["MoveFromTo"] = 19] = "MoveFromTo";
        TutorialCommandType[TutorialCommandType["HighlightSymbol"] = 20] = "HighlightSymbol";
        TutorialCommandType[TutorialCommandType["RevertAllHighlightObject"] = 21] = "RevertAllHighlightObject";
        TutorialCommandType[TutorialCommandType["ResumeCurrentScript"] = 22] = "ResumeCurrentScript";
        TutorialCommandType[TutorialCommandType["HighlightObjectByName"] = 23] = "HighlightObjectByName";
        TutorialCommandType[TutorialCommandType["PauseAction"] = 24] = "PauseAction";
        TutorialCommandType[TutorialCommandType["ResumeActions"] = 25] = "ResumeActions";
        TutorialCommandType[TutorialCommandType["SetSiblingIndex"] = 26] = "SetSiblingIndex";
        TutorialCommandType[TutorialCommandType["Custom"] = 99] = "Custom";
      })(TutorialCommandType || (TutorialCommandType = exports('TutorialCommandType', {})));

      Enum(TutorialCommandType);
      var TutorialTriggerType;

      (function (TutorialTriggerType) {
        TutorialTriggerType[TutorialTriggerType["SpinClicked"] = 0] = "SpinClicked";
        TutorialTriggerType[TutorialTriggerType["ResetSession"] = 1] = "ResetSession";
        TutorialTriggerType[TutorialTriggerType["TutorialClick"] = 2] = "TutorialClick";
        TutorialTriggerType[TutorialTriggerType["TurboClick"] = 3] = "TurboClick";
        TutorialTriggerType[TutorialTriggerType["IncreaseBet"] = 4] = "IncreaseBet";
        TutorialTriggerType[TutorialTriggerType["FinishBonusPayline"] = 5] = "FinishBonusPayline";
        TutorialTriggerType[TutorialTriggerType["FinishScatterPayline"] = 6] = "FinishScatterPayline";
        TutorialTriggerType[TutorialTriggerType["EnterFreeGame"] = 7] = "EnterFreeGame";
        TutorialTriggerType[TutorialTriggerType["EnterBonusGame"] = 8] = "EnterBonusGame";
        TutorialTriggerType[TutorialTriggerType["EnterTopupGame"] = 9] = "EnterTopupGame";
        TutorialTriggerType[TutorialTriggerType["ResumeNormalGame"] = 10] = "ResumeNormalGame";
        TutorialTriggerType[TutorialTriggerType["AutoSpinClicked"] = 11] = "AutoSpinClicked";
        TutorialTriggerType[TutorialTriggerType["SpinStopped"] = 12] = "SpinStopped";
        TutorialTriggerType[TutorialTriggerType["FinishJackpotPayline"] = 14] = "FinishJackpotPayline";
        TutorialTriggerType[TutorialTriggerType["SelectGoldenSymbol"] = 15] = "SelectGoldenSymbol";
        TutorialTriggerType[TutorialTriggerType["IncreaseExtraBet"] = 16] = "IncreaseExtraBet";
        TutorialTriggerType[TutorialTriggerType["AnyAction"] = 17] = "AnyAction";
        TutorialTriggerType[TutorialTriggerType["FreeGameOptionClick"] = 18] = "FreeGameOptionClick";
        TutorialTriggerType[TutorialTriggerType["EnterFreeGameOption"] = 19] = "EnterFreeGameOption";
        TutorialTriggerType[TutorialTriggerType["OnCutsceneClose"] = 20] = "OnCutsceneClose";
        TutorialTriggerType[TutorialTriggerType["AutoSpinPanelShow"] = 21] = "AutoSpinPanelShow";
        TutorialTriggerType[TutorialTriggerType["PauseAction"] = 22] = "PauseAction";
        TutorialTriggerType[TutorialTriggerType["ResumeAction"] = 23] = "ResumeAction";
        TutorialTriggerType[TutorialTriggerType["ExitFreeGame"] = 24] = "ExitFreeGame";
        TutorialTriggerType[TutorialTriggerType["ExitBonusGame"] = 25] = "ExitBonusGame";
        TutorialTriggerType[TutorialTriggerType["ExitTopUpGame"] = 26] = "ExitTopUpGame";
        TutorialTriggerType[TutorialTriggerType["OpenWildPanel"] = 27] = "OpenWildPanel";
        TutorialTriggerType[TutorialTriggerType["SelectWild"] = 28] = "SelectWild";
        TutorialTriggerType[TutorialTriggerType["CloseWildPanel"] = 29] = "CloseWildPanel";
        TutorialTriggerType[TutorialTriggerType["SelectWIldClosed"] = 30] = "SelectWIldClosed";
        TutorialTriggerType[TutorialTriggerType["OpenBetLinePanel"] = 31] = "OpenBetLinePanel";
        TutorialTriggerType[TutorialTriggerType["BetLineAllClick"] = 32] = "BetLineAllClick";
        TutorialTriggerType[TutorialTriggerType["BetLineEventClick"] = 33] = "BetLineEventClick";
        TutorialTriggerType[TutorialTriggerType["CloseBetLinePanel"] = 34] = "CloseBetLinePanel";
        TutorialTriggerType[TutorialTriggerType["ShowPayline"] = 35] = "ShowPayline";
        TutorialTriggerType[TutorialTriggerType["EnterRespinGame"] = 36] = "EnterRespinGame";
        TutorialTriggerType[TutorialTriggerType["BetSelectionPanelShow"] = 37] = "BetSelectionPanelShow";
        TutorialTriggerType[TutorialTriggerType["ConfirmBet"] = 38] = "ConfirmBet";
        TutorialTriggerType[TutorialTriggerType["ButtonClick"] = 39] = "ButtonClick";
        TutorialTriggerType[TutorialTriggerType["OnCutsceneShow"] = 40] = "OnCutsceneShow";
        TutorialTriggerType[TutorialTriggerType["Other"] = 99] = "Other";
        TutorialTriggerType[TutorialTriggerType["None"] = 999] = "None";
      })(TutorialTriggerType || (TutorialTriggerType = exports('TutorialTriggerType', {})));

      Enum(TutorialTriggerType);
      var PerformanceLevel;

      (function (PerformanceLevel) {
        PerformanceLevel[PerformanceLevel["High"] = 2] = "High";
        PerformanceLevel[PerformanceLevel["Medium"] = 1] = "Medium";
        PerformanceLevel[PerformanceLevel["Low"] = 0] = "Low";
      })(PerformanceLevel || (PerformanceLevel = exports('PerformanceLevel', {})));

      Enum(PerformanceLevel);
      var WinEffectLevel;

      (function (WinEffectLevel) {
        WinEffectLevel[WinEffectLevel["BIG"] = 0] = "BIG";
        WinEffectLevel[WinEffectLevel["MEGA"] = 1] = "MEGA";
        WinEffectLevel[WinEffectLevel["SUPER"] = 2] = "SUPER";
      })(WinEffectLevel || (WinEffectLevel = exports('WinEffectLevel', {})));

      Enum(WinEffectLevel);
      var WalletType;

      (function (WalletType) {
        WalletType[WalletType["NORMAL"] = 1] = "NORMAL";
        WalletType[WalletType["TRIAL"] = 2] = "TRIAL";
        WalletType[WalletType["PROMOTE"] = 4] = "PROMOTE";
      })(WalletType || (WalletType = exports('WalletType', {})));

      Enum(WalletType);
      var SLOT_SCREEN_MODE;

      (function (SLOT_SCREEN_MODE) {
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["SINGLE"] = 0] = "SINGLE";
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["MULTI"] = 1] = "MULTI";
        SLOT_SCREEN_MODE[SLOT_SCREEN_MODE["SELECTION"] = 2] = "SELECTION";
      })(SLOT_SCREEN_MODE || (SLOT_SCREEN_MODE = exports('SLOT_SCREEN_MODE', {})));

      var QUEST_STATE;

      (function (QUEST_STATE) {
        QUEST_STATE[QUEST_STATE["ACTIVE"] = 0] = "ACTIVE";
        QUEST_STATE[QUEST_STATE["INACTIVE"] = 1] = "INACTIVE";
        QUEST_STATE[QUEST_STATE["EXPIRED"] = 2] = "EXPIRED";
        QUEST_STATE[QUEST_STATE["INVALID"] = 3] = "INVALID";
      })(QUEST_STATE || (QUEST_STATE = exports('QUEST_STATE', {})));

      var TOP_PLAYER_DISPLAY;

      (function (TOP_PLAYER_DISPLAY) {
        TOP_PLAYER_DISPLAY[TOP_PLAYER_DISPLAY["UNBENT"] = 0] = "UNBENT";
        TOP_PLAYER_DISPLAY[TOP_PLAYER_DISPLAY["RUN_OUT"] = 1] = "RUN_OUT";
      })(TOP_PLAYER_DISPLAY || (TOP_PLAYER_DISPLAY = exports('TOP_PLAYER_DISPLAY', {})));

      Enum(TOP_PLAYER_DISPLAY);
      var QUEST_DISPLAY;

      (function (QUEST_DISPLAY) {
        QUEST_DISPLAY[QUEST_DISPLAY["UNBENT"] = 0] = "UNBENT";
        QUEST_DISPLAY[QUEST_DISPLAY["RUN_OUT"] = 1] = "RUN_OUT";
      })(QUEST_DISPLAY || (QUEST_DISPLAY = exports('QUEST_DISPLAY', {})));

      Enum(QUEST_DISPLAY);
      var NotifyWinEffect;

      (function (NotifyWinEffect) {
        NotifyWinEffect[NotifyWinEffect["BigWin"] = 1] = "BigWin";
        NotifyWinEffect[NotifyWinEffect["JackpotWin"] = 2] = "JackpotWin";
      })(NotifyWinEffect || (NotifyWinEffect = exports('NotifyWinEffect', {})));

      Enum(NotifyWinEffect);
      var DialogTitle;

      (function (DialogTitle) {
        DialogTitle[DialogTitle["ExitGame"] = 0] = "ExitGame";
        DialogTitle[DialogTitle["RemoveGame"] = 1] = "RemoveGame";
        DialogTitle[DialogTitle["ChangeGame"] = 2] = "ChangeGame";
      })(DialogTitle || (DialogTitle = exports('DialogTitle', {})));

      Enum(DialogTitle);
      var DialogContent;

      (function (DialogContent) {
        DialogContent["ExitGame"] = "B\u1EA0N C\xD3 MU\u1ED0N THO\xC1T T\u1EA4T C\u1EA2 C\xC1C GAME?";
        DialogContent["RemoveGame"] = "B\u1EA0N C\xD3 CH\u1EAEC MU\u1ED0N THO\xC1T GAME?";
        DialogContent["ChangeGame"] = "GAME \u0110ANG M\u1EDE S\u1EBC B\u1ECA T\u1EAET N\u1EBEU \u0110\u1ED4I\nGAME KH\xC1C";
      })(DialogContent || (DialogContent = exports('DialogContent', {})));

      Enum(DialogContent);
      var HorizontalExpandDirection;

      (function (HorizontalExpandDirection) {
        HorizontalExpandDirection[HorizontalExpandDirection["None"] = -20] = "None";
        HorizontalExpandDirection[HorizontalExpandDirection["LeftToRight"] = 20] = "LeftToRight";
        HorizontalExpandDirection[HorizontalExpandDirection["RightToLeft"] = 21] = "RightToLeft";
        HorizontalExpandDirection[HorizontalExpandDirection["FromMiddle"] = 22] = "FromMiddle";
      })(HorizontalExpandDirection || (HorizontalExpandDirection = exports('HorizontalExpandDirection', {})));

      Enum(HorizontalExpandDirection);
      var VerticalExpandDirection;

      (function (VerticalExpandDirection) {
        VerticalExpandDirection[VerticalExpandDirection["None"] = -10] = "None";
        VerticalExpandDirection[VerticalExpandDirection["BottomToTop"] = 10] = "BottomToTop";
        VerticalExpandDirection[VerticalExpandDirection["TopToBottom"] = 11] = "TopToBottom";
        VerticalExpandDirection[VerticalExpandDirection["FromMiddle"] = 12] = "FromMiddle";
      })(VerticalExpandDirection || (VerticalExpandDirection = exports('VerticalExpandDirection', {})));

      Enum(VerticalExpandDirection);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePoolAssets.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfCustomDataType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Component, convertAssetArrayToObject, gfBulletAsset, gfCoinAsset, gfFreezeItemFXAsset, gfNetFXAsset, gfSpriteFishAsset, gfSpineFishAsset, gfDragonBallAsset, gfLabelCoinAsset;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBulletAsset = module.gfBulletAsset;
      gfCoinAsset = module.gfCoinAsset;
      gfFreezeItemFXAsset = module.gfFreezeItemFXAsset;
      gfNetFXAsset = module.gfNetFXAsset;
      gfSpriteFishAsset = module.gfSpriteFishAsset;
      gfSpineFishAsset = module.gfSpineFishAsset;
      gfDragonBallAsset = module.gfDragonBallAsset;
      gfLabelCoinAsset = module.gfLabelCoinAsset;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

      cclegacy._RF.push({}, "99f8cyzQ0RHupu2CP3p0znO", "gfNodePoolAssets", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNodePoolAssets = exports('gfNodePoolAssets', (_dec = ccclass('gfNodePoolAssets'), _dec2 = property(gfBulletAsset), _dec3 = property(gfCoinAsset), _dec4 = property(gfFreezeItemFXAsset), _dec5 = property(gfNetFXAsset), _dec6 = property(gfSpriteFishAsset), _dec7 = property(gfSpineFishAsset), _dec8 = property(gfDragonBallAsset), _dec9 = property(gfLabelCoinAsset), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNodePoolAssets, _Component);

        function gfNodePoolAssets() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "bulletSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "coin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "freezeItemFXAsset", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "netFX", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fishAnimationClip", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fishSkeletonData", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "dragonBall", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "labelCoin", _descriptor8, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "bulletAssets", {});

          _defineProperty(_assertThisInitialized(_this), "freezeItemFX", {});

          _defineProperty(_assertThisInitialized(_this), "netFXAssets", {});

          _defineProperty(_assertThisInitialized(_this), "fishAnimationAssets", {});

          _defineProperty(_assertThisInitialized(_this), "fishSkeletonAssets", {});

          _defineProperty(_assertThisInitialized(_this), "coinAssets", {});

          _defineProperty(_assertThisInitialized(_this), "dragonBallAssets", {});

          _defineProperty(_assertThisInitialized(_this), "labelCoinAssets", {});

          return _this;
        }

        var _proto = gfNodePoolAssets.prototype;

        _proto.initMapAssets = function initMapAssets() {
          this.bulletAssets = convertAssetArrayToObject(this.bulletSprite);
          this.freezeItemFX = convertAssetArrayToObject(this.freezeItemFXAsset);
          this.netFXAssets = convertAssetArrayToObject(this.netFX);
          this.fishAnimationAssets = convertAssetArrayToObject(this.fishAnimationClip);
          this.fishSkeletonAssets = convertAssetArrayToObject(this.fishSkeletonData);
          this.coinAssets = convertAssetArrayToObject(this.coin);
          this.dragonBallAssets = convertAssetArrayToObject(this.dragonBall);
          this.labelCoinAssets = convertAssetArrayToObject(this.labelCoin);
        };

        _proto.getBulletSprite = function getBulletSprite(kind) {
          if (this.bulletAssets[kind] && this.bulletAssets[kind].sprite) {
            return this.bulletAssets[kind].sprite;
          }

          return null;
        };

        _proto.getCoinAsset = function getCoinAsset(kind) {
          if (this.coinAssets[kind] && this.coinAssets[kind].animation) {
            return this.coinAssets[kind].animation;
          }

          return null;
        };

        _proto.getLabelCoinAsset = function getLabelCoinAsset(kind) {
          if (this.labelCoinAssets[kind] && this.labelCoinAssets[kind].font) {
            return this.labelCoinAssets[kind].font;
          }

          return null;
        };

        _proto.getFreezeItemFXAsset = function getFreezeItemFXAsset(kind) {
          if (this.freezeItemFX[kind] && this.freezeItemFX[kind].animation) {
            return this.freezeItemFX[kind].animation;
          }

          return null;
        } // fish normal default: 0, fish special : 1 , ice gun :2 
        ;

        _proto.getNetFXAsset = function getNetFXAsset(kind) {
          if (this.netFXAssets[kind] && this.netFXAssets[kind].animation) {
            return this.netFXAssets[kind].animation;
          }

          return null;
        };

        _proto.getFishAnimationClip = function getFishAnimationClip(kind) {
          if (this.fishAnimationAssets[kind] && this.fishAnimationAssets[kind].animation) {
            return this.fishAnimationAssets[kind].animation;
          }

          return null;
        };

        _proto.getFishSkeletonData = function getFishSkeletonData(kind) {
          if (this.fishSkeletonAssets[kind] && this.fishSkeletonAssets[kind].animation) {
            return this.fishSkeletonAssets[kind].animation;
          }

          return null;
        };

        _proto.getDragonBallAssets = function getDragonBallAssets(kind) {
          if (this.dragonBallAssets[kind] && this.dragonBallAssets[kind].sprite) {
            return this.dragonBallAssets[kind].sprite;
          }

          return null;
        };

        return gfNodePoolAssets;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bulletSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "coin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "freezeItemFXAsset", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "netFX", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "fishAnimationClip", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "fishSkeletonData", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "dragonBall", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "labelCoin", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/utilsForTest.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy, Vec3, UITransform, UIOpacity, Renderable2D, tween, Color, bezier, director, v3, sys, log, assetManager, Texture2D, SpriteFrame, Sprite, isValid, Node, warn;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      UIOpacity = module.UIOpacity;
      Renderable2D = module.Renderable2D;
      tween = module.tween;
      Color = module.Color;
      bezier = module.bezier;
      director = module.director;
      v3 = module.v3;
      sys = module.sys;
      log = module.log;
      assetManager = module.assetManager;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      isValid = module.isValid;
      Node = module.Node;
      warn = module.warn;
    }],
    execute: function () {
      exports({
        MD5: MD5,
        addZero: addZero,
        changeParent: changeParent,
        convertAssetArrayToObject: convertAssetArrayToObject,
        convertPayLine: convertPayLine,
        convertPayLineAllways: convertPayLineAllways,
        customDateFormat: customDateFormat,
        fadeIn: fadeIn,
        fadeOut: fadeOut,
        fadeTo: fadeTo,
        findKeyByValue: findKeyByValue,
        formatMoney: formatMoney,
        formatUserName: formatUserName,
        formatWalletMoney: formatWalletMoney,
        getAngleTwoPoint: getAngleTwoPoint,
        getAnimationsName: getAnimationsName,
        getDistance: getDistance,
        getFBAvatar: getFBAvatar,
        getLeftTime: getLeftTime,
        getOpacity: getOpacity,
        getPostionInOtherNode: getPostionInOtherNode,
        getRandomElement: getRandomElement,
        getRandomInt: getRandomInt,
        getText: getText,
        getTime: getTime,
        loadAvatarFacebook: loadAvatarFacebook,
        mapObjectKey: mapObjectKey,
        pickOutRandomElement: pickOutRandomElement,
        randRange: randRange,
        removeDuplicates: removeDuplicates,
        removeElementByValue: removeElementByValue,
        replaceElement: replaceElement,
        roundDecimal: roundDecimal,
        secondsToHHMMSS: secondsToHHMMSS,
        setLayerAlls: setLayerAlls,
        setLayerForAllChildrens: setLayerForAllChildrens,
        setMixAllAnims: setMixAllAnims,
        setOpacity: setOpacity,
        setRenderColor: setRenderColor,
        shaking: shaking,
        shuffleArray: shuffleArray,
        startGameFromEvent: startGameFromEvent,
        toFixed: toFixed,
        toLocalClockTime: toLocalClockTime,
        toLocalTime: toLocalTime,
        toLocalTimeHHMM: toLocalTimeHHMM,
        tweenBezier2DTo: tweenBezier2DTo,
        tweenMoney: tweenMoney,
        tweenMoney2: tweenMoney2,
        tweenWalletMoney: tweenWalletMoney,
        updateUtilConfig: updateUtilConfig
      });

      cclegacy._RF.push({}, "9a191QaZgdOHI+f829oi4fy", "utilsForTest", undefined);

      var lodash = globalThis._;
      var UTIL_CONFIG = exports('UTIL_CONFIG', {
        FORMAT_MONEY_EVENT: false
      });

      function updateUtilConfig(key, value) {
        if (UTIL_CONFIG.hasOwnProperty(key)) {
          UTIL_CONFIG[key] = value;
        }
      }

      function findKeyByValue(object, value) {
        return Object.keys(object).find(function (key) {
          return object[key] == value;
        });
      }

      function customDateFormat(date, formatString) {
        var YYYY, YY, MMMM, MMM, MM, M, DDDD, DDD, DD, D, hhhh, hhh, hh, h, mm, m, ss, s, ampm, AMPM, dMod, th;
        YY = ((YYYY = date.getFullYear()) + "").slice(-2);
        MM = (M = date.getMonth() + 1) < 10 ? '0' + M : M;
        MMM = (MMMM = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][M - 1]).substring(0, 3);
        DD = (D = date.getDate()) < 10 ? '0' + D : D;
        DDD = (DDDD = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][date.getDay()]).substring(0, 3);
        th = D >= 10 && D <= 20 ? 'th' : (dMod = D % 10) == 1 ? 'st' : dMod == 2 ? 'nd' : dMod == 3 ? 'rd' : 'th';
        formatString = formatString.replace("#YYYY#", YYYY).replace("#YY#", YY).replace("#MMMM#", MMMM).replace("#MMM#", MMM).replace("#MM#", MM).replace("#M#", M).replace("#DDDD#", DDDD).replace("#DDD#", DDD).replace("#DD#", DD).replace("#D#", D).replace("#th#", th);
        h = hhh = date.getHours();
        if (h == 0) h = 24;
        if (h > 12) h -= 12;
        hh = h < 10 ? '0' + h : h;
        hhhh = hhh < 10 ? '0' + hhh : hhh;
        AMPM = (ampm = hhh < 12 ? 'am' : 'pm').toUpperCase();
        mm = (m = date.getMinutes()) < 10 ? '0' + m : m;
        ss = (s = date.getSeconds()) < 10 ? '0' + s : s;
        return formatString.replace("#hhhh#", hhhh).replace("#hhh#", hhh).replace("#hh#", hh).replace("#h#", h).replace("#mm#", mm).replace("#m#", m).replace("#ss#", ss).replace("#s#", s).replace("#ampm#", ampm).replace("#AMPM#", AMPM);
      }

      function toLocalTimeHHMM(ts) {
        var timestamp = new Date(parseInt(ts));
        var hour = timestamp.getHours();
        var minutes = timestamp.getMinutes();
        var localTime = (hour < 10 ? "0" : "") + hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function toLocalClockTime(ts) {
        var timestamp = new Date(parseInt(ts));
        var hour = timestamp.getHours();
        var minutes = timestamp.getMinutes();
        var localTime = hour + "h" + (minutes < 10 ? "0" : "") + minutes;
        return localTime;
      }

      function formatUserName(userName) {
        return userName.trim();
      }

      function secondsToHHMMSS(secs) {
        if (secs == 0) return "00:00";
        var sec_num = parseInt(secs, 10);
        var hours = Math.floor(sec_num / 3600);
        var minutes = Math.floor(sec_num / 60) % 60;
        var seconds = sec_num % 60;
        return [hours, minutes, seconds].map(function (v) {
          return v < 10 ? "0" + v : v;
        }).filter(function (v, i) {
          return v !== "00" || i > 0;
        }).join(":");
      }

      function toLocalTime(ts, format) {
        return customDateFormat(new Date(ts * 1000), format);
      }

      function randRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function toFixed(num, fixed) {
        var re = new RegExp('^-?\\d+(?:\.\\d{0,' + (fixed || -1) + '})?'); // eslint-disable-line

        var result = num.toString().match(re)[0];
        return result;
      }

      function getPostionInOtherNode(spaceNode, targetNode) {
        if (targetNode.parent == null) {
          return null;
        }

        var pos = new Vec3(0, 0, 0);
        var targetNodeComponent = targetNode.parent.getComponent(UITransform);
        var spaceNodeComponent = spaceNode.getComponent(UITransform);

        if (!targetNodeComponent) {
          targetNode.parent.addComponent(UITransform);
        }

        if (!spaceNodeComponent) {
          spaceNode.addComponent(UITransform);
        }

        pos = targetNodeComponent.convertToWorldSpaceAR(targetNode.getPosition());
        return spaceNodeComponent ? spaceNodeComponent.convertToNodeSpaceAR(pos) : pos;
      }

      function convertAssetArrayToObject(arr) {
        var obj = {};

        for (var i = 0; i < arr.length; i++) {
          if (arr[i]._name == "" && arr[i].data) {
            arr[i]._name = arr[i].data._name;
          }

          if (arr[i] && arr[i]._name) {
            obj[arr[i]._name] = arr[i];
          }
        }

        return obj;
      }

      function getAnimationsName(spine) {
        return Object.keys(spine.skeletonData._skeletonJson.animations);
      }
      /**
       * ! just using for the spine have a few animations
       */


      function setMixAllAnims(spine, mixTime) {
        if (mixTime === void 0) {
          mixTime = 0.15;
        }

        var animNames = getAnimationsName(spine);

        if (animNames.length < 2) {
          console.error("spine have to have many animations");
          return;
        }

        for (var i = 0; i < animNames.length; i++) {
          for (var j = 0; j < animNames.length; j++) {
            spine.setMix(animNames[i], animNames[j], mixTime);
          }
        }
      }

      function convertPayLineAllways(payLines, multiplier, betDenom) {
        if (payLines === void 0) {
          payLines = [];
        }

        if (multiplier === void 0) {
          multiplier = 1;
        }

        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          if (payLines[i].includes(';')) {
            var dataSplit = payLines[i].split(';');

            if (dataSplit.length !== 0) {
              listNewPL.push({
                symbolId: dataSplit[0],
                totalWinAmount: dataSplit[1],
                symbolCount: dataSplit[2],
                combination: dataSplit[3],
                payableSymbol: dataSplit[4],
                betDenom: betDenom,
                multiplier: multiplier
              });
            } else {
              console.error("payLines is not right AKTV formatted");
            }
          }
        }

        return listNewPL;
      }

      function convertPayLine(payLines) {
        var listNewPL = [];

        for (var i = 0; i < payLines.length; i++) {
          var dataSplit = payLines[i].split(';');

          if (dataSplit.length >= 3) {
            listNewPL.push({
              payLineID: dataSplit[0],
              payLineWinNumbers: parseInt(dataSplit[1]),
              payLineWinAmount: dataSplit[2],
              payLineSymbol: dataSplit[3]
            });
          }
        }

        return listNewPL;
      }

      function formatWalletMoney(num, digits) {
        if (digits === void 0) {
          digits = 2;
        }

        if (isNaN(parseFloat(num))) return "0";
        var si = [{
          value: 1,
          symbol: ""
        }, {
          value: 1E3,
          symbol: "K"
        }, {
          value: 1E6,
          symbol: "M"
        }, {
          value: 1E9,
          symbol: "B"
        }, {
          value: 1E12,
          symbol: "T"
        }, {
          value: 1E15,
          symbol: "P"
        }, {
          value: 1E18,
          symbol: "E"
        }];
        var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
        var i;

        for (i = si.length - 1; i > 0; i--) {
          if (num >= si[i].value) {
            break;
          }
        }

        var result = toFixed(num / si[i].value, digits);

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          result = result.replace('.', ',');
        }

        return result.replace(rx, "$1") + si[i].symbol;
      }

      function formatMoney(amount, decimalCount, decimal, thousands) {
        if (decimalCount === void 0) {
          decimalCount = 0;
        }

        if (decimal === void 0) {
          decimal = ".";
        }

        if (thousands === void 0) {
          thousands = ",";
        }

        if (UTIL_CONFIG.FORMAT_MONEY_EVENT) {
          decimal = ",";
          thousands = ".";
        }

        try {
          decimalCount = Math.abs(decimalCount);
          decimalCount = isNaN(decimalCount) ? 2 : decimalCount;
          var negativeSign = amount < 0 ? "-" : "";
          var i = parseInt(amount = Math.abs(Number(amount) || 0).toFixed(decimalCount)).toString();
          var j = i.length > 3 ? i.length % 3 : 0;
          return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousands) + (decimalCount ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : "");
        } catch (e) {
          console.error(e);
        }

        return "0";
      }

      function changeParent(node, newParent) {
        if (node.parent === newParent) return;

        var getWorldRotation = function getWorldRotation(node) {
          var currNode = node;
          var resultRot = currNode.angle || 0;

          do {
            currNode = currNode.parent;
            resultRot += currNode.angle || 0;
          } while (currNode.parent != null);

          resultRot = resultRot % 360;
          return resultRot;
        };

        var oldWorRot = getWorldRotation(node);
        var newParentWorRot = getWorldRotation(newParent);
        var newLocRot = oldWorRot - newParentWorRot;

        if (!node.getComponent(UITransform)) {
          node.addComponent(UITransform);
        }

        if (!newParent.getComponent(UITransform)) {
          newParent.addComponent(UITransform);
        }

        var oldWorPos = node.getComponent(UITransform).convertToWorldSpaceAR(new Vec3(0, 0, 0));
        var newLocPos = newParent.getComponent(UITransform).convertToNodeSpaceAR(oldWorPos);
        node.parent = newParent;
        node.position = newLocPos;
        node.angle = newLocRot;
      }

      function getRandomInt(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1)) + min;
      }

      function roundDecimal(num, numDecimal) {
        var rate = 1;

        for (var i = 0; i < numDecimal; i++) {
          rate *= 10;
        }

        return Math.round((num + Number.EPSILON) * rate) / rate;
      }

      function shuffleArray(array) {
        for (var i = array.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          var temp = array[i];
          array[i] = array[j];
          array[j] = temp;
        }

        return array;
      }

      function getRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        return array[Math.floor(Math.random() * array.length)];
      }

      function pickOutRandomElement(array) {
        if (!array || array.length <= 0) throw new Error("invalid array");
        var randomIndex = Math.floor(Math.random() * array.length);
        return array.splice(randomIndex, 1)[0];
      }

      function removeElementByValue(array, value) {
        array.splice(array.indexOf(value), 1);
        return array;
      }

      function replaceElement(array, oldElement, newElement) {
        var index = array.indexOf(oldElement);
        if (index > -1) array[index] = newElement;
        return array;
      }

      function getText(text, length) {
        if (text === void 0) {
          text = '';
        }

        if (length === void 0) {
          length = 0;
        }

        var result = text;
        var n = length - text.length;

        if (n) {
          for (var i = 0; i < n; i++) {
            result += ' ';
          }
        }

        return result;
      }

      function getLeftTime(endTime, serverTime, millisecond) {
        if (millisecond === void 0) {
          millisecond = 1000;
        }

        serverTime = serverTime ? new Date(serverTime).getTime() : new Date().getTime();
        var time = Math.floor((new Date(endTime).getTime() - serverTime) / millisecond);
        if (time < 0) time = 0;
        return time;
      }

      function addZero(i) {
        if (i < 10) {
          i = '0' + i;
        }

        return i;
      }

      function getTime() {
        var d = new Date();
        var h = addZero(d.getHours());
        var m = addZero(d.getMinutes());
        var s = addZero(d.getSeconds());
        var t = h + ':' + m + ':' + s;
        return t;
      }

      function mapObjectKey(obj, keysMap) {
        return lodash.transform(obj, function (result, value, key) {
          var currentKey = key;

          if (keysMap[key]) {
            currentKey = keysMap[key].name;
            if (keysMap[key].type == Boolean) value = value == 'T';
          }

          if (lodash.isObject(value)) {
            result[currentKey] = mapObjectKey(value, keysMap);
          } else {
            result[currentKey] = value;
          }
        });
      }

      function fadeTo(target, duration, opacity, options) {
        var uiOpacity = target.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = target.addComponent(UIOpacity); //if (sys.isNative) {

        var render2D = target.getComponent(Renderable2D);
        options = options || {};

        if (render2D) {
          if (options.onUpdate) {
            var _onUpdate = options.onUpdate;

            options.onUpdate = function () {
              setRenderColor(render2D, uiOpacity.opacity);
              _onUpdate && _onUpdate();
            };
          } else {
            options.onUpdate = function () {
              setRenderColor(render2D, uiOpacity.opacity);
            };
          }
        } //}


        if (target['tweenFade']) {
          target['tweenFade'].stop();
          target['tweenFade'] = null;
        }

        var tweenFade = tween(uiOpacity);
        target['tweenFade'] = tweenFade;
        tweenFade.to(duration, {
          opacity: opacity
        }, options).call(function () {
          target['tweenFade'] = null;
        }).start();
        return tweenFade;
      }

      function fadeIn(target, duration, options) {
        return fadeTo(target, duration, 255, options);
      }

      function fadeOut(target, duration, options) {
        return fadeTo(target, duration, 0, options);
      }

      function getOpacity(node) {
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        return uiOpacity.opacity;
      }

      function setOpacity(node, opacity) {
        var activeCache = node.active;
        node.active = true;
        var uiOpacity = node.getComponent(UIOpacity);
        if (uiOpacity === null) uiOpacity = node.addComponent(UIOpacity);
        uiOpacity.opacity = opacity; //if (sys.isNative) {

        var render2D = node.getComponent(Renderable2D);
        render2D && setRenderColor(render2D, opacity); //}

        node.active = activeCache;
      }

      function setRenderColor(render, alpha) {
        var color = Color.clone(render.color);
        color.a = alpha;
        render.color = color;
      }

      function tweenMoney(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value));
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatMoney(endValue);
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      } //for slot event only


      function tweenMoney2(label, duration, endValue, options) {
        if (label["_tweenMoney"]) label["_tweenMoney"].stop(); // stop if on tween;

        var currentVal = parseInt(label.string.replace(/[,.]/g, "")) || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatMoney(Math.round(_target.value), 0, ',', '.');
        };

        var tweenMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatMoney(endValue, 0, ',', '.');
          label["_tweenMoney"] = null;
        }).start();
        label["_tweenMoney"] = tweenMoney;
        return tweenMoney;
      }

      function tweenWalletMoney(label, duration, startValue, endValue, options) {
        if (label["tweenWalletMoney"]) label["tweenWalletMoney"].stop(); // stop if on tween;

        var currentVal = startValue || 0;
        var _target = {
          value: currentVal
        };
        options = options || {};

        options.onUpdate = function () {
          label.string = formatWalletMoney(Math.round(_target.value));
        };

        var tweenWalletMoney = tween(_target).to(duration, {
          value: endValue
        }, options).call(function () {
          label.string = formatWalletMoney(endValue);
          label["tweenWalletMoney"] = null;
        }).start();
        label["tweenWalletMoney"] = tweenWalletMoney;
        return tweenWalletMoney;
      }

      function tweenBezier2DTo(target, duration, c1, c2, to, opts) {
        if (target['bezierX']) target['bezierX'].stop();
        if (target['bezierY']) target['bezierY'].stop();
        var c0x = c1.x,
            c0y = c1.y,
            c1x = c2.x,
            c1y = c2.y;
        var _targetX = {
          value: target.getPosition().x
        };
        var _targetY = {
          value: target.getPosition().y
        };
        var aOpts = opts || Object.create(null);

        aOpts.progress = function (startX, endX, currentX, t) {
          currentX = bezier(startX, c0x, c1x, endX, t);
          return currentX;
        };

        aOpts.onUpdate = function () {
          target.setPosition(new Vec3(_targetX.value, target.position.y, target.position.z));
        };

        var bOpts = opts || Object.create(null);

        bOpts.progress = function (startY, endY, currentY, t) {
          currentY = bezier(startY, c0y, c1y, endY, t);
          return currentY;
        };

        bOpts.onUpdate = function () {
          target.setPosition(new Vec3(target.position.x, _targetY.value, target.position.z));
        };

        target['bezierX'] = tween(_targetX).to(duration, {
          value: to.x
        }, aOpts).call(function () {
          target['bezierX'] = null;
        }).start();
        target['bezierY'] = tween(_targetY).to(duration, {
          value: to.y
        }, bOpts).call(function () {
          target['bezierY'] = null;
        }).start();
      }

      function startGameFromEvent(gameId, eventId) {
        director.loadScene("MultiSlot", function () {
          var multiSlotComp = director.getScene().getChildByName('Canvas').getChildByName('MultiSlot');

          if (multiSlotComp) {
            multiSlotComp.emit('LOAD_SELECTED_GAME', gameId, eventId);
          }
        });
      }

      function removeDuplicates(array) {
        return array.filter(function (item, index) {
          return array.indexOf(item) === index;
        });
      }
      /**
       * @returns degree angle
      */


      function getAngleTwoPoint(p1, p2) {
        return Math.atan2(p2.y - p1.y, p2.x - p1.x) * 180 / Math.PI;
      }

      function getDistance(p1, p2) {
        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
      }

      function shaking(node, _ref) {
        var _ref$duration = _ref.duration,
            duration = _ref$duration === void 0 ? 0.16 : _ref$duration,
            _ref$distance = _ref.distance,
            distance = _ref$distance === void 0 ? 10 : _ref$distance,
            _ref$repeat = _ref.repeat,
            repeat = _ref$repeat === void 0 ? 1 : _ref$repeat;
        var dur = duration / 8;
        var shake = tween().by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, -distance)
        }).by(dur, {
          position: v3(0, distance)
        }).by(dur, {
          position: v3(distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(-distance, 0)
        }).by(dur, {
          position: v3(distance, 0)
        });
        var tweenShake = tween(node).repeat(repeat, shake).start();
        return tweenShake;
      }

      function MD5(e) {
        function h(a, b) {
          var c, d, e, f, g;
          e = a & 2147483648;
          f = b & 2147483648;
          c = a & 1073741824;
          d = b & 1073741824;
          g = (a & 1073741823) + (b & 1073741823);
          return c & d ? g ^ 2147483648 ^ e ^ f : c | d ? g & 1073741824 ? g ^ 3221225472 ^ e ^ f : g ^ 1073741824 ^ e ^ f : g ^ e ^ f;
        }

        function k(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & c | ~b & d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function l(a, b, c, d, e, f, g) {
          a = h(a, h(h(b & d | c & ~d, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function m(a, b, d, c, e, f, g) {
          a = h(a, h(h(b ^ d ^ c, e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function n(a, b, d, c, e, f, g) {
          a = h(a, h(h(d ^ (b | ~c), e), g));
          return h(a << f | a >>> 32 - f, b);
        }

        function p(a) {
          var b = "",
              d = "",
              c;

          for (c = 0; 3 >= c; c++) {
            d = (a >>> 8 * c & 255).toString(), d = "0" + parseInt(d).toString(16), b += d.substr(d.length - 2, 2);
          }

          return b;
        }

        var f = [],
            q,
            r,
            s,
            t,
            a,
            b,
            c,
            d;

        e = function (a) {
          a = a.replace(/\r\n/g, "\n");

          for (var b = "", d = 0; d < a.length; d++) {
            var c = a.charCodeAt(d);
            128 > c ? b += String.fromCharCode(c) : (127 < c && 2048 > c ? b += String.fromCharCode(c >> 6 | 192) : (b += String.fromCharCode(c >> 12 | 224), b += String.fromCharCode(c >> 6 & 63 | 128)), b += String.fromCharCode(c & 63 | 128));
          }

          return b;
        }(e);

        f = function (b) {
          var a,
              c = b.length;
          a = c + 8;

          for (var d = 16 * ((a - a % 64) / 64 + 1), e = Array(d - 1), f = 0, g = 0; g < c;) {
            a = (g - g % 4) / 4, f = g % 4 * 8, e[a] |= b.charCodeAt(g) << f, g++;
          }

          a = (g - g % 4) / 4;
          e[a] |= 128 << g % 4 * 8;
          e[d - 2] = c << 3;
          e[d - 1] = c >>> 29;
          return e;
        }(e);

        a = 1732584193;
        b = 4023233417;
        c = 2562383102;
        d = 271733878;

        for (e = 0; e < f.length; e += 16) {
          q = a, r = b, s = c, t = d, a = k(a, b, c, d, f[e + 0], 7, 3614090360), d = k(d, a, b, c, f[e + 1], 12, 3905402710), c = k(c, d, a, b, f[e + 2], 17, 606105819), b = k(b, c, d, a, f[e + 3], 22, 3250441966), a = k(a, b, c, d, f[e + 4], 7, 4118548399), d = k(d, a, b, c, f[e + 5], 12, 1200080426), c = k(c, d, a, b, f[e + 6], 17, 2821735955), b = k(b, c, d, a, f[e + 7], 22, 4249261313), a = k(a, b, c, d, f[e + 8], 7, 1770035416), d = k(d, a, b, c, f[e + 9], 12, 2336552879), c = k(c, d, a, b, f[e + 10], 17, 4294925233), b = k(b, c, d, a, f[e + 11], 22, 2304563134), a = k(a, b, c, d, f[e + 12], 7, 1804603682), d = k(d, a, b, c, f[e + 13], 12, 4254626195), c = k(c, d, a, b, f[e + 14], 17, 2792965006), b = k(b, c, d, a, f[e + 15], 22, 1236535329), a = l(a, b, c, d, f[e + 1], 5, 4129170786), d = l(d, a, b, c, f[e + 6], 9, 3225465664), c = l(c, d, a, b, f[e + 11], 14, 643717713), b = l(b, c, d, a, f[e + 0], 20, 3921069994), a = l(a, b, c, d, f[e + 5], 5, 3593408605), d = l(d, a, b, c, f[e + 10], 9, 38016083), c = l(c, d, a, b, f[e + 15], 14, 3634488961), b = l(b, c, d, a, f[e + 4], 20, 3889429448), a = l(a, b, c, d, f[e + 9], 5, 568446438), d = l(d, a, b, c, f[e + 14], 9, 3275163606), c = l(c, d, a, b, f[e + 3], 14, 4107603335), b = l(b, c, d, a, f[e + 8], 20, 1163531501), a = l(a, b, c, d, f[e + 13], 5, 2850285829), d = l(d, a, b, c, f[e + 2], 9, 4243563512), c = l(c, d, a, b, f[e + 7], 14, 1735328473), b = l(b, c, d, a, f[e + 12], 20, 2368359562), a = m(a, b, c, d, f[e + 5], 4, 4294588738), d = m(d, a, b, c, f[e + 8], 11, 2272392833), c = m(c, d, a, b, f[e + 11], 16, 1839030562), b = m(b, c, d, a, f[e + 14], 23, 4259657740), a = m(a, b, c, d, f[e + 1], 4, 2763975236), d = m(d, a, b, c, f[e + 4], 11, 1272893353), c = m(c, d, a, b, f[e + 7], 16, 4139469664), b = m(b, c, d, a, f[e + 10], 23, 3200236656), a = m(a, b, c, d, f[e + 13], 4, 681279174), d = m(d, a, b, c, f[e + 0], 11, 3936430074), c = m(c, d, a, b, f[e + 3], 16, 3572445317), b = m(b, c, d, a, f[e + 6], 23, 76029189), a = m(a, b, c, d, f[e + 9], 4, 3654602809), d = m(d, a, b, c, f[e + 12], 11, 3873151461), c = m(c, d, a, b, f[e + 15], 16, 530742520), b = m(b, c, d, a, f[e + 2], 23, 3299628645), a = n(a, b, c, d, f[e + 0], 6, 4096336452), d = n(d, a, b, c, f[e + 7], 10, 1126891415), c = n(c, d, a, b, f[e + 14], 15, 2878612391), b = n(b, c, d, a, f[e + 5], 21, 4237533241), a = n(a, b, c, d, f[e + 12], 6, 1700485571), d = n(d, a, b, c, f[e + 3], 10, 2399980690), c = n(c, d, a, b, f[e + 10], 15, 4293915773), b = n(b, c, d, a, f[e + 1], 21, 2240044497), a = n(a, b, c, d, f[e + 8], 6, 1873313359), d = n(d, a, b, c, f[e + 15], 10, 4264355552), c = n(c, d, a, b, f[e + 6], 15, 2734768916), b = n(b, c, d, a, f[e + 13], 21, 1309151649), a = n(a, b, c, d, f[e + 4], 6, 4149444226), d = n(d, a, b, c, f[e + 11], 10, 3174756917), c = n(c, d, a, b, f[e + 2], 15, 718787259), b = n(b, c, d, a, f[e + 9], 21, 3951481745), a = h(a, q), b = h(b, r), c = h(c, s), d = h(d, t);
        }

        return (p(a) + p(b) + p(c) + p(d)).toLowerCase();
      }

      function getFBAvatar(url, spriteA, defaultAvatar, AvatarAtlas) {
        var dirpath = jsb.fileUtils.getWritablePath() + 'avaImg/';
        var filepath = dirpath + MD5(url) + '.png';

        function loadEnd() {
          assetManager.loadAny({
            url: filepath
          }, function (err, tex) {
            if (err) {
              warn(err);
              spriteA.spriteFrame = defaultAvatar;
            } else {
              var spriteFrame = new SpriteFrame();
              spriteFrame.texture = tex;

              if (spriteFrame) {
                spriteA.spriteFrame = spriteFrame;
              }
            }
          });
        }

        if (sys.os === sys.OS_ANDROID && sys.isNative) {
          if (jsb.fileUtils.isFileExist(filepath)) {
            //remove old file
            jsb.fileUtils.removeFile(filepath);
          }
        }

        var saveFile = function saveFile(data) {
          if (typeof data !== 'undefined') {
            if (!jsb.fileUtils.isDirectoryExist(dirpath)) {
              jsb.fileUtils.createDirectory(dirpath);
            }

            if (jsb.fileUtils.writeValueMapToFile(new Uint8Array(data), filepath)) {
              warn('Remote write file succeed.');
              loadEnd();
            } else {
              spriteA.spriteFrame = defaultAvatar;
              warn('Remote write file failed.');
            }
          } else {
            spriteA.spriteFrame = defaultAvatar;
            warn('Remote download file failed.');
          }
        };

        if (sys.os === sys.OS_IOS && sys.isNative) {
          if (url.indexOf("facebook") !== -1) {
            if (jsb.fileUtils.isFileExist(filepath)) {
              loadEnd();
            }

            var xhr = new XMLHttpRequest();
            xhr.responseType = 'arraybuffer';

            xhr.onreadystatechange = function () {
              log("xhr.readyState  " + xhr.readyState);
              log("xhr.status  " + xhr.status);

              if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                  saveFile(xhr.response);
                }
              }
            }.bind(this);

            xhr.open("GET", url, true);
            xhr.send();
          } else {
            var spFrame = defaultAvatar;

            if (url) {
              var filename = url.substring(url.lastIndexOf('/') + 1);

              if (filename.match(/avatar_[0-9][0-9].png/)) {
                var num = filename.substring(7, 8);
                var spInt = parseInt(num);

                if (spInt >= 0 && spInt <= 32) {
                  spFrame = filename.split('.')[0];
                } else {
                  spFrame = defaultAvatar;
                }
              } else {
                spFrame = defaultAvatar;
              }
            }

            spriteA.spriteFrame = AvatarAtlas.getSpriteFrame(spFrame);
          }
        } else {
          var _xhr = new XMLHttpRequest();

          _xhr.responseType = 'arraybuffer';

          _xhr.onreadystatechange = function () {
            log("xhr.readyState  " + _xhr.readyState);
            log("xhr.status  " + _xhr.status);

            if (_xhr.readyState === 4) {
              if (_xhr.status === 200) {
                saveFile(_xhr.response);
              } else {
                saveFile(null);
              }
            }
          }.bind(this);

          _xhr.open("GET", url, true);

          _xhr.send();
        }
      }

      function loadAvatarFacebook(avatarSprite, ava, atlas, prefix, leadingZeroLength, avatarDefault) {
        if (prefix === void 0) {
          prefix = 'avatar_';
        }

        if (leadingZeroLength === void 0) {
          leadingZeroLength = 0;
        }

        if (avatarDefault === void 0) {
          avatarDefault = 'avatar_incognito';
        }

        if (!avatarSprite || !avatarSprite.node) return;
        var defaultAvatar = atlas.getSpriteFrame(avatarDefault);
        if (!defaultAvatar) return;

        var _sframe = decodeURIComponent(ava);

        if ((ava + '').indexOf('avatar_') > -1) {
          _sframe = ava || avatarDefault;
        } else {
          if (!isNaN(ava)) {
            ava = Number.parseInt(ava);
          }

          if (lodash.isNumber(ava)) {
            // avatar start from 1
            ava += 1;

            if (leadingZeroLength > 0) {
              var zeroPad = function zeroPad(num, places) {
                return String(num).padStart(places, '0');
              };

              ava = zeroPad(ava, leadingZeroLength);
            }

            _sframe = prefix + ava;
          }
        }

        if (_sframe.indexOf('avatar_') > -1 && _sframe.indexOf("facebook") === -1 && _sframe.indexOf("http") > -1) {
          var avaId = _sframe.split('avatar_');

          var frame = defaultAvatar;

          if (avaId[1]) {
            frame = atlas.getSpriteFrame('avatar_' + avaId[1].replace('.png', ''));
          }

          frame = frame ? frame : defaultAvatar;
          avatarSprite.spriteFrame = frame;
          return false;
        } else if (_sframe.indexOf("http") === -1) {
          var _frame = atlas.getSpriteFrame(_sframe);

          _frame = _frame ? _frame : defaultAvatar;
          avatarSprite.spriteFrame = _frame;
          return false;
        } // else if(cc.sys.isNative){
        //     getFBAvatar(_sframe, avatarSprite, defaultAvatar, atlas);
        // } 
        else {
            if (_sframe.indexOf("facebook") !== -1) {
              _sframe = _sframe.replace("http://", "https://");
            }

            assetManager.loadRemote(decodeURIComponent(ava), {
              ext: 'png'
            }, function (err, imageRes) {
              if (!avatarSprite || !avatarSprite.node) return;

              if (err) {
                avatarSprite.spriteFrame = defaultAvatar;
              } else if (imageRes instanceof Texture2D) {
                var spriteFrame = new SpriteFrame();
                spriteFrame.texture = imageRes;

                if (avatarSprite && avatarSprite.node && avatarSprite.node.getComponent) {
                  var com = avatarSprite.node.getComponent(Sprite);

                  if (!com || isValid(com, true) == false) {
                    com = avatarSprite.node.addComponent(Sprite);
                  }

                  com.spriteFrame = new SpriteFrame();
                  com.spriteFrame.texture = spriteFrame.texture;
                }
              } else {
                avatarSprite.spriteFrame = defaultAvatar;
              }
            });
            return true;
          }
      }

      function setLayerForAllChildrens(target, layer) {
        target.walk(function (it) {
          it.layer = layer;
          it.on(Node.EventType.CHILD_ADDED, function (child) {
            setLayerForAllChildrens(child, child.parent.layer);
          });
        }, function () {});
      }

      function setLayerAlls(target, layer) {
        target.walk(function (it) {
          it.layer = layer;
        }, function () {});
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemyEV1.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './SpineFish1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, SpineFish1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "9ae8dofCeFAw6py9uJHgDJv", "EnemyEV1", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemyEV1 = exports('EnemyEV1', (_dec = ccclass('EnemyEV1'), _dec2 = property(Sprite), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_SpineFish) {
        _inheritsLoose(EnemyEV1, _SpineFish);

        function EnemyEV1() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SpineFish.call.apply(_SpineFish, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "gun", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = EnemyEV1.prototype;

        _proto.setColor = function setColor(color) {
          _SpineFish.prototype.setColor.call(this, color);

          this.gun.color = color;
        };

        return EnemyEV1;
      }(SpineFish1985), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGeneralInitialization.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfReferenceManager.ts', './gfNodePoolConfig.ts', './gfDataStore.ts', './gfNetworkParser.ts', './gfPoolManager.ts', './gfLocalize.ts', './gfFishManager.ts', './gfMainFSM.ts', './gfMainController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Component, gfEventEmitter, gfBaseConfig, gfReferenceManager, gfNodePoolConfig, gfDataStore, gfNetworkParser, gfPoolManager, gfLocalize, gfFishManager, gfMainFSM, gfMainController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      gfMainController = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "9afa670LGtOabO/XrL9kVuZ", "gfGeneralInitialization", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfGeneralInitialization = exports('gfGeneralInitialization', (_dec = ccclass('gfGeneralInitialization'), _dec2 = property(JsonAsset), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfGeneralInitialization, _Component);

        function gfGeneralInitialization() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "jsonLocalize", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gameObjectPrefabs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "nodePoolAssetPrefab", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfGeneralInitialization.prototype;

        _proto.onLoad = function onLoad() {
          this.initInstances();
        };

        _proto.initInstances = function initInstances() {
          //Init Localize
          new gfLocalize();
          gfLocalize.instance.initLocalizeConfig(this.jsonLocalize.json); //Init Event Emitter

          new gfEventEmitter(); //Init NetworkParser

          new gfNetworkParser(); //Init GameConfig

          if (!gfBaseConfig.instance) {
            new gfBaseConfig();
          } //Init Datastore


          new gfDataStore(); //Init ReferenceManager

          new gfReferenceManager(); //Init Main FSM

          new gfMainFSM(); //Init Main Controller

          new gfMainController(); //Init Popup Controller
          //new PopupController();
          //Init Notify Controller
          //new NotifyController();

          new gfFishManager();
          new gfPoolManager(this.gameObjectPrefabs);
          new gfNodePoolConfig(this.nodePoolAssetPrefab);
        };

        _proto.loginGame = function loginGame() {
          gfMainController.instance.initToken();
          gfDataStore.instance.setDataStore({
            "currentSceneName": gfBaseConfig.instance.SceneName.Lobby
          });
        };

        return gfGeneralInitialization;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonLocalize", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gameObjectPrefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodePoolAssetPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AutoScaleBackground1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, sys, view, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      view = module.view;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "9b18bXDZPVLLI9SixnQe/j4", "AutoScaleBackground1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var AutoScaleBackground = exports('AutoScaleBackground', (_dec = ccclass('AutoScaleBackground'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AutoScaleBackground, _Component);

        function AutoScaleBackground() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_thisOnResized", null);

          return _this;
        }

        var _proto = AutoScaleBackground.prototype;

        _proto.onLoad = function onLoad() {
          this._thisOnResized = this.onScreenResized.bind(this);

          if (sys.isMobile) {
            window.addEventListener('resize', this._thisOnResized);
          } else {
            view.on('canvas-resize', this._thisOnResized);
          }

          this.scaleCanvasByOrientation();
        };

        _proto.scaleCanvasByOrientation = function scaleCanvasByOrientation() {
          var widthBackground = 960;
          var heightBackground = 640;
          var heightDefaultCanvas = 1250;
          var widthView = view.getFrameSize().width;
          var heightView = view.getFrameSize().height;
          var scaleHeightDevice = heightView / heightDefaultCanvas;
          var scaleWidthDevice = widthView / heightDefaultCanvas;
          var realScaleDevice = scaleHeightDevice > scaleWidthDevice ? scaleWidthDevice : scaleHeightDevice;
          var convertWithBG = widthBackground * realScaleDevice;
          var convertHeightBG = heightBackground * realScaleDevice;
          var ratioW = widthView / convertWithBG;
          var ratioH = heightView / convertHeightBG;
          if (ratioW > ratioH) this.node.scale = new Vec3(ratioW, ratioW, ratioW);else this.node.scale = new Vec3(ratioH, ratioH, ratioH);
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isMobile) {
            window.removeEventListener('resize', this._thisOnResized);
          } else {
            view.off('canvas-resize', this._thisOnResized);
          }
        };

        _proto.onScreenResized = function onScreenResized() {
          this.scaleCanvasByOrientation();
        };

        return AutoScaleBackground;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPersisNodeController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfSoundBase.ts', './gfNotifyController.ts', './gfPopupController.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, game, Component, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents, GfSoundBase, gfNotifyController, gfPopupController;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      game = module.game;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      GfSoundBase = module.GfSoundBase;
    }, function (module) {
      gfNotifyController = module.default;
    }, function (module) {
      gfPopupController = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "9bcd7Izw+ZNDbm0/jweVcIp", "gfPersisNodeController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPersisNodeController = exports('GfPersisNodeController', (_dec = ccclass('GfPersisNodeController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfPersisNodeController, _Component);

        function GfPersisNodeController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "notifyController", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "popupController", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "soundController", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPersisNodeController.prototype;

        _proto.onLoad = function onLoad() {
          if (!gfBaseConfig.instance.LoadGameByPrefab) {
            game.addPersistRootNode(this.node);
          }

          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.removePersisNode, this);
          registerEvent(gfBaseEvents.COMMON.INIT_SCENE, this.reloadAllSpriteUV, this);
        };

        _proto.reloadAllSpriteUV = function reloadAllSpriteUV() {
          return;
        };

        _proto.removePersisNode = function removePersisNode() {
          var compNotify = this.notifyController.getComponent(gfNotifyController);
          compNotify.refreshPage();
          var compPopup = this.popupController.getComponent(gfPopupController);
          compPopup.refreshPage();

          if (this.soundController) {
            var compSound = this.soundController.getComponent(GfSoundBase);
            compSound && compSound.refreshPage();
          }

          if (!gfBaseConfig.instance.LoadGameByPrefab) {
            game.removePersistRootNode(this.node);
          }

          removeEvents(this);
        };

        return GfPersisNodeController;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "notifyController", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popupController", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "soundController", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventsCode1985.ts", ['cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var cclegacy, gfBaseEvents, mergeTwoObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      mergeTwoObject = module.mergeTwoObject;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9c373og6wlDNoxb7wRtUmP4", "EventsCode1985", undefined);

      var EventsCode1985 = {
        CONTROL: {
          USER_START_TOUCH: "CONTROL_USER_START_TOUCH",
          USER_MOVE_TOUCH: "CONTROL_USER_MOVE_TOUCH",
          USER_END_TOUCH: "CONTROL_USER_END_TOUCH",
          USER_MOUSE_DOWN: "USER_MOUSE_DOWN",
          USER_MOUSE_UP: "USER_MOUSE_UP"
        },
        GAME_LAYER: {
          UPDATE_BULLET: "UPDATE_BULLET",
          AIRCRAFT_DIE: "AIRCRAFT_DIE",
          AIRCRAFT_REVIVAL: "AIRCRAFT_REVIVAL",
          GET_PLAYER_UPDATE_POSITION: "GET_PLAYER_UPDATE_POSITION",
          PLAYER_MOVE: "PLAYER_MOVE",
          SHIP_MOVE: "SHIP_MOVE",
          SEND_PLAYER_UPDATE_POSITION: "SEND_PLAYER_UPDATE_POSITION",
          ENEMY_FIRE_BULLET: "GAME_ENEMY_FIRE_BULLET",
          PLAYER_UPDATE_SHIELD: "PLAYER_UPDATE_SHIELD",
          PLAYER_LOWER_SHIELD: "PLAYER_LOWER_SHIELD",
          OPEN_FEATURE_FIRE: "OPEN_FEATURE_FIRE",
          PLAYER_SEND_PIECE_ENERGY: "PLAYER_SEND_PIECE_ENERGY",
          PLAYER_PICK_PIECE_ENERGY: "PLAYER_PICK_PIECE_ENERGY",
          CREATE_ENV_OBJECT: "CREATE_ENV_OBJECT",
          CREATE_LIST_ENV_OBJECT: "CREATE_LIST_ENV_OBJECT",
          PLAYER_SEND_ACTIVE_SKILL_ULTIMATE: "PLAYER_SEND_ACTIVE_SKILL_ULTIMATE",
          CATCH_FISH_BY_SKILL_ULTIMATE: "CATCH_FISH_BY_SKILL_ULTIMATE",
          CATCH_FISH_BY_SKILL_BOMB: "CATCH_FISH_BY_SKILL_BOMB",
          LOCK_FIRE: "LOCK_FIRE",
          LOCK_MOVE_SPACESHIP: "LOCK_MOVE_SPACESHIP",
          ON_ANIMATION_SPACESHIP_JOIN_ROOM: "ON_ANIMATION_SPACESHIP_JOIN_ROOM",
          ANIMATION_SPACESHIP_JOIN_ROOM_DONE: "ANIMATION_SPACESHIP_JOIN_ROOM_DONE"
        },
        HOT_KEY_EVENT: {
          AUTO_FIRE: "AUTO_FIRE",
          SKILL_ULTIMATE: "SKILL_ULTIMATE",
          INCREASE_BET: "INCREASE_BET",
          DECREASE_BET: "DECREASE_BET",
          OPEN_MENU: "OPEN_MENU",
          UPDATE_HOT_KEY: "UPDATE_HOT_KEY"
        },
        EFFECT_LAYER: {
          PLAY_BONUS_EFFECT: "PLAY_BONUS_EFFECT",
          SKILL_ULTIMATE_DONE: "SKILL_ULTIMATE_DONE",
          PLAY_LIST_EFFECT_IMPACT_LASER: "PLAY_LIST_EFFECT_IMPACT_LASER",
          PLAY_LIST_EFFECT_NEAR_WIN_LASER: "PLAY_LIST_EFFECT_NEAR_WIN_LASER",
          PLAY_EFFECT_BIG_WIN: "PLAY_EFFECT_BIG_WIN"
        },
        HUD: {
          UPDATE_STREAK_INFO: "UPDATE_STREAK_INFO",
          RESUME_STREAK_INFO: "RESUME_STREAK_INFO",
          PAUSE_LISTENER_KEY_EVENT: "PAUSE_LISTENER_KEY_EVENT",
          RESUME_LISTENER_KEY_EVENT: "RESUME_LISTENER_KEY_EVENT",
          UPDATE_POSITION_HUD_SKILL: "UPDATE_POSITION_HUD_SKILL",
          ADD_GOLD_REWARD: "ADD_GOLD_REWARD",
          ADD_TO_DISPLAY_WALLET: "ADD_TO_DISPLAY_WALLET",
          RESUME_PERCENT_SKILL_ULTIMATE: "RESUME_PERCENT_SKILL_ULTIMATE",
          HUD_ACTIVE_LASER: "HUD_ACTIVE_LASER"
        },
        SOUND: {
          CHANGE_LOCATION: "CHANGE_LOCATION",
          SELECT_BUTTON: "SELECT_BUTTON",
          CHANGE_HOLOGRAM: "CHANGE_HOLOGRAM",
          START_BUTTON: "START_BUTTON",
          IMPACT: "IMPACT",
          SPACE_SHIP_EXPLOSION: "SPACE_SHIP_EXPLOSION",
          DESTROY_ENEMY: "DESTROY_ENEMY",
          SHIELD_PROTECTED: "SHIELD_PROTECTED",
          WARNING_HAVE_NOT_SHIELD: "WARNING_HAVE_NOT_SHIELD",
          FIRE_LOCK: "FIRE_LOCK",
          PICK_COIN: "PICK_COIN",
          SLIDE_BUTTON_CLICK: "SLIDE_BUTTON_CLICK",
          SHOW_BUTTON_CLICK: "SHOW_BUTTON_CLICK",
          NORMAL_BUTTON_CLICK: "NORMAL_BUTTON_CLICK",
          SHIELD_REGENERATION: "SHIELD_REGENERATION",
          UPDATE_BET: "UPDATE_BET",
          DROP_ITEM_LASER: "DROP_ITEM_LASER",
          IMPACT_ELECTRIC_WAVE: "IMPACT_ELECTRIC_WAVE",
          IMPACT_LASER: "IMPACT_LASER",
          DESTROY_SP1: "DESTROY_SP1",
          DESTROY_SP2: "DESTROY_SP2",
          BOMB_ALERT: "BOMB_ALERT",
          BOMB_ENERGY: "BOMB_ENERGY",
          FIRE_ELECTRIC_WAVE: "FIRE_ELECTRIC_WAVE",
          UPDATE_LEVEL_SKILL_ULTIMATE: "UPDATE_LEVEL_SKILL_ULTIMATE",
          DROP_ENERGY: "DROP_ENERGY",
          PICK_ENERGY: "PICK_ENERGY",
          UP_STREAK: "UP_STREAK",
          CANCEL_BUTTON: "CANCEL_BUTTON"
        },
        COMMON: {
          SHOW_OVERLAY_TRANSITION_LOADING: "SHOW_OVERLAY_TRANSITION_LOADING"
        }
      };
      EventsCode1985 = mergeTwoObject(gfBaseEvents, EventsCode1985);
      var EventsCode1985$1 = exports('default', EventsCode1985);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolConfig1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfNodePoolConfig.ts', './NodePoolAssets1988.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, v2, Rect, sp, instantiate, gfNodePoolConfig, NodePoolAssets1988;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
      Rect = module.Rect;
      sp = module.sp;
      instantiate = module.instantiate;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      NodePoolAssets1988 = module.NodePoolAssets1988;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "9c62df/uKpMk4vXCeq9CiCt", "NodePoolConfig1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NodePoolConfig1988 = exports('default', (_dec = ccclass('NodePoolConfig1988'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfNodePoolConfig) {
        _inheritsLoose(NodePoolConfig1988, _gfNodePoolConfig);

        function NodePoolConfig1988(listAssets) {
          var _this;

          _this = _gfNodePoolConfig.call(this, listAssets) || this;
          NodePoolConfig1988.instance = _assertThisInitialized(_this);
          _this.FISH_CONFIG = {
            "0": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 309,
              visibleSize: v2(100, 100),
              targetPoint: v2(13, 15),
              BoxCollider: new Rect(10, 12.5, 48.5, 14.9)
            },
            "1": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 308,
              visibleSize: v2(100, 100),
              targetPoint: v2(7, 12),
              BoxCollider: new Rect(10, 10, 42.8, 32.9)
            },
            "2": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 310,
              visibleSize: v2(100, 100),
              targetPoint: v2(15, 10),
              BoxCollider: [new Rect(10, 10, 43.7, 10.2), new Rect(15, 10, 20.7, 39.3)]
            },
            "3": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 307,
              visibleSize: v2(120, 100),
              targetPoint: v2(20, 10),
              BoxCollider: new Rect(15, 10, 76.4, 16.6)
            },
            "4": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 306,
              visibleSize: v2(120, 100),
              targetPoint: v2(25, 13),
              BoxCollider: new Rect(15, 11.5, 67.7, 18.3)
            },
            "5": {
              speed: 80,
              FishMultiple: -1,
              zIndex: 305,
              visibleSize: v2(120, 100),
              targetPoint: v2(17.5, 12.5),
              BoxCollider: [new Rect(10.1, 10.2, 68.3, 15.8), new Rect(20.8, 9, 28.3, 51.4)]
            },
            "6": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 209,
              visibleSize: v2(180, 100),
              targetPoint: v2(3, 15),
              BoxCollider: new Rect(5, 15, 86.2, 30.2)
            },
            "7": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 303,
              visibleSize: v2(150, 100),
              targetPoint: v2(25, 13.5),
              BoxCollider: [new Rect(20.2, 12.5, 92.8, 11), new Rect(30, 12.5, 50.2, 33.8)]
            },
            "8": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 304,
              visibleSize: v2(180, 150),
              targetPoint: v2(30, 12),
              BoxCollider: [new Rect(15, 10, 92.8, 11), new Rect(35, 10, 51.9, 57.3)]
            },
            "9": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 302,
              visibleSize: v2(150, 150),
              targetPoint: v2(23, 12),
              BoxCollider: [new Rect(11.1, 16, 83, 9), new Rect(26.2, 15.6, 40.7, 45)]
            },
            "10": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 301,
              visibleSize: v2(180, 150),
              targetPoint: v2(25, 20),
              BoxCollider: [new Rect(15, 20, 87.7, 9), new Rect(30, 20, 43.3, 30.9)]
            },
            "11": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 207,
              visibleSize: v2(180, 100),
              targetPoint: v2(15, 8),
              BoxCollider: [new Rect(10, 10, 90.2, 28.9), new Rect(20, 10, 41.8, 48.6)]
            },
            "12": {
              speed: 60,
              FishMultiple: -1,
              zIndex: 208,
              visibleSize: v2(180, 100),
              targetPoint: v2(20, 8),
              BoxCollider: new Rect(10, 7, 105.8, 19)
            },
            "13": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 210,
              visibleSize: v2(150, 110),
              targetPoint: v2(30, 10),
              BoxCollider: [new Rect(13.3, 10, 110.5, 19.3), new Rect(34.6, 10, 60.3, 36.1)]
            },
            "14": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 300,
              visibleSize: v2(200, 120),
              targetPoint: v2(25, 7),
              BoxCollider: [new Rect(10, 10, 124.4, 19.3), new Rect(20, 10, 55.1, 60.7)]
            },
            "15": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 206,
              AnimationName: ['animation'],
              visibleSize: v2(150, 150),
              targetPoint: v2(20, 0),
              BoxCollider: [new Rect(7.5, 0, 112.8, 19.3), new Rect(17.5, 0, 45.3, 85)]
            },
            "16": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 211,
              AnimationName: ['animation'],
              visibleSize: v2(150, 150),
              targetPoint: v2(5, 0),
              BoxCollider: [new Rect(13.3, 0, 101.2, 19.3), new Rect(0.8, 0, 65.4, 60.4)]
            },
            "17": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 200,
              AnimationName: ['animation'],
              visibleSize: v2(400, 250),
              targetPoint: v2(-10, 0),
              BoxCollider: [new Rect(-47.8, 0, 186.4, 19.3), new Rect(-24.9, 0, 103.9, 60.4)]
            },
            "18": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 204,
              AnimationName: ['animation'],
              visibleSize: v2(150, 100),
              targetPoint: v2(30, 0),
              BoxCollider: [new Rect(4, 0, 132.8, 20), new Rect(30, 0, 30, 62.4)]
            },
            "19": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 203,
              AnimationName: ['animation'],
              visibleSize: v2(250, 80),
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(-35, 0, 149.3, 20)
            },
            "20": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 201,
              AnimationName: ['animation'],
              visibleSize: v2(160, 200),
              targetPoint: v2(30, 0),
              BoxCollider: new Rect(0, 0, 121.9, 60),
              customAnimProp: {
                angle: -90
              }
            },
            "21": {
              speed: 40,
              FishMultiple: -1,
              zIndex: 205,
              AnimationName: ['animation'],
              visibleSize: v2(450, 180),
              targetPoint: v2(0, 0),
              BoxCollider: [new Rect(-5.8, 0, 114.9, 54.6), new Rect(-100, 0, 100, 54.8), new Rect(30, 10, 43.6, 97.5)]
            },
            "22": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 107,
              AnimationName: ['animation'],
              visibleSize: v2(450, 200),
              targetPoint: v2(20, 0),
              BoxCollider: [new Rect(-72.1, 0, 239.3, 40), new Rect(40, 0, 14, 160)]
            },
            "23": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 106,
              AnimationName: ['animation'],
              visibleSize: v2(450, 300),
              targetPoint: v2(0, 0),
              BoxCollider: [new Rect(-24.6, 0, 260, 60), new Rect(10, 0, 44.2, 172)]
            },
            "24": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 102,
              AnimationName: ['animation'],
              visibleSize: v2(300, 300),
              targetPoint: v2(30, 0),
              BoxCollider: [new Rect(-1.6, 0, 215, 60), new Rect(4.6, 0, 115.5, 84.2)]
            },
            "25": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 105,
              AnimationName: ['animation'],
              visibleSize: v2(420, 300),
              targetPoint: v2(110, 0),
              BoxCollider: [new Rect(80, 0, 250, 60), new Rect(100, 0, 100, 160), new Rect(-80, 0, 120, 30)]
            },
            "27": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 100,
              AnimationName: ['animation'],
              visibleSize: v2(200, 150),
              targetPoint: v2(0, 0),
              BoxCollider: new Rect(0, 0, 94, 118),
              skipRotate: true,
              cacheMode: sp.Skeleton.AnimationCacheMode.REALTIME
            },
            "30": {
              speed: 100,
              FishMultiple: -1,
              zIndex: 103,
              AnimationName: ['animation'],
              visibleSize: v2(300, 250),
              targetPoint: v2(10, 0),
              BoxCollider: [new Rect(10, 0, 220, 70), new Rect(30, 0, 110, 110)],
              cacheMode: sp.Skeleton.AnimationCacheMode.REALTIME
            },
            "47": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 101,
              AnimationName: ['animation'],
              visibleSize: v2(205, 250),
              targetPoint: v2(0, 30),
              BoxCollider: new Rect(0, 30, 80, 80),
              skipRotate: true,
              customComponent: 'FlowerPoison1988'
            },
            "46": {
              speed: 20,
              FishMultiple: -1,
              zIndex: 104,
              AnimationName: ['animation'],
              visibleSize: v2(350, 250),
              targetPoint: v2(17, 0),
              BoxCollider: [new Rect(0, 0, 230, 50), new Rect(-16.3, -41, 110.6, 32), new Rect(0, 41.4, 60, 33)]
            }
          };
          _this.SPRITE_FISH_KIND = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];
          _this.BULLET_CONFIG = {
            "0": {
              BoxCollider: new Rect(-25, 0, 50, 15)
            },
            "1": {
              BoxCollider: new Rect(-30, 0, 60, 25)
            },
            "2": {
              BoxCollider: new Rect(-30, 0, 50, 33)
            },
            "3": {
              BoxCollider: new Rect(-25, 0, 50, 33)
            },
            "4": {
              BoxCollider: new Rect(-25, 0, 50, 33)
            },
            "5": {
              BoxCollider: new Rect(-55, 0, 80, 55)
            },
            "6": {
              BoxCollider: new Rect(-55, 0, 100, 90)
            }
          };
          return _this;
        }

        var _proto = NodePoolConfig1988.prototype;

        _proto.initNodePoolAssets = function initNodePoolAssets(listAssets) {
          this.assetHolder = instantiate(listAssets).getComponent(NodePoolAssets1988);
          this.assetHolder.initMapAssets();
        };

        _proto.getGunSkeletonData = function getGunSkeletonData(name) {
          var gunData = this.assetHolder.getGunSkeletonData(name);
          return gunData;
        };

        return NodePoolConfig1988;
      }(gfNodePoolConfig), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BossBoris1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfBaseFish.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './ReferenceManager1988.ts', './PoolManager1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, v3, Color, sp, Prefab, tween, v2, Node, UIOpacity, BoxCollider, UITransform, isValid, getRandomInt, getPostionInOtherNode, gfBaseEvents, stopAllActions, rotateTo, moveTo, call, moveBy, rotateBy, delay, scaleTo, fadeOut, gfBezierBy, gfEventEmitter, getPointBetweenTwoPointByPercent, gfBaseFish, EventCode, DataStore1988, Config1988, ReferenceManager1988, PoolManager1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Color = module.Color;
      sp = module.sp;
      Prefab = module.Prefab;
      tween = module.tween;
      v2 = module.v2;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      BoxCollider = module.BoxCollider;
      UITransform = module.UITransform;
      isValid = module.isValid;
    }, function (module) {
      getRandomInt = module.getRandomInt;
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      rotateTo = module.rotateTo;
      moveTo = module.moveTo;
      call = module.call;
      moveBy = module.moveBy;
      rotateBy = module.rotateBy;
      delay = module.delay;
      scaleTo = module.scaleTo;
      fadeOut = module.fadeOut;
      gfBezierBy = module.gfBezierBy;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      getPointBetweenTwoPointByPercent = module.getPointBetweenTwoPointByPercent;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }, function (module) {
      PoolManager1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "9cb0ds44ZFA8JdSR6P77VSy", "BossBoris1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TIME_ANIM_MOVE = 1;
      var TIME_ANIM_WAIT_CENTER = 2;
      var TIME_ANIM_WAIT = 3.25; // const BASE_TIME_SCALE = 1 / 6;

      var TOTAL_LIVE_TIME = 60; //const SPINE_FPS = 30;

      var LIST_POST_MOVE_1 = [v3(320, 480, 1), v3(960, 240, 1), v3(320, 240, 1), v3(960, 480, 1)];
      var LIST_POST_MOVE_2 = [v3(960, 240, 1), v3(320, 480, 1), v3(960, 480, 1), v3(320, 240, 1)];
      var START_POS = v3(640, 1200);
      var ARR_POS_EXPLOSION = [v3(-118, 0, 1), v3(-112, -43, 1), v3(133, 59, 1), v3(107, -30, 1)];
      var STATE_BORIS = {
        MOVE_IN: 1,
        MOVE_LOOP: 2,
        MOVE_OUT: 3,
        WAIT_DIE: 4,
        DIE: 5
      };
      var DELAY_TIME_STATIC = 0.05;
      var BORIS_FEELING = {
        HAPPY_1: 0,
        HAPPY_2: 2,
        PANIC: 3,
        ANGRY: 4
      };
      var LIST_MIX_ANIM_WITH_SKIN = {
        "0": {
          skin: "Level_0",
          anim: "Nomal"
        },
        "1": {
          skin: "Level_1",
          anim: "Happy"
        },
        "2": {
          skin: "Level_2",
          anim: "Happy"
        },
        "3": {
          skin: "Level_3",
          anim: "Panic"
        },
        "4": {
          skin: "Level_4",
          anim: "Angry"
        },
        "5": {
          skin: "Level_5",
          anim: "Die"
        }
      };
      var FLAG_COLOR = new Color(230, 230, 230, 255);
      var BossBoris1988 = exports('BossBoris1988', (_dec = ccclass('BossBoris1988'), _dec2 = property(sp.Skeleton), _dec3 = property(Prefab), _dec4 = property(sp.SkeletonData), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(BossBoris1988, _gfBaseFish);

        function BossBoris1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_listDataMove", void 0);

          _initializerDefineProperty(_assertThisInitialized(_this), "fishAnim", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "borisStatic", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "smallExplosionSpineData", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_timeRemain", void 0);

          _defineProperty(_assertThisInitialized(_this), "_isLoaded", void 0);

          _defineProperty(_assertThisInitialized(_this), "_currentState", -1);

          _defineProperty(_assertThisInitialized(_this), "_moveAction", void 0);

          _defineProperty(_assertThisInitialized(_this), "_arrEffect", []);

          _defineProperty(_assertThisInitialized(_this), "_rewardData", void 0);

          _defineProperty(_assertThisInitialized(_this), "_currTimeDelayStatic", 0);

          _defineProperty(_assertThisInitialized(_this), "_levelDamaged", 0);

          _defineProperty(_assertThisInitialized(_this), "_isTurnOffStatic", false);

          _defineProperty(_assertThisInitialized(_this), "_arrBorisStatic", []);

          return _this;
        }

        var _proto = BossBoris1988.prototype;

        _proto.onLoad = function onLoad() {
          this.updateZIndex(Config1988.instance.Z_INDEX.DRAGON);
          this.fishAnim.setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[0].anim, LIST_MIX_ANIM_WITH_SKIN[1].anim, 0.25);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[0].anim, LIST_MIX_ANIM_WITH_SKIN[2].anim, 0.25);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[0].anim, LIST_MIX_ANIM_WITH_SKIN[3].anim, 0.25);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[0].anim, LIST_MIX_ANIM_WITH_SKIN[4].anim, 0.25);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[0].anim, LIST_MIX_ANIM_WITH_SKIN[5].anim, 0.25);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[1].anim, LIST_MIX_ANIM_WITH_SKIN[0].anim, 0.25);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[2].anim, LIST_MIX_ANIM_WITH_SKIN[0].anim, 0.25);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[3].anim, LIST_MIX_ANIM_WITH_SKIN[0].anim, 0.25);
          this.fishAnim.setMix(LIST_MIX_ANIM_WITH_SKIN[4].anim, LIST_MIX_ANIM_WITH_SKIN[0].anim, 0.25);
        };

        _proto.initFishData = function initFishData(data) {
          var FishID = data.FishID,
              FishKind = data.FishKind,
              BuildTick = data.BuildTick,
              damageLevel = data.damageLevel,
              isResume = data.isResume;
          this._listDataMove = [];
          this._FishID = FishID;
          this._FishKind = FishKind;
          this.unscheduleAllCallbacks();
          this.fishAnim.color = Color.WHITE;
          stopAllActions(this.fishAnim.node);
          this.reset();

          if (BuildTick) {
            this._timeLost = Math.max(0, (DataStore1988.instance.getTime() - BuildTick) / 1000);
          }

          this._timeRemain = this._timeLost ? TOTAL_LIVE_TIME - this._timeLost : TOTAL_LIVE_TIME;
          this.fishAnim.setAnimation(0, LIST_MIX_ANIM_WITH_SKIN[0].anim, true);
          this.createListDataMove();

          if (this._timeLost < 1) {
            this.setState(STATE_BORIS.MOVE_IN);
          } else if (this._timeLost >= 1 && this._timeLost <= TOTAL_LIVE_TIME) {
            this.setState(STATE_BORIS.MOVE_LOOP);
          }

          if (damageLevel) {
            this.updateSkinDamaged(damageLevel, isResume);
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, Config1988.instance.SOUND_BACKGROUND_CONFIG.DRAGON);
        };

        _proto.createListDataMove = function createListDataMove() {
          var currentTime;
          var AppSize = Config1988.instance.AppSize;
          var moveData = {
            position: v3(AppSize.Width / 2, AppSize.Height / 2, 0),
            startTime: TIME_ANIM_MOVE,
            delayTime: TIME_ANIM_WAIT_CENTER
          };

          this._listDataMove.push(moveData);

          currentTime = this._listDataMove[0].startTime + this._listDataMove[0].delayTime;
          var myDeskStation = DataStore1988.instance.getSelfDeskStation();
          var LIST_POST_MOVE = [];

          if (myDeskStation == 0 || myDeskStation == 1) {
            LIST_POST_MOVE = LIST_POST_MOVE_1;
          } else {
            LIST_POST_MOVE = LIST_POST_MOVE_2;
          }

          while (currentTime <= TOTAL_LIVE_TIME) {
            for (var i = 0; i < LIST_POST_MOVE.length; ++i) {
              var startTime = currentTime + TIME_ANIM_MOVE;

              if (startTime >= TOTAL_LIVE_TIME) {
                currentTime = startTime + TIME_ANIM_WAIT;
                break;
              }

              this._listDataMove.push({
                position: LIST_POST_MOVE[i],
                startTime: startTime,
                delayTime: TIME_ANIM_WAIT
              });

              currentTime = startTime + TIME_ANIM_WAIT;
            }
          }
        };

        _proto.stateMoveIn = function stateMoveIn() {
          var _this2 = this;

          gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_APPEAR);
          var AppSize = Config1988.instance.AppSize;
          var center = v3(AppSize.Width / 2, AppSize.Height / 2);
          this.node.scale.set(v3(0.5, 0.5, 0.5));
          var timeMove = TIME_ANIM_MOVE - this._timeLost >= 0 ? TIME_ANIM_MOVE - this._timeLost : 0;
          tween(this.node).parallel(tween().to(timeMove, {
            position: center
          }, {
            easing: "elasticInOut"
          }), tween().delay(timeMove * 2 / 3).to(timeMove / 3, {
            scale: v3(1, 1, 1)
          }).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 5,
              shakeStyle: Config1988.instance.SHAKE_SCREEN_STYLE.FULL,
              countStep: 2
            });
          })).call(function () {
            _this2._timeLost = TIME_ANIM_MOVE;

            _this2.setState(STATE_BORIS.MOVE_LOOP);
          }).start();
        };

        _proto.stateMoveLoop = function stateMoveLoop() {
          var moveTimeRemain = TIME_ANIM_MOVE;
          var indexAction = 0;

          if (this._timeLost >= this._listDataMove[0].startTime && this._timeLost <= this._listDataMove[0].startTime + TIME_ANIM_WAIT_CENTER) {
            this.node.setPosition(this._listDataMove[0].position);
            this._listDataMove[0].delayTime = this._listDataMove[0].startTime + TIME_ANIM_WAIT_CENTER - this._timeLost;
            moveTimeRemain = 0;
          } else {
            for (var i = 1; i < this._listDataMove.length; ++i) {
              if (this._timeLost < this._listDataMove[i].startTime) {
                var p0 = this._listDataMove[i - 1].position;
                var p1 = this._listDataMove[i].position;
                var per = this._timeLost - this._listDataMove[i - 1].startTime - this._listDataMove[i - 1].delayTime;
                var position = getPointBetweenTwoPointByPercent(p0, p1, per);
                this.node.setPosition(v3(position.x, position.y));
                moveTimeRemain = this._listDataMove[i].startTime - this._timeLost;
                indexAction = i;
                break;
              } else if (this._timeLost <= this._listDataMove[i].startTime + TIME_ANIM_WAIT) {
                this.node.setPosition(this._listDataMove[i].position);
                this._listDataMove[i].delayTime = this._listDataMove[i].startTime + TIME_ANIM_WAIT - this._timeLost;
                moveTimeRemain = 0;
                indexAction = i;
                break;
              }
            }
          }

          this.createActionMove(indexAction, moveTimeRemain);
        };

        _proto.createActionMove = function createActionMove(indexAction, moveTimeRemain) {
          var _this3 = this;

          var listAction;
          listAction = tween(this.node);
          var angle = this.caculateAngle(this.node.position, this._listDataMove[indexAction].position);

          if (moveTimeRemain) {
            listAction.then(tween().parallel(rotateTo(0.25, angle), moveTo(moveTimeRemain, this._listDataMove[indexAction].position.x, this._listDataMove[indexAction].position.y, 0, 'sineIn')));
            listAction.then(rotateTo(0.25, 0));
          }

          this.playAnimIdle(listAction);
          indexAction++;

          for (var i = indexAction; i < this._listDataMove.length; ++i) {
            angle = this.caculateAngle(this._listDataMove[i - 1].position, this._listDataMove[i].position);
            listAction.then(call(function () {
              gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_MOVE);
            }));
            listAction.then(tween().parallel(rotateTo(0.25, angle), moveTo(TIME_ANIM_MOVE, this._listDataMove[i].position.x, this._listDataMove[i].position.y, 0, 'sineIn')));
            listAction.then(rotateTo(0.25, 0));
            listAction.then(call(function () {
              var random = getRandomInt(0, 4);

              if (random == 1) {
                gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_LAUGH);
              }
            }));
            this.playAnimIdle(listAction);
          }

          listAction.then(call(function () {
            _this3.setState(STATE_BORIS.MOVE_OUT);
          }));
          listAction.start();
        };

        _proto.caculateAngle = function caculateAngle(curPos, nextPos) {
          return curPos.x > nextPos.x ? -20 : 20;
        };

        _proto.playAnimIdle = function playAnimIdle(listAction) {
          listAction.then(tween().call(function () {
            gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_IDLE);
          }).parallel(moveBy(TIME_ANIM_WAIT / 4, 20, 0), tween().then(rotateBy(TIME_ANIM_WAIT / 8, -5)), tween().then(rotateBy(TIME_ANIM_WAIT / 8, 5))).parallel(moveBy(TIME_ANIM_WAIT / 4, -20, 0), tween().then(rotateBy(TIME_ANIM_WAIT / 8, 5)), tween().then(rotateBy(TIME_ANIM_WAIT / 8, -5))).parallel(moveBy(TIME_ANIM_WAIT / 4, -20, 0), tween().then(rotateBy(TIME_ANIM_WAIT / 8, 5)), tween().then(rotateBy(TIME_ANIM_WAIT / 8, -5))).parallel(moveBy(TIME_ANIM_WAIT / 4, 20, 0), tween().then(rotateBy(TIME_ANIM_WAIT / 8, -5)), tween().then(rotateBy(TIME_ANIM_WAIT / 8, 5))));
        };

        _proto.stateMoveOut = function stateMoveOut() {
          stopAllActions(this.node);
          this.enableColliderBoxs(false);
          this._isDie = true;
          var listAction = this.createActionMoveOut();
          listAction.start();
        };

        _proto.createActionMoveOut = function createActionMoveOut() {
          var _this4 = this;

          var listAction;
          listAction = tween(this.node);
          this.unschedule(this.scheduleRandomAnim);
          var angle = this.caculateAngle(this.node.position, v2(640, 360));
          listAction.then(tween().parallel(moveTo(0.5, 640, 360), rotateTo(0.125, angle)));
          listAction.then(rotateTo(0.125, 0));
          listAction.then(call(function () {
            _this4.fishAnim.setAnimation(0, "Happy", true);

            gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_TRASH_TALK, BORIS_FEELING.HAPPY_1);
          }));
          listAction.then(delay(0.5));
          listAction.then(call(function () {
            _this4._isTurnOffStatic = true;
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 5,
              shakeStyle: Config1988.instance.SHAKE_SCREEN_STYLE.FULL,
              countStep: 3
            });
            gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_OUT);
          }));
          listAction.then(rotateTo(0.05, -5));
          listAction.then(rotateTo(0.05, 0));
          listAction.then(rotateTo(0.05, 5));
          listAction.then(rotateTo(0.05, 0));
          listAction.then(rotateTo(0.05, -5));
          listAction.then(rotateTo(0.05, 0));
          listAction.then(rotateTo(0.05, 5));
          listAction.then(rotateTo(0.05, 0));
          listAction.then(rotateTo(0.05, -5));
          listAction.then(rotateTo(0.05, 0));
          listAction.then(rotateTo(0.05, 5));
          listAction.then(rotateTo(0.05, 0));
          var configBezier1 = [v2(-960, -360), v2(360, 360), v2(360, 600)];
          var moveOut = tween(this.node);
          moveOut.then(tween().parallel(rotateTo(0.125, -20), scaleTo(0.3, 1.5)));
          moveOut.then(tween().parallel(rotateTo(0.25, 20), scaleTo(0.7, 5), fadeOut(0.7)));
          listAction.then(tween().parallel(gfBezierBy(1, configBezier1), call(function () {
            moveOut.start();
          })));
          listAction.then(call(function () {
            _this4.onDie();
          }));
          return listAction;
        };

        _proto.stateWaitDie = function stateWaitDie() {
          this._isDie = true;
          this.enableColliderBoxs(false);
          stopAllActions(this.node);
          gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_TRASH_TALK, BORIS_FEELING.ANGRY);
          gfEventEmitter.instance.emit(EventCode.GAME_LAYER.BORIS_WAIT_DIE, this._rewardData);
          this.fishAnim.setAnimation(0, LIST_MIX_ANIM_WITH_SKIN[4].anim, true);
          this.playShake({
            timeOneStep: 0.05,
            amplitude: 5
          });
        };

        _proto.playShake = function playShake(_ref) {
          var _this5 = this;

          var timeOneStep = _ref.timeOneStep,
              amplitude = _ref.amplitude;
          var startPos = this.node.getPosition();

          if (this.node.angle != 0) {
            tween(this.node).to(0.25, {
              angle: 0
            }).start();
          }

          tween(this.node).parallel(tween().to(timeOneStep, {
            position: v3(startPos.x - amplitude, startPos.y - amplitude)
          }).to(timeOneStep, {
            position: startPos
          }).to(timeOneStep, {
            position: v3(startPos.x + amplitude, startPos.y + amplitude)
          }).to(timeOneStep, {
            position: startPos
          }).to(timeOneStep, {
            position: v3(startPos.x - amplitude, startPos.y + amplitude)
          }).to(timeOneStep, {
            position: startPos
          }).to(timeOneStep, {
            position: v3(startPos.x + amplitude, startPos.y - amplitude)
          }).to(timeOneStep, {
            position: startPos
          }), tween().delay(timeOneStep * 2).call(function () {
            var percent = getRandomInt(0, 1);

            if (percent) {
              var levelDamaged = getRandomInt(0, 4);

              _this5.playEffectExplosion(levelDamaged);
            }
          })).repeatForever().start();
        };

        _proto.updateSkinDamaged = function updateSkinDamaged(levelDamaged, isResume) {
          if (levelDamaged === void 0) {
            levelDamaged = 0;
          }

          if (isResume === void 0) {
            isResume = false;
          }

          if (!isResume) {
            this.playEffectExplosion(levelDamaged);
          } else {
            this._levelDamaged = 0;
          }

          if (this._levelDamaged == levelDamaged) return;
          this.unschedule(this.scheduleRandomAnim);
          var _LIST_MIX_ANIM_WITH_S = LIST_MIX_ANIM_WITH_SKIN[levelDamaged],
              skin = _LIST_MIX_ANIM_WITH_S.skin,
              anim = _LIST_MIX_ANIM_WITH_S.anim;
          this._levelDamaged = levelDamaged;
          this.fishAnim.setSkin(skin);
          this.fishAnim.setAnimation(0, anim, false);
          this.fishAnim.addAnimation(0, LIST_MIX_ANIM_WITH_SKIN[0].anim, true);
          gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_TRASH_TALK, this._levelDamaged);
          gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_DAMAGE);
          this.schedule(this.scheduleRandomAnim, 4.1);
        };

        _proto.scheduleRandomAnim = function scheduleRandomAnim() {
          if (this._levelDamaged < 0) return;
          var anim = LIST_MIX_ANIM_WITH_SKIN[this._levelDamaged].anim;
          var random = getRandomInt(0, 100);
          var percentNormal = 50;
          var percentLaugh = 65;
          if (random < percentNormal) return;else if (random > percentNormal && random < percentLaugh && this._levelDamaged != BORIS_FEELING.PANIC && this._levelDamaged != BORIS_FEELING.ANGRY) {
            gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_TRASH_TALK, BORIS_FEELING.HAPPY_1);
            this.fishAnim.setAnimation(0, LIST_MIX_ANIM_WITH_SKIN[1].anim, false);
            this.fishAnim.addAnimation(0, LIST_MIX_ANIM_WITH_SKIN[0].anim, true);
          } else if (this._levelDamaged > 0 && random > percentLaugh) {
            gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_TRASH_TALK, this._levelDamaged);
            this.fishAnim.setAnimation(0, anim, false);
            this.fishAnim.addAnimation(0, LIST_MIX_ANIM_WITH_SKIN[0].anim, true);
          }
        };

        _proto.playEffectExplosion = function playEffectExplosion(levelDamaged) {
          var _this6 = this;

          if (!levelDamaged) return; // const effExplosion = cc.instantiate(this.smallExplosion);

          var effExplosion = new Node('effExplosion');
          effExplosion.addComponent(UIOpacity);
          var compExplosion = effExplosion.addComponent(sp.Skeleton);
          compExplosion.skeletonData = this.smallExplosionSpineData;
          this.node.addChild(effExplosion);
          effExplosion.setPosition(ARR_POS_EXPLOSION[+levelDamaged - 1]);
          effExplosion.getComponent(UIOpacity).opacity = 255;
          effExplosion.getComponent(sp.Skeleton).setAnimation(0, "animation", false);
          var duration = effExplosion.getComponent(sp.Skeleton).findAnimation("animation").duration;
          tween(effExplosion).delay(duration).call(function () {
            var index = _this6._arrEffect.indexOf(effExplosion);

            if (index != -1) {
              _this6._arrEffect.splice(index, 1);
            }
          }).removeSelf().call(function () {
            effExplosion.destroy();
          }).start();

          this._arrEffect.push(effExplosion);
        };

        _proto.setState = function setState(nextState) {
          if (this._currentState == nextState) return;

          switch (nextState) {
            case STATE_BORIS.MOVE_IN:
              this.stateMoveIn();
              break;

            case STATE_BORIS.MOVE_LOOP:
              this.stateMoveLoop();
              break;

            case STATE_BORIS.MOVE_OUT:
              this.stateMoveOut();
              break;

            case STATE_BORIS.WAIT_DIE:
              this.stateWaitDie();
              break;

            case STATE_BORIS.DIE:
              this.playEffectDie();
              break;
          }

          this._currentState = nextState;
        };

        _proto.onHit = function onHit() {
          var _this7 = this;

          this.fishAnim.color = FLAG_COLOR;
          this.scheduleOnce(function () {
            _this7.fishAnim.color = Color.WHITE;
          }, 0.1);
        };

        _proto.onBossEnd = function onBossEnd(data) {
          this.fishAnim.color = Color.WHITE;
          var wonJackpot = data.wonJackpot;
          this._rewardData = data;

          if (wonJackpot) {
            this.setState(STATE_BORIS.WAIT_DIE);
          } else {
            this.setState(STATE_BORIS.MOVE_OUT);
          }
        };

        _proto.returnReward = function returnReward() {
          if (!this._rewardData) {
            return;
          }

          var _this$_rewardData = this._rewardData,
              DeskStation = _this$_rewardData.DeskStation,
              WinAmount = _this$_rewardData.WinAmount,
              wonJackpot = _this$_rewardData.wonJackpot;

          if (!wonJackpot) {
            return;
          }

          var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

          if (!player || !player.isActive()) {
            console.warn("Can not find player or player was out");
          }

          gfEventEmitter.instance.emit(EventCode.GAME_LAYER.PLAY_JACKPOT_BORIS, {
            jackpotAmount: WinAmount,
            DeskStation: DeskStation
          });
        };

        _proto.onCatch = function onCatch() {
          this._isDie = true;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_DIE);
          this.setState(STATE_BORIS.DIE);
        };

        _proto.onDie = function onDie(isResume) {
          if (isResume === void 0) {
            isResume = false;
          }

          if (!isResume) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, Config1988.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }

          this._isDie = true;
          gfEventEmitter.instance.emit(EventCode.GAME_LAYER.BORIS_END);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this._FishID);
          this.returnReward();
          this.node.removeFromParent();
          this.reset();
        };

        _proto.playEffectDie = function playEffectDie() {
          var _this8 = this;

          gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_DIE);
          stopAllActions(this.node);
          this.enableColliderBoxs(false);
          var durationDie = this.fishAnim.findAnimation(LIST_MIX_ANIM_WITH_SKIN[5].anim).duration;
          this._isTurnOffStatic = false;
          this.unschedule(this.scheduleRandomAnim);
          tween(this.node).call(function () {
            _this8._isTurnOffStatic = true;

            _this8.fishAnim.setSkin(LIST_MIX_ANIM_WITH_SKIN[5].skin);

            _this8.fishAnim.setAnimation(0, LIST_MIX_ANIM_WITH_SKIN[5].anim, false);
          }).delay(durationDie * 0.3 + 0.4).call(function () {
            gfEventEmitter.instance.emit(EventCode.SOUND.BORIS_DESTROYED);
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.1,
              amplitude: 10,
              shakeStyle: Config1988.instance.SHAKE_SCREEN_STYLE.FULL,
              countStep: 2
            });

            _this8.updateZIndex(99);
          }).delay(durationDie * 0.6).call(function () {
            _this8.onDie();
          }).start();
        } // @ts-ignore
        ;

        _proto.update = function update(dt) {
          var _this9 = this;

          _gfBaseFish.prototype.update.call(this, dt);

          if (!this._isTurnOffStatic && this._currTimeDelayStatic >= DELAY_TIME_STATIC) {
            var position = getPostionInOtherNode(this.node.parent, this.node); // @ts-ignore

            var borisStatic = PoolManager1988.instance.createBorisStatic({
              position: v2(position.x, position.y + 5),
              parent: this.node.parent,
              zIndex: this.zIndex - 1,
              angle: this.node.angle,
              scale: this.node.scale
            });

            this._arrBorisStatic.push(borisStatic);

            var callback = function callback() {
              var index = _this9._arrBorisStatic.indexOf(borisStatic);

              _this9._arrBorisStatic.splice(index, 1);
            };

            borisStatic.play(callback);
            this._currTimeDelayStatic = 0;
          } else {
            this._currTimeDelayStatic += dt;
          }
        };

        _proto.updateOutScreen = function updateOutScreen() {
          var lastState = this._isOutScreen;

          _gfBaseFish.prototype.updateOutScreen.call(this);

          if (lastState && !this._isOutScreen) {
            gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.BOSS_ON_GAME);
          }
        };

        _proto.enableColliderBoxs = function enableColliderBoxs(enable) {
          var fishColliderBoxes = this.node.getComponents(BoxCollider);
          fishColliderBoxes.map(function (box) {
            box.enabled = enable;
          }); // for (let i = 0; i < fishColliderBoxes.length; ++i) {
          //     fishColliderBoxes[i].enabled = enable;
          // }
        };

        _proto.getChipDropPosition = function getChipDropPosition() {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 0));
        };

        _proto.updateAngle = function updateAngle() {};

        _proto.reset = function reset() {
          stopAllActions(this.node);
          this._isDie = false;
          this._isOutScreen = true;
          this.getComponent(UIOpacity).opacity = 255;
          this.node.active = true;
          this.node.angle = 0;
          this.node.setPosition(START_POS);
          this._listDataMove = [];
          this._timeLost = 0;
          this._timeRemain = 0;
          this._currentState = -1;
          this.node.scale = v3(1, 1, 1);
          this._isTurnOffStatic = false;
          this.enableColliderBoxs(true);
          this.fishAnim.setSkin(LIST_MIX_ANIM_WITH_SKIN[0].skin);
          this.updateZIndex(Config1988.instance.Z_INDEX.DRAGON);

          this._arrEffect.forEach(function (element) {
            if (element && isValid(element)) {
              stopAllActions(element);
              element.removeFromParent();
              element.destroy();
            }
          });

          this._arrEffect = [];
          this._rewardData = null;

          if (this._arrBorisStatic.length > 0) {
            for (var i = 0; i < this._arrBorisStatic.length; ++i) {
              var borisStatic = this._arrBorisStatic.splice(i, 1);

              borisStatic[0].returnPool();
            }

            this._arrBorisStatic = [];
          }
        };

        _proto.returnPool = function returnPool() {};

        return BossBoris1988;
      }(gfBaseFish), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "borisStatic", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "smallExplosionSpineData", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFreezeGunFX.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "9d1acQMwhZEGb+TDxd9EmQU", "gfFreezeGunFX", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfFreezeGunFX = exports('GfFreezeGunFX', (_dec = ccclass('GfFreezeGunFX'), _dec2 = property(sp.Skeleton), _dec3 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfFreezeGunFX, _Component);

        function GfFreezeGunFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "freezeGunFX", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "freezeTextFX", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "AnimFreezeGunAppear", void 0);

          _defineProperty(_assertThisInitialized(_this), "AnimFreezeGunIdle", void 0);

          _defineProperty(_assertThisInitialized(_this), "AnimFreezeText", void 0);

          return _this;
        }

        var _proto = GfFreezeGunFX.prototype;

        _proto.onLoad = function onLoad() {
          this.setAnimationName();
          this.freezeGunFX.node.active = false;
          this.freezeTextFX.node.active = false;
        };

        _proto.setAnimationName = function setAnimationName() {
          this.AnimFreezeGunAppear = "1XuatHien";
          this.AnimFreezeGunIdle = "IdleSungBang";
          this.AnimFreezeText = "animation";
        };

        _proto.activeFreezeEffect = function activeFreezeEffect() {
          var _this2 = this;

          this.freezeGunFX.node.active = true;
          this.freezeGunFX.setAnimation(0, this.AnimFreezeGunAppear, false);
          this.freezeGunFX.setCompleteListener(function () {
            _this2.freezeGunFX.setAnimation(0, _this2.AnimFreezeGunIdle, true);

            _this2.freezeGunFX.setCompleteListener(function () {});
          });
          this.freezeTextFX.node.active = true;
          this.freezeTextFX.setAnimation(0, this.AnimFreezeText, false);
          this.freezeTextFX.setCompleteListener(function () {
            _this2.freezeTextFX.node.active = false;
          });
        };

        _proto.isFreezeGunActive = function isFreezeGunActive() {
          return this.freezeGunFX.node.active;
        };

        _proto.stopFreezeGunEffect = function stopFreezeGunEffect() {
          this.freezeGunFX.node.active = false;
        };

        return GfFreezeGunFX;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "freezeGunFX", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "freezeTextFX", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup03.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9d2f9LT2YNENpQixPEYQg9c", "gfFishGroup03", undefined);

      var gfFishGroup3 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup3() {}

        gfFishGroup3.createCircleFishGroup = function createCircleFishGroup(_ref) {
          var moveTime = _ref.moveTime,
              moveScale = _ref.moveScale,
              count = _ref.count,
              startPos = _ref.startPos,
              radius = _ref.radius,
              _ref$isMoveRight = _ref.isMoveRight,
              isMoveRight = _ref$isMoveRight === void 0 ? false : _ref$isMoveRight;
          var flip = isMoveRight ? gfFishGroupData.flipCoord : -gfFishGroupData.flipCoord;
          var moveOffset = flip * moveScale * (gfBaseConfig.instance.AppSize.Width + 150);
          var angleStep = 360 / count;

          for (var i = 0; i < count; ++i) {
            var fishInfo = gfFishGroupData.getNextFishData();
            if (!fishInfo) continue;
            var fishPos = v2(startPos.x + Math.cos(i * angleStep * Math.PI / 180) * radius * gfFishGroupData.flipCoord, startPos.y + Math.sin(i * angleStep * Math.PI / 180) * radius * gfFishGroupData.flipCoord);
            fishInfo.moveAction = new FishMoveActions(fishPos);
            fishInfo.moveAction.appendAction(FISH_ACTION.MoveBy, {
              time: moveTime,
              x: moveOffset,
              y: 0
            });
            FishGroupHelper.createFishWithDelay(fishInfo);
          }
        };

        gfFishGroup3.create = function create() {
          // Two circle group go facing each other
          var ypos = gfBaseConfig.instance.AppSize.Height / 2;
          var left = -280;
          var right = gfBaseConfig.instance.AppSize.Width - left;

          if (gfFishGroupData.isFlipped()) {
            var _ref2 = [right, left];
            left = _ref2[0];
            right = _ref2[1];
          }

          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 40,
            startPos: v2(right, ypos),
            radius: 235
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 30,
            startPos: v2(right, ypos),
            radius: 180
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 20,
            startPos: v2(right, ypos),
            radius: 135
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 1,
            startPos: v2(right, ypos),
            radius: 0
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 40,
            startPos: v2(left, ypos),
            radius: 235,
            isMoveRight: true
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 30,
            startPos: v2(left, ypos),
            radius: 180,
            isMoveRight: true
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 20,
            startPos: v2(left, ypos),
            radius: 135,
            isMoveRight: true
          });
          this.createCircleFishGroup({
            moveTime: 47,
            moveScale: 2,
            count: 1,
            startPos: v2(left, ypos),
            radius: 0,
            isMoveRight: true
          });
        };

        return gfFishGroup3;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup11.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9dc94Ev3bpM4pWEykAtrhA9", "gfFishGroup11", undefined);

      var gfFishGroup11 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup11() {}

        gfFishGroup11.create = function create() {
          var fishCount = [20, 20, 16, 16, 14, 14, 8];
          var delayEach = 3;
          var i = 0;
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
          this.createFish11Wave(fishCount[i], delayEach * i++);
        };

        gfFishGroup11.createFish11Wave = function createFish11Wave(fishCount, baseDelay) {
          for (var i = 1; i <= fishCount / 2; ++i) {
            var angle = gfFishGroupData.flipCoord * 90 - i / fishCount * 360;
            this.createSingleFish11(baseDelay, angle);
          }

          for (var _i = fishCount / 2 - 1; _i >= 0; --_i) {
            var _angle = gfFishGroupData.flipCoord * 90 + _i / fishCount * 360;

            this.createSingleFish11(baseDelay, _angle);
          }
        };

        gfFishGroup11.createSingleFish11 = function createSingleFish11(baseDelay, angle) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var AppSize = gfBaseConfig.instance.AppSize;
          var startPos = FishGroupHelper.convertFlipCoordinate(v2(AppSize.Width / 2, -100));
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var fishSpeed = 80;
          var moveInTime = Math.abs(center.y - startPos.y) / fishSpeed;
          var moveAction = new FishMoveActions(startPos);
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: baseDelay
          });
          moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveInTime,
            x: 0,
            y: center.y - startPos.y
          });
          var moveOutTime = AppSize.Width / fishSpeed;
          var radius = 400;
          this.makeBezierLine(angle, moveAction, moveInTime, radius);
          moveAction.appendAction(FISH_ACTION.MoveByDistance, {
            time: moveOutTime,
            angle: (angle - 135) * Math.PI / 180,
            distance: AppSize.Width
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        gfFishGroup11.makeBezierLine = function makeBezierLine(angle, moveAction, moveOutTime, radius) {
          if (radius === void 0) {
            radius = 400;
          }

          var pos1 = v2(radius * Math.cos(angle * Math.PI / 180), radius * Math.sin(angle * Math.PI / 180));
          var pos2 = v2(radius * Math.cos((angle + 45) * Math.PI / 180), radius * Math.sin((angle + 45) * Math.PI / 180));
          var pos3 = v2(0, 0);
          moveAction.appendAction(FISH_ACTION.gfBezierBy, {
            time: moveOutTime,
            points: [pos1, pos2, pos3]
          });
        };

        return gfFishGroup11;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoveDataType1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, Event;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Event = module.Event;
    }],
    execute: function () {
      exports({
        DOT_TYPE: void 0,
        ExportName: void 0,
        FORMATION_TYPE: void 0,
        VALUE_TYPE: void 0,
        gEvent: void 0
      });

      cclegacy._RF.push({}, "9e296qCOmhG3rKWPwvSkQ1J", "MoveDataType1985", undefined);

      var DEFAULT_PRECISION = exports('DEFAULT_PRECISION', 2);
      var Round = exports('Round', function Round(x, precision) {
        if (precision === void 0) {
          precision = DEFAULT_PRECISION;
        }

        return Math.floor(x * Math.pow(10, precision)) / Math.pow(10, precision);
      });
      var DOT_TYPE;

      (function (DOT_TYPE) {
        DOT_TYPE[DOT_TYPE["PATH"] = 0] = "PATH";
        DOT_TYPE[DOT_TYPE["SPEED"] = 1] = "SPEED";
        DOT_TYPE[DOT_TYPE["SCALE"] = 2] = "SCALE";
      })(DOT_TYPE || (DOT_TYPE = exports('DOT_TYPE', {})));

      var VALUE_TYPE;

      (function (VALUE_TYPE) {
        VALUE_TYPE[VALUE_TYPE["Linear"] = 0] = "Linear";
        VALUE_TYPE[VALUE_TYPE["Curve"] = 1] = "Curve";
      })(VALUE_TYPE || (VALUE_TYPE = exports('VALUE_TYPE', {})));

      var FORMATION_TYPE;

      (function (FORMATION_TYPE) {
        FORMATION_TYPE[FORMATION_TYPE["Line"] = 0] = "Line";
        FORMATION_TYPE[FORMATION_TYPE["Shape"] = 1] = "Shape";
      })(FORMATION_TYPE || (FORMATION_TYPE = exports('FORMATION_TYPE', {})));

      var gfptEvent = exports('gfptEvent', /*#__PURE__*/function (_Event) {
        _inheritsLoose(gfptEvent, _Event);

        function gfptEvent(name, data, bubble) {
          var _this;

          if (bubble === void 0) {
            bubble = true;
          }

          _this = _Event.call(this, name, bubble) || this;

          _defineProperty(_assertThisInitialized(_this), "data", void 0);

          _this.data = data;
          return _this;
        }

        return gfptEvent;
      }(Event));
      var defaultPath = {
        id: "00000",
        name: "path 0",
        type: 1,
        pts: {
          pts1: [{
            x: 360,
            y: 1660
          }, {
            x: 360,
            y: -50
          }],
          pts2: [{
            x: 360,
            y: 1660
          }, {
            x: 360,
            y: -50
          }]
        }
      };
      var defaultSpeed = {
        id: "00000",
        name: "speed 0",
        "type": 0,
        "value": 500
      };
      var defaultScale = {
        id: "00000",
        name: "scale 0",
        "type": 0,
        "value": 1
      };
      var defaultFormation = {
        id: "00000",
        name: "formation 0",
        type: 0,
        count: 1,
        space: 50
      };
      var gData = exports('gData', function gData() {});

      _defineProperty(gData, "path", [defaultPath]);

      _defineProperty(gData, "speed", [defaultSpeed]);

      _defineProperty(gData, "scale", [defaultScale]);

      _defineProperty(gData, "formation", [defaultFormation]);

      var gEvent;

      (function (gEvent) {
        gEvent["IMPORT_DATA"] = "EVENT_IMPORT_DATA";
        gEvent["IMPORT_ONE_DATA"] = "EVENT_IMPORT_ONE_DATA";
        gEvent["EXPORT_ONE_DATA"] = "EVENT_EXPORT_ONE_DATA";
      })(gEvent || (gEvent = exports('gEvent', {})));

      var ExportName;

      (function (ExportName) {
        ExportName["PATH"] = "path";
        ExportName["SPEED"] = "speed";
        ExportName["SCALE"] = "scale";
        ExportName["FORMATION"] = "formation";
      })(ExportName || (ExportName = exports('ExportName', {})));

      var getMaxNumber = exports('getMaxNumber', function getMaxNumber(list) {
        var max = 0;

        for (var i = 0; i < list.length; ++i) {
          if (list[i].name) {
            var digit = list[i].name.replace(/[^\d.]/g, '');
            var n = parseInt(digit);

            if (max < n) {
              max = n;
            }
          }
        }

        return max + 1;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyItemStack.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Sprite, SpriteAtlas, UITransform, v3, tween, Component, setOpacity, stopAllActions, moveTo, fadeTo, formatUserName, SetZIndex;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      SpriteAtlas = module.SpriteAtlas;
      UITransform = module.UITransform;
      v3 = module.v3;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      moveTo = module.moveTo;
      fadeTo = module.fadeTo;
    }, function (module) {
      formatUserName = module.formatUserName;
      SetZIndex = module.SetZIndex;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "a0d3aOdmJZDN71/zQ3uQY+Z", "gfNotifyItemStack", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNotifyItemStack = exports('gfNotifyItemStack', (_dec = ccclass('gfNotifyItemStack'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Sprite), _dec5 = property(SpriteAtlas), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNotifyItemStack, _Component);

        function gfNotifyItemStack() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "userName", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "winAmount", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "iconImage", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "atlasIconFish", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_iconPrefix", "");

          _defineProperty(_assertThisInitialized(_this), "_isShow", false);

          _defineProperty(_assertThisInitialized(_this), "_index", void 0);

          _defineProperty(_assertThisInitialized(_this), "_config", void 0);

          return _this;
        }

        var _proto = gfNotifyItemStack.prototype;

        _proto.initObj = function initObj(index) {
          this._index = index;
          this._config = {
            SPACING: 30,
            HEIGHT: this.node.getComponent(UITransform).height,
            WIDTH: this.node.getComponent(UITransform).width,
            TIME_MOVE: 0.25
          };
          this.reset();
          this.extendInit();
        };

        _proto.extendInit = function extendInit() {};

        _proto.updateData = function updateData(dataInput) {
          var data = dataInput.data; // Override here

          this.userName.string = formatUserName(data.userName) + " ";
          this.winAmount.string = data.goldReward;
          this.userName.updateRenderData(true);
          this.winAmount.updateRenderData(true);
          this.iconImage.spriteFrame = this.atlasIconFish.getSpriteFrame(this._iconPrefix + data.itemKind);
        };

        _proto.moveToIndex = function moveToIndex(newIndex, lastItem) {
          if (lastItem === void 0) {
            lastItem = false;
          }

          if (!this.checkShow()) {
            stopAllActions(this.node);
            this.setIndex(newIndex);
            return;
          }

          var _this$_config = this._config,
              SPACING = _this$_config.SPACING,
              HEIGHT = _this$_config.HEIGHT,
              TIME_MOVE = _this$_config.TIME_MOVE;
          var postStartY = -this._index * (SPACING + HEIGHT);
          var postEndY = -newIndex * (SPACING + HEIGHT);
          var posStart = v3(0, postStartY, 0);
          var posEnd = v3(0, postEndY, 0);
          this.setIndex(newIndex);
          stopAllActions(this.node);
          this.node.setPosition(posStart);
          this.node.active = true;
          setOpacity(this.node, 255);
          SetZIndex(this.node, 1);

          if (lastItem) {
            this._isShow = false;
            tween(this.node).parallel(moveTo(TIME_MOVE, posEnd.x, posEnd.y), fadeTo(TIME_MOVE, 1)).start();
          } else {
            tween(this.node).to(TIME_MOVE, {
              position: posEnd
            }).start();
          }
        };

        _proto.showItem = function showItem(data) {
          var _this2 = this;

          var _this$_config2 = this._config,
              WIDTH = _this$_config2.WIDTH,
              TIME_MOVE = _this$_config2.TIME_MOVE;
          var posStart = v3(-WIDTH, 0, 0);
          var posEnd = v3(0, 0, 0);
          this.setIndex(0);
          stopAllActions(this.node);
          this.node.setPosition(posStart);
          this.node.active = true;
          setOpacity(this.node, 255);
          SetZIndex(this.node, 2);
          tween(this.node).call(function () {
            _this2._isShow = true;

            _this2.updateData(data);
          }).to(TIME_MOVE, {
            position: posEnd
          }).start();
        };

        _proto.hideAfterDeltaTime = function hideAfterDeltaTime(_ref) {
          var _this3 = this;

          var idleTime = _ref.idleTime,
              timeMove = _ref.timeMove;
          stopAllActions(this.node);
          tween(this.node).delay(idleTime).then(fadeTo(timeMove, 1)).call(function () {
            _this3._isShow = false;

            _this3.reset();
          }).start();
        };

        _proto.getIndex = function getIndex() {
          return this._index;
        };

        _proto.setIndex = function setIndex(index) {
          this._index = index;
        };

        _proto.checkShow = function checkShow() {
          return this._isShow;
        };

        _proto.reset = function reset() {
          stopAllActions(this.node);
          this.winAmount.string = "";
          this._isShow = false;
          this.node.active = false;
        };

        return gfNotifyItemStack;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "userName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "winAmount", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconImage", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "atlasIconFish", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotifyMessage1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfNotifyMessage.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Tween, Vec3, tween, Layout, UITransform, GfNotifyMessage;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Tween = module.Tween;
      Vec3 = module.Vec3;
      tween = module.tween;
      Layout = module.Layout;
      UITransform = module.UITransform;
    }, function (module) {
      GfNotifyMessage = module.GfNotifyMessage;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a128aF+cVFJsIdjlbs9I0re", "NotifyMessage1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NotifyMessage1985 = exports('NotifyMessage1985', (_dec = ccclass('NotifyMessage1985'), _dec(_class = /*#__PURE__*/function (_GfNotifyMessage) {
        _inheritsLoose(NotifyMessage1985, _GfNotifyMessage);

        function NotifyMessage1985() {
          return _GfNotifyMessage.apply(this, arguments) || this;
        }

        var _proto = NotifyMessage1985.prototype;

        _proto.show = function show(data) {
          if (!this.validateData(data)) return;
          this.sortDataMessage();

          if (!this._isShow) {
            this.runAnimShow();
          }
        };

        _proto.runAnimShow = function runAnimShow() {
          var _this = this;

          this._isShow = true;
          this.node.active = true;
          this.node.setScale(this.node.getScale().x, 0);
          Tween.stopAllByTarget(this.node);
          var scaleShow = new Vec3(this.node.getScale().x, 1, this.node.getScale().z);
          tween(this.node).to(0.5, {
            scale: scaleShow
          }).call(function () {
            _this.onStackMessage();
          }).start();
        };

        _proto.play = function play(data) {
          var _this2 = this;

          var json = this.getStringDataNotify(data).replace(/'/g, '"');
          var objMessage = JSON.parse(json);
          this.createNotifyMessage(objMessage);
          this.contentNode.getComponent(Layout).updateLayout();
          var dX = this.contentNode.getComponent(UITransform).width + this.node.getComponent(UITransform).width;
          this.contentNode.setPosition(dX, this.contentNode.position.y);
          Tween.stopAllByTarget(this.contentNode);
          tween(this.node).delay(0).call(function () {
            var timer = 2 * dX / _this2.speed;
            var positionEndContent = new Vec3(-dX, _this2.contentNode.position.y, _this2.contentNode.position.z);
            tween(_this2.contentNode).to(timer, {
              position: positionEndContent
            }).delay(0.5).call(function () {
              _this2.onStackMessage();
            }).start();
          }).start();
        };

        return NotifyMessage1985;
      }(GfNotifyMessage)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfUtilities.ts', './EventsCode1985.ts', './DataStore1985.ts', './Config1985.ts', './gfSoundController.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, getRandomInt, registerEvent, EventsCode1985, DataStore1985, Config1985, GfSoundController;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      registerEvent = module.registerEvent;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      GfSoundController = module.GfSoundController;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "a16becPyXlGPK5n5jmisDgr", "SoundController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SoundController1985 = exports('SoundController1985', (_dec = ccclass('SoundController1985'), _dec(_class = (_temp = /*#__PURE__*/function (_GfSoundController) {
        _inheritsLoose(SoundController1985, _GfSoundController);

        function SoundController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfSoundController.call.apply(_GfSoundController, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "soundBombEnergy", null);

          return _this;
        }

        var _proto = SoundController1985.prototype;

        _proto.initEvents = function initEvents() {
          _GfSoundController.prototype.initEvents.call(this);

          registerEvent(EventsCode1985.SOUND.CHANGE_LOCATION, this.playChangeLocation, this);
          registerEvent(EventsCode1985.SOUND.SELECT_BUTTON, this.playSelectButton, this);
          registerEvent(EventsCode1985.SOUND.CHANGE_HOLOGRAM, this.playChangeHologram, this);
          registerEvent(EventsCode1985.SOUND.START_BUTTON, this.playStartButton, this);
          registerEvent(EventsCode1985.SOUND.IMPACT, this.playImpact, this);
          registerEvent(EventsCode1985.SOUND.SPACE_SHIP_EXPLOSION, this.playSpaceShipExplosion, this);
          registerEvent(EventsCode1985.SOUND.DESTROY_ENEMY, this.playEnemyDestroy, this);
          registerEvent(EventsCode1985.SOUND.SHIELD_PROTECTED, this.playShieldProtected, this);
          registerEvent(EventsCode1985.SOUND.WARNING_HAVE_NOT_SHIELD, this.warningHaveNotShield, this);
          registerEvent(EventsCode1985.SOUND.FIRE_LOCK, this.playAutoFire, this);
          registerEvent(EventsCode1985.SOUND.PICK_COIN, this.playPickCoin, this);
          registerEvent(EventsCode1985.SOUND.SLIDE_BUTTON_CLICK, this.playSlideButtonClick, this);
          registerEvent(EventsCode1985.SOUND.SHOW_BUTTON_CLICK, this.playShowButtonClick, this);
          registerEvent(EventsCode1985.SOUND.NORMAL_BUTTON_CLICK, this.playNormalButtonClick, this);
          registerEvent(EventsCode1985.SOUND.SHIELD_REGENERATION, this.playShieldRegeneration, this);
          registerEvent(EventsCode1985.SOUND.UPDATE_BET, this.playUpdateBet, this);
          registerEvent(EventsCode1985.SOUND.DROP_ITEM_LASER, this.playSfxDropItemLaser, this);
          registerEvent(EventsCode1985.SOUND.IMPACT_ELECTRIC_WAVE, this.playSfxImpactElectricWave, this);
          registerEvent(EventsCode1985.SOUND.IMPACT_LASER, this.playSfxImpactLaser, this);
          registerEvent(EventsCode1985.SOUND.DESTROY_SP1, this.playSfxDestroySP1, this);
          registerEvent(EventsCode1985.SOUND.DESTROY_SP2, this.playSfxDestroySP2, this);
          registerEvent(EventsCode1985.SOUND.BOMB_ALERT, this.playSfxBombAlert, this);
          registerEvent(EventsCode1985.SOUND.BOMB_ENERGY, this.playSfxBombEnergy, this);
          registerEvent(EventsCode1985.SOUND.FIRE_ELECTRIC_WAVE, this.playSfxElectricWave, this);
          registerEvent(EventsCode1985.SOUND.UPDATE_LEVEL_SKILL_ULTIMATE, this.playSfxUpdateLevelSkillUltimate, this);
          registerEvent(EventsCode1985.SOUND.DROP_ENERGY, this.playSfxDropEnergy, this);
          registerEvent(EventsCode1985.SOUND.PICK_ENERGY, this.playSfxPickEnergy, this);
          registerEvent(EventsCode1985.SOUND.UP_STREAK, this.playSfxUpStreak, this);
          registerEvent(EventsCode1985.SOUND.CANCEL_BUTTON, this.playSfxCancelButton, this);
        };

        _proto.resumeSoundBackground = function resumeSoundBackground(_ref) {
          var listFishNormal = _ref.listFishNormal,
              listFishGroup = _ref.listFishGroup;
          this.playBackGroundMusic(Config1985.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
        };

        _proto.playBackGroundMusic = function playBackGroundMusic(data, init) {
          if (init === void 0) {
            init = false;
          }

          if (DataStore1985.instance.getCurBGMusic() === data && !init && this.currentMusic.audioSource.playing || DataStore1985.instance.isWaitJoinRoom) return;
          this.unscheduleAllCallbacks();
          this.onResumeSound();

          switch (data) {
            case Config1985.instance.SOUND_BACKGROUND_CONFIG.LOBBY:
              this.playFishBGM("bgmLobby", true);
              break;

            case Config1985.instance.SOUND_BACKGROUND_CONFIG.IN_GAME:
              var numRandom = getRandomInt(1, 3);
              this.playFishBGM("bgmMain" + numRandom, true);
              break;
          }

          DataStore1985.instance.setCurBGMusic(data);
        };

        _proto.playChangeLocation = function playChangeLocation() {
          this.playFishSFX("sfx_changelocation");
        };

        _proto.playSelectButton = function playSelectButton() {
          this.playFishSFX("sfx_selectbutton");
        };

        _proto.playChangeHologram = function playChangeHologram() {
          this.playFishSFX("sfx_changehologram");
        };

        _proto.playStartButton = function playStartButton() {
          this.playFishSFX("sfx_startbutton");
        };

        _proto.playImpact = function playImpact(id) {
          this.playFishSFX("sfx_impact" + id);
        };

        _proto.playSpaceShipExplosion = function playSpaceShipExplosion() {
          this.playFishSFX("sfx_explosion");
        };

        _proto.playEnemyDestroy = function playEnemyDestroy() {
          this.playFishSFX("sfx_destroy");
        };

        _proto.playShieldProtected = function playShieldProtected() {
          this.playFishSFX("sfx_shied1");
        };

        _proto.warningHaveNotShield = function warningHaveNotShield() {
          this.playFishSFX("sfx_shield0");
        };

        _proto.playUpdateBet = function playUpdateBet(betIndex) {
          this.playFishSFX("sfx_bet" + betIndex);
        };

        _proto.playAutoFire = function playAutoFire() {
          this.playFishSFX("sfx_firelock");
        };

        _proto.playPickCoin = function playPickCoin() {
          this.playFishSFX("sfx_pickcoin");
        };

        _proto.playSlideButtonClick = function playSlideButtonClick() {
          this.playFishSFX("sfx_slidebutton");
        };

        _proto.playShowButtonClick = function playShowButtonClick() {
          this.playFishSFX("sfx_showbutton");
        };

        _proto.playNormalButtonClick = function playNormalButtonClick() {
          this.playFishSFX("sfx_normalbutton");
        };

        _proto.playShieldRegeneration = function playShieldRegeneration() {
          this.playFishSFX("sfx_shieldregeneration");
        };

        _proto.playSfxClick = function playSfxClick() {//this.playFishSFX("sfxClick");
        };

        _proto.playSfxCatch = function playSfxCatch() {//this.playFishSFX("sfxCatch");
        };

        _proto.playSfxGold = function playSfxGold() {//this.playFishSFX("sfxGold");
        };

        _proto.playSfxFireLaser = function playSfxFireLaser() {
          var _this2 = this;

          var soundLaserInstall = this.playFishSFX("sfx_laser_install");
          this.scheduleOnce(function () {
            _this2.playFishSFX("sfxFire_laser");
          }, this.getDuration(soundLaserInstall) / 2);
        };

        _proto.playSfxDropItemLaser = function playSfxDropItemLaser() {
          this.playFishSFX("sfx_laser_drop");
        };

        _proto.playSfxImpactElectricWave = function playSfxImpactElectricWave() {
          this.playFishSFX("sfx_impact_electric_wave");
        };

        _proto.playSfxImpactLaser = function playSfxImpactLaser() {
          this.playFishSFX("sfx_impact_laser");
        };

        _proto.playSfxDestroySP1 = function playSfxDestroySP1() {
          this.playFishSFX("sfx_destroy_sp1");
        };

        _proto.playSfxDestroySP2 = function playSfxDestroySP2() {
          this.playFishSFX("sfx_destroy_sp2");
        };

        _proto.playSfxBombAlert = function playSfxBombAlert() {
          this.playFishSFX("sfx_bomb_alert");
        };

        _proto.playSfxBombEnergy = function playSfxBombEnergy() {
          this.playFishSFX("sfx_bomb_energy");
        };

        _proto.playSfxElectricWave = function playSfxElectricWave() {
          this.playFishSFX("sfx_electricwave");
        };

        _proto.playSfxUpdateLevelSkillUltimate = function playSfxUpdateLevelSkillUltimate(level) {
          this.playFishSFX("sfx_skill" + level);
        };

        _proto.playSfxDropEnergy = function playSfxDropEnergy() {
          this.playFishSFX("sfx_dropenergy");
        };

        _proto.playSfxPickEnergy = function playSfxPickEnergy() {
          this.playFishSFX("sfx_pickenergy");
        };

        _proto.playSfxGetItemLaser = function playSfxGetItemLaser() {// this.playFishSFX("sfxGet_item");
        };

        _proto.playSfxUpStreak = function playSfxUpStreak() {
          this.playFishSFX("sfx_upstreak");
        };

        _proto.playSfxCancelButton = function playSfxCancelButton() {
          this.playFishSFX("sfx_cancelbutton");
        };

        return SoundController1985;
      }(GfSoundController), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptPreviewMain.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './Config1985.ts', './gfptDataType.ts', './gfptSavedList.ts', './gfptSavedFormationList.ts', './gfptMovingObject.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, Node, Prefab, Graphics, instantiate, Component, registerEvent, removeEvents, Config1985, gEvent, gData, GfptSavedList, GfptSavedFormationList, GfptMovingObject;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Node = module.Node;
      Prefab = module.Prefab;
      Graphics = module.Graphics;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gEvent = module.gEvent;
      gData = module.gData;
    }, function (module) {
      GfptSavedList = module.GfptSavedList;
    }, function (module) {
      GfptSavedFormationList = module.GfptSavedFormationList;
    }, function (module) {
      GfptMovingObject = module.GfptMovingObject;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _temp;

      cclegacy._RF.push({}, "a2a3dfJxJ1FcZ51mTv/hrZF", "gfptPreviewMain", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptPreviewMain = exports('GfptPreviewMain', (_dec = ccclass('GfptPreviewMain'), _dec2 = property(GfptSavedList), _dec3 = property(GfptSavedList), _dec4 = property(GfptSavedList), _dec5 = property(GfptSavedList), _dec6 = property(GfptSavedFormationList), _dec7 = property(sp.SkeletonData), _dec8 = property(Node), _dec9 = property(Prefab), _dec10 = property(Graphics), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptPreviewMain, _Component);

        function GfptPreviewMain() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "speedList", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "scaleList", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pathList", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "airList", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "formationList", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "currentSpineData", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "airLayer", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "movingObj", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pathGraphics", _descriptor9, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "showPath", false);

          _defineProperty(_assertThisInitialized(_this), "listGraphics", []);

          _defineProperty(_assertThisInitialized(_this), "curGraphics", 0);

          return _this;
        }

        var _proto = GfptPreviewMain.prototype;

        _proto.onLoad = function onLoad() {
          new Config1985();
        };

        _proto.start = function start() {
          this.node.on("ITEM_CLICKED", this.onItemClicked, this);
          this.node.on("OBJ_MOVE_DONE", this.setActiveHUD, this);
          registerEvent(gEvent.IMPORT_DATA, this.loadContents, this);
          this.speedList.initBaseValues(1000, 550, 250);
          this.scaleList.initBaseValues(1, 550, 250);
          this.pathList.initBaseValues(0, 720, 1560);
          this.formationList.initBaseValues(0, 720, 720);
          this.loadContents();
          this.airList.select(0);
          this.listGraphics.push(this.pathGraphics);

          for (var i = 0; i < 30; ++i) {
            var graphics = instantiate(this.pathGraphics.node);
            graphics.parent = this.pathGraphics.node.parent;
            this.listGraphics.push(graphics.getComponent(Graphics));
          }
        };

        _proto.onItemClicked = function onItemClicked(e) {
          this.clear();

          if (e.data.spineData) {
            this.currentSpineData = e.data.spineData;
          } else {
            this.updatePathData();
          }
        };

        _proto.updatePathData = function updatePathData() {
          this.clear();
          var formation = gData.formation[this.formationList.selectedIndex];

          for (var i = 0; i < formation.count; ++i) {
            var movingObj = instantiate(this.movingObj).getComponent(GfptMovingObject);
            this.airLayer.addChild(movingObj.node);
            var spine = movingObj.getComponent(sp.Skeleton);
            spine.skeletonData = this.currentSpineData;
            spine.setAnimation(0, 'idle', true);
            movingObj.setPath(gData.path[this.pathList.selectedIndex].pts);
            movingObj.setSpeed(gData.speed[this.speedList.selectedIndex]);
            movingObj.setScale(gData.scale[this.scaleList.selectedIndex]);
            movingObj.setFormation(formation, i);
          }
        };

        _proto.setActiveHUD = function setActiveHUD(enable) {
          if (enable === void 0) {
            enable = true;
          }

          this.speedList.node.parent.active = enable;
          this.formationList.node.parent.active = enable;
        };

        _proto.clear = function clear() {
          this.airLayer.destroyAllChildren();
          this.airLayer.removeAllChildren();

          for (var i = 0; i < this.listGraphics.length; ++i) {
            this.listGraphics[i].clear();
          }

          this.curGraphics = 0;
        };

        _proto.onBtnMoveClicked = function onBtnMoveClicked() {
          this.clear();

          if (gData.path.length > 0 && gData.scale.length > 0 && gData.speed.length > 0 && gData.formation.length > 0) {
            this.updatePathData();

            for (var i = 0; i < this.airLayer.children.length; ++i) {
              var movingObj = this.airLayer.children[i].getComponent(GfptMovingObject);
              movingObj.move();
              this.showPath && this.drawPath(movingObj);
            } // this.setActiveHUD(false);

          }
        };

        _proto.drawPath = function drawPath(obj) {
          for (var i = 0; i < obj.pathCurve.getMaxStep() - 1; ++i) {
            this.listGraphics[this.curGraphics].moveTo(obj.pathCurve.getPoint(i).x, obj.pathCurve.getPoint(i).y);
            this.listGraphics[this.curGraphics].lineTo(obj.pathCurve.getPoint(i + 1).x, obj.pathCurve.getPoint(i + 1).y);
          }

          this.listGraphics[this.curGraphics].stroke();
          this.listGraphics[this.curGraphics].close();
          ++this.curGraphics;
        };

        _proto.loadContents = function loadContents() {
          this.speedList.updateContent(gData.speed);
          this.scaleList.updateContent(gData.scale);
          this.pathList.updateContent(gData.path);
          this.formationList.updateContent(gData.formation);
          this.speedList.select(0);
          this.scaleList.select(0);
          this.pathList.select(0);
          this.formationList.select(0);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        _proto.onToggleShowPathClick = function onToggleShowPathClick(evt) {
          this.showPath = evt.isChecked;
        };

        return GfptPreviewMain;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "speedList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "scaleList", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pathList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "airList", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "formationList", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "currentSpineData", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "airLayer", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "movingObj", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "pathGraphics", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FormationConfig1985.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a396fs1wz9G2qSSqL2noRr/", "FormationConfig1985", undefined);

      var FormationConfig1985 = exports('FormationConfig1985', [{
        "id": "0",
        "type": 0,
        "count": 1,
        "space": 100
      }, {
        "id": "1",
        "type": 1,
        "count": 3,
        "pts": [{
          "x": 0,
          "y": 120
        }, {
          "x": 0,
          "y": -120
        }, {
          "x": 0,
          "y": 0
        }]
      }, {
        "id": "2",
        "type": 1,
        "count": 5,
        "pts": [{
          "x": 0,
          "y": 240
        }, {
          "x": 0,
          "y": -80
        }, {
          "x": 0,
          "y": 0
        }, {
          "x": 0,
          "y": 80
        }, {
          "x": 0,
          "y": 160
        }]
      }, {
        "id": "3",
        "type": 1,
        "count": 3,
        "pts": [{
          "x": 80,
          "y": 0
        }, {
          "x": 0,
          "y": -80
        }, {
          "x": -80,
          "y": 0
        }]
      }, {
        "id": "4",
        "type": 1,
        "count": 5,
        "pts": [{
          "x": 160,
          "y": 80
        }, {
          "x": 0,
          "y": -80
        }, {
          "x": -80,
          "y": 0
        }, {
          "x": 80,
          "y": 0
        }, {
          "x": -160,
          "y": 80
        }]
      }, {
        "id": "5",
        "type": 1,
        "count": 7,
        "pts": [{
          "x": 160,
          "y": 80
        }, {
          "x": 0,
          "y": -80
        }, {
          "x": -80,
          "y": 0
        }, {
          "x": 80,
          "y": 0
        }, {
          "x": -160,
          "y": 80
        }, {
          "x": -240,
          "y": 160
        }, {
          "x": 240,
          "y": 160
        }]
      }, {
        "id": "6",
        "type": 1,
        "count": 8,
        "pts": [{
          "x": 160,
          "y": 80
        }, {
          "x": 0,
          "y": -80
        }, {
          "x": -80,
          "y": 0
        }, {
          "x": 80,
          "y": 0
        }, {
          "x": -160,
          "y": 80
        }, {
          "x": -80,
          "y": 240
        }, {
          "x": 80,
          "y": 240
        }, {
          "x": 0,
          "y": 160
        }]
      }, {
        "id": "7",
        "type": 1,
        "count": 6,
        "pts": [{
          "x": 160,
          "y": 80
        }, {
          "x": 0,
          "y": -80
        }, {
          "x": -80,
          "y": 0
        }, {
          "x": 80,
          "y": 0
        }, {
          "x": -160,
          "y": 80
        }, {
          "x": 0,
          "y": 80
        }]
      }, {
        "id": "8",
        "type": 1,
        "count": 3,
        "pts": [{
          "x": 0,
          "y": 0
        }, {
          "x": -250,
          "y": -200
        }, {
          "x": 250,
          "y": 200
        }]
      }, {
        "id": "9",
        "type": 1,
        "count": 3,
        "pts": [{
          "x": 250,
          "y": -200
        }, {
          "x": 0,
          "y": 0
        }, {
          "x": -250,
          "y": 200
        }]
      }, {
        "id": "10",
        "type": 1,
        "count": 3,
        "pts": [{
          "x": 0,
          "y": 0
        }, {
          "x": 250,
          "y": 0
        }, {
          "x": -250,
          "y": 0
        }]
      }]);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup04.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a3deaCIfdVLFLAgA/WBmFmJ", "gfFishGroup04", undefined);

      var gfFishGroup4 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup4() {}

        gfFishGroup4.create = function create() {
          //  Two group make a cross.
          var width = gfBaseConfig.instance.AppSize.Width;
          var height = gfBaseConfig.instance.AppSize.Height;
          var offset = 150;
          var line1 = [v2(0 - offset * 2, 0 - offset), v2(width, height + offset)]; // [0,0] => [1,1]

          var line2 = [v2(0, 0 - offset), v2(width + offset * 2, height + offset)]; // [0,0] => [1,1]

          var line3 = [v2(width, 0 - offset), v2(0 - offset * 2, height + offset)]; // [1,0] => [0,1]

          var line4 = [v2(width + offset * 2, 0 - offset), v2(0, height + offset)]; // [1,0] => [0,1]

          var idx0 = gfFishGroupData.isFlipped() ? 1 : 0;
          var idx1 = gfFishGroupData.isFlipped() ? 0 : 1;
          var roadMap = [[line1[idx0], line1[idx1]], [line2[idx0], line2[idx1]], [line3[idx0], line3[idx1]], [line4[idx0], line4[idx1]], [line2[idx1], line2[idx0]], [line1[idx1], line1[idx0]], [line4[idx1], line4[idx0]], [line3[idx1], line3[idx0]]];
          var delayEach = 2.5;

          for (var i = 0; i < 8; i++) {
            for (var j = 0; j < 8; ++j) {
              var fishInfo = gfFishGroupData.getNextFishData();
              if (!fishInfo) continue;
              fishInfo.moveAction = new FishMoveActions(v2(roadMap[i][0].x, roadMap[i][0].y));
              fishInfo.moveAction.appendAction(FISH_ACTION.Delay, {
                time: j * delayEach
              });
              fishInfo.moveAction.appendAction(FISH_ACTION.MoveTo, {
                time: 20,
                x: roadMap[i][1].x,
                y: roadMap[i][1].y
              });
              FishGroupHelper.createFishWithDelay(fishInfo);
            }
          }
        };

        return gfFishGroup4;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackgroundController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Animation, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "a3e5a/oV7lBv6A2VGM8fwQ9", "BackgroundController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackgroundController1985 = exports('BackgroundController1985', (_dec = ccclass('BackgroundController1985'), _dec2 = property(Animation), _dec3 = property(Animation), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackgroundController1985, _Component);

        function BackgroundController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "wave1", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "wave2", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "timeToChangeSpeed", 1);

          _defineProperty(_assertThisInitialized(_this), "ChangeSpeedInterval", 5);

          _defineProperty(_assertThisInitialized(_this), "waveSpeedScale", 1);

          _defineProperty(_assertThisInitialized(_this), "changeSpeed", -0.2);

          _defineProperty(_assertThisInitialized(_this), "MinWaveSpeedScale", 1);

          _defineProperty(_assertThisInitialized(_this), "MaxWaveSpeedScale", 2);

          return _this;
        }

        var _proto = BackgroundController1985.prototype;

        _proto.start = function start() {
          this.timeToChangeSpeed = this.ChangeSpeedInterval;
        };

        _proto.update = function update(dt) {
          this.timeToChangeSpeed -= dt;

          if (this.timeToChangeSpeed <= 0) {
            this.timeToChangeSpeed = this.ChangeSpeedInterval;

            if (this.waveSpeedScale <= this.MinWaveSpeedScale || this.waveSpeedScale >= this.MaxWaveSpeedScale) {
              this.changeSpeed *= -1;
            }

            this.waveSpeedScale += this.changeSpeed;
            this.updateWaveSpeed();
          }
        };

        _proto.updateWaveSpeed = function updateWaveSpeed() {
          this.wave1.getState('bgloop').speed = this.waveSpeedScale;
          this.wave2.getState('bgloop').speed = this.waveSpeedScale;
        };

        return BackgroundController1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wave1", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "wave2", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GunSkill1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './gfGunSkill.ts', './ReferenceManager1988.ts', './FishManager1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sp, v3, tween, Tween, gfEventEmitter, EventCode, DataStore1988, Config1988, gfGunSkill, ReferenceManager1988, FishManager1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      v3 = module.v3;
      tween = module.tween;
      Tween = module.Tween;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      gfGunSkill = module.gfGunSkill;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }, function (module) {
      FishManager1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "a4136puWvhO6IHJeXHsDwVG", "GunSkill1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EFF_TITLE_SKILL_GUN_TYPE = {
        LASER: 0,
        DRILL: 1
      };
      var GunSkill1988 = exports('GunSkill1988', (_dec = ccclass('GunSkill1988'), _dec2 = property(Node), _dec3 = property(sp.SkeletonData), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfGunSkill) {
        _inheritsLoose(GunSkill1988, _gfGunSkill);

        function GunSkill1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfGunSkill.call.apply(_gfGunSkill, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "effLineDrill", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "arrSpineSkillGunTitle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "countDownFX", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GunSkill1988.prototype;

        _proto.changeSpecialGun = function changeSpecialGun(data) {
          var SkillID = data.SkillID;

          switch (SkillID) {
            case Config1988.instance.SkillConfig.LASER:
              this.changeLaserGun(data);
              break;

            case Config1988.instance.SkillConfig.DRILL:
              this.changeDrillGun(data);
              break;
          }
        };

        _proto.onFireSkill = function onFireSkill(data) {
          var SkillID = data.SkillID;

          switch (SkillID) {
            case Config1988.instance.SkillConfig.LASER:
              this.fireLaser(data);
              break;

            case Config1988.instance.SkillConfig.DRILL:
              this.fireDrill(data);
              break;
          }
        };

        _proto.onPlayerSendFireSkill = function onPlayerSendFireSkill(data) {
          var SkillID = data.SkillID;

          switch (SkillID) {
            case Config1988.instance.SkillConfig.LASER:
              this.playerSendFireLaser();
              break;

            case Config1988.instance.SkillConfig.DRILL:
              this.playerSendFireDrill();
              break;
          }
        };

        _proto.changeDrillGun = function changeDrillGun(data) {
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            this.effLineDrill && (this.effLineDrill.active = false);

            if (player.isMe) {
              if (!DataStore1988.instance.isAutoBot()) {
                DataStore1988.instance.setDataStore({
                  targetState: Config1988.instance.TARGET_LOCK.NONE,
                  currentTargetState: Config1988.instance.TARGET_LOCK.NONE
                });
              }

              DataStore1988.instance.setSelfInfo({
                isLockGun: false,
                skillLock: Config1988.instance.SkillConfig.DRILL
              });
              this.effLineDrill.active = true;
              this.showSkillTitle(Config1988.instance.SkillConfig.DRILL);
              this.showSkillCountDown();
              player.lockBet(true);
            }

            this.gun.getChildByName("Gun").scale = v3(2 / 3, 2 / 3, 1);

            player._playEffectFire(Config1988.instance.GunSkill.DRILL);
          }
        };

        _proto.playerSendFireDrill = function playerSendFireDrill() {
          var data = {
            Angle: this.gun.angle,
            ListFish: FishManager1988.instance.getArrFishID(),
            SkillID: Config1988.instance.SkillConfig.DRILL
          };
          gfEventEmitter.instance.emit(EventCode.GAME_LAYER.SEND_FIRE_LASER, data);
          this.resetCountDownSkill();
          DataStore1988.instance.setSelfInfo({
            isLockGun: true
          });
        };

        _proto.fireDrill = function fireDrill(data) {
          var _this2 = this;

          var timeLost = data.BuildTick ? Math.max(0, (DataStore1988.instance.getTime() - data.BuildTick) / 1000) : 0;
          if (timeLost > 9) return;
          data.Angle = data.Angle ? data.Angle : 0;
          data.fishKind = Config1988.instance.FISH_KIND.DRILL;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(data.DeskStation);

          if (player.isMe) {
            data.isResume && gfEventEmitter.instance.emit(EventCode.GAME_LAYER.INTERACTABLE_HUD, false);
            if (player.effectIsMe.active) player.effectIsMe.active = false;
            DataStore1988.instance.setSelfInfo({
              isLockGun: true,
              skillLock: 0
            });
            this.resetCountDownSkill();
            this.effLineDrill.active = false;
            player.addGoldReward(data.TotalReward);

            if (data.isResume) {
              player.updateWallet(data.Wallet);
            }
          } else {
            this.gun.angle = data.Angle;
          }

          var timeShake = 1;
          var countStepShake = 5;
          var timeOneStep = (timeShake - timeLost) / countStepShake / 8; //1 step have 8 action

          if (timeLost < timeShake) {
            gfEventEmitter.instance.emit(EventCode.SOUND.DRILL_FIRE);
            this.playShakeDrill({
              timeOneStep: timeOneStep,
              amplitude: 5,
              countStep: countStepShake,
              nodePlay: this.gun,
              callback: function callback() {
                _this2.gun.getChildByName("Gun").setScale(1, 1, 1);

                _this2.gun.active = false;

                if (player.isMe) {
                  _this2.countDownFX.active = false;
                }

                gfEventEmitter.instance.emit(EventCode.GAME_LAYER.CREATE_BULLET_DRILL, data);
              }
            });
          } else {
            if (player.isMe) {
              this.countDownFX.active = false;
            }

            this.gun.getChildByName("Gun").setScale(1, 1, 1);
            this.gun.active = false;
            gfEventEmitter.instance.emit(EventCode.GAME_LAYER.CREATE_BULLET_DRILL, data);
          }

          gfEventEmitter.instance.emit(EventCode.EFFECT_LAYER.CLEAR_DROP_GUN_LASER, data.DeskStation);
        };

        _proto.playShakeDrill = function playShakeDrill(_ref) {
          var timeOneStep = _ref.timeOneStep,
              amplitude = _ref.amplitude,
              _ref$countStep = _ref.countStep,
              countStep = _ref$countStep === void 0 ? 3 : _ref$countStep,
              nodePlay = _ref.nodePlay,
              _ref$callback = _ref.callback,
              callback = _ref$callback === void 0 ? null : _ref$callback;
          if (!nodePlay) return;
          var startPos = nodePlay.getPosition();
          tween(nodePlay).repeat(countStep, tween().to(timeOneStep, {
            position: v3(startPos.x - amplitude, startPos.y - amplitude, 1)
          }).to(timeOneStep, {
            position: startPos
          }).to(timeOneStep, {
            position: v3(startPos.x + amplitude, startPos.y + amplitude, 1)
          }).to(timeOneStep, {
            position: startPos
          }).to(timeOneStep, {
            position: v3(startPos.x - amplitude, startPos.y + amplitude, 1)
          }).to(timeOneStep, {
            position: startPos
          }).to(timeOneStep, {
            position: v3(startPos.x + amplitude, startPos.y - amplitude, 1)
          }).to(timeOneStep, {
            position: startPos
          })).call(function () {
            callback && callback();
          }).start();
        };

        _proto.initObj = function initObj(data) {
          if (this.countDownFX) {
            this.countDownFX.active = false;
          }

          Tween.stopAllByTarget(this.gun);
          this.isMe = data.DeskStation === DataStore1988.instance.getSelfDeskStation();
          var isHaveSkill = data.skillInfo && data.skillInfo.SkillID > 0;
          this.effLineDrill && (this.effLineDrill.active = false);

          if (this.isMe && !isHaveSkill) {
            DataStore1988.instance.setSelfInfo({
              isLockGun: false,
              currentSkillID: -1
            });
          }

          _gfGunSkill.prototype.initObj.call(this, data);
        };

        _proto.resetCountDownSkill = function resetCountDownSkill() {
          _gfGunSkill.prototype.resetCountDownSkill.call(this);

          if (this.countDownFX) {
            this.countDownFX.active = false;
          }
        };

        _proto.showSkillTitle = function showSkillTitle(skillID) {
          var _this3 = this;

          if (this.countDownFX) {
            this.countDownFX.active = true;
          }

          this.skillTitle.active = true;

          switch (skillID) {
            case Config1988.instance.SkillConfig.DRILL:
              this.skillTitle.getComponent(sp.Skeleton).skeletonData = this.arrSpineSkillGunTitle[EFF_TITLE_SKILL_GUN_TYPE.DRILL];
              break;

            case Config1988.instance.SkillConfig.LASER:
              this.skillTitle.getComponent(sp.Skeleton).skeletonData = this.arrSpineSkillGunTitle[EFF_TITLE_SKILL_GUN_TYPE.LASER];
              break;

            default:
              this.skillTitle.getComponent(sp.Skeleton).skeletonData = this.arrSpineSkillGunTitle[EFF_TITLE_SKILL_GUN_TYPE.LASER];
          }

          this.skillTitle.getComponent(sp.Skeleton).setAnimation(0, 'Appear', false);
          this.skillTitle.getComponent(sp.Skeleton).setCompleteListener(function () {
            _this3.skillTitle.getComponent(sp.Skeleton).setAnimation(0, "Idle", true);

            _this3.skillTitle.getComponent(sp.Skeleton).setCompleteListener(function () {});
          });
        };

        _proto.resetOnExit = function resetOnExit() {
          _gfGunSkill.prototype.resetOnExit.call(this);

          if (this.countDownFX) {
            this.countDownFX.active = false;
          }
        };

        return GunSkill1988;
      }(gfGunSkill), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "effLineDrill", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "arrSpineSkillGunTitle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "countDownFX", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupSetting.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfPopupBase.ts', './gfLocalize.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, Label, gfBaseEvents, gfEventEmitter, gfBaseConfig, gfDataStore, GfPopupBase, gfLocalize;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Label = module.Label;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfLocalize = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "a460cFL2v1C6LEQTORDEruY", "gfPopupSetting", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupSetting = exports('GfPopupSetting', (_dec = ccclass('GfPopupSetting'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopupSetting, _GfPopupBase);

        function GfPopupSetting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnJackpotHistory", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "sfxCheckBox", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bgmCheckBox", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopupSetting.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.initObj = function initObj() {
          _GfPopupBase.prototype.initObj.call(this);

          if (this.btnJackpotHistory) {
            this.btnJackpotHistory.off('click');
            this.btnJackpotHistory.on('click', this.onBtnJPHistory, this);
          }

          this.sfxCheckBox.off('toggle');
          this.bgmCheckBox.off('toggle');
          this.sfxCheckBox.on('toggle', this.onSFXCheckBoxTouch.bind(this), this);
          this.bgmCheckBox.on('toggle', this.onBGMCheckBoxTouch.bind(this), this);
          this.setInitialized(true);
        };

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          this.sfxCheckBox.getComponent(Toggle).isChecked = gfDataStore.instance.getIsEnableSFX();
          this.bgmCheckBox.getComponent(Toggle).isChecked = gfDataStore.instance.getIsEnableBGM();
        };

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.setting);
        };

        _proto.onBtnJPHistory = function onBtnJPHistory() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onSFXCheckBoxTouch = function onSFXCheckBoxTouch() {
          if (!this.getInitialized()) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.sfxCheckBox.getComponent(Toggle).isChecked ? 1 : 0);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
        };

        _proto.onBGMCheckBoxTouch = function onBGMCheckBoxTouch() {
          if (!this.getInitialized()) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.bgmCheckBox.getComponent(Toggle).isChecked ? 1 : 0);
        };

        return GfPopupSetting;
      }(GfPopupBase), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnJackpotHistory", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfxCheckBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "bgmCheckBox", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, view, UITransform, sys, tween, Component, gfBaseEvents, stopAllActions, fadeTo, fadeOut, gfEventEmitter, gfBaseConfig, SetZIndex, registerEvent, removeEvents, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      view = module.view;
      UITransform = module.UITransform;
      sys = module.sys;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      fadeTo = module.fadeTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

      cclegacy._RF.push({}, "a5556p45EFFKboqKOEZaXM8", "gfPopupController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfPopupController = exports('default', (_dec = ccclass('gfPopupController'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfPopupController, _Component);

        function gfPopupController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "popupSetting", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "popupHistoryJackpot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "popupInfo", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "popupTutorial", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "popupPrompt", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "popupAutoBot", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "popupEventInfo", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "overlay", _descriptor8, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_popupQueue", []);

          _defineProperty(_assertThisInitialized(_this), "_joinedGame", false);

          return _this;
        }

        var _proto = gfPopupController.prototype;

        _proto.onLoad = function onLoad() {
          this.overlay.active = false;
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
          this.initEvents();
          this.setActiveAllPopup(true);
        };

        _proto.start = function start() {
          this.setActiveAllPopup(false);
          var canvasSize = view.getCanvasSize();
          this.node.getComponent(UITransform).width = canvasSize.width;
          this.node.getComponent(UITransform).height = canvasSize.height;
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onBeforeSceneChange, this);
          registerEvent(gfBaseEvents.COMMON.INIT_SCENE, this.onAfterSceneChange, this);
          registerEvent(gfBaseEvents.POPUP.CLOSE_ALL, this.closeAll, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_PROMPT, this.showPrompt, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_SETTING, this.showSetting, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_INFO, this.showInfo, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_TUTORIAL, this.onJoinGame, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY, this.showJPHistory, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_AUTO_BOT, this.showAutoBot, this);
          registerEvent(gfBaseEvents.POPUP.POPUP_EVENT_INFO, this.showEventInfo, this);
          registerEvent(gfBaseEvents.POPUP.CHECK_SHOW_POPUP_EVENT, this.checkShowPopupEvent, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
          registerEvent(gfBaseEvents.POPUP.CLOSE_TOP_POPUP, this.close, this);
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          this.closeAll();
        };

        _proto.onAfterSceneChange = function onAfterSceneChange() {
          this.popupEventInfo && this.checkShowPopupEvent();
        };

        _proto.updateSceneSize = function updateSceneSize() {
          this.node.getComponent(UITransform).width = gfBaseConfig.instance.realSize.Width;
          this.node.getComponent(UITransform).height = gfBaseConfig.instance.realSize.Height;
        };

        _proto.checkShowPopupEvent = function checkShowPopupEvent() {
          var showEventInfo = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.SHOW_EVENT_INFO);

          if (showEventInfo) {
            if (!JSON.parse(showEventInfo)) {
              this.showEventInfo(true);
            }
          } else {
            this.showEventInfo(true);
          }

          sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.SHOW_EVENT_INFO, true);
        };

        _proto.setActiveAllPopup = function setActiveAllPopup(active) {
          if (active === void 0) {
            active = true;
          }

          this.popupSetting && (this.popupSetting.active = active);
          this.popupHistoryJackpot && (this.popupHistoryJackpot.active = active);
          this.popupPrompt && (this.popupPrompt.active = active);
          this.popupTutorial && (this.popupTutorial.active = active);
          this.popupInfo && (this.popupInfo.active = active);
        };

        _proto.showEventInfo = function showEventInfo(data) {
          this._showPopup(this.popupEventInfo, data);
        };

        _proto.showJPHistory = function showJPHistory() {
          this._showPopup(this.popupHistoryJackpot);
        };

        _proto.showSetting = function showSetting() {
          this._showPopup(this.popupSetting);
        };

        _proto.showPrompt = function showPrompt(data) {
          console.log('showPrompt' + data);

          this._showPopup(this.popupPrompt, data);
        };

        _proto.showInfo = function showInfo() {
          this._showPopup(this.popupInfo);
        };

        _proto.showTutorial = function showTutorial() {
          this._showPopup(this.popupTutorial);
        };

        _proto.showAutoBot = function showAutoBot() {
          this._showPopup(this.popupAutoBot);
        };

        _proto._showPopup = function _showPopup(currentPopup, data) {
          if (data === void 0) {
            data = null;
          }

          if (!currentPopup) {
            return;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          this.onPopupQueue(currentPopup);
          currentPopup.show(data);
        };

        _proto.onJoinGame = function onJoinGame() {
          if (!this._joinedGame) {
            this._joinedGame = true;
            var selfInfo = gfDataStore.instance.getSelfInfo();
            var llv = sys.localStorage.getItem(gfBaseConfig.instance.LOCAL_STORE.LOCAL_LOGIN_VAR + selfInfo.UserID);

            if (llv) {
              llv = JSON.parse(llv);

              if (!llv[gfBaseConfig.instance.LOCAL_STORE.NOT_SHOW_NT]) {
                this.showTutorial();
              }
            } else {
              this.showTutorial();
            }
          }
        };

        _proto.onPopupQueue = function onPopupQueue(popup) {
          var isNew = false;
          stopAllActions(this.overlay);

          if (this._popupQueue && this._popupQueue.length > 0) {
            var currPopup = this._popupQueue[this._popupQueue.length - 1];

            if (currPopup != popup) {
              this._popupQueue[this._popupQueue.length - 1].hide();

              isNew = true;
            }
          } else {
            this.overlay.active = true;
            var timeDelay = gfDataStore.instance.isPlayingLoadingTransition ? 0 : 0.3;
            tween(this.overlay).then(fadeTo(timeDelay, 150)).start();
            isNew = true;
          }

          if (isNew) {
            this._popupQueue.push(popup);
          }
        };

        _proto.close = function close(isHaveAnim) {
          var _this2 = this;

          if (isHaveAnim === void 0) {
            isHaveAnim = true;
          }

          var popup = this._popupQueue.pop();

          if (popup == null) {
            return;
          }

          popup.hide();

          if (this._popupQueue.length < 1) {
            if (isHaveAnim) {
              tween(this.overlay).then(fadeOut(0.3)).call(function () {
                _this2.overlay.active = false;
              }).start();
            } else {
              this.overlay.active = false;
            }

            return;
          }

          this._popupQueue[this._popupQueue.length - 1].show();
        };

        _proto.closeAll = function closeAll() {
          var _this3 = this;

          if (this._popupQueue.length < 1) {
            return;
          }

          for (var i = 0; i < this._popupQueue.length; i++) {
            this._popupQueue[i].hide(gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT);
          }

          tween(this.overlay).then(fadeOut(0.3)).call(function () {
            _this3.overlay.active = false;
          }).start();
          this._popupQueue = [];
        };

        _proto.refreshPage = function refreshPage() {
          this.node.children.forEach(function (item) {
            item.destroy();
          });
          removeEvents(this);
        };

        _proto.onDestroy = function onDestroy() {
          this.refreshPage();
        };

        return gfPopupController;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "popupSetting", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "popupHistoryJackpot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "popupInfo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "popupTutorial", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "popupPrompt", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "popupAutoBot", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "popupEventInfo", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupMgr.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfUtilities.ts', './gfFishGroupHelper.ts', './gfFishGroup02.ts', './gfFishGroup05.ts', './gfFishGroup01.ts', './gfFishGroup03.ts', './gfFishGroup04.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, error, Component, gfBaseEvents, registerEvent, removeEvents, FishGroupHelper, gfFishGroup2, gfFishGroup5, gfFishGroup1, gfFishGroup3, gfFishGroup4;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      error = module.error;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      FishGroupHelper = module.default;
    }, function (module) {
      gfFishGroup2 = module.default;
    }, function (module) {
      gfFishGroup5 = module.default;
    }, function (module) {
      gfFishGroup1 = module.default;
    }, function (module) {
      gfFishGroup3 = module.default;
    }, function (module) {
      gfFishGroup4 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a5c64eKpjJFHLQ7FVr7G13D", "gfFishGroupMgr", undefined);

      var ccclass = _decorator.ccclass;
      var gfFishGroupMgr = exports('default', (_dec = ccclass('gfFishGroupMgr'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfFishGroupMgr, _Component);

        function gfFishGroupMgr() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfFishGroupMgr.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, this.createFishGroup, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RESUME_FISH_GROUP, this.resumeFishGroup, this);
        };

        _proto.resumeFishGroup = function resumeFishGroup(data) {
          if (data.ParadeKind >= 0) {
            this.createFishGroup({
              ListFish: data.ListParadeFish,
              ParadeKind: data.ParadeKind,
              buildTick: data.TimeBuildFishParade
            });
          }
        };

        _proto.createFishGroup = function createFishGroup(data) {
          FishGroupHelper.initFishGroupData(data);

          switch (data.ParadeKind) {
            case 0:
              this.createFishGroup1();
              break;

            case 1:
              this.createFishGroup2();
              break;

            case 2:
              this.createFishGroup3();
              break;

            case 3:
              this.createFishGroup4();
              break;

            case 4:
              this.createFishGroup5();
              break;

            default:
              error("WRONG PARADE KIND: " + data.ParadeKind);
          }
        };

        _proto.createFishGroup1 = function createFishGroup1() {
          gfFishGroup1.create();
        };

        _proto.createFishGroup2 = function createFishGroup2() {
          gfFishGroup2.create();
        };

        _proto.createFishGroup3 = function createFishGroup3() {
          // Two circle group go facing each other
          gfFishGroup3.create();
        };

        _proto.createFishGroup4 = function createFishGroup4() {
          //  Two group make a cross.
          gfFishGroup4.create();
        };

        _proto.createFishGroup5 = function createFishGroup5() {
          // Two cirle rotating then spread out
          gfFishGroup5.create();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfFishGroupMgr;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PanelChip1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfEventEmitter.ts', './EventsCode1988.ts', './PanelFrameReward1988.ts', './PanelComponent1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, SpriteFrame, Node, ProgressBar, Label, UIOpacity, Sprite, tween, v3, sp, warn, isValid, fadeIn, fadeOut, delay, stopAllActions, gfEventEmitter, EventCode, PanelFrameReward1988, PanelComponent1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
      UIOpacity = module.UIOpacity;
      Sprite = module.Sprite;
      tween = module.tween;
      v3 = module.v3;
      sp = module.sp;
      warn = module.warn;
      isValid = module.isValid;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      delay = module.delay;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      PanelFrameReward1988 = module.PanelFrameReward1988;
    }, function (module) {
      PanelComponent1988 = module.PanelComponent1988;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _temp;

      cclegacy._RF.push({}, "a70319SH+9FAphKUJ1582NJ", "PanelChip1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var STATIC_MAX_ENERGY = 9;
      var WIDTH_STACK_ENERGY = 72;
      var WIDTH_ENERGY = 9;
      var COUNT_PASSWORD = 7;
      var SPRITE_FRAME_PERCENT = {
        OTHER_PLAYER: 0,
        MY_PLAYER: 1
      };
      var CONFIG_PERCERT_CHIP = {
        "1": 1,
        "2": 2,
        "3": 3,
        "4": 6,
        "5": 15,
        "6": 29,
        "7": 44
      };
      var PanelChip1988 = exports('PanelChip1988', (_dec = ccclass('PanelChip1988'), _dec2 = property(SpriteFrame), _dec3 = property(PanelFrameReward1988), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(SpriteFrame), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(SpriteFrame), _dec10 = property(SpriteFrame), _dec11 = property(Node), _dec12 = property(ProgressBar), _dec13 = property(SpriteFrame), _dec14 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_PanelComponent) {
        _inheritsLoose(PanelChip1988, _PanelComponent);

        function PanelChip1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PanelComponent.call.apply(_PanelComponent, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_arrInfoEnergy", []);

          _initializerDefineProperty(_assertThisInitialized(_this), "listSpriteFrameWord", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "frameTextWin", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "trayChip", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "stackEnergy", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spriteEnergy", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "isLeft", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectTextJP", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeEffectActiveChip", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spriteFrameHavePass", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spriteFrameHaveNotPass", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listNodeEffectPassWord", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "progressBarActiveChip", _descriptor12, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spriteFrameProgressBar", _descriptor13, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "labelPercent", _descriptor14, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isPlaying", false);

          _defineProperty(_assertThisInitialized(_this), "_currentTweenEnergy", null);

          _defineProperty(_assertThisInitialized(_this), "_index", 0);

          _defineProperty(_assertThisInitialized(_this), "_countTextJP", 0);

          _defineProperty(_assertThisInitialized(_this), "_tweenEffectTextJP", null);

          _defineProperty(_assertThisInitialized(_this), "_arrTweenActiveChip", []);

          _defineProperty(_assertThisInitialized(_this), "_isForceActiveAll", false);

          _defineProperty(_assertThisInitialized(_this), "_totalPercent", 0);

          _defineProperty(_assertThisInitialized(_this), "_tweenPercent", null);

          return _this;
        }

        var _proto = PanelChip1988.prototype;

        _proto.setIndex = function setIndex(index) {
          this._index = index;
          this.frameTextWin.setIndex(index);
        };

        _proto.onLoad = function onLoad() {
          this.frameTextWin.setActive(false);
          this.nodeEffectActiveChip.getComponent(UIOpacity).opacity = 0;
          this.progressBarActiveChip.progress = this._totalPercent;
          this.labelPercent.string = "0%";
        };

        _proto.show = function show() {
          _PanelComponent.prototype.show.call(this);

          this.frameTextWin.setActive(false);
        };

        _proto.addChip = function addChip(itemID, GoldReward, callback) {
          var nodeEnergy = new Node("nodeEnergy");
          var compSprite = nodeEnergy.addComponent(Sprite);
          nodeEnergy.addComponent(UIOpacity);
          compSprite.spriteFrame = this.spriteEnergy;
          this.stackEnergy.addChild(nodeEnergy);

          this._arrInfoEnergy.push({
            node: nodeEnergy,
            itemID: itemID,
            GoldReward: GoldReward,
            callback: callback
          });

          this.setupPositionEnergy(nodeEnergy);

          if (!this._isPlaying) {
            this.startActiveChip();
          }
        };

        _proto.getFirstStackListChip = function getFirstStackListChip() {
          if (this._arrInfoEnergy.length > 0) {
            var chipInfo = this._arrInfoEnergy[0];
            return chipInfo;
          }

          return null;
        };

        _proto.startActiveChip = function startActiveChip() {
          var _this2 = this;

          if (this._arrInfoEnergy.length <= 0) {
            this._isPlaying = false;

            if (this._isForceActiveAll) {
              var callbackHide = function callbackHide() {
                _this2.hide();
              };

              this.frameTextWin.setCallbackHide(callbackHide);
            }

            return;
          }

          this._isPlaying = true;
          var countActive = COUNT_PASSWORD - this._countTextJP;

          if (countActive >= this._arrInfoEnergy.length || this._isForceActiveAll) {
            countActive = this._arrInfoEnergy.length;
          }

          var arrEnergyActive = [];

          for (var i = 0; i < countActive; ++i) {
            var chipInfo = this._arrInfoEnergy.shift();

            if (chipInfo) {
              arrEnergyActive.push(chipInfo);
            }
          } //effect decryption


          var durationEffectDecryption = this.playEffectDecryption(); //effect fade energy

          this.playEffectActiveEnergy(arrEnergyActive, durationEffectDecryption); //effect active

          var durationActiveChip = this.playEffectActiveChip(arrEnergyActive, durationEffectDecryption); //effectShowText

          var scheduleTimeActivePassword = durationEffectDecryption + durationActiveChip;
          this.playActiveChip(arrEnergyActive, scheduleTimeActivePassword);
        };

        _proto.playEffectActiveEnergy = function playEffectActiveEnergy(arrayEnergyActive, duration) {
          var _this3 = this;

          for (var i = 0; i < arrayEnergyActive.length; ++i) {
            var infoEnergy = arrayEnergyActive[i];
            this.playEffectFadeInOut(infoEnergy.node, duration, 4, true);
            this.scheduleOnce(function () {
              if (_this3._arrInfoEnergy.length >= STATIC_MAX_ENERGY) {
                _this3.updatePosXAllChip(true);
              } else {
                _this3.updatePosXAllChip();
              }
            }, duration);
          }
        };

        _proto.playActiveChip = function playActiveChip(arrEnergyActive, scheduleTime) {
          var _this4 = this;

          var TIME_SHOW_TEXT = 1.7;

          var _loop = function _loop(index) {
            var chipInfo = arrEnergyActive[index];

            if (chipInfo) {
              var tweenChipInfo = tween(chipInfo).delay(scheduleTime).call(function () {
                _this4.showTextWithItemID(chipInfo.itemID);
              }).delay(TIME_SHOW_TEXT).call(function () {
                _this4.frameTextWin.show(chipInfo.GoldReward);

                if (index == arrEnergyActive.length - 1) {
                  _this4.startActiveChip();
                }

                chipInfo.callback && chipInfo.callback();
                chipInfo.itemID = null;
                chipInfo.node.removeFromParent();
                chipInfo.node.destroy();
                chipInfo = null;
              });

              _this4._arrTweenActiveChip.push(tweenChipInfo);

              tweenChipInfo.start();
            }
          };

          for (var index = 0; index < arrEnergyActive.length; ++index) {
            _loop(index);
          }
        };

        _proto.setupPositionEnergy = function setupPositionEnergy(nodeEnergy) {
          if (this._arrInfoEnergy.length > STATIC_MAX_ENERGY) {
            this.updatePosXAllChip(true);
          } else {
            nodeEnergy.position.x = -1 * (this._arrInfoEnergy.length - 1) * WIDTH_ENERGY;
            nodeEnergy.position.y = 8.5;
          }
        };

        _proto.updatePosXAllChip = function updatePosXAllChip(isOverSize) {
          if (isOverSize === void 0) {
            isOverSize = false;
          }

          var dir = this.isLeft ? -1 : -1;
          var scaleX = 1;

          if (isOverSize) {
            scaleX = WIDTH_STACK_ENERGY / ((this._arrInfoEnergy.length - 1) * WIDTH_ENERGY);
          }

          for (var index = 0; index < this._arrInfoEnergy.length; ++index) {
            var nodeEnergy = this._arrInfoEnergy[index].node;
            nodeEnergy.scale.x = scaleX;
            nodeEnergy.setPosition(index * scaleX * WIDTH_ENERGY * dir, 8.5);
          }
        };

        _proto.playEffectDecryption = function playEffectDecryption() {
          var _this5 = this;

          this.nodeEffectActiveChip.getComponent(UIOpacity).opacity = 255;
          tween(this.nodeEffectActiveChip).delay(1.2).call(function () {
            _this5.nodeEffectActiveChip.getComponent(UIOpacity).opacity = 0;
          }).start();
          var durationDecryption = 0;

          var _loop2 = function _loop2(index) {
            var nodeTextIsActive = _this5.checkNodeTextJackpotIsActive(index);

            if (nodeTextIsActive) {
              return "continue";
            }

            var effect = _this5.arrEffectDecryption[index];
            effect.active = true;
            var spine = effect.getComponent(sp.Skeleton);
            spine.setAnimation(0, "animation", false);
            durationDecryption = spine.findAnimation("animation").duration;

            _this5.scheduleOnce(function () {
              effect.active = false;
            }, durationDecryption);
          };

          for (var index = 0; index < this.arrEffectDecryption.length; ++index) {
            var _ret = _loop2(index);

            if (_ret === "continue") continue;
          }

          return durationDecryption;
        };

        _proto.playEffectActiveChip = function playEffectActiveChip(arrEnergyActive, scheduleTime) {
          var _this6 = this;

          if (scheduleTime === void 0) {
            scheduleTime = 0;
          }

          var arrIndexHaveKey = [];
          var durationEffect = 0.6;

          for (var i = 0; i < arrEnergyActive.length; ++i) {
            var info = arrEnergyActive[i];

            if (info.itemID != 0) {
              var index = info.itemID - 1;
              arrIndexHaveKey.push(index);
            }
          }

          for (var _index = 0; _index < this.listNodeEffectPassWord.length; ++_index) {
            var nodeTextIsActive = this.checkNodeTextJackpotIsActive(_index);

            if (nodeTextIsActive) {
              continue;
            }

            if (arrIndexHaveKey.indexOf(_index) == -1) {
              (function () {
                var nodeEffect = _this6.listNodeEffectPassWord[_index];

                var spriteFrame = _this6.getSpriteFrameEffect(_index, false);

                if (!nodeEffect) debugger;
                nodeEffect.getComponent(Sprite).spriteFrame = spriteFrame;

                _this6.scheduleOnce(function () {
                  _this6.playEffectFadeInOut(nodeEffect, 0.6, 3);
                }, scheduleTime);
              })();
            } else {
              (function () {
                durationEffect = 0.8;
                var nodeEffect = _this6.listNodeEffectPassWord[_index];

                var spriteFrame = _this6.getSpriteFrameEffect(_index, true);

                nodeEffect.getComponent(Sprite).spriteFrame = spriteFrame;

                _this6.scheduleOnce(function () {
                  _this6.playEffectFadeInOut(nodeEffect, 0.8, 4);
                }, scheduleTime);
              })();
            }
          }

          return durationEffect;
        };

        _proto.playNodeTextJP = function playNodeTextJP(nodeTextJP, itemID) {
          var _this7 = this;

          nodeTextJP.scaleX = 0.45;
          tween(nodeTextJP).delay(1.2).parallel(tween().to(0.2, {
            scale: v3(2, 2, 1)
          }), tween().then(fadeIn(0.1))).to(0.3, {
            scale: v3(0.45, 0.45, 1)
          }).call(function () {
            _this7._countTextJP++;
            _this7._totalPercent += CONFIG_PERCERT_CHIP[itemID];

            _this7.tweenProgress(_this7._totalPercent);

            _this7.playEffectPanelTextJP();

            gfEventEmitter.instance.emit(EventCode.SOUND.ACTIVE_PASSWORD, itemID);
          }).start();
        };

        _proto.tweenProgress = function tweenProgress(totalPercent) {
          var _this8 = this;

          if (this._tweenPercent) {
            this._tweenPercent.stop();
          }

          var curPercent = this.progressBarActiveChip.progress * 100;
          var increasePercent = totalPercent - curPercent;
          tween(this).to(0.25, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this8.progressBarActiveChip.progress = parseInt((curPercent + increasePercent * ratio).toString()) / 100;
              _this8.labelPercent.string = parseInt((curPercent + increasePercent * ratio).toString()) + "%";
            }
          }).start();
        };

        _proto.playEffectPanelTextJP = function playEffectPanelTextJP() {
          if (!this._tweenEffectTextJP) {
            this._tweenEffectTextJP = tween(this.effectTextJP).repeatForever(tween().then(fadeIn(0.5)).then(fadeOut(0.5)));
          }

          switch (this._countTextJP) {
            case 5:
              if (!this.effectTextJP.active) {
                this.effectTextJP.active = true;
                this.effectTextJP.getComponent(UIOpacity).opacity = 0;
              }

              this._tweenEffectTextJP.start();

              this.effectTextJP.getComponent(sp.Skeleton).setAnimation(0, "avatar_stage1", true);
              break;

            case 6:
              if (!this.effectTextJP.active) {
                this.effectTextJP.active = true;
                this.effectTextJP.getComponent(UIOpacity).opacity = 0;
              }

              this._tweenEffectTextJP.start();

              this.effectTextJP.getComponent(sp.Skeleton).setAnimation(0, "avatar_stage2", true);
              break;

            case 7:
              gfEventEmitter.instance.emit(EventCode.EFFECT_LAYER.PLAY_EFFECT_LIGHTING);
              break;

            default:
              this.effectTextJP.active = false;
          }
        };

        _proto.showTextWithItemID = function showTextWithItemID(itemID) {
          if (itemID <= 0) {
            if (itemID < 0) {
              warn("updateDataDecryption() => Wrong itemID: ", itemID);
            }

            return;
          }

          var spriteFrame = this.listSpriteFrameWord[itemID - 1];
          var textJP = this.getNodeTextJackPotByID(itemID);
          textJP.getComponent(Sprite).spriteFrame = spriteFrame;
          textJP.active = true;
          textJP.getComponent(UIOpacity).opacity = 0;
          this.playNodeTextJP(textJP, itemID);
        };

        _proto.playEffectFadeInOut = function playEffectFadeInOut(node, duration, countRepeat, isLastFadeOut) {
          if (isLastFadeOut === void 0) {
            isLastFadeOut = false;
          }

          var durationOneStep = duration / countRepeat;
          var tweenFade = tween(node).repeat(countRepeat, tween().then(fadeIn(durationOneStep / 2)).then(delay(0.2)).then(fadeOut(durationOneStep / 2)));

          if (isLastFadeOut) {
            tweenFade.then(fadeOut(durationOneStep / 2));
          }

          tweenFade.start();
        };

        _proto.getSpriteFrameEffect = function getSpriteFrameEffect(index, isActive) {
          var idSpriteFrame = 0;

          if (index == 0) {
            idSpriteFrame = this.isLeft ? 2 : 1;
          } else if (index == 6) {
            idSpriteFrame = this.isLeft ? 1 : 2;
          } else {
            idSpriteFrame = 0;
          }

          return isActive ? this.spriteFrameHavePass[idSpriteFrame] : this.spriteFrameHaveNotPass[idSpriteFrame];
        };

        _proto.checkNodeTextJackpotIsActive = function checkNodeTextJackpotIsActive(index) {
          var node = this.arrTextJackpot[index];
          var opacity = node.getComponent(UIOpacity) ? node.getComponent(UIOpacity).opacity : 0;
          var isActive = opacity > 0 ? true : false;
          return isActive;
        };

        _proto.resumeData = function resumeData(arrItemID) {
          var _this9 = this;

          this.reset();
          arrItemID.forEach(function (itemID) {
            _this9.showTextWithItemID(itemID);
          });
        };

        _proto.playAnimGetChipWinJackpot = function playAnimGetChipWinJackpot() {
          this._isForceActiveAll = true;
          if (this._arrInfoEnergy.length <= 0) return;

          if (!this._isPlaying) {
            this.startActiveChip();
          }
        };

        _proto.setSpriteFrameProgressBar = function setSpriteFrameProgressBar(isMe) {
          if (isMe === void 0) {
            isMe = false;
          }

          if (isMe) {
            this.progressBarActiveChip.node.getComponent(Sprite).spriteFrame = this.spriteFrameProgressBar[SPRITE_FRAME_PERCENT.MY_PLAYER];
          } else if (this.spriteFrameProgressBar.length != 0) {
            this.progressBarActiveChip.node.getComponent(Sprite).spriteFrame = this.spriteFrameProgressBar[SPRITE_FRAME_PERCENT.OTHER_PLAYER];
          }
        };

        _proto.setHide = function setHide() {
          var _this10 = this;

          var callbackHide = function callbackHide() {
            _this10.hide();
          };

          if (this._arrInfoEnergy.length > 0) {
            this.playAnimGetChipWinJackpot();
          } else {
            this.frameTextWin.setCallbackHide(callbackHide);
          }
        };

        _proto.reset = function reset() {
          stopAllActions(this.node);
          stopAllActions(this);
          stopAllActions(this.nodeEffectActiveChip);

          if (isValid(this.frameTextWin.node)) {
            this.frameTextWin.reset();
          }

          this.unscheduleAllCallbacks();

          if (this._currentTweenEnergy) {
            if (this._currentTweenEnergy._finalAction && !this._currentTweenEnergy._finalAction.isDone()) {
              this._currentTweenEnergy.stop();
            }

            this._currentTweenEnergy = null;
          }

          this.resetArrayInfoEnergy();
          this.resetAllNodeTextJP();
          this.resetArrayDecryption();
          this.resetArrayEffectActiveChip();
          this.resetArrayTweenChip();
          this._isPlaying = false;
          this.effectTextJP.active = false;
          this.progressBarActiveChip.progress = 0;
          this.labelPercent.string = "0%";

          if (this._tweenEffectTextJP) {
            this._tweenEffectTextJP.stop();

            this._tweenEffectTextJP = null;
          }

          this._countTextJP = 0;

          if (isValid(this.progressBarActiveChip.node) && this.spriteFrameProgressBar.length > 0) {
            this.progressBarActiveChip.node.getComponent(Sprite).spriteFrame = this.spriteFrameProgressBar[SPRITE_FRAME_PERCENT.OTHER_PLAYER];
          }

          this._totalPercent = 0;
        };

        _proto.resetArrayTweenChip = function resetArrayTweenChip() {
          for (var index = 0; index < this._arrTweenActiveChip.length; ++index) {
            this._arrTweenActiveChip[index].stop();

            this._arrTweenActiveChip[index] = null;
          }

          this._arrTweenActiveChip = [];
        };

        _proto.resetAllNodeTextJP = function resetAllNodeTextJP() {
          if (!isValid(this.arrTextJackpot)) return;

          for (var index = 0; index < this.arrTextJackpot.length; ++index) {
            var text = this.arrTextJackpot[index];

            if (isValid(text)) {
              stopAllActions(text);

              if (text.getComponent(UIOpacity)) {
                stopAllActions(text.getComponent(UIOpacity));
              }

              text.scale = v3(0.75, 0.75);
              text.getComponent(UIOpacity).opacity = 0;
            }
          }
        };

        _proto.resetArrayEffectActiveChip = function resetArrayEffectActiveChip() {
          for (var i = 0; i < this.listNodeEffectPassWord.length; ++i) {
            if (!isValid(this.listNodeEffectPassWord[i])) continue;
            var text = this.listNodeEffectPassWord[i];
            stopAllActions(text);
            text.getComponent(UIOpacity).opacity = 0;
          }
        };

        _proto.resetArrayInfoEnergy = function resetArrayInfoEnergy() {
          for (var i = 0; i < this._arrInfoEnergy.length; ++i) {
            var chipInfo = this._arrInfoEnergy[i];

            if (chipInfo.node.parent) {
              stopAllActions(chipInfo.node);
              chipInfo.node.removeFromParent();
              chipInfo.node.destroy();
            }
          }

          this._arrInfoEnergy.length = 0;
        };

        _proto.onDestroy = function onDestroy() {
          stopAllActions(this.node);
          this.reset();
        };

        return PanelChip1988;
      }(PanelComponent1988), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSpriteFrameWord", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "frameTextWin", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "trayChip", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "stackEnergy", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spriteEnergy", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isLeft", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "effectTextJP", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "nodeEffectActiveChip", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrameHavePass", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrameHaveNotPass", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "listNodeEffectPassWord", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "progressBarActiveChip", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrameProgressBar", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "labelPercent", [_dec14], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LaserBox1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './DataStore1985.ts', './gfBaseFish.ts', './EnemyBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Collider2D, Contact2DType, Component, DataStore1985, gfBaseFish, EnemyBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      Component = module.Component;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }, function (module) {
      EnemyBullet = module.EnemyBullet;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a86fau930hGIYG0lAFCIU2Z", "LaserBox1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LaserBox1985 = exports('LaserBox1985', (_dec = ccclass('LaserBox1985'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LaserBox1985, _Component);

        function LaserBox1985() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = LaserBox1985.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.getComponent(Collider2D).on(Contact2DType.END_CONTACT, this.onCollisionExit, this);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var listCatchLaser = DataStore1985.instance.getListCatchLaser();
          if (other.getComponent(EnemyBullet)) return;
          var fish = other.getComponent(gfBaseFish) || other.node.parent && (other.node.parent.getComponent(gfBaseFish) || other.node.parent.parent && other.node.parent.parent.getComponent(gfBaseFish));
          if (!fish || fish.checkDie()) return;

          if (fish) {
            var index = this.getIndexInList(fish.getId());

            if (index === -1) {
              listCatchLaser.push(fish.getId());
            }
          }
        };

        _proto.onCollisionExit = function onCollisionExit(self, other, contact) {
          var listCatchLaser = DataStore1985.instance.getListCatchLaser();
          if (other.getComponent(EnemyBullet)) return;
          var fish = other.getComponent(gfBaseFish) || other.node.parent && (other.node.parent.getComponent(gfBaseFish) || other.node.parent.parent && other.node.parent.parent.getComponent(gfBaseFish));
          if (!fish || fish.checkDie()) return;

          if (fish) {
            var index = this.getIndexInList(fish.getId());

            if (index > -1) {
              listCatchLaser.splice(index, 1);
            }
          }
        };

        _proto.getIndexInList = function getIndexInList(fishID) {
          var listCatchLaser = DataStore1985.instance.getListCatchLaser();

          for (var i = 0; i < listCatchLaser.length; i++) {
            if (listCatchLaser[i] === fishID) return i;
          }

          return -1;
        };

        return LaserBox1985;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DataStore1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, gfDataStore;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "a8e909fgdpOhpT90NVe2d2j", "DataStore1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DataStore1988 = exports('default', (_dec = ccclass('DataStore1988'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfDataStore) {
        _inheritsLoose(DataStore1988, _gfDataStore);

        function DataStore1988() {
          var _this;

          _this = _gfDataStore.call(this) || this;

          _defineProperty(_assertThisInitialized(_this), "isSideMenuOpened", void 0);

          _defineProperty(_assertThisInitialized(_this), "isCompoButtonAutoShow", void 0);

          _defineProperty(_assertThisInitialized(_this), "isPlayingPoison", void 0);

          DataStore1988.instance = _assertThisInitialized(_this);

          _this.setSelfInfo({
            currentSkillID: -1
          });

          _this.isSideMenuOpened = false;
          _this.isCompoButtonAutoShow = false;
          _this.isPlayingPoison = false;
          return _this;
        }

        var _proto = DataStore1988.prototype;

        _proto.getIsSideMenuOpened = function getIsSideMenuOpened() {
          return this.isSideMenuOpened;
        };

        _proto.setIsSideMenuOpened = function setIsSideMenuOpened(isSideMenuOpened) {
          this.isSideMenuOpened = isSideMenuOpened;
        };

        _proto.getIsCompoButtonAutoShow = function getIsCompoButtonAutoShow() {
          return this.isCompoButtonAutoShow;
        };

        _proto.setIsCompoButtonAutoShow = function setIsCompoButtonAutoShow(isCompoButtonAutoShow) {
          this.isCompoButtonAutoShow = isCompoButtonAutoShow;
        };

        _proto.getIsPlayingPoison = function getIsPlayingPoison() {
          return this.isPlayingPoison;
        };

        _proto.setIsPlayingPoison = function setIsPlayingPoison(isPlayingPoison) {
          this.isPlayingPoison = isPlayingPoison;
        };

        return DataStore1988;
      }(gfDataStore), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLaserBox.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Collider2D, Contact2DType, Component, gfDataStore, gfBaseFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      Component = module.Component;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "aa2f0CyUTFG/6Q7yGad+K5y", "gfLaserBox", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfLaserBox = exports('gfLaserBox', (_dec = ccclass('gfLaserBox'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfLaserBox, _Component);

        function gfLaserBox() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfLaserBox.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.getComponent(Collider2D).on(Contact2DType.END_CONTACT, this.onCollisionExit, this);
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var listCatchLaser = gfDataStore.instance.getListCatchLaser();
          var fish = other.getComponent(gfBaseFish);

          if (fish) {
            var index = this.getIndexInList(fish.getId());

            if (index === -1) {
              listCatchLaser.push(fish.getId());
            }
          }
        };

        _proto.onCollisionExit = function onCollisionExit(self, other, contact) {
          var listCatchLaser = gfDataStore.instance.getListCatchLaser();
          var fish = other.getComponent(gfBaseFish);

          if (fish) {
            var index = this.getIndexInList(fish.getId());

            if (index > -1) {
              listCatchLaser.splice(index, 1);
            }
          }
        };

        _proto.getIndexInList = function getIndexInList(fishID) {
          var listCatchLaser = gfDataStore.instance.getListCatchLaser();

          for (var i = 0; i < listCatchLaser.length; i++) {
            if (listCatchLaser[i] === fishID) return i;
          }

          return -1;
        };

        return gfLaserBox;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSideMenu.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Vec3, Tween, tween, Component, gfBaseEvents, gfEventEmitter, gfBaseConfig, SetZIndex, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "aab42cuFs1K7axaNphBxV/A", "gfSideMenu", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfSideMenu = exports('GfSideMenu', (_dec = ccclass('GfSideMenu'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfSideMenu, _Component);

        function GfSideMenu() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeMove", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "frameWidth", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "iconHide", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "isHide", void 0);

          _defineProperty(_assertThisInitialized(_this), "scheduleHide", null);

          _defineProperty(_assertThisInitialized(_this), "isActionDone", true);

          return _this;
        }

        var _proto = GfSideMenu.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.MENU);
          this.resetSideMenu();
          this.scheduleHide = this.hideSideBar.bind(this);
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
        };

        _proto.updateSceneSize = function updateSceneSize() {
          this.node.setPosition(gfBaseConfig.instance.realSize.Width / 2, this.node.position.y, this.node.position.z);
        };

        _proto.onInfoClick = function onInfoClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_INFO);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.onExitClick = function onExitClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHOW_WAITING, true);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.unscheduleAllCallbacks();
          this.hideSideBar();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
        };

        _proto.onSettingClick = function onSettingClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_SETTING); //PopupController.instance.showSetting();

          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.onJPHistoryClick = function onJPHistoryClick() {
          if (!this.isActionDone) return;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY); // PopupController.instance.showJPHistory();

          this.unscheduleAllCallbacks();
          this.hideSideBar();
        };

        _proto.onBtnHistoryClick = function onBtnHistoryClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY); // PopupController.instance.showJPHistory();

          this.unscheduleAllCallbacks();
        };

        _proto.onHideClick = function onHideClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.hideSideBar();
        };

        _proto.hideSideBar = function hideSideBar() {
          var _this2 = this;

          if (!this.isActionDone) return;
          this.unschedule(this.scheduleHide);
          this.isActionDone = false;
          var pos = new Vec3(-this.frameWidth, 0, 1);
          this.isHide = !this.isHide;
          this.iconHide.setScale(-this.iconHide.scale.x, this.iconHide.scale.y);

          if (this.isHide) {
            pos = new Vec3(5, 0, 1);
          } else {
            this.scheduleOnce(this.scheduleHide, 3);
          }

          var baseEasing = this.isHide ? "sineIn" : "sineOut";
          Tween.stopAllByTarget(this.nodeMove);
          tween(this.nodeMove).to(0.3, {
            position: pos
          }, {
            easing: baseEasing
          }).call(function () {
            _this2.isActionDone = true;
          }).start();
        };

        _proto.resetSideMenu = function resetSideMenu() {
          this.unschedule(this.scheduleHide);
          this.isHide = true;
          this.iconHide.setScale(new Vec3(-1, 1, 1));
          Tween.stopAllByTarget(this.nodeMove);
          this.nodeMove.setPosition(5, 0, 1);
          this.isActionDone = true;
        };

        _proto.resetOnExit = function resetOnExit() {
          this.resetSideMenu();
          this.unscheduleAllCallbacks();
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfSideMenu;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeMove", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "frameWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 90;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconHide", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBallTray.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, sp, tween, v3, Component, setOpacity, gfBaseEvents, stopAllActions, scaleTo, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sp = module.sp;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "aab78w0roROIJELbktbTQbV", "gfBallTray", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBallTray = exports('GfBallTray', (_dec = ccclass('GfBallTray'), _dec2 = property(Node), _dec3 = property(sp.Skeleton), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBallTray, _Component);

        function GfBallTray() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "trayGlowFX", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bodySpine", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "slot7FX", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "electroEffect", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "ballHolder", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_ballInTray", void 0);

          _defineProperty(_assertThisInitialized(_this), "_isActive", false);

          return _this;
        }

        var _proto = GfBallTray.prototype;

        _proto.onLoad = function onLoad() {
          setOpacity(this.bodySpine.node, 0);
          setOpacity(this.slot7FX, 0);
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
        };

        _proto.appear = function appear() {
          if (this._isActive) return;
          this._isActive = true;
          this.node.active = true;
          setOpacity(this.bodySpine.node, 255);
          this.bodySpine.setAnimation(0, 'Appear', false);
          this.bodySpine.setCompleteListener(function () {});
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BALL_TRAY_SHOW);
        };

        _proto.disappear = function disappear() {
          var _this2 = this;

          this._isActive = false;
          this.bodySpine.setAnimation(0, 'Disappear', false);
          this.bodySpine.setCompleteListener(function () {
            _this2.node.active = false;
          });
          this.hideElectroEffect();
          setOpacity(this.slot7FX, 0);
          this._ballInTray = 0;
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BALL_TRAY_DRAW);
        };

        _proto.isAppear = function isAppear() {
          return this._isActive;
        };

        _proto.hide = function hide() {
          this._isActive = false;
          this.node.active = false;
          setOpacity(this.slot7FX, 0);
          this.slot7FX.active = false;
          this.trayGlowFX.active = false;
          this._ballInTray = 0;
          this.hideElectroEffect();
        };

        _proto.activeSlot7FX = function activeSlot7FX() {
          this.slot7FX.active = true;
          setOpacity(this.slot7FX, 255);
        };

        _proto.activeTrayGlow = function activeTrayGlow() {
          this.trayGlowFX.active = true;
        };

        _proto.getBallHolder = function getBallHolder(index) {
          if (!this.ballHolder[index]) return this.node;
          return this.ballHolder[index];
        };

        _proto.onBallEnter = function onBallEnter(count) {
          if (count === void 0) {
            count = 1;
          }

          this._ballInTray += count;
          this.showElectroEffect();
        };

        _proto.showElectroEffect = function showElectroEffect() {
          var scaleTime = 0.2;

          if (this.electroEffect) {
            if (this._ballInTray >= 4) {
              this.electroEffect.active = true;
              stopAllActions(this.electroEffect);
              tween(this.electroEffect).then(scaleTo(scaleTime, 1.5)).then(scaleTo(scaleTime, 1.4)).start();
            } else if (this._ballInTray > 1) {
              this.electroEffect.active = true;
              stopAllActions(this.electroEffect);
              tween(this.electroEffect).then(scaleTo(scaleTime, 1.1)).then(scaleTo(scaleTime, 1.0)).start();
            }
          }

          if (this._ballInTray > 1) {
            this.activeTrayGlow();
          }

          if (this._ballInTray >= 6) {
            this.activeSlot7FX();
          }
        };

        _proto.hideElectroEffect = function hideElectroEffect() {
          if (this.electroEffect) {
            this.electroEffect.scale = v3(0);
            this.electroEffect.active = false;
          }
        };

        return GfBallTray;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "trayGlowFX", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bodySpine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "slot7FX", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "electroEffect", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ballHolder", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpriteFish1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfBaseConfig.ts', './DataStore1988.ts', './PoolManager1988.ts', './gfSpriteFish.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Collider2D, Contact2DType, BoxCollider2D, tween, ParticleSystem2D, Tween, setOpacity, v3f, stopAllActions, delay, call, scaleTo, fadeOut, gfBaseConfig, DataStore1988, PoolManager1988, gfSpriteFish;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      BoxCollider2D = module.BoxCollider2D;
      tween = module.tween;
      ParticleSystem2D = module.ParticleSystem2D;
      Tween = module.Tween;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      v3f = module.v3f;
      stopAllActions = module.stopAllActions;
      delay = module.delay;
      call = module.call;
      scaleTo = module.scaleTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      PoolManager1988 = module.default;
    }, function (module) {
      gfSpriteFish = module.gfSpriteFish;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "ac040U9+0hIfJaZbTLCJhph", "SpriteFish1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var COLLIDER_POISON_TAG = 1001;
      var SpriteFish1988 = exports('SpriteFish1988', (_dec = ccclass('SpriteFish1988'), _dec(_class = (_temp = /*#__PURE__*/function (_gfSpriteFish) {
        _inheritsLoose(SpriteFish1988, _gfSpriteFish);

        function SpriteFish1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfSpriteFish.call.apply(_gfSpriteFish, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "poisonEffect", null);

          _defineProperty(_assertThisInitialized(_this), "_isFake", false);

          return _this;
        }

        var _proto = SpriteFish1988.prototype;

        _proto.onLoad = function onLoad() {
          this.getComponent(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        };

        _proto.initFishData = function initFishData(data) {
          _gfSpriteFish.prototype.initFishData.call(this, data);

          this._isFake = data.isFake;
          var FISH_KIND = gfBaseConfig.instance.FISH_KIND;

          if (this.getKind() === FISH_KIND.BOMB || DataStore1988.instance.isPlayingPoison) {
            this.playPoisonEffect();
          }
        };

        _proto.playPoisonEffect = function playPoisonEffect() {
          if (this.checkDie() || this.poisonEffect) return;
          this.poisonEffect = PoolManager1988.instance.getPoisonEffect();
          this.poisonEffect.node.setScale(v3f(Math.min(1.0, this.node.getComponent(BoxCollider2D).size.width / 90)));
          this.updatePoisonPosition();
        };

        _proto.updatePoisonPosition = function updatePoisonPosition() {
          var point = this.convertToRelativePoint(this._targetPoint);
          this.poisonEffect.node.setPosition(point.x, point.y, 0);
        };

        _proto.update = function update(dt) {
          _gfSpriteFish.prototype.update.call(this, dt);

          if (this.poisonEffect) {
            this.updatePoisonPosition();
          }
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other) {
          if (other.tag == COLLIDER_POISON_TAG) {
            this.playPoisonEffect();
          }
        };

        _proto.isAvailable = function isAvailable() {
          return !this.checkDie() && !this.checkOutScene() && !this.isFake();
        };

        _proto.isFake = function isFake() {
          return this._isFake;
        };

        _proto.onCatch = function onCatch(data) {
          var _this2 = this; //super.onCatch(data);


          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.processItemInCatchFish(data);
          this.onPlayEffectWinInCatchFish(data);
          stopAllActions(this.node);
          this.resetColor();
          this.setDie(true);
          this.playEffectDie();
          var listAction = tween(this.node);

          if (data.isSkill && data.skillID == gfBaseConfig.instance.FISH_KIND.BOMB) {
            listAction.then(tween().call(function () {
              _this2.changeAnimationSpeed(6);
            }));
            listAction.then(delay(0.5));
            listAction.then(call(function () {
              if (_this2.poisonEffect) {
                _this2.poisonEffect.getComponent(ParticleSystem2D).emissionRate = 0;
              }
            }));
            listAction.then(scaleTo(1, 0));
          } else {
            listAction.then(delay(1));
            listAction.call(function () {
              tween(_this2.fishAnim.node).then(fadeOut(0.5)).start();
            });
            listAction.then(fadeOut(0.5));
          }

          listAction.then(call(function () {
            _this2.onDie();
          }));
          listAction.start();
        };

        _proto.unuse = function unuse() {
          _gfSpriteFish.prototype.unuse.call(this);

          Tween.stopAllByTarget(this.fishAnim.node);
          setOpacity(this.fishAnim.node, 255);

          if (this.poisonEffect) {
            this.poisonEffect.returnPool();
            this.poisonEffect = null;
          }
        };

        return SpriteFish1988;
      }(gfSpriteFish), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectNearWinLaser1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, sp, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "ac0606EJ49HzJkmKkc7GGbm", "EffectNearWinLaser1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectNearWinLaser1985 = exports('EffectNearWinLaser1985', (_dec = ccclass('EffectNearWinLaser1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EffectNearWinLaser1985, _Component);

        function EffectNearWinLaser1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "compFish", null);

          return _this;
        }

        var _proto = EffectNearWinLaser1985.prototype;

        _proto.setCompFish = function setCompFish(compFish) {
          this.compFish = compFish;
        };

        _proto.playAnimation = function playAnimation() {
          var spine = this.node.getComponent(sp.Skeleton);
          spine.setAnimation(0, "Fx_Nearwin_SP2", true);
        };

        _proto.update = function update(dt) {
          if (this.compFish.checkDie()) {
            this.node.removeFromParent();
            this.node.destroy();
            return;
          }
        };

        return EffectNearWinLaser1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfstEnemyAir.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, Collider2D, Contact2DType, Color, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      Collider2D = module.Collider2D;
      Contact2DType = module.Contact2DType;
      Color = module.Color;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "ac8c38An1lDv5FAetbsyM1e", "gfstEnemyAir", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfstEnemyAir = exports('GfstEnemyAir', (_dec = ccclass('GfstEnemyAir'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfstEnemyAir, _Component);

        function GfstEnemyAir() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "spine", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "delayTime", 0);

          _defineProperty(_assertThisInitialized(_this), "animName", void 0);

          _defineProperty(_assertThisInitialized(_this), "timeStart", 0);

          _defineProperty(_assertThisInitialized(_this), "isDelay", void 0);

          _defineProperty(_assertThisInitialized(_this), "timeFly", 0);

          return _this;
        }

        var _proto = GfstEnemyAir.prototype;

        _proto.start = function start() {
          // this.spine.setCompleteListener(this.onDie.bind(this));
          this.getComponentInChildren(Collider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
        };

        _proto.setSkeletonData = function setSkeletonData(spine) {
          this.spine.skeletonData = spine;
        };

        _proto.onDie = function onDie() {
          this.node.removeFromParent();
          this.node.destroy();
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var _this2 = this;

          this.spine.color = Color.RED;
          this.unscheduleAllCallbacks();
          this.scheduleOnce(function () {
            _this2.spine.color = Color.WHITE;
          }, 0.1);
        };

        _proto.update = function update(dt) {
          if (!this.isDelay) return;
          this.delayTime -= dt;

          if (this.delayTime <= 0) {
            this.isDelay = false;
            this.spine.paused = false;
            this.spine.updateAnimation(-this.delayTime - dt); // -dt due to next skeleton system update will call 1 more updateAnimation

            this.delayTime = 0;
          }
        };

        _proto.playAnimFly = function playAnimFly(anim, delay, loop) {
          if (delay === void 0) {
            delay = 0;
          }

          if (loop === void 0) {
            loop = false;
          }

          this.animName = anim;
          this.timeStart = Date.now();
          this.delayTime = delay;
          this.timeFly = 0 - delay;
          this.spine.setAnimation(0, anim, loop);
          this.spine.paused = true;
          this.isDelay = true;
        };

        return GfstEnemyAir;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroupData.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _createClass, _defineProperty, cclegacy, gfDataStore;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "acc16eEHr9LFqics3/l2pIb", "gfFishGroupData", undefined);

      var gfFishGroupData = exports('default', /*#__PURE__*/function () {
        function gfFishGroupData() {
          _defineProperty(this, "buildTick", void 0);

          _defineProperty(this, "fishIndex", void 0);

          _defineProperty(this, "listFish", void 0);

          _defineProperty(this, "ParadeKind", void 0);

          _defineProperty(this, "customZIndex", -1);

          _defineProperty(this, "timeSkipped", 0);

          _defineProperty(this, "flipCoord", 1);
        }

        var _proto = gfFishGroupData.prototype;

        _proto.destroy = function destroy() {
          gfFishGroupData.instance = null;
        };

        _proto._initData = function _initData(data) {
          this.buildTick = data.buildTick;
          this.timeSkipped = data.timeSkipped || 0;
          this.flipCoord = gfDataStore.instance.getSelfDeskStation() > 1 ? -1 : 1;
          this.fishIndex = 0;
          this.listFish = data.ListFish;
          this.ParadeKind = data.ParadeKind;
          this.customZIndex = -1;
        };

        _proto._makeFishData = function _makeFishData(data) {
          if (!data || data.FishKind < 0) return null;
          data.TimeFreeze = (data.TimeFreeze || 0) / 1000 / 2;
          data.isFishGroup = true;
          data.buildTick = this.buildTick;
          data.isResume = this.timeSkipped > 0;

          if (this.customZIndex > -1) {
            data.zIndex = this.customZIndex;
          }

          return data;
        };

        _proto._getFishData = function _getFishData() {
          return this._makeFishData(this.listFish[this.fishIndex]);
        };

        _proto._updateCustomZIndex = function _updateCustomZIndex(zIndex) {
          this.customZIndex = zIndex;
        };

        gfFishGroupData.initData = function initData(data) {
          if (!gfFishGroupData.instance) {
            gfFishGroupData.instance = new gfFishGroupData();
          }

          gfFishGroupData.instance._initData(data);
        };

        gfFishGroupData.getFishData = function getFishData() {
          return gfFishGroupData.instance._getFishData();
        };

        gfFishGroupData.getNextFishData = function getNextFishData() {
          var data = this.getFishData();
          this.incIndex();
          return data;
        };

        gfFishGroupData.incIndex = function incIndex() {
          ++gfFishGroupData.instance.fishIndex;
        };

        gfFishGroupData.isFlipped = function isFlipped() {
          return gfFishGroupData.instance.flipCoord < 0;
        };

        gfFishGroupData.updateCustomZIndex = function updateCustomZIndex(zIndex) {
          gfFishGroupData.instance._updateCustomZIndex(zIndex);
        };

        _createClass(gfFishGroupData, null, [{
          key: "flipCoord",
          get: function get() {
            return gfFishGroupData.instance.flipCoord;
          }
        }, {
          key: "timeSkipped",
          get: function get() {
            return gfFishGroupData.instance.timeSkipped;
          }
        }]);

        return gfFishGroupData;
      }());

      _defineProperty(gfFishGroupData, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfstAirLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfstEnemyAir.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, instantiate, Component, GfstEnemyAir;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      GfstEnemyAir = module.GfstEnemyAir;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "ad13dbfsm1JTJCW5tSeN/pW", "gfstAirLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; // const animName = [

      var GfstAirLayer = exports('GfstAirLayer', (_dec = ccclass('GfstAirLayer'), _dec2 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfstAirLayer, _Component);

        function GfstAirLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "enemyPrefab", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "randomArr", [1, 2, 3]);

          _defineProperty(_assertThisInitialized(_this), "randomCount", 0);

          _defineProperty(_assertThisInitialized(_this), "planeCount", 1);

          _defineProperty(_assertThisInitialized(_this), "spineData", void 0);

          _defineProperty(_assertThisInitialized(_this), "mainAnim", void 0);

          return _this;
        }

        var _proto = GfstAirLayer.prototype;

        _proto.start = function start() {// this.flipPath();
          // this.schedule(this.createAirplane, 3);
          // this.createAirplane();
        };

        _proto.flipPath = function flipPath() {
          for (var i = 0, length = this.randomArr.length; i < length; ++i) {
            this.randomArr.push(-this.randomArr[i]);
          }
        };

        _proto.createAirplane = function createAirplane() {
          if (!this.spineData || !this.mainAnim) return;
          var count = this.planeCount;
          var index = this.getRandomIndex();

          for (var i = 0; i < count; ++i) {
            var plane = instantiate(this.enemyPrefab);
            plane.setParent(this.node);
            plane.setSiblingIndex(0);
            plane.getComponent(GfstEnemyAir).setSkeletonData(this.spineData);
            plane.getComponent(GfstEnemyAir).playAnimFly(this.mainAnim, 0.2 * i);
            plane.setParent(this.node); // plane.setScale(index > 0 ? 1 : -1, 1, 1);
          }
        };

        _proto.createNewAirPlane = function createNewAirPlane(spineData, anim, loop) {
          if (loop === void 0) {
            loop = false;
          }

          var plane = instantiate(this.enemyPrefab).getComponent(GfstEnemyAir);
          plane.node.setParent(this.node);
          plane.node.setSiblingIndex(0);
          plane.getComponent(GfstEnemyAir).setSkeletonData(spineData);
          plane.playAnimFly(anim, 0, loop);
          this.spineData = spineData;
          this.mainAnim = anim;
        };

        _proto.update = function update(dt) {};

        _proto.getRandomIndex = function getRandomIndex() {
          if (this.randomCount == 0) {
            this.randomCount = this.randomArr.length;
          }

          var index = Math.random() * this.randomCount | 0;
          --this.randomCount;
          var _ref = [this.randomArr[index], this.randomArr[this.randomCount]];
          this.randomArr[this.randomCount] = _ref[0];
          this.randomArr[index] = _ref[1];
          return this.randomArr[this.randomCount];
        };

        return GfstAirLayer;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "enemyPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillController1998.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfSkillController.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfSkillController;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfSkillController = module.gfSkillController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ae545tmV75LAJwN4F+hWXKK", "SkillController1998", undefined);

      var ccclass = _decorator.ccclass;
      var SkillController1998 = exports('SkillController1998', (_dec = ccclass('SkillController1998'), _dec(_class = /*#__PURE__*/function (_gfSkillController) {
        _inheritsLoose(SkillController1998, _gfSkillController);

        function SkillController1998() {
          return _gfSkillController.apply(this, arguments) || this;
        }

        return SkillController1998;
      }(gfSkillController)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EV6Bullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './EnemyBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, misc, EnemyBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      misc = module.misc;
    }, function (module) {
      EnemyBullet = module.EnemyBullet;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "aeb64Lqf3FA9IxoH8PVbeR+", "EV6Bullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EV6Bullet = exports('EV6Bullet', (_dec = ccclass('EV6Bullet'), _dec(_class = /*#__PURE__*/function (_EnemyBullet) {
        _inheritsLoose(EV6Bullet, _EnemyBullet);

        function EV6Bullet() {
          return _EnemyBullet.apply(this, arguments) || this;
        }

        var _proto = EV6Bullet.prototype;

        _proto.init = function init(startPos, angleGun, moveSpeed, delay) {
          if (moveSpeed === void 0) {
            moveSpeed = 400;
          }

          if (delay === void 0) {
            delay = 0;
          }

          this._isDie = false;
          this.node.setPosition(startPos);
          var angle = angleGun;
          this.node.angle = angle + 90;
          this.moveSpeed = moveSpeed;
          this.vectorX = Math.cos(misc.degreesToRadians(angle));
          this.vectorY = Math.sin(misc.degreesToRadians(angle));
          this.delayTime = delay;
        };

        return EV6Bullet;
      }(EnemyBullet)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BulletLayer1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './ReferenceManager1985.ts', './DataStore1985.ts', './PoolManager1985.ts', './AnimUtils.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, Component, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, SetZIndex, removeEvents, ReferenceManager1985, DataStore1985, PoolManager1985, setOpacity;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      removeEvents = module.removeEvents;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      PoolManager1985 = module.default;
    }, function (module) {
      setOpacity = module.setOpacity;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "afb1dlM62dJ+4rr1BbR3nOR", "BulletLayer1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BulletLayer1985 = exports('BulletLayer1985', (_dec = ccclass('BulletLayer1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BulletLayer1985, _Component);

        function BulletLayer1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_bulletMultiple", 0);

          return _this;
        }

        var _proto = BulletLayer1985.prototype;

        _proto.onLoad = function onLoad() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, this.onPlayerFireBullet, this);
        };

        _proto.onPlayerFireBullet = function onPlayerFireBullet(_ref) {
          var BulletMultiple = _ref.BulletMultiple,
              BulletID = _ref.BulletID,
              DeskStation = _ref.DeskStation,
              isMe = _ref.isMe;
          var player = ReferenceManager1985.instance.getSpaceShipLayer().getSpaceShipByDeskStation(DeskStation);

          if (player) {
            var posFire = this.node.getComponent(UITransform).convertToNodeSpaceAR(player.node.worldPosition);
            var configBullet = {
              BulletMultiple: BulletMultiple,
              position: posFire,
              FireType: DataStore1985.instance.getTargetState(),
              DeskStation: DeskStation ? DeskStation : 0,
              BulletID: BulletID ? BulletID : 0,
              isMe: player.isMe,
              isBulletFake: false,
              isFreezed: false
            };
            var bullet = PoolManager1985.instance.getBulletWithData(configBullet);
            bullet.node.setParent(this.node);
            SetZIndex(bullet.node, gfBaseConfig.instance.Z_INDEX.BULLET);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.GUN_FIRE);

            if (!player.isMe) {
              setOpacity(bullet.node, 170);
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return BulletLayer1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EV5Bullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './BulletConfig1985.ts', './EnemyBulletWithTrail.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, v2, sp, tween, getDistance, getRandomInt, bezierTo, call, moveTo, BulletConfig, EnemyBulletWithTrail;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      v2 = module.v2;
      sp = module.sp;
      tween = module.tween;
    }, function (module) {
      getDistance = module.getDistance;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      bezierTo = module.bezierTo;
      call = module.call;
      moveTo = module.moveTo;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyBulletWithTrail = module.EnemyBulletWithTrail;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b0232Fv7xNJzYfAV6kL8Hym", "EV5Bullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var offsetRandom = 100;
      var EV5Bullet = exports('EV5Bullet', (_dec = ccclass('EV5Bullet'), _dec(_class = /*#__PURE__*/function (_EnemyBulletWithTrail) {
        _inheritsLoose(EV5Bullet, _EnemyBulletWithTrail);

        function EV5Bullet() {
          return _EnemyBulletWithTrail.apply(this, arguments) || this;
        }

        var _proto = EV5Bullet.prototype;

        _proto.init = function init(from, to, moveSpeed, scaleSpeed, delay0) {
          var _this = this;

          view.enableRetina(false);
          this._isDie = false;
          this.node.setPosition(from);
          this.trail.resetSystem();
          var distance = getDistance(v2(from.x, from.y), v2(to.x * 3 / 5, to.y * 3 / 5));
          var randLR = getRandomInt(0, 1) == 0 ? -1 : 1;
          var spine = this.node.getChildByName("Spine").getComponent(sp.Skeleton);
          var durationAnim = spine.findAnimation("animation").duration;
          var durBezier = distance / BulletConfig.EV5.Speed;
          var randOffset = getRandomInt(-offsetRandom, offsetRandom);
          spine.setAnimation(0, "idle", true);
          var config = [v2(from.x + randLR * distance / 8, from.y - distance / 5), v2(to.x + randLR * distance / 8, to.y + distance / 5), v2(to.x * 4 / 5 + randOffset, to.y * 4 / 5 + randOffset)];
          tween(this.node).then(bezierTo(durBezier, config)).then(call(function () {
            _this.trail.stopSystem();

            spine.setAnimation(0, "animation", false);
          })).then(moveTo(durationAnim - 1.5, to.x, to.y, 0)).then(call(function () {
            _this.onDie();
          })).start();
        };

        return EV5Bullet;
      }(EnemyBulletWithTrail)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfLoadAllInOne.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfAssetBundle.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Component, gfAssetBundle;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      gfAssetBundle = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b0efdkL4uZFUJJxjiy3YE3X", "gfLoadAllInOne", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfLoadAllInOne = exports('GfLoadAllInOne', (_dec = ccclass('GfLoadAllInOne'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfLoadAllInOne, _Component);

        function GfLoadAllInOne() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfLoadAllInOne.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.releaseAllAssets = function releaseAllAssets() {
          //this.node.removeAllChildren();
          gfAssetBundle.instance.destroy();
        };

        _proto.onDestroy = function onDestroy() {
          this.releaseAllAssets();
        };

        return GfLoadAllInOne;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/queue-fifo.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b12e6u0L2hPT4Sn/elkMBkC", "queue-fifo", undefined);

      var Queue = exports('Queue', /*#__PURE__*/function () {
        // number of elements currently in the queue
        // maximum number of elements queue can contain
        function Queue(maxSize) {
          _defineProperty(this, "queue", void 0);

          _defineProperty(this, "length", void 0);

          _defineProperty(this, "maxSize", void 0); // Make sure maxSize is at least 1


          this.maxSize = maxSize > 0 ? maxSize : 10;
          this.length = 0;
          this.queue = new Array(this.maxSize);
        }

        var _proto = Queue.prototype;

        _proto.isEmpty = function isEmpty() {
          return this.length === 0;
        };

        _proto.isFull = function isFull() {
          return this.length === this.maxSize;
        };

        _proto.enqueue = function enqueue(newItem) {
          if (this.isFull()) {
            throw new Error('Queue overflow');
          } else {
            this.queue[this.length++] = newItem; // post-increment adds 1 to length after insertion
          }
        };

        _proto.dequeue = function dequeue() {
          if (this.isEmpty()) {
            throw new Error('Queue underflow');
          }

          var retval = this.queue[0];

          for (var i = 0; i < this.length; i++) {
            this.queue[i] = this.queue[i + 1];
          }

          this.length--; // we need to decrease length by 1

          return retval;
        };

        _proto.peek = function peek() {
          if (this.isEmpty()) {
            throw new Error('Queue is empty');
          }

          return this.queue[0];
        };

        _proto.clear = function clear() {
          this.length = 0;
          this.queue = new Array(this.maxSize);
        };

        _proto.size = function size() {
          return this.length;
        };

        _proto.queueContents = function queueContents() {
          console.log('Queue Contents');

          for (var i = 0; i < this.length; ++i) {
            console.log("queue[" + i + "]: " + this.queue[i]);
          }
        };

        return Queue;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchListener1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './DataStore1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, sys, Node, UITransform, v3, Component, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, EventsCode1985, ReferenceManager1985, DataStore1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
      Node = module.Node;
      UITransform = module.UITransform;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "b26bbHoz2JMPaIZObdYyQPb", "TouchListener1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TouchListener1985 = exports('TouchListener1985', (_dec = ccclass('TouchListener1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TouchListener1985, _Component);

        function TouchListener1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "actionLastTime", void 0);

          _defineProperty(_assertThisInitialized(_this), "touchCount", 0);

          _defineProperty(_assertThisInitialized(_this), "EVENT_CONTROL_START", void 0);

          _defineProperty(_assertThisInitialized(_this), "EVENT_CONTROL_END", void 0);

          return _this;
        }

        var _proto = TouchListener1985.prototype;

        _proto.onLoad = function onLoad() {
          this.actionLastTime = Date.now();
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.removeTouchEvent, this);
        };

        _proto.start = function start() {
          if (!sys.isNative && !sys.isMobile) {
            this.EVENT_CONTROL_END = EventsCode1985.CONTROL.USER_MOUSE_UP;
            this.EVENT_CONTROL_START = EventsCode1985.CONTROL.USER_MOUSE_DOWN;
            this.node.on(Node.EventType.MOUSE_MOVE, this._onUserMoveTouch, this);
          } else {
            this.EVENT_CONTROL_END = EventsCode1985.CONTROL.USER_END_TOUCH;
            this.EVENT_CONTROL_START = EventsCode1985.CONTROL.USER_START_TOUCH;
            this.node.on(Node.EventType.TOUCH_MOVE, this._onUserMoveTouch, this);
          }

          this.node.on(Node.EventType.TOUCH_START, this._onUserStartTouch, this);
          this.node.on(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this._onUserEndTouch, this);
        };

        _proto._onUserStartTouch = function _onUserStartTouch(e) {
          if (this.touchCount > 2) return;
          ++this.touchCount;
          var touchID = sys.isMobile ? e.getID() : null;
          sys.isMobile && this.setIDTouch(e.getUILocation(), touchID);

          if (this._checkValidClick()) {
            gfEventEmitter.instance.emit(this.EVENT_CONTROL_START, {
              position: e.getUILocation(),
              touchID: touchID
            });
          }

          this.actionLastTime = Date.now();
        };

        _proto._onUserEndTouch = function _onUserEndTouch(e) {
          this.touchCount = 0;
          var touchID = sys.isMobile ? e.getID() : null;
          gfEventEmitter.instance.emit(this.EVENT_CONTROL_END, {
            position: e.getUILocation(),
            touchID: touchID
          });
          this.actionLastTime = Date.now();
          this.resetIDTouch(e.getID());
        };

        _proto._onUserMoveTouch = function _onUserMoveTouch(e) {
          var touchID = sys.isMobile ? e.getID() : null;
          gfEventEmitter.instance.emit(EventsCode1985.CONTROL.USER_MOVE_TOUCH, {
            position: e.getUILocation(),
            touchID: touchID
          });
        };

        _proto.setIDTouch = function setIDTouch(pos, touchID) {
          if (this.isScopeOfSpaceShip(pos)) {
            DataStore1985.instance.setDataStore({
              spaceShipIDTouch: touchID,
              spaceShipMoving: true
            });
            return;
          }

          DataStore1985.instance.setDataStore({
            shootIDTouch: touchID
          });
        };

        _proto.resetIDTouch = function resetIDTouch(touchID) {
          if (touchID === DataStore1985.instance.spaceShipIDTouch) {
            DataStore1985.instance.setDataStore({
              spaceShipIDTouch: -1,
              spaceShipMoving: false
            });
            return;
          }

          DataStore1985.instance.setDataStore({
            shootIDTouch: -1
          });
        };

        _proto.isScopeOfSpaceShip = function isScopeOfSpaceShip(pos) {
          var spaceShip = ReferenceManager1985.instance.getPlayerByDeskStation(DataStore1985.instance.getSelfDeskStation());

          var _spaceShip$node$paren = spaceShip.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3(pos.x, pos.y, 0)),
              x = _spaceShip$node$paren.x,
              y = _spaceShip$node$paren.y;

          var posMyShip = spaceShip.node.getPosition();
          var sizeSpaceShip = spaceShip.node.getComponent(UITransform);
          return x < posMyShip.x + sizeSpaceShip.width / 2 && x > posMyShip.x - sizeSpaceShip.width / 2 && y > posMyShip.y - sizeSpaceShip.height / 2 && y < posMyShip.y + sizeSpaceShip.height / 2;
        };

        _proto._checkValidClick = function _checkValidClick() {
          var deltaTime = Date.now() - this.actionLastTime;
          return deltaTime > DataStore1985.instance.deltaTimeTouch;
        };

        _proto.removeTouchEvent = function removeTouchEvent() {
          this.node.off(Node.EventType.TOUCH_START, this._onUserStartTouch, this);
          this.node.off(Node.EventType.TOUCH_MOVE, this._onUserMoveTouch, this);
          this.node.off(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
          this.node.off(Node.EventType.TOUCH_CANCEL, this._onUserEndTouch, this);

          if (!sys.isNative) {
            this.node.off(Node.EventType.MOUSE_MOVE, this._onUserMoveTouch, this);
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
          this.removeTouchEvent();
          DataStore1985.instance.setDataStore({
            spaceShipTouchID: -1,
            shootTouchID: -1
          });
        };

        return TouchListener1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DropSpecialGunFx1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './DataStore1985.ts', './Config1985.ts', './MoveToPlayer1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, gfBaseEvents, gfEventEmitter, EventsCode1985, DataStore1985, Config1985, MoveToPlayer1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      MoveToPlayer1985 = module.MoveToPlayer1985;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "b3eceXAEvRLRa+Eokmo9b4N", "DropSpecialGunFx1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DropSpecialGunFx1985 = exports('DropSpecialGunFx1985', (_dec = ccclass('DropSpecialGunFx1985'), _dec(_class = (_temp = /*#__PURE__*/function (_MoveToPlayer) {
        _inheritsLoose(DropSpecialGunFx1985, _MoveToPlayer);

        function DropSpecialGunFx1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _MoveToPlayer.call.apply(_MoveToPlayer, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "data", null);

          return _this;
        }

        var _proto = DropSpecialGunFx1985.prototype;

        _proto.setData = function setData(data) {
          this.data = data;
        };

        _proto.playSoundPick = function playSoundPick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER);
        };

        _proto.playSoundDrop = function playSoundDrop() {
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.DROP_ITEM_LASER);
        };

        _proto.onComplete = function onComplete() {
          gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.CHANGE_GUN_LASER, this.data.deskStation);

          if (this.data.deskStation === DataStore1985.instance.getSelfDeskStation()) {
            gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.LOCK_FIRE, {
              DeskStation: this.data.deskStation
            });
            DataStore1985.instance.setSelfInfo({
              isLockGun: true,
              skillLock: Config1985.instance.SkillConfig.LASER
            });
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, true);
          }
        };

        return DropSpecialGunFx1985;
      }(MoveToPlayer1985), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BonusController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './DataStore1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Sprite, Node, sp, warn, tween, v3, Component, call, stopAllActions, gfEventEmitter, EventsCode1985, DataStore1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Node = module.Node;
      sp = module.sp;
      warn = module.warn;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      call = module.call;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "b4709ALKgdE47KhFORuxind", "BonusController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MAX_COUNT_STREAK_LEVEL = 8;
      var BonusController1985 = exports('BonusController1985', (_dec = ccclass('BonusController1985'), _dec2 = property(Label), _dec3 = property(Sprite), _dec4 = property(Sprite), _dec5 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BonusController1985, _Component);

        function BonusController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "lblBonusValue", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "streak", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "stackStreak", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spine", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_tweenShake", void 0);

          _defineProperty(_assertThisInitialized(_this), "offset", 2);

          _defineProperty(_assertThisInitialized(_this), "_curPercentStreak", 0);

          _defineProperty(_assertThisInitialized(_this), "_curStreakLevel", 0);

          _defineProperty(_assertThisInitialized(_this), "_durFullStreak", 1);

          _defineProperty(_assertThisInitialized(_this), "_realPercent", 0);

          _defineProperty(_assertThisInitialized(_this), "_realBonusLevel", 0);

          return _this;
        }

        var _proto = BonusController1985.prototype;

        _proto.onLoad = function onLoad() {
          this.spine.active = false;
          this.streak.fillRange = 0;
          this.stackStreak.fillRange = 0;
          var spine = this.spine.getComponent(sp.Skeleton);
          spine.paused = true;
        } //percent, BonusLevel, isDown, timeCountDown
        ;

        _proto.showAnimation = function showAnimation(data) {
          if (!data) {
            warn("Data Bonus is undefine or null");
            return;
          }

          var Percent = data.Percent,
              isDown = data.isDown,
              BonusLevel = data.BonusLevel,
              timeCountdown = data.timeCountdown;

          if (Percent == this._curPercentStreak && BonusLevel == this._curStreakLevel) {
            return;
          }

          this.resetTween();

          this._playUpdateStreak(Percent, BonusLevel, isDown, timeCountdown);
        };

        _proto._playAnimShake = function _playAnimShake() {
          if (this._tweenShake) return;
          var shake = tween().to(0.1, {
            position: v3(0, this.node.position.y + this.offset)
          }, {
            easing: "backIn"
          }).to(0.1, {
            position: v3(0, this.node.position.y - this.offset)
          }, {
            easing: "backIn"
          });
          this._tweenShake = tween(this.node).repeat(10, tween().then(shake)).start();
        };

        _proto._playUpdateStreak = function _playUpdateStreak(percent, BonusLevel, isDown, timeCountDown) {
          if (isDown === void 0) {
            isDown = false;
          }

          if (timeCountDown === void 0) {
            timeCountDown = 0;
          }

          this._realPercent = isDown ? 0 : percent;
          this._realBonusLevel = BonusLevel;

          this._tweenUpdateBonusLevel(timeCountDown);
        } //percent 0 -> 1
        ;

        _proto._tweenUpdatePercent = function _tweenUpdatePercent(percent, callbackDone, timeCountDown) {
          var _this2 = this;

          if (callbackDone === void 0) {
            callbackDone = null;
          }

          if (timeCountDown === void 0) {
            timeCountDown = null;
          }

          var curPercent = this._curPercentStreak;
          var deltaPercent = percent - curPercent;
          var tweenStreak = tween(this.streak);
          var duration = timeCountDown > 1000 ? (timeCountDown - DataStore1985.instance.ping) / 1000 : deltaPercent * this._durFullStreak;
          tweenStreak.then(tween().to(duration, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this2.streak.fillRange = curPercent + ratio * deltaPercent;
              _this2._curPercentStreak = curPercent + ratio * deltaPercent;
            }
          }));
          tweenStreak.then(call(function () {
            callbackDone && callbackDone();
          }));
          tweenStreak.start();
        };

        _proto._tweenUpdateBonusLevel = function _tweenUpdateBonusLevel(timeCountDown) {
          var _this3 = this;

          if (timeCountDown === void 0) {
            timeCountDown = null;
          }

          var deltaStreakLevel = 0;
          deltaStreakLevel = this._realBonusLevel - this._curStreakLevel;
          var callbackDone = null;

          if (deltaStreakLevel > 0) {
            callbackDone = function callbackDone() {
              _this3._playAnimFullStreak();

              var durationAnimFullStreak = 1.5;
              ++_this3._curStreakLevel;
              _this3._curPercentStreak = 0;

              _this3.scheduleOnce(function () {
                _this3.streak.fillRange = 0;
                gfEventEmitter.instance.emit(EventsCode1985.SOUND.UP_STREAK);

                _this3._updateInfoStreakLevel();

                _this3._tweenUpdateBonusLevel();
              }, durationAnimFullStreak);
            };

            this._tweenUpdatePercent(1, callbackDone);
          } else {
            this._curStreakLevel = this._realBonusLevel;

            callbackDone = function callbackDone() {
              _this3._updateInfoStreakLevel();
            };

            this._tweenUpdatePercent(this._realPercent, callbackDone, timeCountDown);
          }
        };

        _proto._playAnimFullStreak = function _playAnimFullStreak() {
          var _this4 = this;

          var spine = this.spine.getComponent(sp.Skeleton);
          this.spine.active = true;
          spine.paused = false;
          spine.setAnimation(0, "animation", true);
          tween(spine).call(function () {
            _this4._playAnimShake();
          }).delay(1.5).call(function () {
            _this4.spine.active = false;
          }).start();
        };

        _proto._updateInfoStreakLevel = function _updateInfoStreakLevel() {
          var oneLevel = 1 / MAX_COUNT_STREAK_LEVEL;
          this.lblBonusValue.string = "+" + this._curStreakLevel + "%";
          this.stackStreak.fillRange = this._curStreakLevel * oneLevel;
        };

        _proto.resumeStreak = function resumeStreak(data) {
          this.resetAllStreak();
          var BonusLevel = data.BonusLevel,
              percent = data.percent;
          this._curStreakLevel = BonusLevel;
          this._curPercentStreak = percent;
          this.streak.fillRange = this._curPercentStreak;
          this.stackStreak.fillRange = BonusLevel / 8;
          this.lblBonusValue.string = "+" + this._curStreakLevel + "%";
        };

        _proto.resetAllStreak = function resetAllStreak() {
          this._curStreakLevel = 0;
          this._curPercentStreak = 0;
          this.streak.fillRange = 0;
          this.stackStreak.fillRange = 0;
          this.lblBonusValue.string = "+0%";
          this.resetTween();
        };

        _proto.resetTween = function resetTween() {
          stopAllActions(this.node);
          stopAllActions(this.streak);
          stopAllActions(this.stackStreak);

          if (this._tweenShake) {
            this._tweenShake.stop();
          }

          this._tweenShake = null;
          this.unscheduleAllCallbacks();
        };

        _proto.onDestroy = function onDestroy() {
          this.resetAllStreak();

          if (this._tweenShake) {
            this._tweenShake.stop();
          }
        };

        return BonusController1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lblBonusValue", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "streak", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "stackStreak", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spine", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptDot.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfptDataType.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Graphics, Component, gfptEvent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Graphics = module.Graphics;
      Component = module.Component;
    }, function (module) {
      gfptEvent = module.gfptEvent;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b4b2aTrEQRCqbH7KIElTpLW", "gfptDot", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptDot = exports('GfptDot', (_dec = ccclass('GfptDot'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfptDot, _Component);

        function GfptDot() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfptDot.prototype;

        _proto.start = function start() {
          this.node.on('UPDATE_LINE', this.onUpdateLine, this);
        };

        _proto.onUpdateLine = function onUpdateLine(e) {
          e.propagationStopped = true;
          this.updateLine();
          this.node.dispatchEvent(new gfptEvent('ON_DOT_UPDATE_POSITION', {
            pos: this.node.worldPosition
          }));
        };

        _proto.updateLine = function updateLine() {
          var graphics = this.node.getComponent(Graphics);
          graphics.clear();
          var blue = this.node.getChildByName('blue');
          var yellow = this.node.getChildByName('yellow');
          graphics.moveTo(yellow.position.x, yellow.position.y);
          graphics.lineTo(blue.position.x, blue.position.y);
          graphics.stroke();
          graphics.close();
        };

        return GfptDot;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CanvasScaleByOrientation.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, CCBoolean, Canvas, CCInteger, Widget, sys, view, macro, ResolutionPolicy, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CCBoolean = module.CCBoolean;
      Canvas = module.Canvas;
      CCInteger = module.CCInteger;
      Widget = module.Widget;
      sys = module.sys;
      view = module.view;
      macro = module.macro;
      ResolutionPolicy = module.ResolutionPolicy;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _temp;

      cclegacy._RF.push({}, "b4c0egcgEpKdZ75o3AkPNx+", "CanvasScaleByOrientation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CanvasScaleByOrientation = exports('CanvasScaleByOrientation', (_dec = ccclass('CanvasScaleByOrientation'), _dec2 = property(CCBoolean), _dec3 = property(CCBoolean), _dec4 = property({
        type: Canvas
      }), _dec5 = property(CCBoolean), _dec6 = property(CCBoolean), _dec7 = property(CCInteger), _dec8 = property(CCInteger), _dec9 = property({
        type: Widget
      }), _dec10 = property(CCBoolean), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CanvasScaleByOrientation, _Component);

        function CanvasScaleByOrientation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "autoOrientation", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "isPortrait", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "canvas", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fitByOrientation", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "useCustomDesignResolution", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "customDSWidth", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "customDSHeight", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "widgetNodes", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "isDebug", _descriptor9, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_thisOnResized", void 0);

          return _this;
        }

        var _proto = CanvasScaleByOrientation.prototype;

        _proto.onLoad = function onLoad() {
          this._thisOnResized = this.onScreenResized.bind(this);

          if (sys.isMobile) {
            window.addEventListener('resize', this._thisOnResized);
          } else {
            view.on('canvas-resize', this._thisOnResized);
          }

          this.scaleCanvasByOrientation();

          if (!sys.isNative) {
            var divFullscreen = document.getElementById('div_full_screen');

            if (this.isPortrait) {
              if (divFullscreen) {
                divFullscreen.style.visibility = "hidden";
              }
            }

            if (this.autoOrientation) {
              view.setOrientation(macro.ORIENTATION_AUTO);
            } else if (this.isPortrait) {
              view.setOrientation(macro.ORIENTATION_PORTRAIT);
            } else {
              view.setOrientation(macro.ORIENTATION_LANDSCAPE);
            }
          }
        };

        _proto.start = function start() {
          if (sys.isMobile) {
            var eventResize = new Event('gameShow');
            window.dispatchEvent(eventResize);
          }
        };

        _proto.scaleCanvasByOrientation = function scaleCanvasByOrientation() {
          if (this.autoOrientation) {
            if (view.getFrameSize().width < view.getFrameSize().height) {
              this.isPortrait = true;
            } else {
              this.isPortrait = false;
            }
          } else {
            if (this.isPortrait) {
              view.setOrientation(macro.ORIENTATION_PORTRAIT);
            } else {
              view.setOrientation(macro.ORIENTATION_LANDSCAPE);
            }
          }

          if (this.canvas) {
            this.isDebug && console.log("Canvas after update: ");
            this.isDebug && console.log(this.canvas);
            this.canvas.alignCanvasWithScreen = true;

            if (this.fitByOrientation) {
              var designRatio = this.useCustomDesignResolution ? this.customDSWidth / this.customDSHeight : view.getDesignResolutionSize().width / view.getDesignResolutionSize().height;
              var frameSize = view.getFrameSize();
              var screenRatio = frameSize.width / frameSize.height;

              if (window && sys.isMobile && sys.isBrowser) {
                var isLandscapeOrien = this.isLandscapeScreen();
                if (this.isPortrait) ;else {
                  screenRatio = isLandscapeOrien ? window.innerWidth / window.innerHeight : window.innerHeight / window.innerWidth;
                }
              }

              this.isDebug && console.log("View size:" + frameSize + ", Design Resolution: W: " + view.getDesignResolutionSize().width + ", H: " + view.getDesignResolutionSize().height + ",  Screen Ratio: " + screenRatio + ", Design Ratio: " + designRatio);

              if (this.isPortrait) {
                if (screenRatio < designRatio) {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_WIDTH);
                  this.isDebug && console.log("CANVAS FIT WIDTH");
                } else {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_HEIGHT);
                  this.isDebug && console.log("CANVAS FIT HEIGHT");
                }
              } else {
                if (screenRatio < designRatio) {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_WIDTH);
                  this.isDebug && console.log("CANVAS FIT WIDTH");
                } else {
                  view.setDesignResolutionSize(view.getDesignResolutionSize().width, view.getDesignResolutionSize().height, ResolutionPolicy.FIXED_HEIGHT);
                  this.isDebug && console.log("CANVAS FIT HEIGHT");
                }
              }
            }
          } else {
            this.isDebug && console.log("No canvas component");
          }

          if (this.widgetNodes && this.widgetNodes.length > 0) {
            for (var i = 0; i < this.widgetNodes.length; i++) {
              var widget = this.widgetNodes[i];

              if (widget) {
                this.widgetNodes[i].updateAlignment();
              }
            }
          }
        };

        _proto.onScreenResized = function onScreenResized() {
          this.scaleCanvasByOrientation();
        };

        _proto.isLandscapeScreen = function isLandscapeScreen() {
          if (window.matchMedia("(orientation: landscape)").matches) {
            return true;
          }

          if (window.matchMedia("(orientation: portrait)").matches) {
            return false;
          }

          return false;
        };

        _proto.onDestroy = function onDestroy() {
          if (sys.isMobile) {
            window.removeEventListener('resize', this._thisOnResized);
          } else {
            view.off('canvas-resize', this._thisOnResized);
          }
        };

        return CanvasScaleByOrientation;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "autoOrientation", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "isPortrait", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "canvas", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "fitByOrientation", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "useCustomDesignResolution", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "customDSWidth", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1280;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "customDSHeight", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 720;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "widgetNodes", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "isDebug", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup06.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, gfBaseConfig, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b5638IHvwJP9bQ9P7xCxok9", "gfFishGroup06", undefined);

      var gfFishGroup6 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup6() {}

        gfFishGroup6.create = function create() {
          var fishCount = [30, 30, 30, 24, 24, 12, 1, 1, 1, 1]; // const fishKind = [13, 3, 4, 15, 3, 5, 22, 27, 23, 25];

          var Height = gfBaseConfig.instance.AppSize.Height;
          var Y1 = 150;
          var Y2 = Y1 + 20;
          var Y3 = Y2 + 20;
          var Y4 = Y3 + 50;
          var Y5 = Y4 + 50;
          var Y6 = 360;
          var outerSpace = 210;
          var space = 100;
          var speed = 100; //2 side line

          FishGroupHelper.createFishLine(fishCount[0] / 2, Y1, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[0] / 2, Height - Y1, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[1] / 2, Y2, outerSpace, speed, -outerSpace / 2);
          FishGroupHelper.createFishLine(fishCount[1] / 2, Height - Y2, outerSpace, speed, -outerSpace / 2);
          FishGroupHelper.createFishLine(fishCount[2] / 2, Y3, outerSpace, speed);
          FishGroupHelper.createFishLine(fishCount[2] / 2, Height - Y3, outerSpace, speed); //3 group in middle

          for (var i = 0; i < 3; ++i) {
            var count = fishCount[3] / 6;
            var xOffset = -i * 2 * space * count;
            FishGroupHelper.createFishLine(count, Y4, space, speed, xOffset);
            FishGroupHelper.createFishLine(count, Height - Y4, space, speed, xOffset);
          }

          for (var _i = 0; _i < 3; ++_i) {
            var _count = fishCount[4] / 6;

            var _xOffset = -_i * 2 * space * _count;

            FishGroupHelper.createFishLine(_count, Y5, space, speed, _xOffset);
            FishGroupHelper.createFishLine(_count, Height - Y5, space, speed, _xOffset);
          }

          for (var _i2 = 0; _i2 < 3; ++_i2) {
            var _count2 = fishCount[5] / 3;

            var _xOffset2 = -_i2 * 2 * space * _count2;

            FishGroupHelper.createFishLine(_count2, Y6, space, speed, _xOffset2);
          } //big fishes


          var bigSpace = space * fishCount[3] / 6;
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 1.5);
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 3.5);
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 5.5);
          FishGroupHelper.createFishLine(1, Y6, 0, speed, -bigSpace * 7);
        };

        return gfFishGroup6;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotifyItemStack1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfNotifyItemStack.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, UITransform, v3f, gfNotifyItemStack;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
    }, function (module) {
      v3f = module.v3f;
    }, function (module) {
      gfNotifyItemStack = module.gfNotifyItemStack;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "b56e6wfUSpJAJqdCmX0KVkn", "NotifyItemStack1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NotifyItemStack = exports('NotifyItemStack', (_dec = ccclass('NotifyItemStack1988'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNotifyItemStack) {
        _inheritsLoose(NotifyItemStack, _gfNotifyItemStack);

        function NotifyItemStack() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNotifyItemStack.call.apply(_gfNotifyItemStack, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "vipIcon", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = NotifyItemStack.prototype;

        _proto.initObj = function initObj(index) {
          this._index = index;
          this._config = {
            SPACING: 5,
            HEIGHT: this.node.getComponent(UITransform).height,
            WIDTH: this.node.getComponent(UITransform).width,
            TIME_MOVE: 0.25
          };
          this.reset();
          this.extendInit();
        };

        _proto.extendInit = function extendInit() {
          this._iconPrefix = "Avatar_";
        };

        _proto.updateData = function updateData(dataInput) {
          _gfNotifyItemStack.prototype.updateData.call(this, dataInput);

          var RoomKind = dataInput.RoomKind,
              data = dataInput.data; //this.vipIcon.active = RoomKind && (RoomKind !== GameConfig.instance.RoomKind.Normal);

          var spriteFrameIcon = this.atlasIconFish.getSpriteFrame(this._iconPrefix + data.itemKind);
          this.iconImage.node.scale = v3f(1.0);

          if (!spriteFrameIcon) {
            spriteFrameIcon = this.atlasIconFish.getSpriteFrame("Avatar_chip");
            this.iconImage.node.scale = v3f(0.8);
          }

          this.iconImage.spriteFrame = spriteFrameIcon;
        };

        return NotifyItemStack;
      }(gfNotifyItemStack), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "vipIcon", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptDataType.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, Event;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      Event = module.Event;
    }],
    execute: function () {
      exports({
        DOT_TYPE: void 0,
        ExportName: void 0,
        FORMATION_TYPE: void 0,
        VALUE_TYPE: void 0,
        gEvent: void 0
      });

      cclegacy._RF.push({}, "b5f0aNTHC9KHq4mioI5jyl1", "gfptDataType", undefined);

      var DEFAULT_PRECISION = exports('DEFAULT_PRECISION', 2);
      var Round = exports('Round', function Round(x, precision) {
        if (precision === void 0) {
          precision = DEFAULT_PRECISION;
        }

        return Math.floor(x * Math.pow(10, precision)) / Math.pow(10, precision);
      });
      var DOT_TYPE;

      (function (DOT_TYPE) {
        DOT_TYPE[DOT_TYPE["PATH"] = 0] = "PATH";
        DOT_TYPE[DOT_TYPE["SPEED"] = 1] = "SPEED";
        DOT_TYPE[DOT_TYPE["SCALE"] = 2] = "SCALE";
      })(DOT_TYPE || (DOT_TYPE = exports('DOT_TYPE', {})));

      var VALUE_TYPE;

      (function (VALUE_TYPE) {
        VALUE_TYPE[VALUE_TYPE["Linear"] = 0] = "Linear";
        VALUE_TYPE[VALUE_TYPE["Curve"] = 1] = "Curve";
      })(VALUE_TYPE || (VALUE_TYPE = exports('VALUE_TYPE', {})));

      var FORMATION_TYPE;

      (function (FORMATION_TYPE) {
        FORMATION_TYPE[FORMATION_TYPE["Line"] = 0] = "Line";
        FORMATION_TYPE[FORMATION_TYPE["Shape"] = 1] = "Shape";
      })(FORMATION_TYPE || (FORMATION_TYPE = exports('FORMATION_TYPE', {})));

      var gfptEvent = exports('gfptEvent', /*#__PURE__*/function (_Event) {
        _inheritsLoose(gfptEvent, _Event);

        function gfptEvent(name, data, bubble) {
          var _this;

          if (bubble === void 0) {
            bubble = true;
          }

          _this = _Event.call(this, name, bubble) || this;

          _defineProperty(_assertThisInitialized(_this), "data", void 0);

          _this.data = data;
          return _this;
        }

        return gfptEvent;
      }(Event));
      var defaultPath = {
        id: "00000",
        name: "path 0",
        type: 1,
        pts: {
          pts1: [{
            x: 360,
            y: 1660
          }, {
            x: 360,
            y: -50
          }],
          pts2: [{
            x: 360,
            y: 1660
          }, {
            x: 360,
            y: -50
          }]
        }
      };
      var defaultSpeed = {
        id: "00000",
        name: "speed 0",
        "type": 0,
        "value": 500
      };
      var defaultScale = {
        id: "00000",
        name: "scale 0",
        "type": 0,
        "value": 1
      };
      var defaultFormation = {
        id: "00000",
        name: "formation 0",
        type: 0,
        count: 1,
        space: 50
      };
      var gData = exports('gData', function gData() {});

      _defineProperty(gData, "path", [defaultPath]);

      _defineProperty(gData, "speed", [defaultSpeed]);

      _defineProperty(gData, "scale", [defaultScale]);

      _defineProperty(gData, "formation", [defaultFormation]);

      var gEvent;

      (function (gEvent) {
        gEvent["IMPORT_DATA"] = "EVENT_IMPORT_DATA";
        gEvent["IMPORT_ONE_DATA"] = "EVENT_IMPORT_ONE_DATA";
        gEvent["EXPORT_ONE_DATA"] = "EVENT_EXPORT_ONE_DATA";
      })(gEvent || (gEvent = exports('gEvent', {})));

      var ExportName;

      (function (ExportName) {
        ExportName["PATH"] = "path";
        ExportName["SPEED"] = "speed";
        ExportName["SCALE"] = "scale";
        ExportName["FORMATION"] = "formation";
      })(ExportName || (ExportName = exports('ExportName', {})));

      var getMaxNumber = exports('getMaxNumber', function getMaxNumber(list) {
        var max = 0;

        for (var i = 0; i < list.length; ++i) {
          if (list[i].name) {
            var digit = list[i].name.replace(/[^\d.]/g, '');
            var n = parseInt(digit);

            if (max < n) {
              max = n;
            }
          }
        }

        return max + 1;
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillBomb1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './MoveComp1985.ts', './FXSkillUltimateController1985.ts', './SpineFish1985.ts', './FishManager1985.ts', './SkillUltimateComponent1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, CircleCollider2D, Contact2DType, sp, tween, instantiate, v3f, MoveComp1985, FXSkillUltimateController1985, SpineFish1985, FishManager1985, SkillUltimateComponent1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      CircleCollider2D = module.CircleCollider2D;
      Contact2DType = module.Contact2DType;
      sp = module.sp;
      tween = module.tween;
      instantiate = module.instantiate;
    }, function (module) {
      v3f = module.v3f;
    }, function (module) {
      MoveComp1985 = module.MoveComp1985;
    }, function (module) {
      FXSkillUltimateController1985 = module.FXSkillUltimateController1985;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }, function (module) {
      FishManager1985 = module.default;
    }, function (module) {
      SkillUltimateComponent1985 = module.SkillUltimateComponent1985;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b70cbw5z9RCtqlwaqqciotH", "SkillBomb1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillBomb1985 = exports('SkillBomb1985', (_dec = ccclass('SkillBomb1985'), _dec(_class = /*#__PURE__*/function (_SkillUltimateCompone) {
        _inheritsLoose(SkillBomb1985, _SkillUltimateCompone);

        function SkillBomb1985() {
          return _SkillUltimateCompone.apply(this, arguments) || this;
        }

        var _proto = SkillBomb1985.prototype;

        _proto.onLoad = function onLoad() {
          this.node.getComponent(CircleCollider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.onScaleBoxCollider();
        };

        _proto.onScaleBoxCollider = function onScaleBoxCollider() {
          var _this = this;

          var spine = this.node.getComponent(sp.Skeleton);
          var dur = spine.getCurrent(0).animation.duration;
          var boxCollider = this.node.getComponent(CircleCollider2D);
          var radius = 2000;
          tween(this.node).to(dur / 4, null, {
            onUpdate: function onUpdate(target, ratio) {
              boxCollider.radius = radius / 2 * ratio;
            }
          }).call(function () {
            boxCollider.radius = radius;
          }).delay(0.01).call(function () {
            _this.rewardAllListFish();

            _this.node.removeFromParent();

            _this.node.destroy();
          }).start();
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var fish = other.node.getComponent(SpineFish1985) || other.node.parent.getComponent(SpineFish1985) || other.node.parent.parent.getComponent(SpineFish1985);

          if (fish && !fish.checkDie()) {
            var data = this.getFishById(fish.getId());

            if (data) {
              if (fish.checkDie()) return;
              FishManager1985.instance.catchFish(data);
            } else {
              this.createEffectNearWinBomb(fish);
            }
          }
        };

        _proto.createEffectNearWinBomb = function createEffectNearWinBomb(fish) {
          var fxSkillUltimate = fish.node.getChildByName("FXSkillUltimate1985");

          if (fxSkillUltimate) {
            fxSkillUltimate.getComponent(FXSkillUltimateController1985).setAnimationSkillBomb();
            return;
          }

          var boxCollider = fish.getComponent(MoveComp1985).getBoxCollider();
          var fxSkillBomb = instantiate(this.fxSkill);
          fxSkillBomb.setParent(fish.node);
          fxSkillBomb.setPosition(boxCollider.getPosition());
          var scale = this.scaleCalculation(boxCollider);
          fxSkillBomb.setScale(v3f(scale));
          fxSkillBomb.getComponent(FXSkillUltimateController1985).setAnimationSkillBomb();
        };

        return SkillBomb1985;
      }(SkillUltimateComponent1985)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/bytesToUuid.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('default', bytesToUuid);

      cclegacy._RF.push({}, "b8293I7nmpGEqhj4V617jri", "bytesToUuid", undefined);
      /**
       * Convert array of 16 byte values to UUID string format of the form:
       * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
       */


      function bytesToUuid(buf, offset) {
        var byteToHex = [];

        for (var index = 0; index < 256; ++index) {
          byteToHex[index] = (index + 0x100).toString(16).substr(1);
        }

        var i = offset || 0;
        var bth = byteToHex; // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4

        return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join('');
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotHistory1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseHistory.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, GfBaseHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
    }, function (module) {
      GfBaseHistory = module.GfBaseHistory;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "b84b8YhsW9Ls746ql4ez31I", "JackpotHistory1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotHistory1988 = exports('JackpotHistory1988', (_dec = ccclass('JackpotHistory1988'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfBaseHistory) {
        _inheritsLoose(JackpotHistory1988, _GfBaseHistory);

        function JackpotHistory1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfBaseHistory.call.apply(_GfBaseHistory, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "viewTable", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = JackpotHistory1988.prototype;

        _proto.playLoading = function playLoading() {
          this.loading.active = true;
        };

        _proto.stopLoading = function stopLoading() {
          this.loading.active = false;
        };

        return JackpotHistory1988;
      }(GfBaseHistory), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "viewTable", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupPrompt1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfNetworkGameEvent.ts', './loadConfigAsync.ts', './gfLocalize.ts', './gfPopupPrompt.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfBaseEvents, gfEventEmitter, gfBaseConfig, gfNetworkGameEvent, loadConfigAsync, gfLocalize, GfPopupPrompt;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      GfPopupPrompt = module.GfPopupPrompt;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "b9917fFiAlNr5/vtrjbYl7s", "PopupPrompt1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupPrompt1988 = exports('PopupPrompt1988', (_dec = ccclass('PopupPrompt1988'), _dec(_class = /*#__PURE__*/function (_GfPopupPrompt) {
        _inheritsLoose(PopupPrompt1988, _GfPopupPrompt);

        function PopupPrompt1988() {
          return _GfPopupPrompt.apply(this, arguments) || this;
        }

        var _proto = PopupPrompt1988.prototype;

        _proto.onPromptHandler = function onPromptHandler(eventData) {
          var _this = this;

          var customMsg = eventData.customMsg,
              customType = eventData.customType,
              customCallbacks = eventData.customCallbacks,
              Code = eventData.Code,
              ArrayParam = eventData.ArrayParam;
          var eventCode = customMsg || Code || eventData;
          var msg = null;
          var type = null;
          var callbacks = null;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME;

          switch (eventCode) {
            case gfNetworkGameEvent.NETWORK_ERROR:
            case gfNetworkGameEvent.NETWORK_DIE:
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_DIE;
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.AUTHEN_FAIL:
              msg = gfLocalize.instance.NETWORK_MESSAGE.AUTHEN_FAIL;
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.LOGIN_IN_OTHER_DEVICE:
              msg = gfLocalize.instance.NETWORK_MESSAGE.LOGIN_IN_OTHER_DEVICE;
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.NETWORK_POOR:
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_POOR;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN:
            case gfNetworkGameEvent.MSG_CODE.IG_DUPLICATE_LOGIN:
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.DUPLICATE_LOGIN];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.CANT_FIND_ROOM:
            case gfNetworkGameEvent.MSG_CODE.ROOM_FULL:
              msg = gfLocalize.instance.MessagesSystem[eventCode];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.OWN_LASER:
              msg = gfLocalize.instance.MessagesSystem[eventCode][ArrayParam[0]];
              msg = msg.replace("xxx", gfLocalize.instance.txtGameMode[eventData.roomCode]);
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              break;

            case gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY:
              if (LOGIN_IFRAME && typeof ingameDeposit === 'function') {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.CHARGE_MONEY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    ingameDeposit();
                  }
                };
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_MONEY_LOBBY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              }

              break;

            case gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME:
              if (LOGIN_IFRAME && typeof ingameDeposit === 'function') {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.CHARGE_MONEY];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    ingameDeposit();
                  }
                };
              } else {
                msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_MONEY_IN_GAME];
                type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
                callbacks = {
                  confirmCallback: function confirmCallback() {
                    // Emitter.instance.emit(EventCode.COMMON.GO_LOBBY);
                    gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
                  }
                };
              }

              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.OFF_ALL_TARGET);
              break;

            case gfNetworkGameEvent.MSG_CODE.NO_ACTION:
              this.scheduleOnce(this.goToLobby, 4);
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.NO_ACTION];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  _this.unschedule(_this.goToLobby);

                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GO_LOBBY);
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN:
              this.scheduleOnce(this.goToLobby, 2);
              msg = gfLocalize.instance.MessagesSystem[gfNetworkGameEvent.MSG_CODE.SERVER_MAINTAIN];
              type = gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;
              callbacks = {
                confirmCallback: function confirmCallback() {
                  _this.unschedule(_this.goToLobby);

                  gfEventEmitter.instance.emit(gfBaseEvents.COMMON.GO_LOBBY);
                }
              };
              break;

            case gfNetworkGameEvent.MSG_CODE.WAITING_TIMEOUT:
              this.scheduleOnce(function () {
                gfEventEmitter.instance.emit(gfBaseEvents.COMMON.REFRESH_PAGE);
              }, 2);
              msg = gfLocalize.instance.NETWORK_MESSAGE.NETWORK_DIE;
              type = gfBaseConfig.instance.POPUP_PROMPT.NONE_BUTTON;
              break;

            default:
              msg = eventCode;
              type = customType || gfBaseConfig.instance.POPUP_PROMPT.JUST_CONFIRM_BUTTON;

              if (customCallbacks) {
                callbacks = customCallbacks;
              }

          }

          return {
            msg: msg,
            type: type,
            callbacks: callbacks
          };
        };

        return PopupPrompt1988;
      }(GfPopupPrompt)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AssetBundle1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfAssetBundle.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, gfAssetBundle;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfAssetBundle = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ba932f3uANNiLSjOzfSgKOB", "AssetBundle1985", undefined);

      var AssetBundle1985 = exports('default', /*#__PURE__*/function (_gfAssetBundle) {
        _inheritsLoose(AssetBundle1985, _gfAssetBundle);

        function AssetBundle1985() {
          var _this;

          _this = _gfAssetBundle.call(this) || this;
          AssetBundle1985.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = AssetBundle1985.prototype;

        _proto.destroy = function destroy() {
          _gfAssetBundle.prototype.destroy.call(this);

          AssetBundle1985.instance = null;
        };

        return AssetBundle1985;
      }(gfAssetBundle));

      _defineProperty(AssetBundle1985, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gf3DParticle.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfBaseConfig.ts', './gfPoolManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _defineProperty, cclegacy, _decorator, misc, v3, Component, getRandomInt, v3f, gfBaseConfig, gfPoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      misc = module.misc;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      v3f = module.v3f;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _temp, _dec2, _dec3, _dec4, _dec5, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _temp2;

      cclegacy._RF.push({}, "ba957p7g4xH/6+/05dsHsb4", "gf3DParticle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var configParticle = exports('configParticle', (_dec = ccclass('configParticle'), _dec(_class = (_class2 = (_temp = function configParticle() {
        _initializerDefineProperty(this, "start", _descriptor, this);

        _initializerDefineProperty(this, "end", _descriptor2, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "start", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "end", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      })), _class2)) || _class));
      var gf3DParticle = exports('gf3DParticle', (_dec2 = ccclass('gf3DParticle'), _dec3 = property(configParticle), _dec4 = property(configParticle), _dec5 = property(configParticle), _dec2(_class4 = (_class5 = (_temp2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gf3DParticle, _Component);

        function gf3DParticle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "particlePerSpawn", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spawnInterval", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gravity", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "speed", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "angle", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "size", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "lifetime", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "radius", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "duration", _descriptor11, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "coinAnimSpeed", _descriptor12, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isMe", true);

          _defineProperty(_assertThisInitialized(_this), "isPlaying", false);

          _defineProperty(_assertThisInitialized(_this), "spawnTimer", void 0);

          _defineProperty(_assertThisInitialized(_this), "timer", void 0);

          return _this;
        }

        var _proto = gf3DParticle.prototype;

        _proto.onLoad = function onLoad() {
          // this.node.setSpawnRate = this.setSpawnRate.bind(this);
          // this.node.setGravity = this.setGravity.bind(this);
          // this.node.setItemSpeed = this.setItemSpeed.bind(this);
          // this.node.setSpawnInterval = this.setSpawnInterval.bind(this);
          // this.node.setLifetime = this.setLifetime.bind(this);
          // this.node.startAnimation = this.startAnimation.bind(this);
          // this.node.stopAnimation = this.stopAnimation.bind(this);
          // this.node.setDuration = this.setDuration.bind(this);
          // this.node.setIsMe = this.setIsMe.bind(this);
          this.isPlaying = false;
        };

        _proto.startAnimation = function startAnimation() {
          this.isPlaying = true;
          this.spawnTimer = this.spawnInterval;
          this.timer = 0;
        };

        _proto.setSpawnRate = function setSpawnRate(perSpawn) {
          this.particlePerSpawn = perSpawn;
        };

        _proto.setSpawnInterval = function setSpawnInterval(interval) {
          this.spawnInterval = interval;
          this.spawnTimer = this.spawnInterval;
        };

        _proto.setItemSpeed = function setItemSpeed(minSpeed, maxSpeed) {
          this.speed = {
            start: minSpeed,
            end: maxSpeed
          };
        };

        _proto.setGravity = function setGravity(gravity) {
          this.gravity = gravity;
        };

        _proto.setDuration = function setDuration(duration) {
          this.duration = duration;
        };

        _proto.setLifetime = function setLifetime(lifeTime) {
          this.lifetime = lifeTime;
        };

        _proto.setIsMe = function setIsMe(isMe) {
          this._isMe = isMe;
        };

        _proto.stopAnimation = function stopAnimation() {
          this.isPlaying = false;
          this.timer = 0;

          while (this.node.children.length > 0) {
            this.node.children[0].emit("STOP_ANIMATION");
          }
        };

        _proto.update = function update(dt) {
          if ((this.duration < 0 || this.timer <= this.duration) && this.isPlaying == true) {
            this.timer += dt;
            this.spawnTimer += dt;

            if (this.spawnTimer >= this.spawnInterval) {
              this.spawnTimer -= this.spawnInterval;

              for (var i = 0; i < this.particlePerSpawn; i++) {
                var coin = this._isMe ? gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.MY_COIN) : gfPoolManager.instance.getCoin(gfBaseConfig.instance.COIN_TYPE.OTHER_COIN);
                coin.node.parent = this.node;
                coin.node.angle = getRandomInt(0, 360);
                coin.setOpacity(255);
                coin.node.scale.set(v3f(this.size.start + Math.random() * (this.size.end - this.size.start) * 2));
                var angle = misc.degreesToRadians(this.angle.start) + Math.random() * (misc.degreesToRadians(this.angle.end) - misc.degreesToRadians(this.angle.start));
                var pos = this.radius === 0 ? v3(0, 0, 0) : this.generatePoint(angle);
                coin.node.setPosition(pos.x, pos.y, coin.node.position.z);
                var speed = this.speed.start + Math.random() * (this.speed.end - this.speed.start);
                coin.startAnimation(1, this.coinAnimSpeed, Math.cos(angle) * speed, Math.sin(angle) * speed, 0, this.gravity, this.lifetime);
              }
            }
          }
        };

        _proto.generatePoint = function generatePoint(angle) {
          var x = Math.cos(angle) * this.radius;
          var y = Math.sin(angle) * this.radius;
          return v3(x, y, 0);
        };

        return gf3DParticle;
      }(Component), _temp2), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "particlePerSpawn", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 80;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "spawnInterval", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "gravity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -250;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "speed", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "angle", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class5.prototype, "size", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class5.prototype, "lifetime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class5.prototype, "radius", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class5.prototype, "duration", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -1;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class5.prototype, "coinAnimSpeed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1.25;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupInfo1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfPopupInfo.ts', './Config1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, ToggleContainer, PageView, Button, Node, Vec3, gfBaseEvents, gfEventEmitter, GfPopupInfo, Config1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ToggleContainer = module.ToggleContainer;
      PageView = module.PageView;
      Button = module.Button;
      Node = module.Node;
      Vec3 = module.Vec3;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfPopupInfo = module.GfPopupInfo;
    }, function (module) {
      Config1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;

      cclegacy._RF.push({}, "bb26fYMONBHMpiXtV/fmW9j", "PopupInfo1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupInfo1988 = exports('PopupInfo1988', (_dec = ccclass('PopupInfo1988'), _dec2 = property(ToggleContainer), _dec3 = property(PageView), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Button), _dec7 = property(Button), _dec8 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupInfo) {
        _inheritsLoose(PopupInfo1988, _GfPopupInfo);

        function PopupInfo1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupInfo.call.apply(_GfPopupInfo, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "toggleContainer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "lstPageView", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_currentPage", null);

          _defineProperty(_assertThisInitialized(_this), "_pageIndex", 0);

          _defineProperty(_assertThisInitialized(_this), "_pageViewEvent", null);

          _initializerDefineProperty(_assertThisInitialized(_this), "buttonNext", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "buttonPreview", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "buttonEnd", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "buttonBegin", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "viewInfo", _descriptor7, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PopupInfo1988.prototype;

        _proto.update = function update() {
          this.viewInfo.position = new Vec3(0, 0, 1);
        };

        _proto.initObj = function initObj() {
          if (this.getInitialized()) {
            if (this._pageIndex > 0) {
              this.initPage();
            }

            return;
          }

          _GfPopupInfo.prototype.initObj.call(this);

          this.initPage();
        };

        _proto.initPage = function initPage() {
          var _this2 = this;

          this._pageViewEvent = this.pageViewEvent.bind(this);
          this.lstPageView.forEach(function (pageView) {
            pageView.node.on('page-turning', _this2._pageViewEvent.bind(_this2));
          });
        };

        _proto.show = function show() {
          _GfPopupInfo.prototype.show.call(this);

          this._currentPage = this.lstPageView[0];
          this.resetInfo();
          this.setInitialized(true);
        };

        _proto.resetInfo = function resetInfo() {
          this.toggleContainer.toggleItems[0].isChecked = true;
          this.toggleContainer.toggleItems[0].interactable = false;

          for (var i = 0; i < this.toggleContainer.toggleItems.length - 1; ++i) {
            var toggle = this.toggleContainer.toggleItems[i];

            if (i == 0) {
              toggle.isChecked = true;
              toggle.interactable = false;
            } else {
              toggle.interactable = true;
            }
          }

          this._pageIndex = 0;
          this.onResetScrollView();
        };

        _proto.pageViewEvent = function pageViewEvent(pageView) {
          this._pageIndex = pageView._curPageIdx;

          this._updateButtons();
        };

        _proto.onClick = function onClick(event, data) {
          var currentPage = this.lstPageView[Number(data)];

          if (currentPage) {
            this._currentPage = currentPage;
          }

          if (this.getInitialized() && event.isChecked) {
            event.interactable = false;
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          } else if (this.getInitialized() && !event.isChecked) {
            event.interactable = true;
          }

          this.onResetScrollView();
        };

        _proto.onResetScrollView = function onResetScrollView() {
          this._pageIndex = 0;
          this.lstPageView.forEach(function (pageView) {
            pageView.scrollToPage(0, 0);
          });

          this._updateButtons();
        };

        _proto.onNext = function onNext() {
          var numberItemPerPage = this._getMaxItemPerPage();

          numberItemPerPage--;

          if (this._pageIndex >= numberItemPerPage) {
            this._pageIndex = numberItemPerPage;
            return;
          }

          this._pageIndex++;

          this._currentPage.scrollToPage(this._pageIndex);

          this._updateButtons();

          if (this.getInitialized()) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }
        };

        _proto.onPreview = function onPreview() {
          if (this._pageIndex < 0) {
            this._pageIndex = 0;
            return;
          }

          this._pageIndex--;

          this._currentPage.scrollToPage(this._pageIndex);

          this._updateButtons();

          if (this.getInitialized()) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }
        };

        _proto._getMaxItemPerPage = function _getMaxItemPerPage() {
          return this._currentPage.content.children.length;
        };

        _proto.onEnd = function onEnd() {
          if (this._currentPage) {
            this._pageIndex = this._getMaxItemPerPage();
            this._pageIndex--;

            this._currentPage.scrollToPage(this._pageIndex);
          }

          this._updateButtons();

          if (this.getInitialized()) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }
        };

        _proto.onBegin = function onBegin() {
          if (this._currentPage) {
            this._pageIndex = 0;

            this._currentPage.scrollToPage(0);
          }

          this._updateButtons();

          if (this.getInitialized()) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          }
        };

        _proto._updateButtons = function _updateButtons() {
          var buttonBegin = this.buttonBegin,
              buttonPreview = this.buttonPreview,
              buttonEnd = this.buttonEnd,
              buttonNext = this.buttonNext,
              _pageIndex = this._pageIndex;

          var numberItemPerPage = this._getMaxItemPerPage();

          numberItemPerPage--;

          if (numberItemPerPage === 0) {
            buttonBegin.interactable = false;
            buttonPreview.interactable = false;
            buttonEnd.interactable = false;
            buttonNext.interactable = false;
          } else if (_pageIndex === 0) {
            buttonBegin.interactable = false;
            buttonPreview.interactable = false;
            buttonEnd.interactable = true;
            buttonNext.interactable = true;
          } else if (_pageIndex === numberItemPerPage) {
            buttonBegin.interactable = true;
            buttonPreview.interactable = true;
            buttonEnd.interactable = false;
            buttonNext.interactable = false;
          } else {
            buttonBegin.interactable = true;
            buttonPreview.interactable = true;
            buttonEnd.interactable = true;
            buttonNext.interactable = true;
          }
        };

        _proto.hide = function hide(animStyle) {
          if (animStyle === void 0) {
            animStyle = Config1988.instance.POPUP_ANIMATION.DEFAULT;
          }

          _GfPopupInfo.prototype.hide.call(this, animStyle);

          this.setInitialized(false);
        };

        _proto.onClose = function onClose() {
          var _this3 = this;

          _GfPopupInfo.prototype.onClose.call(this);

          this.lstPageView.forEach(function (pageView) {
            pageView.node.off('page-turning', _this3._pageViewEvent, _this3);
          });
        };

        return PopupInfo1988;
      }(GfPopupInfo), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "toggleContainer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lstPageView", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "buttonNext", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "buttonPreview", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "buttonEnd", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "buttonBegin", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "viewInfo", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/InfoUserController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './gfDataStore.ts', './DataStore1985.ts', './Config1985.ts', './gfWallet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Sprite, SpriteAtlas, Label, Node, log, Component, formatMoney, gfEventEmitter, EventsCode1985, ReferenceManager1985, gfDataStore, DataStore1985, Config1985, gfWallet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      SpriteAtlas = module.SpriteAtlas;
      Label = module.Label;
      Node = module.Node;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      formatMoney = module.formatMoney;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfWallet = module.gfWallet;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "bb6ec000INGM4rGAHL8g3os", "InfoUserController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MAX_ENERGY_SHIELD = 5;
      var InfoUserController1985 = exports('InfoUserController1985', (_dec = ccclass('InfoUserController1985'), _dec2 = property(gfWallet), _dec3 = property(Sprite), _dec4 = property(SpriteAtlas), _dec5 = property(Label), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(InfoUserController1985, _Component);

        function InfoUserController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "wallet", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "avatar", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "avatarAtlas", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "userName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "arrStackShield", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_curEnergyShield", null);

          return _this;
        }

        var _proto = InfoUserController1985.prototype;

        _proto.setEnergyShield = function setEnergyShield(data) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);

          if (player.isMe) {
            if (DataStore1985.instance.curEnergyShield < data.Shield) {
              gfEventEmitter.instance.emit(EventsCode1985.SOUND.SHIELD_REGENERATION);
            }

            this._curEnergyShield = DataStore1985.instance.curEnergyShield = data.Shield;
            this.updateStateEnergy();
          }
        };

        _proto.onLoad = function onLoad() {
          this._curEnergyShield = MAX_ENERGY_SHIELD;

          var _gfDataStore$instance = gfDataStore.instance.getSelfInfo(),
              Wallet = _gfDataStore$instance.Wallet,
              Username = _gfDataStore$instance.Username,
              Avatar = _gfDataStore$instance.Avatar;

          this.forceUpdateWallet(Wallet);
          this.updateUserName(Username);
          this.updateAvatar(Avatar);
        };

        _proto.forceUpdateWallet = function forceUpdateWallet(value) {
          DataStore1985.instance.setSelfInfo({
            Wallet: value
          });
          this.wallet.forceUpdateWallet(value);
        };

        _proto.updateUserName = function updateUserName(name) {
          this.userName.string = name;
        };

        _proto.updateStateEnergy = function updateStateEnergy() {
          for (var i = 0; i < this.arrStackShield.length; ++i) {
            if (i >= this._curEnergyShield) {
              this.arrStackShield[i].active = false;
            } else {
              this.arrStackShield[i].active = true;
            }
          }
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          for (var i = 0; i < data.ListUser.length; i++) {
            var userInfo = data.ListUser[i];
            var player = ReferenceManager1985.instance.getPlayerByDeskStation(userInfo.DeskStation);

            if (player) {
              if (player.isMe) {
                this.forceUpdateWallet(userInfo.Wallet);
                this.updateUserName(userInfo.Username);
                this.updateAvatar(userInfo.Avatar);
                this.setEnergyShield(userInfo);
              }
            }
          }
        };

        _proto.playerUpdateWallet = function playerUpdateWallet(data) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe) {
            DataStore1985.instance.setSelfInfo({
              Wallet: data.Wallet
            });
            log("REAL WALLET:" + formatMoney(data.Wallet));
            this.wallet.updateWallet(data.Wallet);
          }
        };

        _proto.onSpaceShipRevival = function onSpaceShipRevival(data) {
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);
          player.setProtectedState(false);
        };

        _proto.updateAvatar = function updateAvatar(avatarName) {
          if (this.avatarAtlas) {
            var frameAvatar = this.avatarAtlas.getSpriteFrame(avatarName);

            if (!frameAvatar) {
              frameAvatar = this.avatarAtlas.getSpriteFrame(Config1985.instance.DEFAULT_AVATAR);
            }

            this.avatar.spriteFrame = frameAvatar;
          }
        };

        _proto.addGoldReward = function addGoldReward(reward) {
          this.wallet.addGoldReward(reward);
        };

        _proto.addToDisplayWallet = function addToDisplayWallet(amount) {
          this.wallet.addToDisplay(amount);
          if (amount > 0 && DataStore1985.instance.isAutoPaused()) ;
        };

        return InfoUserController1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wallet", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "avatar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "avatarAtlas", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "userName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "arrStackShield", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolConfig1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfNodePoolConfig.ts', './NodePoolAssets1985.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, instantiate, warn, gfNodePoolConfig, NodePoolAssets1985;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      warn = module.warn;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      NodePoolAssets1985 = module.NodePoolAssets1985;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "bbbccDgsbpA3YEqrprabbg0", "NodePoolConfig1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NodePoolConfig1985 = exports('default', (_dec = ccclass('NodePoolConfig1985'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfNodePoolConfig) {
        _inheritsLoose(NodePoolConfig1985, _gfNodePoolConfig);

        function NodePoolConfig1985(listAssets) {
          var _this;

          _this = _gfNodePoolConfig.call(this, listAssets) || this;
          NodePoolConfig1985.instance = _assertThisInitialized(_this);
          _this.FISH_CONFIG = {
            "1": {
              name: "ES_1",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 1.5
            },
            "2": {
              name: "ES_2",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 2
            },
            "3": {
              name: "ES_3",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: true,
              payTable: 11
            },
            "4": {
              name: "ES_4",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 3
            },
            "5": {
              name: "ES_5",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 60
            },
            "6": {
              name: "ES_6",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 80
            },
            "7": {
              name: "ET_1",
              FishMultiple: -1,
              zIndex: 102,
              isGroundLayer: true,
              payTable: 40
            },
            "8": {
              name: "EV_1",
              FishMultiple: -1,
              zIndex: 108,
              isGroundLayer: true,
              payTable: 15
            },
            "9": {
              name: "EV_2",
              FishMultiple: -1,
              zIndex: 109,
              isGroundLayer: true,
              payTable: 10
            },
            "10": {
              name: "EV_3",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 22
            },
            "11": {
              name: "EV_4",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 1.5
            },
            "12": {
              name: "EV_5",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 25
            },
            "13": {
              name: "EV_6",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 100
            },
            "14": {
              name: "EC_1",
              FishMultiple: -1,
              zIndex: 101,
              isGroundLayer: true,
              payTable: 5
            },
            "15": {
              name: "EC_2",
              FishMultiple: -1,
              zIndex: 102,
              isGroundLayer: true,
              payTable: 12
            },
            "16": {
              name: "EC_3",
              FishMultiple: -1,
              zIndex: 103,
              isGroundLayer: true,
              payTable: 7
            },
            "17": {
              name: "EC_4",
              FishMultiple: -1,
              zIndex: 104,
              isGroundLayer: true,
              payTable: 8
            },
            "18": {
              name: "AL_1",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: true,
              payTable: 20
            },
            "19": {
              name: "AL_2",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: true,
              payTable: 45
            },
            "40": {
              name: "SP_1",
              FishMultiple: -1,
              zIndex: 200,
              isGroundLayer: true,
              payTable: 300
            },
            "41": {
              name: "SP_2",
              FishMultiple: -1,
              zIndex: 400,
              isGroundLayer: false,
              payTable: 300
            }
          };
          return _this;
        }

        var _proto = NodePoolConfig1985.prototype;

        _proto.initNodePoolAssets = function initNodePoolAssets(listAssets) {
          this.assetHolder = instantiate(listAssets).getComponent(NodePoolAssets1985);
          this.assetHolder.initMapAssets();
        };

        _proto.getFishConfig = function getFishConfig(kind) {
          var config = this.FISH_CONFIG[kind];

          if (!config) {
            warn("Fish kind config not found: " + kind);
            return null;
          }

          return config;
        };

        _proto.getEnvObjectConfig = function getEnvObjectConfig(kind) {
          var config = {
            asset: null
          };
          config.asset = this.assetHolder.getEnvObjectSprite(kind);
          if (!config.asset) return null;
          return config;
        };

        return NodePoolConfig1985;
      }(gfNodePoolConfig), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoinFX1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './gfCoinFX.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, tween, UITransform, v3, misc, v2, Tween, Animation, getRandomInt, getDistance, fadeIn, moveTo, call, stopAllActions, gfEventEmitter, getRotation, EventsCode1985, ReferenceManager1985, gfCoinFX;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      UITransform = module.UITransform;
      v3 = module.v3;
      misc = module.misc;
      v2 = module.v2;
      Tween = module.Tween;
      Animation = module.Animation;
    }, function (module) {
      getRandomInt = module.getRandomInt;
      getDistance = module.getDistance;
    }, function (module) {
      fadeIn = module.fadeIn;
      moveTo = module.moveTo;
      call = module.call;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      getRotation = module.getRotation;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      gfCoinFX = module.gfCoinFX;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "bbff6utpBhHD5TYN1BsdB/l", "CoinFX1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SPEED_COIN_FLY = 950;
      var DISTANCE_CAN_FORCE_FLY = 300;
      var DISTANCE_FINAL = 50;
      var TIME_WAIT = 1;
      var CoinFX1985 = exports('CoinFX1985', (_dec = ccclass('CoinFX1985'), _dec(_class = (_temp = /*#__PURE__*/function (_gfCoinFX) {
        _inheritsLoose(CoinFX1985, _gfCoinFX);

        function CoinFX1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfCoinFX.call.apply(_gfCoinFX, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_ship", null);

          _defineProperty(_assertThisInitialized(_this), "_isCanFly", false);

          _defineProperty(_assertThisInitialized(_this), "_scheduleFlyToPlayer", null);

          _defineProperty(_assertThisInitialized(_this), "_vectorX", null);

          _defineProperty(_assertThisInitialized(_this), "_vectorY", null);

          _defineProperty(_assertThisInitialized(_this), "_goldReward", null);

          _defineProperty(_assertThisInitialized(_this), "_canForceFly", false);

          _defineProperty(_assertThisInitialized(_this), "_isSkill", false);

          _defineProperty(_assertThisInitialized(_this), "_skipUpdateWallet", false);

          return _this;
        }

        var _proto = CoinFX1985.prototype;

        _proto.setFlyToPlayer = function setFlyToPlayer(index, deskStation, goldReward, isSkill, skipUpdateWallet) {
          var _this2 = this;

          if (isSkill === void 0) {
            isSkill = false;
          }

          if (skipUpdateWallet === void 0) {
            skipUpdateWallet = false;
          }

          this._goldReward = index == 0 ? goldReward : 0;
          this._ship = ReferenceManager1985.instance.getPlayerByDeskStation(deskStation);
          this._isSkill = isSkill;
          this._skipUpdateWallet = skipUpdateWallet;
          var xRandom = index % 2 === 0 ? 15 + Math.random() * 5 : -(5 + Math.random() * 15);
          xRandom *= index;
          var yRandom = getRandomInt(-5, 5) * 7.5 - 50;
          var action = tween(this.node);
          action.then(fadeIn(0.01));
          action.then(moveTo(0.175, this.node.position.x + xRandom / 2, this.node.position.y + 100, this.node.position.z));
          action.call(function () {
            if (_this2._ship.isMe && index === 0 && !isSkill) {
              gfEventEmitter.instance.emit(EventsCode1985.SOUND.EFFECT_GOLD);
            }
          });
          action.then(moveTo(0.5, this.node.position.x + xRandom, this.node.position.y + yRandom, this.node.position.z, 'bounceOut'));
          action.then(call(function () {
            _this2._canForceFly = true;
          }));
          action.delay(0.15 + 0.05 * index + TIME_WAIT);
          action.then(call(function () {
            _this2._isCanFly = true;
          }));
          action.start();
        };

        _proto.caculatorVector = function caculatorVector() {
          var startPos = this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0));

          var endPos = this._ship.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0));

          var angle = getRotation(endPos, startPos);
          this._vectorX = Math.cos(misc.degreesToRadians(angle));
          this._vectorY = Math.sin(misc.degreesToRadians(angle));
        };

        _proto.update = function update(dt) {
          var coinPos = this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0));

          var shipPos = this._ship.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0));

          var distance = getDistance(v2(coinPos.x, coinPos.y), v2(shipPos.x, shipPos.y));

          if (!this._isCanFly) {
            if (distance <= DISTANCE_CAN_FORCE_FLY && this._canForceFly) {
              Tween.stopAllByTarget(this.node);
              this._isCanFly = true;
            }
          } else if (distance <= DISTANCE_FINAL) {
            if (this._ship.isMe && this._goldReward > 0 && !this._isSkill && !this._skipUpdateWallet) {
              this._ship.addToDisplayWallet(this._goldReward);
            }

            this.node.getComponent(Animation).stop();
            gfEventEmitter.instance.emit(EventsCode1985.SOUND.PICK_COIN);
            this.returnPool();
          } else {
            this.caculatorVector();
            var delta = dt * SPEED_COIN_FLY;
            var x = this.node.position.x,
                y = this.node.position.y;
            x += this._vectorX * delta;
            y += this._vectorY * delta;
            this.node.setPosition(x, y, 0);
          }
        };

        _proto.reuse = function reuse(poolMng) {
          _gfCoinFX.prototype.reuse.call(this, poolMng);

          this._goldReward = 0;
          this._vectorX = 0;
          this._vectorY = 0;
          this._ship = null;
          this._isCanFly = false;
          this._canForceFly = false;
          stopAllActions(this.node);
        };

        return CoinFX1985;
      }(gfCoinFX), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './loadConfigAsync.ts', './gfNotifyMessage.ts', './gfNotifyStack.ts', './gfNotifyJackpot.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, UITransform, director, Director, Component, setOpacity, gfBaseEvents, gfBaseConfig, SetZIndex, registerEvent, removeEvents, gfDataStore, loadConfigAsync, GfNotifyMessage, GfNotifyStack, GfNotifyJackpot;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      director = module.director;
      Director = module.Director;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      GfNotifyMessage = module.GfNotifyMessage;
    }, function (module) {
      GfNotifyStack = module.GfNotifyStack;
    }, function (module) {
      GfNotifyJackpot = module.GfNotifyJackpot;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "bc97fFVSShPybJtGLB45k0x", "gfNotifyController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfNotifyController = exports('default', (_dec = ccclass('GfNotifyController'), _dec2 = property(GfNotifyMessage), _dec3 = property(GfNotifyJackpot), _dec4 = property(GfNotifyStack), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfNotifyController, _Component);

        function gfNotifyController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "notifyMessage", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "notifyJackpot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "notifyStack", _descriptor3, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "LOAD_CONFIG", null);

          return _this;
        }

        var _proto = gfNotifyController.prototype;

        _proto.onLoad = function onLoad() {
          this.LOAD_CONFIG = loadConfigAsync.getConfig();
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.NOTIFY);
          setOpacity(this.node, 255);
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.SHOW_NOTIFY, this.onNotify, this);
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.updateSceneSize, this);
          registerEvent(gfBaseEvents.COMMON.BEFORE_LOAD_SCENE, this.onBeforeSceneChange, this);
          registerEvent(gfBaseEvents.COMMON.INIT_SCENE, this.onAfterSceneChange, this);
        };

        _proto.updateSceneSize = function updateSceneSize() {
          this.node.getComponent(UITransform).width = gfBaseConfig.instance.realSize.Width;
          this.node.getComponent(UITransform).height = gfBaseConfig.instance.realSize.Height;
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          this.notifyMessage && this.notifyMessage.onBeforeSceneChange();
          this.notifyJackpot && this.notifyJackpot.onBeforeSceneChange();
          this.notifyStack && this.notifyStack.onBeforeSceneChange();
        };

        _proto.onAfterSceneChange = function onAfterSceneChange() {
          this.notifyMessage && this.notifyMessage.onAfterSceneChange();
          this.notifyJackpot && this.notifyJackpot.onAfterSceneChange();
          this.notifyStack && this.notifyStack.onAfterSceneChange();
        };

        _proto.onNotify = function onNotify(data) {
          if (!this.validateData(data)) return;

          if (gfBaseConfig.instance.NOTIFY_JACKPOT.array_type_notify_jackpot.indexOf(data.type) > -1) {
            var selfInfo = gfDataStore.instance.getSelfInfo();

            if (data.data[0] !== selfInfo.Username) {
              this.notifyJackpot.show(data);
            }
          } else if (this.notifyStack) {
            if (gfBaseConfig.instance.NOTIFY_TYPE.SYSTEM === data.type) {
              this.notifyMessage.show(data);
            } else {
              this.notifyStack.show(data);
            }
          } else {
            this.notifyMessage.show(data);
          }
        };

        _proto.validateData = function validateData(data) {
          var isValid = false;
          var LOGIN_IFRAME = this.LOAD_CONFIG.LOGIN_IFRAME;
          var _GameConfig$instance$ = gfBaseConfig.instance.NOTIFY_ENVIRONMENT_CONFIG,
              ALL = _GameConfig$instance$.ALL,
              IFRAME = _GameConfig$instance$.IFRAME,
              APP = _GameConfig$instance$.APP;

          switch (data.environment) {
            case ALL:
              isValid = true;
              break;

            case IFRAME:
              if (LOGIN_IFRAME) isValid = true;
              break;

            case APP:
              if (!LOGIN_IFRAME) isValid = true;
              break;

            default:
              isValid = true;
              break;
          }

          return isValid;
        };

        _proto.refreshPage = function refreshPage() {
          director.off(Director.EVENT_BEFORE_SCENE_LOADING, this.onBeforeSceneChange, this);
          director.off(Director.EVENT_AFTER_SCENE_LAUNCH, this.onAfterSceneChange, this);
          this.node.children.forEach(function (item) {
            item.destroy();
          });
          removeEvents(this);
        };

        return gfNotifyController;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "notifyMessage", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "notifyJackpot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "notifyStack", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup12.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, v2, bezier, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
      bezier = module.bezier;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bcd346mb2xEy4n+H6KcqbI7", "gfFishGroup12", undefined);

      var gfFishGroup12 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup12() {}

        gfFishGroup12.create = function create() {
          // const fishCount = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1,  1, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 2];
          // const fishKind =  [21, 15, 21, 15, 12, 6, 12, 6, 1, 5, 30, 47, 17, 14, 18, 14, 18, 8, 11, 8, 11, 2, 4, 30, 27, 23];
          var width = gfBaseConfig.instance.AppSize.Width;
          var height = gfBaseConfig.instance.AppSize.Height;
          var offset = 200;
          var botLeftToTopRight = [[v2(0 - offset * 2, 0 + offset), v2(width + offset * 1.5, height + offset)], [v2(0 + offset, 0 - offset / 2), v2(width - offset * 1.25, height + offset)], [v2(0 - offset * 1.75, 0 + offset / 4), v2(width + offset * 1.25, height + offset)], [v2(0 - offset * 1.75, 0 - offset / 4), v2(width + offset * 1.25, height + offset)], [v2(0 - offset * 1.75, 0), v2(width + offset * 1.25, height + offset)]];
          botLeftToTopRight['fish30'] = [v2(0 - offset * 1.75, 0), v2(width + offset * 1.25, height + offset)];
          botLeftToTopRight['outLine'] = [v2(0 - offset * 2, 0 + offset * 1.75), v2(width + offset, height + offset)];
          var topRightToBotLeft = [[v2(width + offset * 2, height - offset), v2(-(width + offset * 1.5), -(height + offset))], [v2(width - offset, height + offset / 2), v2(-(width - offset * 1.25), -(height + offset))], [v2(width + offset * 1.75, height - offset / 4), v2(-(width + offset * 1.25), -(height + offset))], [v2(width + offset * 1.75, height + offset / 4), v2(-(width + offset * 1.25), -(height + offset))], [v2(width + offset * 1.75, height), v2(-(width + offset * 1.25), -(height + offset))] //mid lane
          ];
          topRightToBotLeft['fish30'] = [v2(width + offset * 1.75, height), v2(-(width + offset * 1.25), -(height + offset))];
          topRightToBotLeft['outLine'] = [v2(width + offset * 2, height - offset * 1.75), v2(-(width + offset), -(height + offset))];
          var botRightToTopLeft = [[v2(width + offset * 2, 0 + offset), v2(-(width + offset * 1.5), height + offset)], [v2(width - offset, 0 - offset / 2), v2(-(width - offset * 1.25), height + offset)], [v2(width + offset * 1.75, 0 + offset / 4), v2(-(width + offset * 1.25), height + offset)], [v2(width + offset * 1.75, 0 - offset / 4), v2(-(width + offset * 1.25), height + offset)], [v2(width + offset * 1.75, 0), v2(-(width + offset * 1.25), height + offset)]];
          botRightToTopLeft['fish30'] = [v2(width + offset * 1.75, 0), v2(-(width + offset * 1.25), height + offset)];
          botRightToTopLeft['outLine'] = [v2(width + offset * 2, 0 + offset * 1.75), v2(-(width + offset), height + offset)];
          var topLeftToBotRight = [[v2(0 - offset * 2, height - offset), v2(width + offset * 1.5, -(height + offset))], [v2(0 + offset, height + offset / 2), v2(width - offset * 1.25, -(height + offset))], [v2(0 - offset * 1.75, height + offset / 4), v2(width + offset * 1.25, -(height + offset))], [v2(0 - offset * 1.75, height - offset / 4), v2(width + offset * 1.25, -(height + offset))], [v2(0 - offset * 1.75, height), v2(width + offset * 1.25, -(height + offset))] //mid lane
          ];
          topLeftToBotRight['fish30'] = [v2(0 - offset * 1.75, height), v2(width + offset * 1.25, -(height + offset))];
          topLeftToBotRight['outLine'] = [v2(0 - offset * 2, height - offset * 1.75), v2(width + offset, -(height + offset))];

          if (gfFishGroupData.isFlipped()) {
            this._flow(botRightToTopLeft, 0);

            this._flow(botLeftToTopRight, 20);
          } else {
            this._flow(topLeftToBotRight, 0);

            this._flow(topRightToBotLeft, 20);
          }
        };

        gfFishGroup12._flow = function _flow(config, timeFlow) {
          for (var i = 0; i < config.length; i++) {
            this._runFlow(config[i], timeFlow, i);
          }

          this._runFish30(config['fish30'], timeFlow);

          this._runFish43(config['fish30'], timeFlow);

          this._runFishOutLine(config['outLine'], timeFlow);
        };

        gfFishGroup12._runFishOutLine = function _runFishOutLine(flow, timeFlow) {
          for (var i = 0; i < 2; i++) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var moveAction = new FishMoveActions(flow[0]);
            var timeLeft = Math.max(0, 20);
            var delay = i * 6 + timeFlow;
            var config = this.randomBezierFish(flow[0], flow[1], 0.1);
            moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: timeLeft,
              points: config
            });
            data.moveAction = moveAction;
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        gfFishGroup12._runFish30 = function _runFish30(flow, timeFlow) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var moveAction = new FishMoveActions(flow[0]);
          var timeLeft = Math.max(0, 15);
          var config = this.randomBezierFish(flow[0], flow[1], 0.1);
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: 0 + timeFlow + 7.5
          });
          moveAction.appendAction(FISH_ACTION.gfBezierBy, {
            time: timeLeft,
            points: config
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        gfFishGroup12._runFish43 = function _runFish43(flow, timeFlow) {
          var data = gfFishGroupData.getNextFishData();
          var config = this.randomBezierFish(flow[0], flow[1], 0.1);

          if (timeFlow == 0) {
            this.FlowerMoveData = [flow[0]];

            for (var i = 0; i < config.length; ++i) {
              this.FlowerMoveData[i + 1] = v2(this.FlowerMoveData[0].x + config[i].x, this.FlowerMoveData[0].y + config[i].y);
            }
          }

          if (!data) return;
          var moveAction = new FishMoveActions(flow[0]);
          var timeLeft = Math.max(0, 15);
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: 0 + timeFlow + 6
          });
          moveAction.appendAction(FISH_ACTION.gfBezierBy, {
            time: timeLeft,
            points: config
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        gfFishGroup12._runFlow = function _runFlow(flow, timeFlow, index) {
          var totalFish = index > 1 ? 8 : 8;

          if (index < 2) {
            var delayEach = 3;

            for (var i = 0; i < 4; i++) {
              var data = gfFishGroupData.getNextFishData();
              if (!data) continue;
              var moveAction = new FishMoveActions(flow[0]);
              var delay = i * delayEach + timeFlow;
              var timeLeft = Math.max(0, 15);
              var config = this.randomBezierFish(flow[0], flow[1], 0.1);
              moveAction.appendAction(FISH_ACTION.Delay, {
                time: delay
              });
              moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: timeLeft,
                points: config
              });
              data.moveAction = moveAction;
              FishGroupHelper.createFishWithDelay(data);
            }

            for (var _i = 0; _i < 4; _i++) {
              var _data = gfFishGroupData.getNextFishData();

              if (!_data) continue;

              var _moveAction = new FishMoveActions(flow[0]);

              var _delay = (_i + 0.5) * delayEach + timeFlow;

              var _timeLeft = Math.max(0, 15);

              var _config = this.randomBezierFish(flow[0], flow[1], 0.1);

              _moveAction.appendAction(FISH_ACTION.Delay, {
                time: _delay
              });

              _moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: _timeLeft,
                points: _config
              });

              _data.moveAction = _moveAction;
              FishGroupHelper.createFishWithDelay(_data);
            }
          } else {
            var _delayEach = 1.5;

            for (var _i2 = 0; _i2 < totalFish; _i2++) {
              var _data2 = gfFishGroupData.getNextFishData();

              if (!_data2) continue;

              var _moveAction2 = new FishMoveActions(flow[0]);

              var _delay2 = _i2 * _delayEach + timeFlow;

              var _timeLeft2 = Math.max(0, 15);

              var _config2 = this.randomBezierFish(flow[0], flow[1], 0.1);

              if (_i2 > 3) {
                _delay2 += 3;
              }

              if (index == 4) {
                _delay2 += _delayEach * 0.5;
              }

              _moveAction2.appendAction(FISH_ACTION.Delay, {
                time: _delay2
              });

              _moveAction2.appendAction(FISH_ACTION.gfBezierBy, {
                time: _timeLeft2,
                points: _config2
              });

              _data2.moveAction = _moveAction2;
              FishGroupHelper.createFishWithDelay(_data2);
            }
          }
        };

        gfFishGroup12.randomBezierFish = function randomBezierFish(beganPos, endPos, radio) {
          var midPos = v2(endPos.x, 0 + (0 - endPos.y) * (radio / 10));
          var bezierConfig = [v2(0, 0), midPos, endPos];
          return bezierConfig;
        };

        gfFishGroup12.calculateFlowerDiePosition = function calculateFlowerDiePosition(time) {
          if (!this.FlowerMoveData) return v2(780, 320);
          var delayTime = 6;
          var moveTime = 15;
          time -= FishGroupHelper.FISH_START_DELAY;
          if (time <= delayTime) return this.FlowerMoveData[0];
          time -= delayTime;
          if (time >= moveTime) return this.FlowerMoveData[3];
          var ratio = time / moveTime;
          var x = bezier(this.FlowerMoveData[0].x, this.FlowerMoveData[1].x, this.FlowerMoveData[2].x, this.FlowerMoveData[3].x, ratio);
          var y = bezier(this.FlowerMoveData[0].y, this.FlowerMoveData[1].y, this.FlowerMoveData[2].y, this.FlowerMoveData[3].y, ratio);
          return v2(x, y);
        };

        return gfFishGroup12;
      }());

      _defineProperty(gfFishGroup12, "FlowerMoveData", void 0);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfVersion.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, Component, gfBaseConfig;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      gfBaseConfig = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "bd43ehXrhxM5olQKt0IEhEv", "gfVersion", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfVersion = exports('GfVersion', (_dec = ccclass('GfVersion'), _dec2 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfVersion, _Component);

        function GfVersion() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "versionText", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfVersion.prototype;

        _proto.onLoad = function onLoad() {
          this.versionText.string = gfBaseConfig.instance.GameVersion;
        };

        return GfVersion;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "versionText", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptDotTouchListener.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfptDataType.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Node, v3, Component, gfptEvent;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      gfptEvent = module.gfptEvent;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "bff23TKeyhA2L8IkEbE8f1z", "gfptDotTouchListener", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfptDotTouchListener = exports('gfptDotTouchListener', (_dec = ccclass('gfptDotTouchListener'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfptDotTouchListener, _Component);

        function gfptDotTouchListener() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "isHolding", false);

          return _this;
        }

        var _proto = gfptDotTouchListener.prototype;

        _proto.start = function start() {
          this.node.on(Node.EventType.TOUCH_START, this.onUserStartTouch, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onUserMoveTouch, this);
          this.node.on(Node.EventType.TOUCH_END, this.onUserEndTouch, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onUserEndTouch, this);
        };

        _proto.onUserStartTouch = function onUserStartTouch(e) {
          this.isHolding = true;
          this.node.dispatchEvent(new gfptEvent('UPDATE_LINE'));
        };

        _proto.onUserMoveTouch = function onUserMoveTouch(e) {
          if (!this.isHolding) return;
          var uiPos = e.getUILocation();

          if (this.node.name == 'yellow') {
            this.node.parent.worldPosition = v3(uiPos.x, uiPos.y, 0);
          } else {
            this.node.worldPosition = v3(uiPos.x, uiPos.y, 0);
          }

          this.node.dispatchEvent(new gfptEvent('UPDATE_LINE'));
        };

        _proto.onUserEndTouch = function onUserEndTouch(e) {
          this.isHolding = true;
        };

        return gfptDotTouchListener;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/command-manager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './logger.ts', './custom-uuid.ts', './message-manager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, logger, uuid, messageManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      uuid = module.default;
    }, function (module) {
      messageManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c090ftYZyNG07Gr5gyv9Qi3", "command-manager", undefined);

      var CommandManager = exports('CommandManager', /*#__PURE__*/function () {
        function CommandManager(serviceId, maxConcurrentCommand) {
          _defineProperty(this, "serviceId", void 0);

          _defineProperty(this, "maxConcurrentCommand", void 0);

          _defineProperty(this, "_emitter", void 0);

          _defineProperty(this, "_executingCommandType", void 0);

          _defineProperty(this, "_messageIdInfosMap", void 0);

          this.serviceId = serviceId;
          this.maxConcurrentCommand = maxConcurrentCommand || 1;
          this._emitter = new EventEmitter();
          this._executingCommandType = new HashMap();
          this._messageIdInfosMap = new HashMap();
        }

        var _proto = CommandManager.prototype;

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.subscribe = function subscribe(channelName) {
          messageManager.subscribe(channelName);
        };

        _proto.unSubscribe = function unSubscribe(channelName) {
          messageManager.unSubscribe(channelName);
        }
        /**
         * 
         * @param {*} commandPayload : {event : "", data : {}}
         * @param {*} strategy : {resendCount, shouldWaitForACK, canBeDuplicated}
         * @returns {string} commandId: <cid> | CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT | CommandManager.COMMAND_FAILED_DUPLICATE}
         */
        ;

        _proto.executeCommand = function executeCommand(commandPayload, strategy) {
          logger.debug("CommandManager %s - executeCommand: %j", this.serviceId, [commandPayload, strategy]);

          var numberExecutingCommand = this._executingCommandType.count();

          if (!this._validateDublicateCommandType(commandPayload, strategy)) {
            // fail validation.
            logger.error("CommandManager %s - COMMAND_FAILED_DUPLICATE. Executing type: %j", this.serviceId, this._executingCommandType.keys());
            return CommandManager.COMMAND_FAILED_DUPLICATE;
          }

          if (numberExecutingCommand >= this.maxConcurrentCommand && !this._executingCommandType.has(commandPayload.event)) {
            logger.error("CommandManager %s - COMMAND_FAILED_CONC_OVER_LIMIT. current : %s, maximum: %s", this.serviceId, numberExecutingCommand, this.maxConcurrentCommand);
            return CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT;
          }

          var commandId = uuid();
          commandPayload.data.cId = commandId;
          commandPayload.data.commandId = commandId;
          var messageId = messageManager.sendMessage(this.serviceId, commandPayload);

          if (strategy.shouldWaitForACK) {
            this._executingCommandType.set(commandPayload.event);

            this._messageIdInfosMap.set(messageId, {
              commandId: commandId,
              resendCount: strategy.resendCount,
              commandPayload: commandPayload,
              numberResend: 0
            });
          }

          logger.debug("CommandManager %s - sendMessage messageId=%s, commandId=%s", this.serviceId, messageId, commandId);
          return commandId;
        };

        _proto.clearRemainingCommand = function clearRemainingCommand() {
          this._executingCommandType.clear();

          messageManager.removeSendingMessage(this._messageIdInfosMap.keys());

          this._messageIdInfosMap.clear();
        };

        _proto.cleanUp = function cleanUp() {
          logger.debug("CommandManager %s - clean up", this.serviceId);

          this._emitter.removeAllListeners();

          this.clearRemainingCommand();
        };

        _proto.onAck = function onAck(messageId) {
          logger.debug("CommandManager %s - ack: messageId=%s", this.serviceId, messageId);

          if (this._messageIdInfosMap.has(messageId)) {
            var _this$_messageIdInfos = this._messageIdInfosMap.get(messageId),
                commandPayload = _this$_messageIdInfos.commandPayload;

            this._messageIdInfosMap["delete"](messageId);

            this._executingCommandType["delete"](commandPayload.event);

            this._emitter.emit(CommandManager.COMMAND_SEND_SUCCESSFULLY, commandPayload);
          }
        };

        _proto.onCannotSendMessage = function onCannotSendMessage(messageId) {
          logger.debug("CommandManager %s - cannotSendMessage: messageId=%s", this.serviceId, messageId);

          if (this._messageIdInfosMap.has(messageId)) {
            var _this$_messageIdInfos2 = this._messageIdInfosMap.get(messageId),
                resendCount = _this$_messageIdInfos2.resendCount,
                commandId = _this$_messageIdInfos2.commandId,
                commandPayload = _this$_messageIdInfos2.commandPayload,
                numberResend = _this$_messageIdInfos2.numberResend;

            this._messageIdInfosMap["delete"](messageId);

            if (numberResend < resendCount) {
              logger.debug("CommandManager %s - resendMessage: %s", this.serviceId, messageId);
              var resendMessageId = messageManager.sendMessage(this.serviceId, commandPayload, messageId);
              numberResend++;

              this._messageIdInfosMap.set(resendMessageId, {
                resendCount: resendCount,
                commandId: commandId,
                commandPayload: commandPayload,
                numberResend: numberResend
              });

              logger.debug("CommandManager %s - resendMessage: messageId=%s, resendMessageId=%s, numberResend=%s, resendCount=%s", this.serviceId, messageId, resendMessageId, numberResend, resendCount);
            } else {
              logger.debug("CommandManager %s - COMMAND_FAILED_RETRY: messageId=%s, numberResend=%s", this.serviceId, messageId, numberResend);

              this._emitter.emit(CommandManager.COMMAND_FAILED_RETRY, commandId);
            }
          }
        }
        /**
         * 
         * @param {*} commandPayload 
         * @param {*} strategy 
         * @returns: return true if valid commandPayload, else return false.
         */
        ;

        _proto._validateDublicateCommandType = function _validateDublicateCommandType(commandPayload, strategy) {
          var event = commandPayload.event;

          if (!strategy.canBeDuplicated) {
            // must not be duplicate.
            return this._executingCommandType.has(event) == false; // valid when has() return false.
          }

          return true;
        };

        return CommandManager;
      }());

      _defineProperty(CommandManager, "COMMAND_FAILED_CONC_OVER_LIMIT", 'COMMAND_FAILED_CONC_OVER_LIMIT');

      _defineProperty(CommandManager, "COMMAND_FAILED_DUPLICATE", 'COMMAND_FAILED_DUPLICATE');

      _defineProperty(CommandManager, "COMMAND_FAILED_RETRY", 'COMMAND_FAILED_RETRY');

      _defineProperty(CommandManager, "COMMAND_SEND_SUCCESSFULLY", 'COMMAND_SEND_SUCCESSFULLY');

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingScene1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './Config1985.ts', './gfLoadingScene.ts', './AssetBundle1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Config1985, gfLoadingScene, AssetBundle1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfLoadingScene = module.gfLoadingScene;
    }, function (module) {
      AssetBundle1985 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c2076F1jttKg4viyctipiNh", "LoadingScene1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingScene1985 = exports('LoadingScene1985', (_dec = ccclass('LoadingScene1985'), _dec(_class = /*#__PURE__*/function (_gfLoadingScene) {
        _inheritsLoose(LoadingScene1985, _gfLoadingScene);

        function LoadingScene1985() {
          return _gfLoadingScene.apply(this, arguments) || this;
        }

        var _proto = LoadingScene1985.prototype;

        _proto.initGameConfig = function initGameConfig() {
          if (!Config1985.instance) {
            new Config1985();
          }
        };

        _proto.initAssetBundle = function initAssetBundle() {
          if (!AssetBundle1985.instance) {
            new AssetBundle1985();
          }
        };

        return LoadingScene1985;
      }(gfLoadingScene)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfTouchListener.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sys, log, Component, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, removeEvents, gfReferenceManager, gfDataStore;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      log = module.log;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "c2117HIc3ROTokYWCONQBRB", "gfTouchListener", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfTouchListener = exports('gfTouchListener', (_dec = ccclass('gfTouchListener'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfTouchListener, _Component);

        function gfTouchListener() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_userFireFunc", void 0);

          _defineProperty(_assertThisInitialized(_this), "holdClick", void 0);

          _defineProperty(_assertThisInitialized(_this), "actionLastTime", void 0);

          return _this;
        }

        var _proto = gfTouchListener.prototype;

        _proto.onLoad = function onLoad() {
          this._userFireFunc = this._userFire.bind(this);
          this.holdClick = false;
          this.actionLastTime = Date.now();
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST, this.registerTouch, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER, this.resetOnExit, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME, this.removeTouchEvent, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.resetOnExit, this);
        };

        _proto.registerTouch = function registerTouch() {
          this.node.on(Node.EventType.TOUCH_START, this._onUserStartTouch, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this._onUserMoveTouch, this);
          this.node.on(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this._onUserEndTouch, this);

          if (!sys.isNative) {
            this.node.on(Node.EventType.MOUSE_MOVE, this._onUserMoveTouch, this);
          }
        };

        _proto._onUserStartTouch = function _onUserStartTouch(e) {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          var targetState = gfDataStore.instance.getTargetState();
          this.holdClick = true;

          this._updateTouchPos(e ? e.getUILocation() : null);

          if (selfInfo.isLockGun) return;

          if (targetState === gfBaseConfig.instance.TARGET_LOCK.AUTO_FIRE || targetState === gfBaseConfig.instance.TARGET_LOCK.AUTO_BOT) {
            return;
          }

          if (targetState === gfBaseConfig.instance.TARGET_LOCK.TARGET_ALL || targetState === gfBaseConfig.instance.TARGET_LOCK.TARGET_ONE) {
            if (!selfInfo.skillLock) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CHOOSE_FISH_BY_POINT, gfDataStore.instance.getMousePos());
              return;
            }
          }

          if (this._checkValidClick()) {
            this._onUserFire('touch_start');
          }

          this.actionLastTime = Date.now();
        };

        _proto._onUserMoveTouch = function _onUserMoveTouch(e) {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          if (selfInfo.isLockGun) return;

          if (selfInfo.skillLock) {
            this._updateTouchPos(e.getUILocation());

            var myPlayer = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfDeskStation());

            if (myPlayer) {
              myPlayer.rotateGun(gfDataStore.instance.getMousePos());
            }
          }

          if (this.holdClick) {
            this._updateTouchPos(e.getUILocation());
          }
        };

        _proto._onUserEndTouch = function _onUserEndTouch() {
          var selfInfo = gfDataStore.instance.getSelfInfo();
          this.holdClick = false;
          this.actionLastTime = Date.now();
          if (selfInfo.isLockGun) return;

          this._onUserFire('touch_end');
        };

        _proto._onUserFire = function _onUserFire(status) {
          if (status === void 0) {
            status = 'touch_start';
          }

          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.skillLock) {
            if (status === 'touch_end') {
              var myPlayer = gfReferenceManager.instance.getPlayerByDeskStation(selfInfo.DeskStation);

              if (myPlayer) {
                myPlayer.rotateGun(gfDataStore.instance.getMousePos());
                this.scheduleOnce(function () {
                  var data = {
                    SkillID: selfInfo.skillLock,
                    DeskStation: selfInfo.DeskStation
                  };
                  log('touch fire skill');
                  gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.SEND_FIRE_SKILL, data);
                }, 0);
              }
            }
          } else if (status === 'touch_end') {
            this.unschedule(this._userFireFunc);
          } else {
            this._userFire();

            this.schedule(this._userFireFunc, gfDataStore.instance.FireSpeed.NORMAL);
          }
        };

        _proto._userFire = function _userFire() {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_SEND_FIRE, {
            point: gfDataStore.instance.mousePos,
            lockFishID: -1
          });
        };

        _proto._checkValidClick = function _checkValidClick() {
          var deltaTime = Date.now() - this.actionLastTime;
          return deltaTime > 40;
        };

        _proto._updateTouchPos = function _updateTouchPos(pos) {
          if (!pos) return;
          gfDataStore.instance.setDataStore({
            mousePos: pos
          });
        };

        _proto.removeTouchEvent = function removeTouchEvent() {
          this.node.off(Node.EventType.TOUCH_START, this._onUserStartTouch, this);
          this.node.off(Node.EventType.TOUCH_MOVE, this._onUserMoveTouch, this);
          this.node.off(Node.EventType.TOUCH_END, this._onUserEndTouch, this);
          this.node.off(Node.EventType.TOUCH_CANCEL, this._onUserEndTouch, this);

          if (!sys.isNative) {
            this.node.off(Node.EventType.MOUSE_MOVE, this._onUserMoveTouch, this);
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          this.holdClick = false;
          gfDataStore.instance.setDataStore({
            mousePos: null
          });
          this.unschedule(this._userFireFunc);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
          this.removeTouchEvent();
        };

        return gfTouchListener;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/sha256.ts", ['cc', './crypto-core.ts'], function (exports) {
  'use strict';

  var cclegacy, CryptoJS;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      CryptoJS = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c26c2TLqLlIYIykCCfyqi7o", "sha256", undefined);

      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo; // Initialization and round constants tables

      var H = [];
      var K = []; // Compute constants

      (function () {
        function isPrime(n) {
          var sqrtN = Math.sqrt(n);

          for (var factor = 2; factor <= sqrtN; factor++) {
            if (!(n % factor)) {
              return false;
            }
          }

          return true;
        }

        function getFractionalBits(n) {
          return (n - (n | 0)) * 0x100000000 | 0;
        }

        var n = 2;
        var nPrime = 0;

        while (nPrime < 64) {
          if (isPrime(n)) {
            if (nPrime < 8) {
              H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
            }

            K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));
            nPrime++;
          }

          n++;
        }
      })(); // Reusable object


      var W = [];
      /**
       * SHA-256 hash algorithm.
       */

      var SHA256 = exports('default', C_algo.SHA256 = Hasher.extend({
        _doReset: function _doReset() {
          this._hash = new WordArray.init(H.slice(0));
        },
        _doProcessBlock: function _doProcessBlock(M, offset) {
          // Shortcut
          var H = this._hash.words; // Working variables

          var a = H[0];
          var b = H[1];
          var c = H[2];
          var d = H[3];
          var e = H[4];
          var f = H[5];
          var g = H[6];
          var h = H[7]; // Computation

          for (var i = 0; i < 64; i++) {
            if (i < 16) {
              W[i] = M[offset + i] | 0;
            } else {
              var gamma0x = W[i - 15];
              var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
              var gamma1x = W[i - 2];
              var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
              W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
            }

            var ch = e & f ^ ~e & g;
            var maj = a & b ^ a & c ^ b & c;
            var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
            var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
            var t1 = h + sigma1 + ch + K[i] + W[i];
            var t2 = sigma0 + maj;
            h = g;
            g = f;
            f = e;
            e = d + t1 | 0;
            d = c;
            c = b;
            b = a;
            a = t1 + t2 | 0;
          } // Intermediate hash value


          H[0] = H[0] + a | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c | 0;
          H[3] = H[3] + d | 0;
          H[4] = H[4] + e | 0;
          H[5] = H[5] + f | 0;
          H[6] = H[6] + g | 0;
          H[7] = H[7] + h | 0;
        },
        _doFinalize: function _doFinalize() {
          // Shortcuts
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8; // Add padding

          dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
          data.sigBytes = dataWords.length * 4; // Hash final blocks

          this._process(); // Return final computed hash


          return this._hash;
        },
        clone: function clone() {
          var clone = Hasher.clone.call(this);
          clone._hash = this._hash.clone();
          return clone;
        }
      }));
      /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.SHA256('message');
       *     var hash = CryptoJS.SHA256(wordArray);
       */

      C.SHA256 = Hasher._createHelper(SHA256);
      /**
       * Shortcut function to the HMAC's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       * @param {WordArray|string} key The secret key.
       *
       * @return {WordArray} The HMAC.
       *
       * @static
       *
       * @example
       *
       *     var hmac = CryptoJS.HmacSHA256(message, key);
       */

      C.HmacSHA256 = Hasher._createHmacHelper(SHA256);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup15.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c2773FhAKhCk7pJLUckRIZI", "gfFishGroup15", undefined);

      var gfFishGroup15 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup15() {}

        gfFishGroup15.create = function create() {
          var fishCount = [14, 14, 14, 14, 2, 2, 1, 1];
          var delayEach = 3.5;
          var i = 0;
          this.createFish15Arc(fishCount[i++], delayEach, 100, false);
          this.createFish15Arc(fishCount[i++], delayEach, 100, true);
          this.createFish15Arc(fishCount[i++], delayEach, 200, false);
          this.createFish15Arc(fishCount[i++], delayEach, 200, true);
          this.createFish15Direct(fishCount[i++], 8, 400, 40);
          this.createFish15Direct(fishCount[i++], 10, 550, 40);
          this.createSingleFish15Direct(10, 0, 40, false);
          this.createSingleFish15Direct(0, 0, 40, false);
        };

        gfFishGroup15.createFish15Arc = function createFish15Arc(fishCount, baseDelay, range, haveFirstDelay) {
          for (var i = 1; i <= fishCount / 2; ++i) {
            var delay = haveFirstDelay ? baseDelay * i + baseDelay / 2 : baseDelay * i;
            this.createSingleFish15Art(delay, range, false);
          }

          for (var _i = 1; _i <= fishCount / 2; ++_i) {
            var _delay = haveFirstDelay ? baseDelay * _i + baseDelay / 2 : baseDelay * _i;

            this.createSingleFish15Art(_delay, range, true);
          }
        };

        gfFishGroup15.createFish15Direct = function createFish15Direct(fishCount, baseDelay, range, speed) {
          for (var i = 1; i <= fishCount / 2; i++) {
            this.createSingleFish15Direct(baseDelay, range, speed, false);
          }

          for (var _i2 = 1; _i2 <= fishCount / 2; _i2++) {
            this.createSingleFish15Direct(baseDelay, range, speed, true);
          }
        };

        gfFishGroup15.createSingleFish15Art = function createSingleFish15Art(baseDelay, range, isRight) {
          if (isRight === void 0) {
            isRight = false;
          }

          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var AppSize = gfBaseConfig.instance.AppSize;
          var firstPos = {
            x: isRight ? AppSize.Width / 2 + range : AppSize.Width / 2 - range,
            y: -100
          };
          var fishSpeed = 80;
          var startPos = FishGroupHelper.convertFlipCoordinate(v2(firstPos.x, firstPos.y));
          var moveAction = new FishMoveActions(startPos);
          var moveOutTime = AppSize.Width / fishSpeed;
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: baseDelay
          });
          this.makeBezierLine(moveAction, moveOutTime, range, isRight, startPos);
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        gfFishGroup15.makeBezierLine = function makeBezierLine(moveAction, moveOutTime, range, isRight, startPos) {
          var AppSize = gfBaseConfig.instance.AppSize;
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var dir = center.y > startPos.y ? 1 : -1;
          var pos1 = v2(0, 0);
          var pos2 = v2(pos1.x, (AppSize.Height + 200 - range / 2) * dir);
          var pos3 = v2(isRight ? (AppSize.Width / 2 + range) * dir : (-AppSize.Width / 2 - range) * dir, (AppSize.Height + 200 - range) * dir);
          moveAction.appendAction(FISH_ACTION.gfBezierBy, {
            time: moveOutTime,
            points: [pos1, pos2, pos3]
          });
        };

        gfFishGroup15.createSingleFish15Direct = function createSingleFish15Direct(baseDelay, range, speed, isRight) {
          if (isRight === void 0) {
            isRight = false;
          }

          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var AppSize = gfBaseConfig.instance.AppSize;
          var firstPos = {
            x: isRight ? AppSize.Width / 2 + range : AppSize.Width / 2 - range,
            y: -300
          };
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var fishSpeed = speed;
          var startPos = FishGroupHelper.convertFlipCoordinate(v2(firstPos.x, firstPos.y));
          var dir = center.y > startPos.y ? 1 : -1;
          var angle = 90 * dir;
          var moveAction = new FishMoveActions(startPos, angle);
          var moveOutTime = (AppSize.Height + 600) / fishSpeed;
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: baseDelay
          });
          moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveOutTime,
            x: 0,
            y: (AppSize.Height + 600) * dir
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        return gfFishGroup15;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup10.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c33ecRkarROK4NscyvGAC/1", "gfFishGroup10", undefined);

      var gfFishGroup10 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup10() {}

        gfFishGroup10.create = function create() {
          var fishCount = [30, 20, 20, 20, 20, 20, 20];
          var delayEach = 3;
          var i = 0;
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
          this.createFish10Wave(fishCount[i], delayEach * i++);
        };

        gfFishGroup10.createFish10Wave = function createFish10Wave(fishCount, baseDelay) {
          var totalRotateTime = 0.5;

          for (var i = 1; i <= fishCount / 2; ++i) {
            var angle = gfFishGroupData.flipCoord * 90 - i / fishCount * 360;
            var rotateTime = totalRotateTime * i / fishCount;
            this.createSingleFish10(baseDelay, angle, rotateTime);
          }

          for (var _i = fishCount / 2 - 1; _i >= 0; --_i) {
            var _angle = gfFishGroupData.flipCoord * 90 + _i / fishCount * 360;

            var _rotateTime = totalRotateTime * _i / fishCount;

            this.createSingleFish10(baseDelay, _angle, _rotateTime);
          }
        };

        gfFishGroup10.createSingleFish10 = function createSingleFish10(baseDelay, angle, rotateTime) {
          var data = gfFishGroupData.getNextFishData();
          if (!data) return;
          var AppSize = gfBaseConfig.instance.AppSize;
          var startPos = FishGroupHelper.convertFlipCoordinate(v2(AppSize.Width / 2, -100));
          var center = v2(AppSize.Width / 2, AppSize.Height / 2);
          var fishSpeed = 80;
          var moveInTime = Math.abs(center.y - startPos.y) / fishSpeed;
          var moveAction = new FishMoveActions(startPos);
          moveAction.appendAction(FISH_ACTION.Delay, {
            time: baseDelay
          });
          moveAction.appendAction(FISH_ACTION.MoveBy, {
            time: moveInTime,
            x: 0,
            y: center.y - startPos.y
          });
          moveAction.appendAction(FISH_ACTION.RotateTo, {
            time: rotateTime,
            angle: angle
          }); // moveAction.appendAction(FISH_ACTION.Delay, { time: standTime });

          var moveOutTime = AppSize.Width / fishSpeed;
          moveAction.appendAction(FISH_ACTION.MoveByDistance, {
            time: moveOutTime,
            angle: angle * Math.PI / 180,
            distance: AppSize.Width
          });
          data.moveAction = moveAction;
          FishGroupHelper.createFishWithDelay(data);
        };

        return gfFishGroup10;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GeneralInitialization1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './gfNetworkParser.ts', './gfLocalize.ts', './DataStore1988.ts', './Config1988.ts', './NodePoolConfig1988.ts', './gfMainFSM.ts', './ReferenceManager1988.ts', './PoolManager1988.ts', './FishManager1988.ts', './MainController1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Component, gfEventEmitter, gfNetworkParser, gfLocalize, DataStore1988, Config1988, NodePoolConfig1988, gfMainFSM, ReferenceManager1988, PoolManager1988, FishManager1988, MainController1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      NodePoolConfig1988 = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }, function (module) {
      PoolManager1988 = module.default;
    }, function (module) {
      FishManager1988 = module.default;
    }, function (module) {
      MainController1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

      cclegacy._RF.push({}, "c345esB5LBM1IFREE/8LIXT", "GeneralInitialization1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GeneralInitialization1988 = exports('GeneralInitialization1988', (_dec = ccclass('GeneralInitialization1988'), _dec2 = property(JsonAsset), _dec3 = property(Prefab), _dec4 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GeneralInitialization1988, _Component);

        function GeneralInitialization1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "jsonLocalize", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gameObjectPrefabs", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "nodePoolAssetPrefab", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GeneralInitialization1988.prototype;

        _proto.onLoad = function onLoad() {
          this.initInstances();
        };

        _proto.initInstances = function initInstances() {
          //Init Localize
          new gfLocalize();
          gfLocalize.instance.initLocalizeConfig(this.jsonLocalize.json); //Init Event Emitter

          new gfEventEmitter(); //Init NetworkParser

          new gfNetworkParser(); //Init GameConfig

          if (!Config1988.instance) {
            new Config1988();
          } //Init Datastore


          new DataStore1988(); //Init ReferenceManager

          new ReferenceManager1988(); //Init Main FSM

          new gfMainFSM(); //Init Main Controller

          new MainController1988(); //Init Popup Controller
          //new PopupController();
          //Init Notify Controller
          //new NotifyController();

          new FishManager1988();
          new PoolManager1988(this.gameObjectPrefabs);
          new NodePoolConfig1988(this.nodePoolAssetPrefab);
        };

        _proto.loginGame = function loginGame() {
          MainController1988.instance.initToken();
          DataStore1988.instance.setDataStore({
            "currentSceneName": Config1988.instance.SceneName.Lobby
          });
        };

        return GeneralInitialization1988;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonLocalize", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gameObjectPrefabs", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "nodePoolAssetPrefab", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfGunSkill.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, log, Tween, sp, tween, Label, Component, gfBaseEvents, gfEventEmitter, gfBaseConfig, deepCopy, gfReferenceManager, gfDataStore;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      log = module.log;
      Tween = module.Tween;
      sp = module.sp;
      tween = module.tween;
      Label = module.Label;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      deepCopy = module.deepCopy;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "c3ee5XzUohDtJD6drvQKNZ3", "gfGunSkill", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfGunSkill = exports('gfGunSkill', (_dec = ccclass('gfGunSkill'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfGunSkill, _Component);

        function gfGunSkill() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "gun", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "skillEffect", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "skillCountDown", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "skillTitle", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "isMe", false);

          _defineProperty(_assertThisInitialized(_this), "effectIsMe", null);

          _defineProperty(_assertThisInitialized(_this), "index", -1);

          return _this;
        }

        var _proto = gfGunSkill.prototype;

        _proto.onLoad = function onLoad() {
          this.node["onPlayerSendFireSkill"] = this.onPlayerSendFireSkill.bind(this);
          this.node["onFireSkill"] = this.onFireSkill.bind(this);
        };

        _proto.initObj = function initObj(data) {
          this.isMe = data.DeskStation === gfDataStore.instance.getSelfDeskStation();
          var isHaveSkill = data.skillInfo && data.skillInfo.SkillID > 0;

          if (this.isMe) {
            var timeHide = gfDataStore.instance.getTimeHide();

            if (timeHide && timeHide >= 30000 || timeHide == null) {
              this.effectIsMe.active = true;
            }

            gfDataStore.instance.setDataStore({
              timeHide: null
            });
            if (this.effectIsMe.active) this.effectIsMe.active = !isHaveSkill;
            this.skillEffect.active = false;
            gfEventEmitter.instance.emit(gfBaseEvents.AUTO_BOT.TOGGLE_BUTTON, !isHaveSkill);
          }

          if (isHaveSkill) {
            var dataSpecialGun = {
              DeskStation: data.DeskStation,
              SkillID: data.skillInfo.SkillID
            };
            this.changeSpecialGun(dataSpecialGun);

            if (this.isMe) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
            }
          }
        };

        _proto.changeSpecialGun = function changeSpecialGun(data) {
          var SkillID = data.SkillID;

          switch (SkillID) {
            case gfBaseConfig.instance.SkillConfig.LASER:
              this.changeLaserGun(data);
              break;
          }
        };

        _proto.onFireSkill = function onFireSkill(data) {
          var SkillID = data.SkillID;

          switch (SkillID) {
            case gfBaseConfig.instance.SkillConfig.LASER:
              this.fireLaser(data);
              break;
          }
        };

        _proto.onPlayerSendFireSkill = function onPlayerSendFireSkill(data) {
          var SkillID = data.SkillID;

          switch (SkillID) {
            case gfBaseConfig.instance.SkillConfig.LASER:
              this.playerSendFireLaser();
              break;
          }
        };

        _proto.playerSendFireLaser = function playerSendFireLaser() {
          var listCatchLaser = deepCopy(gfDataStore.instance.getListCatchLaser());
          var data = {
            Angle: this.gun.angle,
            ListFish: listCatchLaser.length > 0 ? listCatchLaser : [-1],
            SkillID: gfBaseConfig.instance.SkillConfig.LASER
          };
          log('playerSendFireLaser', data.ListFish);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_FIRE_LASER, data);
          this.resetCountDownSkill();
          gfDataStore.instance.setSelfInfo({
            isLockGun: true
          });
        };

        _proto.fireLaser = function fireLaser(data) {
          var _this2 = this;

          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            if (player.isMe) {
              if (this.effectIsMe.active) this.effectIsMe.active = false;
              gfDataStore.instance.setSelfInfo({
                isLockGun: true,
                skillLock: 0
              });
              this.resetCountDownSkill();
            } else {
              this.gun.angle = data.Angle;

              player._playEffectFire(gfBaseConfig.instance.GunSkill.LASER);
            }
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.FIRE_LASER);
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.CLEAR_DROP_GUN_LASER, data.DeskStation);
          this.skillEffect.active = true;
          Tween.stopAllByTarget(this.skillEffect);
          var spine = this.skillEffect.getComponent(sp.Skeleton);
          spine.timeScale = 2;
          spine.setAnimation(0, 'Shoot', false);
          var duration = spine.findAnimation('Shoot').duration / spine.timeScale;
          tween(spine).delay(duration).call(function () {
            _this2.completedFXFireLaser(data);
          }).start();
          gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.CATCH_FISH_BY_SKILL, data);
        };

        _proto.changeLaserGun = function changeLaserGun(data) {
          var _this3 = this;

          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            if (player.isMe) {
              if (!gfDataStore.instance.isAutoBot()) {
                gfDataStore.instance.setDataStore({
                  targetState: gfBaseConfig.instance.TARGET_LOCK.NONE,
                  currentTargetState: gfBaseConfig.instance.TARGET_LOCK.NONE
                });
              }

              gfDataStore.instance.setSelfInfo({
                isLockGun: false,
                skillLock: gfBaseConfig.instance.SkillConfig.LASER
              });
              this.skillEffect.active = true;
              var spine = this.skillEffect.getComponent(sp.Skeleton);
              spine.setAnimation(0, 'Aim', false);

              if (gfDataStore.instance.isAutoBot()) {
                spine.setCompleteListener(function () {
                  _this3.playerSendFireLaser();

                  spine.setCompleteListener(function () {});
                });
              } else {
                spine.setCompleteListener(function () {});
                this.showSkillTitle();
                this.showSkillCountDown();
              }

              player.lockBet(true);
            }

            player._playEffectFire(gfBaseConfig.instance.GunSkill.LASER);
          }
        };

        _proto.completedFXFireLaser = function completedFXFireLaser(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          gfDataStore.instance.setDataStore({
            listCatchLaser: []
          });
          this.skillEffect.active = false;

          if (player) {
            if (player.isMe) {
              gfDataStore.instance.setSelfInfo({
                isLockGun: false
              });
              gfEventEmitter.instance.emit(gfBaseEvents.AUTO_BOT.TOGGLE_BUTTON, true);

              if (gfDataStore.instance.isAutoBot()) {
                player.lockBet(true);
              } else {
                gfDataStore.instance.setDataStore({
                  targetState: gfBaseConfig.instance.TARGET_LOCK.NONE,
                  currentTargetState: gfBaseConfig.instance.TARGET_LOCK.NONE
                });
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, true);
                gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_OLD_TARGET);
              }
            }

            player._updateGun();
          }
        };

        _proto.showSkillTitle = function showSkillTitle() {
          this.skillTitle.active = true;
          Tween.stopAllByTarget(this.skillTitle);
        };

        _proto.showSkillCountDown = function showSkillCountDown() {
          var _this4 = this;

          var countDown = gfBaseConfig.instance.SkillConfig.TIMEOUT;
          this.skillCountDown.active = true;
          Tween.stopAllByTarget(this.skillCountDown);
          this.skillCountDown.getComponent(Label).string = countDown.toString();
          tween(this.skillCountDown).delay(1).call(function () {
            countDown--;

            if (countDown <= 0) {
              _this4.resetCountDownSkill();

              log('30s auto fire skill');

              _this4.onPlayerSendFireSkill({
                SkillID: gfDataStore.instance.getSelfInfo().skillLock
              });
            } else {
              _this4.skillCountDown.getComponent(Label).string = countDown.toString();
            }
          }).union().repeat(gfBaseConfig.instance.SkillConfig.TIMEOUT).start();
        };

        _proto.resetCountDownSkill = function resetCountDownSkill() {
          if (this.skillTitle) {
            Tween.stopAllByTarget(this.skillTitle);
            this.skillTitle.active = false;
          }

          if (this.skillCountDown) {
            Tween.stopAllByTarget(this.skillCountDown);
            this.skillCountDown.active = false;
            this.skillCountDown.getComponent(Label).string = "0";
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          this.skillEffect.getComponent(sp.Skeleton).setCompleteListener(function () {});
          this.resetCountDownSkill();
          this.skillEffect && (this.skillEffect.active = false);
        };

        return gfGunSkill;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "skillEffect", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "skillCountDown", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "skillTitle", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EV1Bullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './EnemyBulletWithTrail.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, EnemyBulletWithTrail;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      EnemyBulletWithTrail = module.EnemyBulletWithTrail;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c4595flbCpFXZazK63KkndN", "EV1Bullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EV1Bullet = exports('EV1Bullet', (_dec = ccclass('EV1Bullet'), _dec(_class = /*#__PURE__*/function (_EnemyBulletWithTrail) {
        _inheritsLoose(EV1Bullet, _EnemyBulletWithTrail);

        function EV1Bullet() {
          return _EnemyBulletWithTrail.apply(this, arguments) || this;
        }

        return EV1Bullet;
      }(EnemyBulletWithTrail)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/AnimationCacheConfig.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Enum, sp, sys, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      sp = module.sp;
      sys = module.sys;
      Component = module.Component;
    }],
    execute: function () {
      exports('PlatformType', void 0);

      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp, _dec4, _dec5, _dec6, _dec7, _class4, _class5, _descriptor3, _descriptor4, _temp2;

      cclegacy._RF.push({}, "c4f88vC9N1B/o44RqT9YRau", "AnimationCacheConfig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          requireComponent = _decorator.requireComponent;
      var PlatformType;

      (function (PlatformType) {
        PlatformType[PlatformType["NATIVE_WINDOWS"] = 0] = "NATIVE_WINDOWS";
        PlatformType[PlatformType["NATIVE_LINUS"] = 1] = "NATIVE_LINUS";
        PlatformType[PlatformType["NATIVE_MACOS"] = 2] = "NATIVE_MACOS";
        PlatformType[PlatformType["NATIVE_ANDROID"] = 3] = "NATIVE_ANDROID";
        PlatformType[PlatformType["NATIVE_IPHONE"] = 4] = "NATIVE_IPHONE";
        PlatformType[PlatformType["NATIVE_IPAD"] = 5] = "NATIVE_IPAD";
        PlatformType[PlatformType["NATIVE_UNKNOWN"] = 999] = "NATIVE_UNKNOWN";
        PlatformType[PlatformType["WEB_MOBILE"] = 100] = "WEB_MOBILE";
        PlatformType[PlatformType["WEB_DESKTOP"] = 101] = "WEB_DESKTOP";
        PlatformType[PlatformType["OTHER"] = 9999] = "OTHER";
      })(PlatformType || (PlatformType = exports('PlatformType', {})));

      Enum(PlatformType);
      var CacheConfigData = exports('CacheConfigData', (_dec = ccclass("CacheConfigData"), _dec2 = property({
        type: PlatformType
      }), _dec3 = property({
        type: sp.AnimationCacheMode
      }), _dec(_class = (_class2 = (_temp = function CacheConfigData() {
        _initializerDefineProperty(this, "platformType", _descriptor, this);

        _initializerDefineProperty(this, "cacheMode", _descriptor2, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "platformType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return PlatformType.WEB_MOBILE;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cacheMode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return sp.AnimationCacheMode.REALTIME;
        }
      })), _class2)) || _class));
      var AnimationCacheConfig = exports('AnimationCacheConfig', (_dec4 = ccclass('AnimationCacheConfig'), _dec5 = requireComponent(sp.Skeleton), _dec6 = property({
        type: CacheConfigData
      }), _dec7 = property({
        type: CacheConfigData
      }), _dec4(_class4 = _dec5(_class4 = (_class5 = (_temp2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AnimationCacheConfig, _Component);

        function AnimationCacheConfig() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "configs", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fallBackConfig", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "spineSkeleton", null);

          return _this;
        }

        var _proto = AnimationCacheConfig.prototype;

        _proto.onEnable = function onEnable() {
          if (!this.spineSkeleton) this.spineSkeleton = this.getComponent(sp.Skeleton);
          var hasConfig = false;

          for (var i = 0; i < this.configs.length; i++) {
            var config = this.configs[i];

            if (config && Number(config.platformType) === Number(sys.platform)) {
              this.spineSkeleton.setAnimationCacheMode(config.cacheMode);
              hasConfig = true;
              break;
            }
          }

          if (!hasConfig) {
            this.spineSkeleton.setAnimationCacheMode(this.fallBackConfig.cacheMode);
          }
        };

        return AnimationCacheConfig;
      }(Component), _temp2), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "configs", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "fallBackConfig", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class5)) || _class4) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GeneralInitialization1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './NodePoolConfig1985.ts', './ReferenceManager1985.ts', './DataStore1985.ts', './Config1985.ts', './gfNetworkParser.ts', './PoolManager1985.ts', './gfLocalize.ts', './gfMainFSM.ts', './FishManager1985.ts', './MainController1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, JsonAsset, Prefab, Component, gfEventEmitter, NodePoolConfig1985, ReferenceManager1985, DataStore1985, Config1985, gfNetworkParser, PoolManager1985, gfLocalize, gfMainFSM, FishManager1985, MainController1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      JsonAsset = module.JsonAsset;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      NodePoolConfig1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      PoolManager1985 = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      FishManager1985 = module.default;
    }, function (module) {
      MainController1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "c53a3eS0RtPW5swv7dCA8lk", "GeneralInitialization1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GeneralInitialization1985 = exports('GeneralInitialization1985', (_dec = ccclass('GeneralInitialization1985'), _dec2 = property(JsonAsset), _dec3 = property(JsonAsset), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GeneralInitialization1985, _Component);

        function GeneralInitialization1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "jsonLocalize", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "jsonPathConfig", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gameObjectPrefabs", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "nodePoolAssetPrefab", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GeneralInitialization1985.prototype;

        _proto.onLoad = function onLoad() {
          this.initInstances();
        };

        _proto.initInstances = function initInstances() {
          //Init Localize
          new gfLocalize();
          gfLocalize.instance.initLocalizeConfig(this.jsonLocalize.json); //Init Event Emitter

          new gfEventEmitter(); //Init NetworkParser

          new gfNetworkParser(); //Init GameConfig

          if (!Config1985.instance) {
            new Config1985();
          } //Init Datastore


          new DataStore1985(); //Init ReferenceManager

          new ReferenceManager1985(); //Init Main FSM

          new gfMainFSM(); //Init Main Controller

          new MainController1985(); //Init Popup Controller
          //new PopupController();
          //Init Notify Controller
          //new NotifyController();

          new FishManager1985();
          FishManager1985.instance.initPathConfig(this.jsonPathConfig.json);
          new PoolManager1985(this.gameObjectPrefabs);
          new NodePoolConfig1985(this.nodePoolAssetPrefab);
        };

        _proto.loginGame = function loginGame() {
          MainController1985.instance.initToken();
          DataStore1985.instance.setDataStore({
            "currentSceneName": Config1985.instance.SceneName.Lobby
          });
        };

        return GeneralInitialization1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "jsonLocalize", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "jsonPathConfig", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "gameObjectPrefabs", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "nodePoolAssetPrefab", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SpineFish1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1985.ts', './Config1985.ts', './EnemyFireBullet.ts', './gfSpineFish.ts', './MoveComp1985.ts', './PathLayerConfig1985.ts', './FXSkillUltimateController1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, sp, gfEventEmitter, EventsCode1985, Config1985, EnemyFireBullet, gfSpineFish, MoveComp1985, PathLayerConfig, FXSkillUltimateController1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }, function (module) {
      gfSpineFish = module.gfSpineFish;
    }, function (module) {
      MoveComp1985 = module.MoveComp1985;
    }, function (module) {
      PathLayerConfig = module.PathLayerConfig;
    }, function (module) {
      FXSkillUltimateController1985 = module.FXSkillUltimateController1985;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "c8923AmkYZL9ZFzeYNGY8u4", "SpineFish1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SpineFish1985 = exports('SpineFish1985', (_dec = ccclass('SpineFish1985'), _dec(_class = (_temp = /*#__PURE__*/function (_gfSpineFish) {
        _inheritsLoose(SpineFish1985, _gfSpineFish);

        function SpineFish1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfSpineFish.call.apply(_gfSpineFish, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "moveComp", null);

          _defineProperty(_assertThisInitialized(_this), "fireComp", null);

          _defineProperty(_assertThisInitialized(_this), "FormationID", null);

          _defineProperty(_assertThisInitialized(_this), "IndexInGroup", null);

          _defineProperty(_assertThisInitialized(_this), "pathID", null);

          _defineProperty(_assertThisInitialized(_this), "payTable", null);

          return _this;
        }

        var _proto = SpineFish1985.prototype;

        _proto.initAssets = function initAssets(config) {
          this.zIndex = config.zIndex;
          this.payTable = config.payTable;
        };

        _proto.initFishData = function initFishData(data) {
          var _this2 = this;

          _gfSpineFish.prototype.initFishData.call(this, data);

          this.FormationID = data.FormationID;
          this.IndexInGroup = data.IndexInGroup - 1;
          this.pathID = data.PathID;
          this.updateZIndexByPath(this.pathID);
          this.fishAnim.paused = false;
          this.moveComp = this.getComponent(MoveComp1985);
          this.moveComp.setCompleteCallback(function () {
            _this2.onDie();
          });
          this.moveComp.setUpMove(data);
          this.fireComp = this.getComponent(EnemyFireBullet);

          if (this.fireComp && this._FishID != -1) {
            this.fireComp.setupFire(data);
          }

          this.removeAllEffectSkill();
          this.setOpacity(255);
        };

        _proto.removeAllEffectSkill = function removeAllEffectSkill() {
          this.node.children.forEach(function (item) {
            if (item.getComponent(FXSkillUltimateController1985)) {
              item.removeFromParent();
              item.destroy();
            }
          });
        };

        _proto.updateZIndexByPath = function updateZIndexByPath(pathId) {
          if (pathId > 0 && PathLayerConfig[pathId]) {
            this.updateZIndex(Config1985.instance.AirLayerBaseZIndex + PathLayerConfig[pathId]);
          } else {
            this.updateZIndex(this.zIndex);
          }
        };

        _proto.initAnimationCacheMode = function initAnimationCacheMode(cacheMode) {
          this.fishAnim.setAnimationCacheMode(cacheMode != undefined ? cacheMode : sp.Skeleton.AnimationCacheMode.REALTIME);
        };

        _proto.onCatch = function onCatch(data) {
          this.stopAllActions();
          this.resetColor();
          this._isDie = true;
          this.playEffectDie(data);
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.DESTROY_ENEMY);
        };

        _proto.getLockPositionByWorldSpace = function getLockPositionByWorldSpace() {
          return this.moveComp.getWorldPosition();
        };

        _proto.setColor = function setColor(color) {
          this.fishAnim.color = color;
        };

        _proto.playEffectDie = function playEffectDie(data) {
          if (data === void 0) {
            data = null;
          }

          if (this.fireComp) {
            this.fireComp.onDie();
          }

          this.moveComp.onDie(data);
        };

        _proto.getFishAnim = function getFishAnim() {
          return this.fishAnim;
        };

        _proto.update = function update(dt) {};

        return SpineFish1985;
      }(gfSpineFish), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NotifyStack1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './Config1988.ts', './gfNotifyStack.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, warn, Config1988, GfNotifyStack;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      GfNotifyStack = module.GfNotifyStack;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "c9ea0Ql98xJbocLM2G3102E", "NotifyStack1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NotifyStack1988 = exports('NotifyStack1988', (_dec = ccclass('NotifyStack1988'), _dec(_class = (_temp = /*#__PURE__*/function (_GfNotifyStack) {
        _inheritsLoose(NotifyStack1988, _GfNotifyStack);

        function NotifyStack1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfNotifyStack.call.apply(_GfNotifyStack, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "SPECIAL_SKILL", void 0);

          return _this;
        }

        var _proto = NotifyStack1988.prototype;

        _proto.extendInit = function extendInit() {
          this.SPECIAL_SKILL = {
            27: {
              name: "LASER",
              itemKind: Config1988.instance.FISH_KIND.LASER_CRAB
            },
            47: {
              name: "BOMB",
              itemKind: Config1988.instance.FISH_KIND.BOMB
            },
            46: {
              name: "DRILL",
              itemKind: Config1988.instance.FISH_KIND.DRILL
            }
          };
          this.NOTIFY_CONFIG.IDLE_TIME = 3;
        };

        _proto.formatData = function formatData(dataInput) {
          if (dataInput.formatted) return true;
          var data = dataInput.data,
              message = dataInput.message,
              type = dataInput.type;
          var format = this.NOTIFY_FORMAT[type];

          if (format) {
            var userName = data[format.userName];
            var itemKind = data[format.itemKind];

            if (type === this.NOTIFY_TYPE.SPECIAL_SKILL) {
              itemKind = this.SPECIAL_SKILL[data[format.itemKind]].itemKind;
            }

            var goldReward = data[format.goldReward];
            var newData = {
              userName: userName,
              itemKind: itemKind,
              goldReward: goldReward
            };
            dataInput.data = newData;
            dataInput.formatted = true;
            return true;
          }

          warn('Invalid message:', dataInput);
          return false;
        };

        return NotifyStack1988;
      }(GfNotifyStack), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfptSavedFormationItem.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfptDataType.ts', './gfptSavedItem.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, FORMATION_TYPE, GfptSavedItem;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      FORMATION_TYPE = module.FORMATION_TYPE;
    }, function (module) {
      GfptSavedItem = module.GfptSavedItem;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "c9f39H4VNlMaqE5bfBK3D+7", "gfptSavedFormationItem", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfptSavedFormationItem = exports('GfptSavedFormationItem', (_dec = ccclass('GfptSavedFormationItem'), _dec(_class = /*#__PURE__*/function (_GfptSavedItem) {
        _inheritsLoose(GfptSavedFormationItem, _GfptSavedItem);

        function GfptSavedFormationItem() {
          return _GfptSavedItem.apply(this, arguments) || this;
        }

        var _proto = GfptSavedFormationItem.prototype;

        _proto.setData = function setData(data, MAX_VALUE, width, height) {
          if (MAX_VALUE === void 0) {
            MAX_VALUE = 0;
          }

          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }

          this.MAX_VALUE = MAX_VALUE;
          this.drawBoardWidth = width;
          this.drawBoardHeight = height;
          var fData = data;

          if (fData.type == FORMATION_TYPE.Shape) {
            this.drawShape(fData);
          } else {
            this.drawLine(fData);
          }
        };

        _proto.drawShape = function drawShape(fData) {
          this.graphics.clear();

          for (var i = 0; i < fData.count; ++i) {
            var x = this.convertLogicToCoord(fData.pts[i].x);
            var y = this.convertLogicToCoord(fData.pts[i].y);
            this.graphics.circle(x, y, 2);
          }

          this.graphics.fill();
          this.graphics.close();
        };

        _proto.drawLine = function drawLine(data) {
          this.graphics.clear();

          for (var i = 0; i < data.count; ++i) {
            var x = this.convertLogicToCoord(0);
            var y = this.convertLogicToCoord(i * data.space);
            this.graphics.circle(x, y, 2);
          }

          this.graphics.fill();
          this.graphics.close();
        };

        return GfptSavedFormationItem;
      }(GfptSavedItem)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCoinLabel.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Label, UITransform, math, gfBaseConfig, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      UITransform = module.UITransform;
      math = module.math;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "cb4429oW5FBmJ42ATSrwfSZ", "gfCoinLabel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfCoinLabel = exports('gfCoinLabel', (_dec = ccclass('gfCoinLabel'), _dec(_class = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfCoinLabel, _gfNode);

        function gfCoinLabel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "delayFrame", 1);

          return _this;
        }

        var _proto = gfCoinLabel.prototype;

        _proto.initAssets = function initAssets(config) {
          if (config) {
            this.node.getComponent(Label).font = config;
          }
        };

        _proto.setString = function setString(value) {
          this.node.getComponent(Label).string = value;
        };

        _proto.setPosition = function setPosition(x, y, z) {
          if (y === void 0) {
            y = 0;
          }

          if (z === void 0) {
            z = 0;
          }

          this.node.setPosition(x, y, z);
        };

        _proto.update = function update(dt) {
          if (this.delayFrame == 0) {
            this.moveToScreenBox();
          }

          --this.delayFrame;
        };

        _proto.moveToScreenBox = function moveToScreenBox() {
          var _gfBaseConfig$instanc = gfBaseConfig.instance.realSize,
              Width = _gfBaseConfig$instanc.Width,
              Height = _gfBaseConfig$instanc.Height;

          var _this$node$getCompone = this.node.getComponent(UITransform),
              width = _this$node$getCompone.width,
              height = _this$node$getCompone.height;

          var _this$node$position = this.node.position,
              x = _this$node$position.x,
              y = _this$node$position.y;
          x = math.clamp(x, -Width / 2 + width / 2, Width / 2 - width / 2);
          y = math.clamp(y, -Height / 2 + height / 2, Height / 2 - height / 2);
          this.node.setPosition(x, y, 0);
        };

        _proto.unuse = function unuse() {
          this.delayFrame = 1;

          _gfNode.prototype.unuse.call(this);
        };

        return gfCoinLabel;
      }(gfNode), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BulletLayer1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './EventsCode1988.ts', './Config1988.ts', './ReferenceManager1988.ts', './gfBulletLayer.ts', './Drill1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, UITransform, v3, instantiate, registerEvent, getPointByDegrees, SetZIndex, removeEvents, EventCode, Config1988, ReferenceManager1988, gfBulletLayer, Drill1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      UITransform = module.UITransform;
      v3 = module.v3;
      instantiate = module.instantiate;
    }, function (module) {
      registerEvent = module.registerEvent;
      getPointByDegrees = module.getPointByDegrees;
      SetZIndex = module.SetZIndex;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }, function (module) {
      gfBulletLayer = module.gfBulletLayer;
    }, function (module) {
      Drill1988 = module.Drill1988;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "cc7826wZs1DnpqosUkpcOdL", "BulletLayer1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BulletLayer1988 = exports('BulletLayer1988', (_dec = ccclass('BulletLayer1988'), _dec2 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfBulletLayer) {
        _inheritsLoose(BulletLayer1988, _gfBulletLayer);

        function BulletLayer1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBulletLayer.call.apply(_gfBulletLayer, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "drillPrefab", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_arrDrillBullet", []);

          return _this;
        }

        var _proto = BulletLayer1988.prototype;

        _proto.initEvent = function initEvent() {
          _gfBulletLayer.prototype.initEvent.call(this);

          registerEvent(EventCode.GAME_LAYER.CREATE_BULLET_DRILL, this.createBulletDrill, this);
          registerEvent(EventCode.EFFECT_LAYER.REMOVE_DRILL, this.removeBulletDrill, this);
        };

        _proto.createBulletDrill = function createBulletDrill(data) {
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            var posFire = this.node.getComponent(UITransform).convertToNodeSpaceAR(player.gun.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 1)));
            var realPosFire = getPointByDegrees(posFire.x, posFire.y, posFire.x + Config1988.instance.gunRadius, posFire.y, Number.parseFloat(data.Angle));
            var drillBullet = instantiate(this.drillPrefab);
            this.node.addChild(drillBullet);
            SetZIndex(drillBullet, 600);
            drillBullet.setPosition(realPosFire.x, realPosFire.y, drillBullet.position.z);
            drillBullet.angle = data.Angle;
            this.scheduleOnce(function () {
              drillBullet.getComponent(Drill1988).initData(data);
            }, 0);

            this._arrDrillBullet.push(drillBullet);
          }
        };

        _proto.removeBulletDrill = function removeBulletDrill(data) {
          var nodeDrill = data.nodeDrill;

          var index = this._arrDrillBullet.indexOf(nodeDrill);

          if (index != -1) {
            this._arrDrillBullet.splice(index, 1);
          }
        };

        _proto.removeArrDrillBullet = function removeArrDrillBullet() {
          this._arrDrillBullet.forEach(function (drill) {
            drill.getComponent(Drill1988).setDie();
            drill.getComponent(Drill1988).removeAllTween();
            drill.removeFromParent();
            drill.destroy();
          });

          this._arrDrillBullet.length = 0;
        };

        _proto.onResumeGame = function onResumeGame() {
          this.unscheduleAllCallbacks();

          _gfBulletLayer.prototype.onResumeGame.call(this);

          this.removeArrDrillBullet();
        };

        _proto.onDestroy = function onDestroy() {
          this.unscheduleAllCallbacks();

          _gfBulletLayer.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return BulletLayer1988;
      }(gfBulletLayer), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "drillPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackgroundScrollLoop1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './Config1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, Component, Config1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      Config1985 = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "cc8d0IiI/BHuoWO8xIVJELW", "BackgroundScrollLoop1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackgroundScrollLoop1985 = exports('BackgroundScrollLoop1985', (_dec = ccclass('BackgroundScrollLoop1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackgroundScrollLoop1985, _Component);

        function BackgroundScrollLoop1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "height", 1560);

          _defineProperty(_assertThisInitialized(_this), "scrollSpeed", -50);

          return _this;
        }

        var _proto = BackgroundScrollLoop1985.prototype;

        _proto.start = function start() {
          this.height = this.node.getComponent(UITransform).height;
          this.scrollSpeed = Config1985.instance.BackgroundSpeed;
        };

        _proto.update = function update(dt) {
          var y = this.node.position.y + this.scrollSpeed * dt;

          if (y < -this.height) {
            y += this.height * 2;
          }

          this.node.setPosition(this.node.position.x, y, 0);
        };

        return BackgroundScrollLoop1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoveBySpine1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfDataStore.ts', './Config1985.ts', './MoveComp1985.ts', './FormationConfig1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, sp, gfDataStore, Config1985, MoveComp1985, FormationConfig1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      MoveComp1985 = module.MoveComp1985;
    }, function (module) {
      FormationConfig1985 = module.FormationConfig1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "ccd5813Px1INLBqUoi8qVh0", "MoveBySpine1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BASE_DELAY = 0.3;
      var MoveBySpine1985 = exports('MoveBySpine1985', (_dec = ccclass('MoveBySpine1985'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_MoveComp) {
        _inheritsLoose(MoveBySpine1985, _MoveComp);

        function MoveBySpine1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _MoveComp.call.apply(_MoveComp, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "fishAnim", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "delayTime", 0);

          _defineProperty(_assertThisInitialized(_this), "frameToDelay", void 0);

          return _this;
        }

        var _proto = MoveBySpine1985.prototype; // hack to delay enable box collider

        _proto.onEnable = function onEnable() {
          this.boxCollider.active = false;
          this.frameToDelay = 0;
        };

        _proto.setUpMove = function setUpMove(data) {
          this.node.setPosition(Config1985.instance.AppSize.Width / 2, Config1985.instance.AppSize.MaxHeight / 2, 0);
          this.isDie = false;
          var index = data.IndexInGroup - 1;
          var animationName = "path_" + data.PathID;
          var scaleX = data.Corner == 1 ? 1 : -1;
          this.node.setScale(scaleX, 1, 1);

          if (this.fishAnim.findAnimation(animationName)) {
            this.fishAnim.paused = false;
            this.playAnimation(animationName);
          } else {
            this.scheduleOnce(this.onComplete, 0);
            console.error("Fish Animation " + animationName + " not found!");
          }

          if (data.FormationID == 0) {
            this.delayFly(index * BASE_DELAY);
          } else {
            this.appendOffset(data.FormationID, index);
          }

          this.resumePosition(data);
        };

        _proto.playAnimation = function playAnimation(animationName) {
          this.fishAnim.setAnimation(0, animationName, false);
          this.fishAnim.setCompleteListener(this.onComplete);
        };

        _proto.resumePosition = function resumePosition(data) {
          var timeSpent = Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000);

          if (this.fishAnim.getCurrent(0) && timeSpent > this.delayTime) {
            if (this.fishAnim.getCurrent(0).animation.duration > timeSpent - this.delayTime) {
              this.fishAnim.updateAnimation(timeSpent - this.delayTime);
            } else {
              this.scheduleOnce(this.onComplete, 0);
            }
          } else {
            this.delayTime -= timeSpent;
          }
        };

        _proto.update = function update(dt) {
          if (this.isDie) return;
          this.updateDelayTime(dt);

          if (this.frameToDelay < 2) {
            ++this.frameToDelay;

            if (this.frameToDelay == 2) {
              this.boxCollider.active = true;
            }
          }
        };

        _proto.updateDelayTime = function updateDelayTime(dt) {
          if (this.delayTime <= 0) return;
          this.delayTime -= dt;

          if (this.delayTime <= 0) {
            this.fishAnim.paused = false;
            this.fishAnim.updateAnimation(-this.delayTime - dt); // -dt due to next skeleton system update will call 1 more updateAnimation

            this.delayTime = 0;
          }
        };

        _proto.delayFly = function delayFly(delay) {
          if (delay === void 0) {
            delay = 0;
          }

          this.delayTime = delay;

          if (delay > 0) {
            this.fishAnim.paused = true;
          }
        };

        _proto.appendOffset = function appendOffset(formationId, index) {
          var _FormationConfig1985$ = FormationConfig1985[formationId],
              count = _FormationConfig1985$.count,
              pts = _FormationConfig1985$.pts;

          if (index >= count) {
            console.error("IndexInGroup > formation count");
            return;
          }

          var _this$node$getPositio = this.node.getPosition(),
              x = _this$node$getPositio.x,
              y = _this$node$getPositio.y;

          x += pts[index].x;
          y += pts[index].y;
          this.node.setPosition(x, y, 0);
        };

        _proto.onDie = function onDie(data) {
          if (data === void 0) {
            data = null;
          }

          this.fishAnim.setCompleteListener(function () {});
          this.fishAnim.paused = true;

          _MoveComp.prototype.onDie.call(this, data);
        };

        return MoveBySpine1985;
      }(MoveComp1985), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNotifyComponent.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Node, SpriteAtlas, Font, BitmapFont, size, Color, Label, LabelOutline, Sprite, UITransform, Tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteAtlas = module.SpriteAtlas;
      Font = module.Font;
      BitmapFont = module.BitmapFont;
      size = module.size;
      Color = module.Color;
      Label = module.Label;
      LabelOutline = module.LabelOutline;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Tween = module.Tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "cce78C6FSZIOKBYNeXzKYbf", "gfNotifyComponent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfNotifyComponent = exports('GfNotifyComponent', (_dec = ccclass('GfNotifyComponent'), _dec2 = property(Node), _dec3 = property(SpriteAtlas), _dec4 = property(Font), _dec5 = property(BitmapFont), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfNotifyComponent, _Component);

        function GfNotifyComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_isShow", false);

          _defineProperty(_assertThisInitialized(_this), "_lstMessage", []);

          _initializerDefineProperty(_assertThisInitialized(_this), "contentNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "atlasFishNotify", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "defaultFontSize", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "defaultFont", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "moneyFont", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_defaultSpriteSize", size(40, 40));

          return _this;
        }

        var _proto = GfNotifyComponent.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.show = function show(data) {};

        _proto.hide = function hide() {};

        _proto.play = function play(data) {};

        _proto.validateData = function validateData(data) {};

        _proto.onStackMessage = function onStackMessage() {
          if (this._lstMessage.length > 0) {
            var data = this._lstMessage.shift();

            this.play(data);
          } else {
            this.hide();
          }
        };

        _proto.createNotifyMessage = function createNotifyMessage(data) {
          var _this2 = this;

          this.contentNode.removeAllChildren();
          Object.values(data).forEach(function (element) {
            if (element['type'] === "label") {
              _this2.decorLabel(element);
            } else {
              _this2.decorSprite(element);
            }
          });
        };

        _proto.decorLabel = function decorLabel(element) {
          var color = new Color("#FFFFFF"); //create node with label

          var node = new Node();
          node.parent = this.contentNode;
          var label = node.addComponent(Label);
          label.string = element.str;

          if (element.color) {
            node.getComponent(Label).color = color.fromHEX(element.color);
          }

          label.fontSize = element.fontSize ? element.fontSize : this.defaultFontSize;

          if (element.outline) {
            var outline = node.addComponent(LabelOutline);
            outline.color = color.fromHEX(element.outline.color);
            outline.width = element.outline.width;
          }

          if (element.isMoney && this.moneyFont) {
            label.font = this.moneyFont;
          } else if (this.defaultFont) {
            label.font = this.defaultFont;
          }

          label.verticalAlign = Label.VerticalAlign.CENTER;
          label.updateRenderData(true);
        };

        _proto.decorSprite = function decorSprite(element) {
          var node = new Node();
          node.parent = this.contentNode;
          var sprite = node.addComponent(Sprite);
          sprite.spriteFrame = this.atlasFishNotify.getSpriteFrame(element.spriteFrame);
          node.getComponent(UITransform).width = this._defaultSpriteSize.width;
          node.getComponent(UITransform).height = this._defaultSpriteSize.height;
        };

        _proto.onBeforeSceneChange = function onBeforeSceneChange() {
          //reset notify
          Tween.stopAllByTarget(this.node); //Clear children

          this.contentNode && this.contentNode.removeAllChildren();
        };

        _proto.onAfterSceneChange = function onAfterSceneChange() {
          this._isShow = false;

          if (this._lstMessage.length) {
            this.show(this._lstMessage.shift());
          } else {
            this.hide();
          }
        };

        return GfNotifyComponent;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "contentNode", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "atlasFishNotify", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "defaultFontSize", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 32;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "defaultFont", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "moneyFont", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WaveTransition1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts', './gfUtilities.ts', './EventsCode1988.ts', './Config1988.ts', './gfWaveTransition.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, sp, setOpacity, stopAllActions, registerEvent, SetZIndex, removeEvents, EventCode, Config1988, GfWaveTransition;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      stopAllActions = module.stopAllActions;
    }, function (module) {
      registerEvent = module.registerEvent;
      SetZIndex = module.SetZIndex;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      GfWaveTransition = module.GfWaveTransition;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "cd4afNxME1LcamPmmK4PHUO", "WaveTransition1988", undefined);

      var ccclass = _decorator.ccclass;
      var WaveTransition1988 = exports('WaveTransition1988', (_dec = ccclass('WaveTransition1988'), _dec(_class = (_temp = /*#__PURE__*/function (_GfWaveTransition) {
        _inheritsLoose(WaveTransition1988, _GfWaveTransition);

        function WaveTransition1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfWaveTransition.call.apply(_GfWaveTransition, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "isPlaying", void 0);

          return _this;
        }

        var _proto = WaveTransition1988.prototype;

        _proto.initEvents = function initEvents() {
          _GfWaveTransition.prototype.initEvents.call(this);

          registerEvent(EventCode.EFFECT_LAYER.PLAY_WAVE_TRANSITION_CUSTOM, this.playWaveTransition, this);
          setOpacity(this.wave, 0);
        };

        _proto.start = function start() {
          this.node.active = false;
        };

        _proto.playWaveTransition = function playWaveTransition(isPlayNow) {
          var _this2 = this;

          if (this.isPlaying) {
            return;
          }

          this.node.active = true;
          setOpacity(this.wave, 255);
          this.resetOnExit();
          this.node.active = true;
          SetZIndex(this.node.parent, Config1988.instance.Z_INDEX.WAITING + (isPlayNow ? 50 : -50));
          this.isPlaying = true;
          this.wave.getComponent(sp.Skeleton).timeScale = 1.35;
          this.wave.getComponent(sp.Skeleton).setAnimation(0, 'animation', false);

          if (isPlayNow) {
            this.wave.getComponent(sp.Skeleton).getCurrent(0).animationStart = this.wave.getComponent(sp.Skeleton).getCurrent(0).animationEnd * 0.2;
          }

          this.wave.getComponent(sp.Skeleton).setCompleteListener(function () {
            _this2.resetOnExit();
          });
        };

        _proto.resetOnExit = function resetOnExit() {
          stopAllActions(this.node);
          this.node.active = false;
          setOpacity(this.wave, 255);
          setOpacity(this.node, 255);
          this.isPlaying = false;
        };

        _proto.onDestroy = function onDestroy() {
          _GfWaveTransition.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return WaveTransition1988;
      }(GfWaveTransition), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TouchListener1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfEventEmitter.ts', './EventsCode1988.ts', './DataStore1988.ts', './gfTouchListener.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfEventEmitter, EventCode, DataStore1988, gfTouchListener;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      gfTouchListener = module.gfTouchListener;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "cddb2e0MJZHFa0Pf0Hja0ph", "TouchListener1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var TouchListener1988 = exports('TouchListener1988', (_dec = ccclass('TouchListener1988'), _dec(_class = /*#__PURE__*/function (_gfTouchListener) {
        _inheritsLoose(TouchListener1988, _gfTouchListener);

        function TouchListener1988() {
          return _gfTouchListener.apply(this, arguments) || this;
        }

        var _proto = TouchListener1988.prototype;

        _proto._onUserEndTouch = function _onUserEndTouch() {
          _gfTouchListener.prototype._onUserEndTouch.call(this);

          if (DataStore1988.instance.getIsSideMenuOpened() || DataStore1988.instance.getIsCompoButtonAutoShow()) {
            gfEventEmitter.instance.emit(EventCode.GAME_LAYER.CLOSE_ALL_MENU);
          }
        };

        return TouchListener1988;
      }(gfTouchListener)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackgroundController1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './EventsCode1988.ts', './gfBackgroundController.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, tween, setOpacity, gfBaseEvents, fadeOut, fadeIn, stopAllActions, gfEventEmitter, gfBaseConfig, EventCode, GfBackgroundController;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      fadeIn = module.fadeIn;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      GfBackgroundController = module.GfBackgroundController;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "ce04fmJhdpMgq+dwvOITF/f", "BackgroundController1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackgroundController1988 = exports('BackgroundController1988', (_dec = ccclass('BackgroundController1988'), _dec(_class = /*#__PURE__*/function (_GfBackgroundControll) {
        _inheritsLoose(BackgroundController1988, _GfBackgroundControll);

        function BackgroundController1988() {
          return _GfBackgroundControll.apply(this, arguments) || this;
        }

        var _proto = BackgroundController1988.prototype;

        _proto.onChangeRound = function onChangeRound(data) {
          var _this = this;

          if (data && data.isFishGroupToNormal) {
            var backgroundID = data.SceneKind;

            if (this._curBackgroundID === backgroundID) {
              return;
            }

            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.MOVE_OUT_ALL_FISHES, false);
            this._curBackgroundID = backgroundID;
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION);
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CHANGE_BUBBLE, this._curBackgroundID);
            setOpacity(this.background2.node, 0);
            this.background2.spriteFrame = this.arrDataBackground[this._curBackgroundID];
            tween(this.background1.node).delay(1).then(fadeOut(1.5)).call(function () {
              _this.background1.spriteFrame = _this.arrDataBackground[_this._curBackgroundID];
              setOpacity(_this.background1.node, 255);
            }).start();
            tween(this.background2.node).delay(1).then(fadeIn(1.5)).start();
          } else if (data && !data.isFishGroupToNormal) {
            tween(this.node).delay(4).call(function () {
              gfEventEmitter.instance.emit(EventCode.SOUND.WAVE);
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.FISH_GROUP);
            }).start();
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          stopAllActions(this.node);
        };

        return BackgroundController1988;
      }(GfBackgroundController)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSkillController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfGunSkill.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Component, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, removeEvents, gfReferenceManager, gfGunSkill;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfGunSkill = module.gfGunSkill;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "cf7b6/NqZFLR7A8yyH+aUu+", "gfSkillController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfSkillController = exports('gfSkillController', (_dec = ccclass('gfSkillController'), _dec2 = property(gfGunSkill), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfSkillController, _Component);

        function gfSkillController() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listGunSkill", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectIsMe", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfSkillController.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();

          for (var i = 0; i < this.listGunSkill.length; i++) {
            this.listGunSkill[i].index = i;
            this.listGunSkill[i].effectIsMe = this.effectIsMe;
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.SEND_FIRE_SKILL, this.playerSendFireSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, this.catchFishBySkill, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.CHANGE_GUN_LASER, this.playerChangeLaserGun, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.hideAllGunSkill, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          for (var i = 0; i < data.length; i++) {
            var userInfo = data[i];
            var player = gfReferenceManager.instance.getPlayerByDeskStation(userInfo.DeskStation);

            if (player) {
              var gunSkill = this.listGunSkill[player.index];

              if (gunSkill) {
                gunSkill.initObj(userInfo);
              }
            }
          }
        };

        _proto.playerJoinBoard = function playerJoinBoard(userInfo) {
          if (userInfo === void 0) {
            userInfo = null;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(userInfo.DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.index];

            if (gunSkill) {
              gunSkill.initObj(userInfo);
            }
          }
        };

        _proto.playerSendFireSkill = function playerSendFireSkill(data) {
          var SkillID = data.SkillID,
              DeskStation = data.DeskStation;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.index];

            if (gunSkill) {
              gunSkill.onPlayerSendFireSkill(data);
            }
          }
        };

        _proto.playerChangeLaserGun = function playerChangeLaserGun(DeskStation) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.index];

            if (gunSkill) {
              var dataSpecialGun = {
                DeskStation: DeskStation,
                SkillID: gfBaseConfig.instance.SkillConfig.LASER
              };
              gunSkill.changeSpecialGun(dataSpecialGun);
            }
          }
        };

        _proto.catchFishBySkill = function catchFishBySkill(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            switch (data.SkillID) {
              case gfBaseConfig.instance.SkillConfig.LASER:
                if (player.index > 1) data.Angle += 180;
                var gunSkill = this.listGunSkill[player.index];

                if (gunSkill) {
                  gunSkill.onFireSkill(data);
                }

                break;

              case gfBaseConfig.instance.SkillConfig.FISH_BOMB:
                gfEventEmitter.instance.emit(gfBaseEvents.FISH_LAYER.CATCH_FISH_BY_SKILL, data);
                break;
            }
          }
        };

        _proto.hideAllGunSkill = function hideAllGunSkill() {
          for (var i = 0; i < this.listGunSkill.length; ++i) {
            this.listGunSkill[i].resetOnExit && this.listGunSkill[i].resetOnExit();
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(data) {
          if (data === void 0) {
            data = null;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player) {
            var gunSkill = this.listGunSkill[player.index];

            if (gunSkill) {
              gunSkill.resetOnExit();
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfSkillController;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listGunSkill", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "effectIsMe", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkGameEvent.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d0a92F3NhZP05vMk5t3JiSN", "gfNetworkGameEvent", undefined);

      var gfNetworkGameEvent = exports('default', {
        LOBBY_LOGIN: 1001,
        LOBBY_MESSAGE: 1002,
        LOBBY_UPDATE_MY_GOLD: 1003,
        LOBBY_KICK: 1004,
        LOBBY_GET_ROOM_INFO: 1006,
        LOBBY_JACKPOT: 1007,
        LOBBY_NOTIFY: 1008,
        LOBBY_AUTO_JOIN_GAME: 1009,
        LOBBY_PING_PONG: 1999,
        LOBBY_UPDATE_EVENT_STATUS: 1010,
        GAME_LOGIN: 2001,
        GAME_LISTUSER_BOARD: 2002,
        GAME_PLAYER_ENTER_BOARD: 2003,
        GAME_MESSAGE: 2029,
        GAME_USER_FIRE: 2005,
        GAME_CREATE_FISH: 2006,
        GAME_CATCH_FISH: 2007,
        GAME_USER_EXIT: 2008,
        GAME_CREATE_FISH_GROUP: 2009,
        GAME_FIRE_SKILL: 2011,
        GAME_UPDATE_SKILL: 2012,
        GAME_UPDATE_CLEAR_FISH: 2013,
        GAME_CATCH_FISH_SKILL: 2014,
        GAME_CREATE_FISH_BOSS: 2015,
        GAME_CREATE_FISH_CROW: 2016,
        GAME_CATCH_RED_FISH: 2017,
        GAME_UPDATE_HP_FISH_BOSS: 2018,
        GAME_KICK: 2019,
        GAME_UPDATE_BOSS_DIE: 2020,
        GAME_CREATE_ENV_OBJECT: 2021,
        GAME_CREATE_FISH_GROUP_NEW: 2022,
        GAME_DROP_ITEM: 2023,
        GAME_PLAY_GLOBAL_FX: 2024,
        GAME_STOP_GLOBAL_FX: 2025,
        GAME_CHAT_EMOTICON: 2027,
        GAME_LIST_ITEM: 2030,
        //@TODO Freezeskill - should not in base
        // GAME_SELECT_ITEM: 2031,
        GAME_UPDATE_JACKPOT: 2033,
        GAME_WIN_JACKPOT: 2034,
        GAME_ROOM_DATA: 2035,
        GAME_NOTIFY: 2036,
        GAME_UPDATE_WALLET: 2037,
        GAME_CHANGE_ROUND: 2028,
        GAME_LIST_FISH_ON_SHOW: 2038,
        GAME_PING_PONG: 2999,
        // GAME_DRAGON_SWIM_OUT: 2041,
        GAME_DRAGON_BALL_DROPPED: 2042,
        GAME_DRAGON_END: 2043,
        GAME_DRAGON_WARNING: 2044,
        GAME_ACTIVE_FREEZE_GUN: 2045,
        GAME_STOP_FREEZE_GUN: 2046,
        GAME_FISH_FREEZE: 2047,
        GAME_GET_BOT_SETTING: 2048,
        GAME_SET_BOT_SETTING: 2049,
        GAME_STOP_BOT: 2050,
        GAME_FREEZE_GUN_STATE: 2051,
        GAME_IDLE_MESSAGE: 2052,
        GAME_END_FIRE_STORM: 2053,
        GAME_FIRE_STORM_CATCH_FISH: 2054,
        GAME_FIRE_STORM_DROP_ITEM: 2055,
        GAME_JOIN_DESK: 3001,
        GAME_JOIN_DESK_BUT_WALLET_ERROR: 2500,
        GAME_ON_CLOSE_TAB: 2800,
        GAME_PLAYER_UPDATE_POSITION: 2056,
        GAME_UPDATE_STREAK_INFO: 2061,
        GAME_ENEMY_FIRE_BULLET: 2060,
        GAME_PLAYER_DIE: 2058,
        GAME_PLAYER_UPDATE_SHIELD: 2057,
        GAME_PLAYER_SEND_PIECE_ENERGY: 2059,
        SEND_EVENT: {
          SEND_GET_INFO_GAME_ROOM: "SEND_GET_INFO_GAME_ROOM",
          SEND_EXIT_GAME_SERVER: "SEND_EXIT_GAME_SERVER",
          SEND_IDLE_MESSAGE: "SEND_IDLE_MESSAGE",
          SEND_GET_LIST_LIST_FISH_ON_SHOW: "SEND_GET_LIST_LIST_FISH_ON_SHOW",
          SEND_GUN_FIRE: "SEND_GUN_FIRE",
          SEND_CATCH_FISH: "SEND_CATCH_FISH"
        },
        NETWORK_EVENT: 'NETWORK_EVENT',
        NETWORK_WAITING: 'NETWORK_WAITING',
        NETWORK_CONNECT: 'NETWORK_CONNECT',
        NETWORK_ERROR: 'NETWORK_ERROR',
        NETWORK_CLOSE: 'NETWORK_CLOSE',
        NETWORK_POOR: 'NETWORK_POOR',
        NETWORK_DIE: 'NETWORK_DIE',
        AUTHEN_FAIL: 'AUTHEN_FAIL',
        LOGIN_IN_OTHER_DEVICE: 'LOGIN_IN_OTHER_DEVICE',
        NETWORK_RECONNECT: 'OUT_GAME',
        PINGPONG: 'PINGPONG',
        MSG_CODE: {
          USER_LOGGED: 101,
          NOT_ENOUGH_MONEY: 102,
          CANT_FIND_ROOM: 103,
          DUPLICATE_LOGIN: 104,
          NETWORK_ERROR: 105,
          NO_MONEY_LOBBY: 106,
          NO_PROMOTION_MONEY_LOBBY: 107,
          IG_CANT_FIND_ROOM: 201,
          IN_OTHER_GAME: 202,
          ROOM_FULL: 203,
          NO_MONEY2: 204,
          NO_MONEY_IN_GAME: 205,
          IG_DUPLICATE_LOGIN: 206,
          NO_ACTION: 207,
          CHARGE_MONEY: 208,
          OWN_LASER: 209,
          WALLET_ERROR: 300,
          OWN_DRILL: 301,
          OWN_FIRESTORM: 302,
          ACCOUNT_OUT_OF_MONEY_PROMOTION: 303,
          SERVER_MAINTAIN: 503,
          WAITING_TIMEOUT: -1
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MoveComp1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Component, gfBaseEvents, gfEventEmitter;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "d1e09TXRs9HiKG1CYY/pGdL", "MoveComp1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MoveComp1985 = exports('MoveComp1985', (_dec = ccclass('MoveComp1985'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MoveComp1985, _Component);

        function MoveComp1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "boxCollider", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "isDie", false);

          _defineProperty(_assertThisInitialized(_this), "onComplete", void 0);

          return _this;
        }

        var _proto = MoveComp1985.prototype;

        _proto.setUpMove = function setUpMove(data) {};

        _proto.setCompleteCallback = function setCompleteCallback(callback) {
          this.onComplete = callback;
        };

        _proto.getWorldPosition = function getWorldPosition() {
          return this.boxCollider.getWorldPosition();
        };

        _proto.getBoxCollider = function getBoxCollider() {
          return this.boxCollider;
        };

        _proto.playEffectWinInCatchFish = function playEffectWinInCatchFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
            data: data,
            fishKind: data.FishKind,
            fishPos: this.getWorldPosition()
          });
        };

        _proto.onDie = function onDie(data) {
          if (data === void 0) {
            data = null;
          }

          this.isDie = true;
          this.playEffectWinInCatchFish(data);
          this.onComplete && this.onComplete();
        };

        return MoveComp1985;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "boxCollider", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLayer1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './DataStore1985.ts', './Config1985.ts', './PoolManager1985.ts', './BigWin1985.ts', './FishManager1985.ts', './SkillUltimateComponent1985.ts', './gfBigWinWheel.ts', './gfEffectLayer.ts', './EffectNearWinLaser1985.ts', './DropSpecialGunFx1985.ts', './SkillBomb1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, UITransform, isValid, v3, instantiate, sp, getPostionInOtherNode, getRandomInt, gfBaseEvents, v3f, stopAllActions, gfEventEmitter, SetZIndex, registerEvent, randomBetween, EventsCode1985, ReferenceManager1985, DataStore1985, Config1985, PoolManager1985, BigWin1985, FishManager1985, SkillUltimateComponent1985, gfBigWinWheel, gfEffectLayer, EffectNearWinLaser1985, DropSpecialGunFx1985, SkillBomb1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      UITransform = module.UITransform;
      isValid = module.isValid;
      v3 = module.v3;
      instantiate = module.instantiate;
      sp = module.sp;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      v3f = module.v3f;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
      registerEvent = module.registerEvent;
      randomBetween = module.randomBetween;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      PoolManager1985 = module.default;
    }, function (module) {
      BigWin1985 = module.BigWin1985;
    }, function (module) {
      FishManager1985 = module.default;
    }, function (module) {
      SkillUltimateComponent1985 = module.SkillUltimateComponent1985;
    }, function (module) {
      gfBigWinWheel = module.gfBigWinWheel;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      EffectNearWinLaser1985 = module.EffectNearWinLaser1985;
    }, function (module) {
      DropSpecialGunFx1985 = module.DropSpecialGunFx1985;
    }, function (module) {
      SkillBomb1985 = module.SkillBomb1985;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "d25883leetAD44dcklk3IK8", "EffectLayer1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectLayer1985 = exports('EffectLayer1985', (_dec = ccclass('EffectLayer1985'), _dec2 = property({
        type: gfBigWinWheel,
        override: true,
        visible: false
      }), _dec3 = property(BigWin1985), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfEffectLayer) {
        _inheritsLoose(EffectLayer1985, _gfEffectLayer);

        function EffectLayer1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfEffectLayer.call.apply(_gfEffectLayer, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "bigWinWheels", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bigWinIsMe", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listFXSkillUltimate", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effNearWinLaser", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "spaceShip", void 0);

          return _this;
        }

        var _proto = EffectLayer1985.prototype;

        _proto.onLoad = function onLoad() {
          ReferenceManager1985.instance.setData({
            EffectLayer: this.node
          });
          this.initEvents();
          var fakeID = 0; // fake ID aircraft light

          this.initDataSkillUltimate(fakeID);
          SetZIndex(this.bigWinIsMe.node, Config1985.instance.Z_INDEX.BIGWIN);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.userExitBoard, this);
          registerEvent(gfBaseEvents.GAME_LAYER.BULLET_COLLIDE_FISH, this.playNetFX, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_PLAY_NETFX, this.playNetFX, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, this.playCoinReward, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_BIG_WIN_EFFECT, this.onPlayEffectWinInCatchFish, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.TRIGGER_BOMB, this.triggerBombFX, this);
          registerEvent(EventsCode1985.GAME_LAYER.CATCH_FISH_BY_SKILL_ULTIMATE, this.changeSkillUltimate, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, this.playDropGunLaser, this);
          registerEvent(EventsCode1985.EFFECT_LAYER.PLAY_LIST_EFFECT_IMPACT_LASER, this.playListEffectImpactLaser, this);
          registerEvent(EventsCode1985.EFFECT_LAYER.PLAY_LIST_EFFECT_NEAR_WIN_LASER, this.playListEffectNearWinLaser, this);
          registerEvent(EventsCode1985.EFFECT_LAYER.PLAY_EFFECT_BIG_WIN, this.playEffectFishSpecial, this);
        };

        _proto.initDataSkillUltimate = function initDataSkillUltimate(id) {
          this.spaceShip = Config1985.instance.SpaceShipConfig[id];
        };

        _proto.playCoinReward = function playCoinReward(rewardData) {
          var data = rewardData.data,
              fishPos = rewardData.fishPos,
              fishKind = rewardData.fishKind,
              skipUpdateWallet = rewardData.skipUpdateWallet;

          if (fishPos) {
            fishPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);

            if (data.SkillID !== Config1985.instance.SkillConfig.FISH_BOMB) {
              PoolManager1985.instance.createSmallExplosion({
                position: fishPos,
                fishKind: fishKind
              });
            }
          } else if (data.skillID === Config1985.instance.SkillConfig.LASER) {
            fishPos = this.getRandomPositionOutScreenByLaser(data);
          } else {
            fishPos = this.getRandomPositionOutScreen();
          }

          var isBigWin = data.GoldReward >= data.BulletMultiple * Config1985.instance.BIG_WIN_RATIO.BIG_WIN_VALUE;

          if (isBigWin && !data.isSkill && !skipUpdateWallet) {
            gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
              timeOneStep: 0.05,
              amplitude: 10
            });

            this._playBigWinEffect({
              deskStation: data.DeskStation,
              beganPos: fishPos,
              gold: data.GoldReward,
              bet: data.BulletMultiple,
              isSkill: data.isSkill,
              fishKind: fishKind
            });
          } else {
            this._playCoinEffect({
              deskStation: data.DeskStation,
              fishKind: fishKind,
              beganPos: fishPos,
              goldReward: data.GoldReward,
              isSkill: data.isSkill,
              bulletMultiple: data.BulletMultiple,
              skipUpdateWallet: skipUpdateWallet
            });
          }
        };

        _proto._playCoinEffect = function _playCoinEffect(data) {
          var _this2 = this;

          var deskStation = data.deskStation,
              fishKind = data.fishKind,
              beganPos = data.beganPos,
              goldReward = data.goldReward,
              isSkill = data.isSkill,
              bulletMultiple = data.bulletMultiple,
              skipUpdateWallet = data.skipUpdateWallet;

          if (goldReward === 0) {
            return;
          }

          var player = ReferenceManager1985.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.node);

          if (isSkill) {
            this.scheduleOnce(function () {
              _this2.playEffectCoin({
                beganPos: beganPos,
                goldReward: goldReward,
                bulletMultiple: bulletMultiple,
                endPos: endPos,
                isSkill: isSkill,
                player: player,
                deskStation: deskStation,
                skipUpdateWallet: skipUpdateWallet
              });
            }, 0.8);
          } else {
            this.playEffectCoin({
              beganPos: beganPos,
              goldReward: goldReward,
              bulletMultiple: bulletMultiple,
              endPos: endPos,
              isSkill: isSkill,
              player: player,
              deskStation: deskStation,
              skipUpdateWallet: skipUpdateWallet
            });
          }
        };

        _proto._playCoinAnim = function _playCoinAnim(data) {
          var goldReward = data.goldReward,
              bulletMultiple = data.bulletMultiple,
              beganPos = data.beganPos,
              endPos = data.endPos,
              isSkill = data.isSkill,
              deskStation = data.deskStation,
              playBigWin = data.playBigWin,
              skipUpdateWallet = data.skipUpdateWallet;
          var coinCount = this.calculateCoin(goldReward, bulletMultiple);

          if (!isSkill && !playBigWin) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_CATCH);
          }

          var player = ReferenceManager1985.instance.getPlayerByDeskStation(deskStation);

          for (var i = 0; i < coinCount; ++i) {
            var coinFx = player.isMe ? PoolManager1985.instance.getCoin(Config1985.instance.COIN_TYPE.MY_COIN) : PoolManager1985.instance.getCoin(Config1985.instance.COIN_TYPE.OTHER_COIN);
            this.node.addChild(coinFx.node);
            coinFx.node.setPosition(beganPos.x, beganPos.y, 0);
            coinFx.index = i;
            SetZIndex(coinFx.node, Config1985.instance.Z_INDEX.COIN);
            coinFx.startAnimation(0);
            coinFx.node.setScale(v3f(1));
            coinFx.setOpacity(0);
            coinFx.setFlyToPlayer(i, deskStation, goldReward, isSkill, skipUpdateWallet);
          }
        };

        _proto._playBigWinEffect = function _playBigWinEffect(data) {
          var deskStation = data.deskStation,
              beganPos = data.beganPos,
              gold = data.gold,
              bet = data.bet,
              isSkill = data.isSkill,
              fishKind = data.fishKind;

          if (gold === 0) {
            return;
          }

          var player = ReferenceManager1985.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.node);
          var labelPosition = Object.assign({}, beganPos);
          var playBigWin = true;

          this._playCoinLabelEffect({
            goldReward: gold,
            bulletMultiple: bet,
            labelPosition: labelPosition,
            beganPos: beganPos,
            endPos: endPos,
            isSkill: isSkill,
            isMe: player.isMe,
            deskStation: deskStation,
            playBigWin: playBigWin,
            skipUpdateWallet: playBigWin
          });

          this.onPlayEffectWinInCatchFish({
            player: player,
            gold: gold,
            bet: bet,
            fishKind: fishKind
          });
        };

        _proto.onPlayEffectWinInCatchFish = function onPlayEffectWinInCatchFish(data) {
          var player = data.player,
              gold = data.gold,
              bet = data.bet,
              fishKind = data.fishKind;

          var wheel = this._getWheel(player);

          if (wheel) {
            wheel.showAnimation({
              gold: gold,
              bet: bet,
              isMe: player.isMe,
              fishKind: fishKind
            });
          }
        };

        _proto._getWheel = function _getWheel(player) {
          if (player.isMe) {
            return this.bigWinIsMe;
          } else if (!player.isMe) {
            return player.node.getChildByName("BigWin1985").getComponent(BigWin1985);
          }

          return null;
        };

        _proto.userExitBoard = function userExitBoard() {};

        _proto.resetOnExit = function resetOnExit() {
          this.unscheduleAllCallbacks();

          this._listSkillItem.forEach(function (item) {
            stopAllActions(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          this._listSkillItem.length = 0;

          this._lisParticle.forEach(function (item) {
            stopAllActions(item);

            if (isValid(item)) {
              item.removeFromParent();
              item.destroy();
            }
          });

          this._lisParticle.length = 0;

          if (this.bigWinIsMe.hideAnimation) {
            this.bigWinIsMe.hideAnimation(false);
          }

          for (var i = 0; i < 4; ++i) {
            var player = ReferenceManager1985.instance.getPlayerByDeskStation(i);
            var bigWin = player.node.getChildByName("BigWin1985").getComponent(BigWin1985);

            if (bigWin.hideAnimation) {
              bigWin.hideAnimation(false);
            }
          }

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_BIG_WIN);
          this._queueAnim.length = 0;
          this._playingQueueAnim = false;
        };

        _proto.getRandomPositionOutScreen = function getRandomPositionOutScreen() {
          var SceneBox = Config1985.instance.SceneBox;
          var x = randomBetween(SceneBox.Left + 100, SceneBox.Right - 100);
          var y = randomBetween(SceneBox.Top, SceneBox.Top - 100);
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(ReferenceManager1985.instance.getAirLayer().getComponent(UITransform).convertToWorldSpaceAR(v3(x, y, 0)));
        };

        _proto.calculateCoin = function calculateCoin(goldReward, bullet) {
          var totalMultiply = Math.floor(goldReward / bullet);
          var arrMultiply = Config1985.instance.CoinMultiply;

          for (var coinCount = 0; coinCount < arrMultiply.length; ++coinCount) {
            if (totalMultiply <= arrMultiply[coinCount]) {
              return coinCount + 1;
            }
          }
        };

        _proto.changeSkillUltimate = function changeSkillUltimate(data) {
          switch (this.spaceShip.SkillID) {
            case 0:
              this.triggerSkillUltimate(data);
              break;

            case 1:
              this.triggerSkillUltimate(data);
              break;
          }
        };

        _proto.triggerSkillUltimate = function triggerSkillUltimate(data) {
          if (!data || !data.Level) return;
          var DeskStation = data.DeskStation,
              Level = data.Level;
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(DeskStation);
          var startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(player.node.getWorldPosition());
          if (!player) return;
          var skill = instantiate(this.listFXSkillUltimate[this.spaceShip.SkillID]);
          skill.setParent(this.node);
          skill.setPosition(startPos);
          SetZIndex(skill, 1);
          skill.getComponent(SkillUltimateComponent1985).initData({
            data: data.Data,
            skillID: this.spaceShip.SkillID
          });
          var spine = skill.getComponent(sp.Skeleton);
          spine.setAnimation(0, this.spaceShip.AnimName[Level - 1], false);
          gfEventEmitter.instance.emit(EventsCode1985.SOUND.FIRE_ELECTRIC_WAVE);
        };

        _proto.triggerBombFX = function triggerBombFX(rewardData) {
          var posNode = rewardData.posNode,
              data = rewardData.data;
          var itemBomb = instantiate(this.itemBomb);
          var startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(posNode);
          this.node.addChild(itemBomb);
          SetZIndex(itemBomb, 1);

          this._listSkillItem.push(itemBomb);

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.03,
            amplitude: 5
          });
          itemBomb.setPosition(startPos);
          itemBomb.getComponent(SkillBomb1985).initData(data);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB);
        };

        _proto.playDropGunLaser = function playDropGunLaser(_ref) {
          var fishPos = _ref.fishPos,
              deskStation = _ref.deskStation;
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(deskStation);
          if (!player) return;
          var itemLaserNode = instantiate(this.itemLaser);
          var itemLaserCompo = itemLaserNode.getComponent(DropSpecialGunFx1985);
          this.node.addChild(itemLaserNode);
          SetZIndex(itemLaserNode, 1);
          itemLaserNode.setPosition(itemLaserNode.parent.getComponent(UITransform).convertToNodeSpaceAR(fishPos));

          this._listSkillItem.push(itemLaserNode);

          itemLaserCompo.setData({
            deskStation: deskStation
          });
          itemLaserCompo.setFlyToPlayer(0, deskStation);
        };

        _proto.getRandomPositionOutScreenByLaser = function getRandomPositionOutScreenByLaser(data) {
          var SceneBox = Config1985.instance.SceneBox;
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);
          var width = 388;
          var randX = getRandomInt(player.node.position.x - width / 2, player.node.position.x + width / 2);
          var randY = randomBetween(SceneBox.Top, SceneBox.Top - 100);
          return this.node.getComponent(UITransform).convertToNodeSpaceAR(ReferenceManager1985.instance.getAirLayer().getComponent(UITransform).convertToWorldSpaceAR(v3(randX, randY, 0)));
        };

        _proto.playListEffectImpactLaser = function playListEffectImpactLaser(_ref2) {
          var listFishID = _ref2.listFishID,
              DeskStation = _ref2.DeskStation;
          if (!listFishID) return;
          listFishID.forEach(function (fishID) {
            var fish = FishManager1985.instance.getFishById(fishID);

            if (fish) {
              var data = {
                isLaser: true,
                isMe: DeskStation === DataStore1985.instance.getSelfDeskStation()
              };
              var netFX = PoolManager1985.instance.getNetFX(data);

              if (netFX) {
                fish.moveComp.getBoxCollider().addChild(netFX.node);
                netFX.node.setPosition(v3f(0));
              }

              gfEventEmitter.instance.emit(EventsCode1985.SOUND.IMPACT_LASER);
            }
          });
        };

        _proto.playListEffectNearWinLaser = function playListEffectNearWinLaser(listFishIDNearWin) {
          var _this3 = this;

          listFishIDNearWin.forEach(function (fishID) {
            var fish = FishManager1985.instance.getFishById(fishID);

            if (fish) {
              var effectNearWin = instantiate(_this3.effNearWinLaser);
              fish.moveComp.getBoxCollider().addChild(effectNearWin);
              effectNearWin.getComponent(EffectNearWinLaser1985).setCompFish(fish);
              effectNearWin.getComponent(EffectNearWinLaser1985).playAnimation();
              effectNearWin.setPosition(v3f(0));
            }
          });
        };

        return EffectLayer1985;
      }(gfEffectLayer), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bigWinWheels", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bigWinIsMe", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "listFXSkillUltimate", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "effNearWinLaser", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWaveTransition.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, UIOpacity, tween, v3, instantiate, Tween, Component, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      v3 = module.v3;
      instantiate = module.instantiate;
      Tween = module.Tween;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "d278d0jz3lMobZKknGa2Lgg", "gfWaveTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var offsetX = 200;
      var GfWaveTransition = exports('GfWaveTransition', (_dec = ccclass('GfWaveTransition'), _dec2 = property(Node), _dec3 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfWaveTransition, _Component);

        function GfWaveTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "wave", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "bubble", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfWaveTransition.prototype;

        _proto.onLoad = function onLoad() {
          this.node.getComponent(UIOpacity).opacity = 0;
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION, this.playWaveTransition, this);
          registerEvent(gfBaseEvents.COMMON.GAME_SHOW, this.resetOnExit, this);
        };

        _proto.playWaveTransition = function playWaveTransition() {
          var _this2 = this;

          var realSize = gfBaseConfig.instance.realSize;
          this.resetOnExit();
          this.node.getComponent(UIOpacity).opacity = 255;
          this.schedule(this.createBubble, 0.1);
          tween(this.wave).to(4, {
            position: v3(-(realSize.Width + offsetX), 0, this.wave.position.z)
          }).call(function () {
            _this2.unschedule(_this2.createBubble);

            _this2.node.getComponent(UIOpacity).opacity = 0;
          }).start();
        };

        _proto.createBubble = function createBubble() {
          var realSize = gfBaseConfig.instance.realSize;
          var Count = 5;

          for (var i = 0; i < Count; ++i) {
            var bubble = instantiate(this.bubble);
            bubble.parent = this.node;
            var bubblePosX = this.wave.position.x + Math.random() * 50 - 220;
            var bubblePosY = -realSize.Height / 2 + realSize.Height / Count * i + Math.random() * 100;
            bubble.setPosition(bubblePosX, bubblePosY, bubble.position.z);
          }
        };

        _proto.resetOnExit = function resetOnExit() {
          var realSize = gfBaseConfig.instance.realSize;
          this.node.getComponent(UIOpacity).opacity = 0;
          this.wave.setPosition(realSize.Width / 2 + offsetX, this.wave.position.y, this.wave.position.z);
          Tween.stopAllByTarget(this.wave);
          this.unschedule(this.createBubble);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfWaveTransition;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "wave", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "bubble", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NodePoolAssets1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfCustomDataType.ts', './gfNodePoolAssets.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, convertAssetArrayToObject, gfGunSkeletonData, gfNodePoolAssets;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfGunSkeletonData = module.gfGunSkeletonData;
    }, function (module) {
      gfNodePoolAssets = module.gfNodePoolAssets;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "d28bcBi+45GBodqDRle0D9d", "NodePoolAssets1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NodePoolAssets1988 = exports('NodePoolAssets1988', (_dec = ccclass('NodePoolAssets1988'), _dec2 = property(gfGunSkeletonData), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNodePoolAssets) {
        _inheritsLoose(NodePoolAssets1988, _gfNodePoolAssets);

        function NodePoolAssets1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNodePoolAssets.call.apply(_gfNodePoolAssets, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "gunSkeletonData", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "gunAssets", null);

          return _this;
        }

        var _proto = NodePoolAssets1988.prototype;

        _proto.initMapAssets = function initMapAssets() {
          _gfNodePoolAssets.prototype.initMapAssets.call(this);

          this.gunAssets = convertAssetArrayToObject(this.gunSkeletonData);
        };

        _proto.getGunSkeletonData = function getGunSkeletonData(name) {
          if (this.gunAssets[name] && this.gunAssets[name].animation) {
            return this.gunAssets[name].animation;
          }

          return null;
        };

        return NodePoolAssets1988;
      }(gfNodePoolAssets), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gunSkeletonData", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfExplosionAnimationClip.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, Animation, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d40a0zIbJ9HuYHRHJ9tAM4K", "gfExplosionAnimationClip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfExplosionAnimationClip = exports('gfExplosionAnimationClip', (_dec = ccclass('gfExplosionAnimationClip'), _dec(_class = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfExplosionAnimationClip, _gfNode);

        function gfExplosionAnimationClip() {
          return _gfNode.apply(this, arguments) || this;
        }

        var _proto = gfExplosionAnimationClip.prototype;

        _proto.onEnable = function onEnable() {
          var animation = this.node.getComponent(Animation);

          if (animation) {
            animation.play();
          }
        };

        _proto.onFinished = function onFinished() {
          this.returnPool();
        };

        return gfExplosionAnimationClip;
      }(gfNode)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSoundController.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './gfSoundBase.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents, gfDataStore, GfSoundBase;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      GfSoundBase = module.GfSoundBase;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d4a44ZS5/BNTpFxh/3WVu13", "gfSoundController", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfSoundController = exports('GfSoundController', (_dec = ccclass('GfSoundController'), _dec(_class = /*#__PURE__*/function (_GfSoundBase) {
        _inheritsLoose(GfSoundController, _GfSoundBase);

        function GfSoundController() {
          return _GfSoundBase.apply(this, arguments) || this;
        }

        var _proto = GfSoundController.prototype;

        _proto.initEvents = function initEvents() {
          _GfSoundBase.prototype.initEvents.call(this);

          this.scheduleResetVolume = this.onResumeSound.bind(this);
          this.currSoundBigwin = null;
          registerEvent(gfBaseEvents.SOUND.GUN_FIRE, this.playSfxFire, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_WAVE_TRANSITION, this.playSfxWaveTransition, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.PLAY_FISH_GROUP_TRANSITION, this.playSfxRoundSwitch, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_GOLD, this.playSfxGold, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_CATCH, this.playSfxCatch, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_BOMB, this.playSfxBomb, this);
          registerEvent(gfBaseEvents.SOUND.BIG_WIN, this.playSfxBigwin, this);
          registerEvent(gfBaseEvents.SOUND.MEGA_WIN, this.playSfxMegawin, this);
          registerEvent(gfBaseEvents.SOUND.STOP_BIG_WIN, this.stopSfxBigWin, this);
          registerEvent(gfBaseEvents.SOUND.FIRE_LASER, this.playSfxFireLaser, this);
          registerEvent(gfBaseEvents.EFFECT_LAYER.MINIBOSS_SMASH, this.playSfxMiniBossSmash, this);
          registerEvent(gfBaseEvents.SOUND.MINIBOSS_DEAD, this.playSfxMiniBossDead, this);
          registerEvent(gfBaseEvents.SOUND.MINIBOSS_HIT, this.playSfxMiniBossHit, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_SCREAM, this.playNewSfxWarning, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_DIE, this.playSfxDragonDie, this);
          registerEvent(gfBaseEvents.DRAGON.DROP_BALL, this.playSfxBallDrop, this);
          registerEvent(gfBaseEvents.DRAGON.DONE_BALL_DROP, this.playSfxBallInsert, this);
          registerEvent(gfBaseEvents.SOUND.BALL_TRAY_SHOW, this.playSfxBallTray, this);
          registerEvent(gfBaseEvents.SOUND.BALL_TRAY_DRAW, this.playSfxBallTrayDraw, this);
          registerEvent(gfBaseEvents.SOUND.COLLECT_BALL, this.playSfxCollectBalls, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_APPEAR, this.playSfxsWarning, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_BIG_WIN, this.playSfxJackpotExplode, this);
          registerEvent(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN, this.playSfxJackpotCoin, this);
          registerEvent(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN, this.stopSfxJackpotCoin, this);
          registerEvent(gfBaseEvents.SOUND.STOP_ALL_AUDIO, this.stopAllAudio, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_HIT_BALL, this.playDragonHitBall, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_BALL_REWARD, this.playSfxWinDragonBallShow, this);
          registerEvent(gfBaseEvents.SOUND.DRAGON_BALL_HIDE, this.playSfxWinDragonBallHide, this);
          registerEvent(gfBaseEvents.SOUND.RESUME_SOUND_BACKGROUND, this.resumeSoundBackground, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_GET_ITEM_FREEZE, this.playSfxGetItemFreeze, this);
          registerEvent(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER, this.playSfxGetItemLaser, this);
          registerEvent(gfBaseEvents.SOUND.CLICK_BET, this.playSFXClickBet, this);
          registerEvent(gfBaseEvents.SOUND.CLICK, this.playSfxClick, this);
        };

        _proto.resumeSoundBackground = function resumeSoundBackground(_ref) {
          var listFishNormal = _ref.listFishNormal,
              listFishGroup = _ref.listFishGroup;
          var dragon = listFishNormal.find(function (fish) {
            return fish.FishKind === gfBaseConfig.instance.FISH_KIND.DRAGON;
          });
          var miniBoss = !listFishGroup ? null : listFishGroup.find(function (fish) {
            return fish.FishKind === gfBaseConfig.instance.FISH_KIND.MINIBOSS;
          });

          if (!dragon && !miniBoss) {
            this.playBackGroundMusic(gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }
        };

        _proto.playBackGroundMusic = function playBackGroundMusic(data, init) {
          if (init === void 0) {
            init = false;
          }

          if (gfDataStore.instance.getCurBGMusic() === data && !init && this.currentMusic.audioSource.playing) return;
          this.unscheduleAllCallbacks();
          this.onResumeSound();

          switch (data) {
            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.MINI_BOSS:
              this.playFishBGM("bgmMiniboss", true);
              break;

            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.DRAGON:
              this.onResumeSound();
              this.playFishBGM("bgmDragon", true);
              this.schedule(this.playSfxDragonScream.bind(this), 6);
              break;

            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.LOBBY:
              this.playFishBGM("bgmLobby", true);
              break;

            case gfBaseConfig.instance.SOUND_BACKGROUND_CONFIG.IN_GAME:
              this.playFishBGM("bgmMain", true);
              break;
          }

          gfDataStore.instance.setCurBGMusic(data);
        };

        _proto.playSfxCatch = function playSfxCatch() {
          this.playFishSFX("sfxCatch");
        };

        _proto.playSfxGold = function playSfxGold() {
          this.playFishSFX("sfxGold");
        };

        _proto.playSfxFire = function playSfxFire() {
          this.playFishSFX("sfxGun_fire");
        };

        _proto.playSfxsWarning = function playSfxsWarning() {
          this.playFishSFX("sfxWarning");
        };

        _proto.playSfxBigwin = function playSfxBigwin() {
          this.unschedule(this.scheduleResetVolume);
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.4);
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxBig_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          }
        };

        _proto.playSfxMegawin = function playSfxMegawin() {
          this.unschedule(this.scheduleResetVolume);
          this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.4);
          this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.6);

          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
          }

          this.currSoundBigwin = this.playFishSFX("sfxMega_win");

          if (this.currSoundBigwin) {
            this.scheduleOnce(this.scheduleResetVolume, this.getDuration(this.currSoundBigwin));
          }
        };

        _proto.stopSfxBigWin = function stopSfxBigWin() {
          if (this.currSoundBigwin) {
            this.stopSound(this.currSoundBigwin);
            this.currSoundBigwin = null;
          }
        };

        _proto.playSfxBomb = function playSfxBomb() {
          this.playFishSFX("sfxBomb");
        };

        _proto.playSfxFreeze = function playSfxFreeze() {
          this.playFishSFX("sfxFreeze");
        };

        _proto.playSfxFireLaser = function playSfxFireLaser() {
          this.playFishSFX("sfxFire_laser");
        };

        _proto.playSfxJackpotExplode = function playSfxJackpotExplode() {
          this.playFishSFX("sfxJackpot_explode");
        };

        _proto.stopSfxJackpotCoin = function stopSfxJackpotCoin() {
          if (this.coinLoopId) {
            this.stopSound(this.coinLoopId);
            this.coinLoopId = null;
          }
        };

        _proto.playSfxJackpotCoin = function playSfxJackpotCoin() {
          this.coinLoopId = this.playFishSFX("sfxJackpot_coin", true, 0.4);
        };

        _proto.playDragonHitBall = function playDragonHitBall() {
          this.playFishSFX("sfxDragon_ball_drop");
        };

        _proto.playSfxBallDrop = function playSfxBallDrop() {
          this.playFishSFX("sfxBall_drop");
        };

        _proto.playSfxBallInsert = function playSfxBallInsert() {
          this.playFishSFX("sfxBall_insert");
        };

        _proto.playSfxBallTray = function playSfxBallTray() {
          this.playFishSFX("sfxBall_tray");
        };

        _proto.playSfxBallTrayDraw = function playSfxBallTrayDraw() {
          this.playFishSFX("sfxBall_tray_draw");
        };

        _proto.playSfxCollectBalls = function playSfxCollectBalls() {
          this.playFishSFX("sfxCollect_ball");
        };

        _proto.playSfxDragonDie = function playSfxDragonDie() {
          this.playFishSFX("sfxDragon_die");
        };

        _proto.playSfxDragonScream = function playSfxDragonScream() {
          this.playFishSFX("sfxDragon_scream");
        };

        _proto.playSfxWinDragonBallShow = function playSfxWinDragonBallShow() {
          this.playFishSFX("sfxShow_win_dragon_ball_put");
        };

        _proto.playSfxWinDragonBallHide = function playSfxWinDragonBallHide() {
          this.playFishSFX("sfxHide_win_dragon_ball_put");
        };

        _proto.playSfxGetItemFreeze = function playSfxGetItemFreeze() {
          this.playFishSFX("sfxGet_item");
        };

        _proto.playSfxGetItemLaser = function playSfxGetItemLaser() {
          this.playFishSFX("sfxGet_item");
        };

        _proto.playNewSfxWarning = function playNewSfxWarning() {
          this.stopAllEffects();

          if (this.isEnableSFX) {
            this.setEffectVolume(gfDataStore.instance.getCurrentSFXVolume() * 0.5);
          }

          if (this.isEnableBGM) {
            this.setMusicVolume(gfDataStore.instance.getCurrentBGMVolume() * 0.5);
          }

          this.playSfxDragonScream();
        };

        _proto.playSfxMiniBossDead = function playSfxMiniBossDead() {
          this.playFishSFX("sfxMiniboss_dead");
        };

        _proto.playSfxMiniBossSmash = function playSfxMiniBossSmash() {
          this.playFishSFX("sfxMiniboss_stomp");
        };

        _proto.playSfxMiniBossHit = function playSfxMiniBossHit() {
          var LENGTH_SFX_MINIBOSS_DAME = 3;
          var rand = Math.floor(Math.random() * LENGTH_SFX_MINIBOSS_DAME);
          this.playFishSFX("sfxMiniboss_takedame" + rand);
        };

        _proto.playSfxRoundSwitch = function playSfxRoundSwitch() {
          this.setMusicVolume(0);
          var soundSwitchRound = this.playFishSFX("sfxRound_switch");
          this.scheduleOnce(this.scheduleResetVolume, this.getDuration(soundSwitchRound));
        };

        _proto.playSfxWaveTransition = function playSfxWaveTransition() {
          this.setMusicVolume(0);
          var soundWave = this.playFishSFX("sfxWave");
          this.scheduleOnce(this.scheduleResetVolume, this.getDuration(soundWave));
        };

        _proto.stopAllAudio = function stopAllAudio() {
          this.unscheduleAllCallbacks();

          _GfSoundBase.prototype.stopAllAudio.call(this);
        };

        _proto.playSFXClickBet = function playSFXClickBet() {
          this.playSfxClick();
        };

        _proto.playSfxClick = function playSfxClick() {
          this.playFishSFX("sfxClick");
        };

        _proto.onDestroy = function onDestroy() {
          this.stopAllAudio();

          _GfSoundBase.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return GfSoundController;
      }(GfSoundBase)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup07Lite.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d548cUXyApJ653H3E5Rkq64", "gfFishGroup07Lite", undefined);

      var gfFishGroup7Lite = exports('default', /*#__PURE__*/function () {
        function gfFishGroup7Lite() {}

        gfFishGroup7Lite.create = function create() {
          var AppSize = gfBaseConfig.instance.AppSize;
          var fishCount = [24, 24, 24, 1, 1, 1, 1]; // const fishKind = [13, 3, 4, 25, 43, 25];
          //Duration : 40

          var Y1 = 140;
          var space = 175;
          var speed = 150;
          FishGroupHelper.createFishLine(fishCount[0] / 2, Y1, space, speed);
          FishGroupHelper.createFishLine(fishCount[0] / 2, AppSize.Height - Y1, space, speed);
          var offsetX = 80;
          var timeEach = 5;
          this.makeBezierLine(fishCount[1] / 2, v2(-100, -100), offsetX + 150, 3, timeEach);
          this.makeBezierLine(fishCount[1] / 2, v2(-100, AppSize.Height + 100), offsetX + 150, 3, timeEach);
          this.makeBezierLine(fishCount[2] / 2, v2(-300, 100), offsetX, 6, timeEach, timeEach / 2);
          this.makeBezierLine(fishCount[2] / 2, v2(-300, AppSize.Height - 100), offsetX, 6, timeEach, timeEach / 2);
          gfFishGroupData.updateCustomZIndex(555);
          var bigSpace = 400;
          var midY = 360;
          var bigOffset = -1000;
          var bigSpeed = 120;
          FishGroupHelper.createFishLine(fishCount[3], midY, bigSpace, bigSpeed, bigOffset);
          FishGroupHelper.createFishLine(fishCount[4], midY, bigSpace, bigSpeed, bigOffset - fishCount[3] * bigSpace);
          FishGroupHelper.createFishLine(fishCount[5], midY, bigSpace, bigSpeed, bigOffset - (fishCount[3] + fishCount[4]) * bigSpace);
          FishGroupHelper.createFishLine(fishCount[6], midY, bigSpace, bigSpeed, bigOffset - (fishCount[3] + fishCount[4] + fishCount[5]) * bigSpace);
        };

        gfFishGroup7Lite.makeBezierLine = function makeBezierLine(fishCount, startPos, offsetX, circleCount, moveInTime, circleTime) {
          if (circleTime === void 0) {
            circleTime = moveInTime;
          }

          var AppSize = gfBaseConfig.instance.AppSize;
          var width = (AppSize.Width - offsetX * 2) / circleCount;
          var height = width * 0.7;
          var x = offsetX - startPos.x;

          if (gfFishGroupData.isFlipped()) {
            startPos.x = AppSize.Width - startPos.x;
            startPos.y = AppSize.Height - startPos.y;
          }

          var y = 360 - startPos.y;

          for (var i = 0; i < fishCount; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = +i;
            var flip = y > 0 ? 1 : -1;
            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });
            data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: moveInTime,
              points: [v2(gfFishGroupData.flipCoord * x * 0.65, 0), v2(gfFishGroupData.flipCoord * x, y / 3), v2(gfFishGroupData.flipCoord * x, y)]
            });

            for (var j = 0; j < circleCount; ++j) {
              data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: circleTime,
                points: [v2(0, flip * height), v2(gfFishGroupData.flipCoord * width, flip * height), v2(gfFishGroupData.flipCoord * width, 0)]
              });
              flip *= -1;
            }

            var flipRate = circleCount % 2 ? -1 : 1;
            data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
              time: moveInTime,
              points: [v2(0, flipRate * y / 3), v2(gfFishGroupData.flipCoord * x * 0.35, flipRate * y), v2(gfFishGroupData.flipCoord * x, flipRate * y)]
            });
            FishGroupHelper.createFishWithDelay(data);
          }
        };

        return gfFishGroup7Lite;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolManager1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './NodePoolConfig1985.ts', './ReferenceManager1985.ts', './Config1985.ts', './gfPoolManager.ts', './ExplodeController1985.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, SetZIndex, NodePoolConfig1985, ReferenceManager1985, Config1985, gfPoolManager, ExplodeController1985;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      NodePoolConfig1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      ExplodeController1985 = module.ExplodeController1985;
    }],
    execute: function () {
      exports('POOL_TYPE', void 0);

      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "d5d63xTCwFKu4h4zaLR2gRm", "PoolManager1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var POOL_TYPE;

      (function (POOL_TYPE) {
        POOL_TYPE[POOL_TYPE["SpineFish"] = 0] = "SpineFish";
        POOL_TYPE[POOL_TYPE["SpriteFish"] = 1] = "SpriteFish";
        POOL_TYPE[POOL_TYPE["Bullet"] = 2] = "Bullet";
        POOL_TYPE[POOL_TYPE["NetFX"] = 3] = "NetFX";
        POOL_TYPE[POOL_TYPE["Coin"] = 4] = "Coin";
        POOL_TYPE[POOL_TYPE["LuckyEffect"] = 5] = "LuckyEffect";
        POOL_TYPE[POOL_TYPE["FreezeEffect"] = 6] = "FreezeEffect";
        POOL_TYPE[POOL_TYPE["LabelCoin"] = 7] = "LabelCoin";
        POOL_TYPE[POOL_TYPE["BigExplosion"] = 8] = "BigExplosion";
        POOL_TYPE[POOL_TYPE["SmallExplosion"] = 9] = "SmallExplosion";
        POOL_TYPE[POOL_TYPE["DragonBall"] = 10] = "DragonBall";
        POOL_TYPE[POOL_TYPE["EnvObject"] = 11] = "EnvObject";
        POOL_TYPE[POOL_TYPE["ES_1"] = 12] = "ES_1";
        POOL_TYPE[POOL_TYPE["ES_2"] = 13] = "ES_2";
        POOL_TYPE[POOL_TYPE["ES_3"] = 14] = "ES_3";
        POOL_TYPE[POOL_TYPE["ES_4"] = 15] = "ES_4";
        POOL_TYPE[POOL_TYPE["ES_5"] = 16] = "ES_5";
        POOL_TYPE[POOL_TYPE["ES_6"] = 17] = "ES_6";
        POOL_TYPE[POOL_TYPE["ET_1"] = 18] = "ET_1";
        POOL_TYPE[POOL_TYPE["EV_1"] = 19] = "EV_1";
        POOL_TYPE[POOL_TYPE["EV_2"] = 20] = "EV_2";
        POOL_TYPE[POOL_TYPE["EV_3"] = 21] = "EV_3";
        POOL_TYPE[POOL_TYPE["EV_4"] = 22] = "EV_4";
        POOL_TYPE[POOL_TYPE["EV_5"] = 23] = "EV_5";
        POOL_TYPE[POOL_TYPE["EV_6"] = 24] = "EV_6";
        POOL_TYPE[POOL_TYPE["EC_1"] = 25] = "EC_1";
        POOL_TYPE[POOL_TYPE["EC_2"] = 26] = "EC_2";
        POOL_TYPE[POOL_TYPE["EC_3"] = 27] = "EC_3";
        POOL_TYPE[POOL_TYPE["EC_4"] = 28] = "EC_4";
        POOL_TYPE[POOL_TYPE["AL_1"] = 29] = "AL_1";
        POOL_TYPE[POOL_TYPE["AL_2"] = 30] = "AL_2";
        POOL_TYPE[POOL_TYPE["SP_1"] = 31] = "SP_1";
        POOL_TYPE[POOL_TYPE["SP_2"] = 32] = "SP_2";
        POOL_TYPE[POOL_TYPE["BULLET_1"] = 33] = "BULLET_1";
        POOL_TYPE[POOL_TYPE["BULLET_2"] = 34] = "BULLET_2";
        POOL_TYPE[POOL_TYPE["BULLET_3"] = 35] = "BULLET_3";
        POOL_TYPE[POOL_TYPE["BULLET_4"] = 36] = "BULLET_4";
        POOL_TYPE[POOL_TYPE["BULLET_5"] = 37] = "BULLET_5";
        POOL_TYPE[POOL_TYPE["BULLET_6"] = 38] = "BULLET_6";
        POOL_TYPE[POOL_TYPE["BULLET_7"] = 39] = "BULLET_7";
        POOL_TYPE[POOL_TYPE["BULLET_8"] = 40] = "BULLET_8";
        POOL_TYPE[POOL_TYPE["BULLET_9"] = 41] = "BULLET_9";
        POOL_TYPE[POOL_TYPE["BULLET_10"] = 42] = "BULLET_10";
        POOL_TYPE[POOL_TYPE["FINAL_INDEX"] = 43] = "FINAL_INDEX";
      })(POOL_TYPE || (POOL_TYPE = exports('POOL_TYPE', {})));

      var PoolManager1985 = exports('default', (_dec = ccclass('PoolManager1985'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfPoolManager) {
        _inheritsLoose(PoolManager1985, _gfPoolManager);

        function PoolManager1985(listPrefab) {
          var _this;

          _this = _gfPoolManager.call(this, listPrefab) || this;
          PoolManager1985.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = PoolManager1985.prototype;

        _proto.initPools = function initPools() {
          this.pools = []; //type, prefabName, mainComponent, count
          //this.initPool(POOL_TYPE.SpineFish, "SpineFish1985", "SpineFish1985", 25);
          // this.initPool(POOL_TYPE.SpriteFish, "SpriteFish", "gfSpriteFish", 25);

          this.initPool(POOL_TYPE.Coin, "Coin1985", "CoinFX1985", 10);
          this.initPool(POOL_TYPE.Bullet, "Bullet1985", "Bullet1985", 10);
          this.initPool(POOL_TYPE.NetFX, "NetFX1985", "NetFX1985", 5);
          this.initPool(POOL_TYPE.LabelCoin, "LabelCoin1985", "gfCoinLabel", 5);
          this.initPool(POOL_TYPE.SmallExplosion, "SmallExplosion1985", "gfExplosionSpine", 1);
          this.initPool(POOL_TYPE.BigExplosion, "BigExplosion1985", "gfExplosionSpine", 1);
          this.initPool(POOL_TYPE.EnvObject, "EnvObject1985", "EnvObject1985", 5);
          this.initPool(POOL_TYPE.ES_1, "EnemyES1", "SpineFish1985", 5);
          this.initPool(POOL_TYPE.ES_2, "EnemyES2", "SpineFish1985", 5);
          this.initPool(POOL_TYPE.ES_5, "EnemyES5", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.ES_6, "EnemyES6", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.EV_1, "EnemyEV1", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.EV_3, "EnemyEV3", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.EV_5, "EnemyEV5", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.EV_6, "EnemyEV6", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.EC_1, "EnemyEC1", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.EC_2, "EnemyEC2", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.SP_1, "EnemySP1", "SpineFish1985", 1);
          this.initPool(POOL_TYPE.SP_2, "EnemySP2", "EnemySP2", 1);
          this.initPool(POOL_TYPE.BULLET_1, "EV6Bullet", "EnemyBullet", 1);
          this.initPool(POOL_TYPE.BULLET_2, "ES2Bullet", "EnemyBullet", 1);
          this.initPool(POOL_TYPE.BULLET_3, "EC1Bullet", "EnemyBullet", 1);
          this.initPool(POOL_TYPE.BULLET_4, "EV1Bullet", "EnemyBullet", 1);
          this.initPool(POOL_TYPE.BULLET_5, "ES6Bullet", "EnemyBullet", 1);
          this.initPool(POOL_TYPE.BULLET_6, "EC2Bullet", "EnemyBullet", 1);
          this.initPool(POOL_TYPE.BULLET_8, "EV5Bullet", "EnemyBullet", 1);
          this.listPrefab = null;
        };

        _proto.getNetFX = function getNetFX(data) {
          var kind;

          if (data.isLaser) {
            kind = Config1985.instance.NetFx.ElectricNet;
          } else {
            kind = Config1985.instance.NetFx.NormalNet;
          }

          var config = NodePoolConfig1985.instance.getNetFXConfig(kind);
          if (!config) return null;
          var netFx = this.getObjectMainComponentByType(POOL_TYPE.NetFX);
          config.kind = kind;
          config.isMe = data.isMe;
          netFx.initAssets(config);
          return netFx;
        };

        _proto.getCoin = function getCoin(kind) {
          var config = NodePoolConfig1985.instance.getCoinConfig(kind);
          if (!config) return null;
          var coin = this.getObjectMainComponentByType(POOL_TYPE.Coin);
          coin.initAssets(config);
          return coin;
        };

        _proto.getFishWithData = function getFishWithData(data) {
          var fish = this.getFishByKind(data.FishKind);
          if (!fish) return null;
          fish.initFishData(data);
          return fish;
        };

        _proto.getFishByKind = function getFishByKind(kind) {
          var config = NodePoolConfig1985.instance.getFishConfig(kind);
          if (!config) return null;
          var fishType = POOL_TYPE[config.name];
          var fishNode = this.getObjectByType(fishType);

          if (fishNode) {
            var fish = fishNode.getComponent(this.MAIN_COMPONENT[fishType]);
            fish.setPoolManager(this.pools[fishType]);
            var nodeParent = config.isGroundLayer ? ReferenceManager1985.instance.getGroundLayer() : ReferenceManager1985.instance.getAirLayer();
            fish.node.setParent(nodeParent);
            fish.initAssets(config);
            return fish;
          }

          return null;
        };

        _proto.getEnvObjectByKind = function getEnvObjectByKind(data) {
          var EnvObjectKind = data.EnvObjectKind,
              PosX = data.PosX;
          var config = NodePoolConfig1985.instance.getEnvObjectConfig(EnvObjectKind);
          if (!config) return null;
          var envObjectType = POOL_TYPE.EnvObject;
          var envObjectNode = this.getObjectByType(envObjectType);

          if (envObjectNode) {
            var envObject = envObjectNode.getComponent(this.MAIN_COMPONENT[envObjectType]);
            envObject.setPoolManager(this.pools[envObjectType]);
            var nodeParent = ReferenceManager1985.instance.getEnvObjectGroundLayer();
            envObject.node.setParent(nodeParent);
            envObject.initAssets(config);
            envObject.initData(data);
            return envObject;
          }

          return null;
        };

        _proto.createSmallExplosion = function createSmallExplosion(_ref) {
          var position = _ref.position,
              fishKind = _ref.fishKind;
          var explosion = this.getObjectByType(POOL_TYPE.SmallExplosion);
          explosion.getComponent(ExplodeController1985).initData(fishKind);
          explosion.parent = ReferenceManager1985.instance.getEffectLayer();
          explosion.position = position;
          var zIndex = 0;

          if (fishKind) {
            zIndex = NodePoolConfig1985.instance.getFishConfig(fishKind).zIndex;
          }

          SetZIndex(explosion, zIndex);
          return explosion;
        };

        _proto.getEnemyBullet = function getEnemyBullet(type) {
          return this.getObjectMainComponentByType(type);
        };

        return PoolManager1985;
      }(gfPoolManager), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NetFX1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseConfig.ts', './gfUtilities.ts', './gfNetFX.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, sys, gfBaseConfig, SetZIndex, gfNetFX;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sys = module.sys;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfNetFX = module.gfNetFX;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d6070sYMTBF87v0O/NL2+N3", "NetFX1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var NetFX1988 = exports('NetFX1988', (_dec = ccclass('NetFX1988'), _dec(_class = /*#__PURE__*/function (_gfNetFX) {
        _inheritsLoose(NetFX1988, _gfNetFX);

        function NetFX1988() {
          return _gfNetFX.apply(this, arguments) || this;
        }

        var _proto = NetFX1988.prototype;

        _proto.onLoad = function onLoad() {
          this._animationName = 'animation';
          this.spine.setAnimation(0, this._animationName, false);
          this.spine.premultipliedAlpha = false;
        };

        _proto.initAssets = function initAssets(config) {
          var _this = this;

          if (config.kind && (config.kind === 4 || config.kind === 7)) {
            this.spine.useTint = true;
          } else {
            this.spine.useTint = false;
          }

          this.spine.skeletonData = config.asset;
          this.spine.premultipliedAlpha = false;
          this._animationName = 'animation';
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.NETFX);
          this.spine.setAnimation(0, this._animationName, false);
          var duration = this.spine.findAnimation(this._animationName).duration;
          this.scheduleOnce(function () {
            _this.returnPool();
          }, duration);
        };

        _proto.returnPool = function returnPool() {
          if (!sys.isNative) this.spine.skeletonData = null;
          this.unscheduleAllCallbacks();

          _gfNetFX.prototype.returnPool.call(this);
        };

        return NetFX1988;
      }(gfNetFX)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventsCode1988.ts", ['cc', './gfBaseEvents.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var cclegacy, gfBaseEvents, mergeTwoObject;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      mergeTwoObject = module.mergeTwoObject;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d75e1RyOzlJialyFHYQr7tJ", "EventsCode1988", undefined);

      var EventsCode1988 = {
        PLAYER_LAYER: {
          CHANGE_GUN_DRILL: "CHANGE_GUN_DRILL"
        },
        EFFECT_LAYER: {
          DROP_GUN_DRILL: "DROP_GUN_DRILL",
          DRILL_EXPLOSION: "DRILL_EXPLOSION",
          PLAY_WAVE_TRANSITION_CUSTOM: "PLAY_WAVE_TRANSITION_CUSTOM",
          PLAY_EFFECT_BIGWIN: "PLAY_EFFECT_BIGWIN",
          PLAY_EFFECT_LIGHTING: "PLAY_EFFECT_LIGHTING",
          END_PHASE_POISON_FLOWER: "END_PHASE_POISON_FLOWER",
          REMOVE_DRILL: "EFFECT_LAYER_REMOVE_DRILL"
        },
        GAME_LAYER: {
          CREATE_BULLET_DRILL: "CREATE_BULLET_DRILL",
          RESUME_DRILL: "RESUME_DRILL",
          CLOSE_ALL_MENU: "CLOSE_ALL_MENU",
          BORIS_END: "BORIS_END",
          PLAY_JACKPOT_BORIS: "PLAY_JACKPOT_BORIS",
          RESUME_POISON_FLOWER: "RESUME_POISON_FLOWER",
          UPDATE_PANEL_CHIP: "UPDATE_PANEL_CHIP",
          HIDE_PANEL_CHIP: "HIDE_PANEL_CHIP",
          BORIS_WAIT_DIE: "BORIS_WAIT_DIE"
        },
        FISH_LAYER: {
          CREATE_LIST_FISH_FAKE: "CREATE_LIST_FISH_FAKE",
          CATCH_BORIS: "CATCH_BORIS",
          FLOWER_DIE: "FLOWER_DIE",
          BORIS_WAIT_DIE: "BORIS_WAIT_DIE"
        },
        SOUND: {
          DRILL_FIRE: "DRILL_FIRE",
          DRILL_HIT_WALL: "DRILL_HIT_WALL",
          TARGET_LOCK_ONE: "TARGET_LOCK_ONE",
          UI_POPUP: "UI_POPUP",
          FLOWER_EXPLOSION: "FLOWER_EXPLOSION",
          GUN_EQUIP: "GUN_EQUIP",
          WAVE: "WAVE",
          LASER_IDLE: "LASER_IDLE",
          STOP_LASER_IDLE: "STOP_LASER_IDLE",
          BORIS_APPEAR: "BORIS_APPEAR",
          BORIS_WARNING: "BORIS_WARNING",
          BORIS_DIE: "BORIS_DIE",
          BORIS_OUT: "BORIS_OUT",
          BORIS_MOVE: "BORIS_MOVE",
          BORIS_TRASH_TALK: "BORIS_TRASH_TALK",
          CHIP_EQUIP: "CHIP_EQUIP",
          CHIP_DROP: "CHIP_DROP",
          CHIP_FAIL: "CHIP_FAIL",
          CHIP_FLY: "CHIP_FLY",
          LAST_DAMAGE: "LAST_DAMAGE",
          POPUP_JACKPOT: "POPUP_JACKPOT",
          START_COUNTING_LOOP: "START_COUNTING_LOOP",
          STOP_COUNTING_LOOP: "STOP_COUNTING_LOOP",
          BORIS_IDLE: "BORIS_IDLE",
          BORIS_DAMAGE: "BORIS_DAMAGE",
          BORIS_DESTROYED: "BORIS_DESTROYED",
          FLOWER_DIE: "FLOWER_DIE_SOUND",
          POISON_EFFECT: "POISON_EFFECT",
          BORIS_THE_ANIMALS: "BORIS_THE_ANIMALS",
          IT_JUST_BORIS: "IT_JUST_BORIS",
          OPEN_COMPO_AUTO: "OPEN_COMPO_AUTO",
          SELECT_AUTO_MODE: "SELECT_AUTO_MODE",
          CLICK_BUTTON_JOIN_GAME: "CLICK_BUTTON_JOIN_GAME",
          BORIS_LAUGH: "BORIS_LAUGH",
          ACTIVE_PASSWORD: "ACTIVE_PASSWORD"
        }
      };
      EventsCode1988 = mergeTwoObject(gfBaseEvents, EventsCode1988);
      var EventCode = exports('default', EventsCode1988);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfstHUD.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './Config1985.ts', './gfptSavedList.ts', './gfstAirLayer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, Node, Slider, Toggle, Mask, sp, instantiate, math, Component, Texture2D, Config1985, GfptSavedList, GfstAirLayer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Slider = module.Slider;
      Toggle = module.Toggle;
      Mask = module.Mask;
      sp = module.sp;
      instantiate = module.instantiate;
      math = module.math;
      Component = module.Component;
      Texture2D = module.Texture2D;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      GfptSavedList = module.GfptSavedList;
    }, function (module) {
      GfstAirLayer = module.GfstAirLayer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _temp;

      cclegacy._RF.push({}, "d85f3Mo0FRBdYuZD6dNjoni", "gfstHUD", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfstHUD = exports('GfstHUD', (_dec = ccclass('GfstHUD'), _dec2 = property(GfstAirLayer), _dec3 = property(Prefab), _dec4 = property(GfptSavedList), _dec5 = property(GfptSavedList), _dec6 = property(Node), _dec7 = property(Slider), _dec8 = property(Toggle), _dec9 = property(Toggle), _dec10 = property(Mask), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfstHUD, _Component);

        function GfstHUD() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "airLayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "enemyPrefab", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "airList", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "animList", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "background", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "timeline", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "playPauseToggle", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "only1Spine", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gameMask", _descriptor9, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "fileSelector", void 0);

          _defineProperty(_assertThisInitialized(_this), "loadCount", 0);

          _defineProperty(_assertThisInitialized(_this), "newSpine", void 0);

          _defineProperty(_assertThisInitialized(_this), "spineList", []);

          _defineProperty(_assertThisInitialized(_this), "atlasList", []);

          _defineProperty(_assertThisInitialized(_this), "imgList", []);

          _defineProperty(_assertThisInitialized(_this), "isLoop", false);

          _defineProperty(_assertThisInitialized(_this), "isPMA", false);

          return _this;
        }

        var _proto = GfstHUD.prototype;

        _proto.onLoad = function onLoad() {
          new Config1985();
        };

        _proto.start = function start() {
          this.initFile();
          this.node.on("ITEM_CLICKED", this.onItemClicked, this);
        };

        _proto.onBtnAddSpineClicked = function onBtnAddSpineClicked() {};

        _proto.initFile = function initFile() {
          var x = document.createElement("INPUT");
          x.setAttribute("type", "file");
          x.setAttribute("accept", ".zip");
          x.id = 'file-selector';
          x.style.visibility = "hidden";
          document.body.appendChild(x);
          this.fileSelector = document.getElementById('file-selector');
          var self = this;
          this.fileSelector.addEventListener('change', function (event) {
            var file = event.target.files[0];
            if (!file) return;
            var fr = new FileReader();

            fr.onload = function () {
              self.loadZip(fr);
            };

            fr.readAsArrayBuffer(file);
          });
        };

        _proto.onBtnLoadFileClick = function onBtnLoadFileClick() {
          this.fileSelector.click();
        };

        _proto.loadZip = function loadZip(file) {
          var _this2 = this;

          this.spineList.length = 0;
          this.imgList.length = 0;
          this.atlasList.length = 0;
          var zip = new globalThis.JSZip();
          zip.loadAsync(file.result).then(function (zip) {
            var fileList = zip.files;
            _this2.loadCount = Object.keys(fileList).length;

            var _loop = function _loop(filename) {
              if (filename.includes('__MACOSX')) {
                _this2.loadCountCheck();

                return "continue";
              }

              console.log(filename);
              var nameTypes = filename.split('.');
              var type = nameTypes[nameTypes.length - 1];
              var subtype = nameTypes[nameTypes.length - 2];

              if (type == 'json') {
                zip.file(filename).async('string').then(function (data) {
                  var json = JSON.parse(data); // this.newSpine.skeletonJson = json;

                  _this2.spineList.push({
                    name: nameTypes[0],
                    data: json
                  });

                  console.log("Loaded: " + filename);

                  _this2.loadCountCheck();
                });
              } else if (type == 'atlas' || type == 'txt' && subtype == 'atlas') {
                zip.file(filename).async('string').then(function (data) {
                  // this.newSpine.atlasText = data;
                  _this2.atlasList.push({
                    name: nameTypes[0],
                    data: data
                  });

                  console.log("Loaded: " + filename);

                  _this2.loadCountCheck();
                });
              } else if (type == 'png') {
                zip.file(filename).async('base64').then(function (data) {
                  var img = new Image();
                  img.src = "data:image/png;base64," + data;

                  img.onload = function () {
                    var texture = new Texture2D();
                    texture.reset({
                      width: img.width,
                      height: img.height
                    });
                    texture.uploadData(img, 0, 0);
                    texture.name = filename.split('/')[filename.split('/').length - 1]; // this.newSpine.textures.push(texture);
                    // this.newSpine.textureNames.push(texture.name);

                    _this2.imgList.push({
                      name: nameTypes[0],
                      data: texture
                    });

                    console.log("Loaded: " + filename);

                    _this2.loadCountCheck();
                  };
                });
              } else {
                _this2.loadCountCheck();
              }
            };

            for (var filename in fileList) {
              var _ret = _loop(filename);

              if (_ret === "continue") continue;
            }
          });
        };

        _proto.loadCountCheck = function loadCountCheck() {
          --this.loadCount;

          if (this.loadCount == 0) {
            this.buildSpine();
          }
        };

        _proto.buildSpine = function buildSpine() {
          for (var i = 0; i < this.spineList.length; ++i) {
            this.newSpine = new sp.SkeletonData();
            this.newSpine.skeletonJson = this.spineList[i].data;

            for (var j = 0; j < this.atlasList.length; ++j) {
              if (this.atlasList[j].name == this.spineList[i].name) {
                this.newSpine.atlasText = this.atlasList[j].data;
              }
            }

            for (var _j = 0; _j < this.imgList.length; ++_j) {
              this.newSpine.textures.push(this.imgList[_j].data);
              this.newSpine.textureNames.push(this.imgList[_j].data.name);
            }

            var node = instantiate(this.enemyPrefab);
            var spineComponent = node.getComponentInChildren(sp.Skeleton);
            spineComponent.skeletonData = this.newSpine;
            this.airList.addContent(node);
          }

          this.airList.selectLast();
          this.updateAnimList();
        };

        _proto.updateAnimList = function updateAnimList() {
          var animList = Object.keys(this.newSpine._skeletonJson.animations);
          var nameList = [];
          animList.forEach(function (anim) {
            nameList.push({
              name: anim
            });
          });
          this.animList.updateContent(nameList);
        };

        _proto.editBoxTextReturn = function editBoxTextReturn(evt) {
          this.airLayer.planeCount = evt.string;
        };

        _proto.onBtnClearClicked = function onBtnClearClicked() {
          this.airLayer.node.destroyAllChildren();
          this.airLayer.node.removeAllChildren();
        };

        _proto.onBtnFlyClick = function onBtnFlyClick() {};

        _proto.onItemClicked = function onItemClicked(evt) {
          evt.propagationStopped = true;

          if (evt.data.spineData) {
            this.newSpine = evt.data.spineData;
            this.updateAnimList();
          } else if (evt.data.str) {
            if (this.only1Spine.isChecked) {
              this.onBtnClearClicked();
            }

            this.airLayer.createNewAirPlane(this.newSpine, evt.data.str, this.isLoop);
            var spine = this.getSpine();
            if (!spine) return;
            spine.premultipliedAlpha = this.isPMA;
            console.log(spine.getCurrent(0).animation.duration);
          }
        };

        _proto.onBackgroundToggle = function onBackgroundToggle(evt) {
          this.background.active = evt.isChecked;
        };

        _proto.onTimelineSliderMove = function onTimelineSliderMove() {
          if (this.airLayer.node.children.length == 0) return;
          var spine = this.airLayer.node.children[0].getComponentInChildren(sp.Skeleton);
          if (!spine) return;
          var state = spine.paused;
          spine.paused = false;
          var dur = spine.getCurrent(0).animation.duration;
          var time = this.timeline.progress * dur;
          var animTime = spine._skeleton.time;
          spine.updateAnimation(time - animTime);
          spine.paused = state;
        };

        _proto.onPlayPauseBtnChecked = function onPlayPauseBtnChecked(evt) {
          if (this.airLayer.node.children.length == 0) return;
          var spine = this.airLayer.node.children[0].getComponentInChildren(sp.Skeleton);
          if (!spine) return;
          spine.paused = evt.isChecked;
        };

        _proto.onMaskToggle = function onMaskToggle(evt) {
          this.gameMask.enabled = evt.isChecked;
        };

        _proto.onLoopToggle = function onLoopToggle(evt) {
          this.isLoop = evt.isChecked;
          var spine = this.getSpine();
          if (!spine) return;
          var animName = spine.getCurrent(0).animation.name;
          spine.setAnimation(0, animName, evt.isChecked);
        };

        _proto.onPMAToggle = function onPMAToggle(evt) {
          this.isPMA = evt.isChecked;
          var spine = this.getSpine();
          if (!spine) return;
          spine.premultipliedAlpha = evt.isChecked;
        };

        _proto.getSpine = function getSpine() {
          if (this.airLayer.node.children.length == 0) return null;
          return this.airLayer.node.children[0].getComponentInChildren(sp.Skeleton);
        };

        _proto.update = function update(dt) {
          if (this.airLayer.node.children.length == 0 || this.isLoop) {
            this.timeline.node.active = false;
            this.playPauseToggle.node.active = false;
            return;
          }

          this.timeline.node.active = true;
          this.playPauseToggle.node.active = true;
          var spine = this.airLayer.node.children[0].getComponentInChildren(sp.Skeleton);
          if (!spine) return;
          var dur = spine.getCurrent(0).animation.duration;
          var time = spine._skeleton.time;
          this.timeline.progress = math.clamp(time / dur, 0, 1);
        };

        return GfstHUD;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "airLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "enemyPrefab", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "airList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animList", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "timeline", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "playPauseToggle", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "only1Spine", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "gameMask", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/UpdatePanel.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, ProgressBar, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      ProgressBar = module.ProgressBar;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "d896fFhBk9A57gLMvEj3KZ7", "UpdatePanel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var UpdatePanel = exports('UpdatePanel', (_dec = ccclass('UpdatePanel'), _dec2 = property(Label), _dec3 = property(ProgressBar), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(UpdatePanel, _Component);

        function UpdatePanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "info", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "byteProgress", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        return UpdatePanel;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "info", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "byteProgress", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfResizeByEvent.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UITransform, Component, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "d8f8e3C3IpHMpEL7vNTsyTu", "gfResizeByEvent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfResizeByEvent = exports('default', (_dec = ccclass('gfResizeByEvent'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfResizeByEvent, _Component);

        function gfResizeByEvent() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfResizeByEvent.prototype;

        _proto.start = function start() {
          registerEvent(gfBaseEvents.COMMON.ON_SCREEN_RESIZE, this.resizeNode, this);
        };

        _proto.resizeNode = function resizeNode() {
          var realSize = gfBaseConfig.instance.realSize;
          this.node.getComponent(UITransform).width = realSize.Width;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return gfResizeByEvent;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNetworkKeyMap.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d9ab0PXya5JDbkwJ9rRO9JX", "gfNetworkKeyMap", undefined);

      var gfNetworkKeyMap = exports('default', {
        iuig: "isUserInGame",
        uid: "UserID",
        nn: "Username",
        wl: "Wallet",
        lvl: "Level",
        bc: "BetConfig",
        av: "Avatar",
        code: "Code",
        aPar: "ArrayParam",
        fs: "FireSpeed",
        tgt: "TargetTime",
        isErr: "IsError",
        kind: "KindID",
        wlLim: "GoldLimit",
        url: "Server",
        tok: "Token",
        am: "amount",
        typ: "type",
        msg: "message",
        n: "Username",
        staId: "DeskStation",
        dId: "DeskId",
        bmul: "BulletMultiple",
        iInf: "itemInfo",
        pc: "percentGetItem",
        lItm: "listItem",
        id: "ID",
        skInf: "skillInfo",
        sid: "SkillID",
        x: "PosX",
        y: "PosY",
        dgbtyp: "Balls",
        ag: "Angle",
        lfid: "LockedFishID",
        fid: "FishID",
        grw: "GoldReward",
        fkd: "FishKind",
        lf: "ListFish",
        lpf: "ListParadeFish",
        pkd: "ParadeKind",
        pttl: "TimeBuildFishParade",
        eid: "EffectID",
        ttr: "TotalReward",
        inc: "InitCount",
        ttl: "timeToExpire",
        pos: "Position",
        mulier: "multiplier",
        isf: "IsForce",
        stt: "State",
        cid: "ChatID",
        r: "Result",
        w: "wonJackpot",
        wam: "WinAmount",
        idx: "IndexInGroup",
        rcode: "roomCode",
        data: "data",
        dgbTy: "Balls",
        bid: "BulletID",
        mult: "Multiple",
        skd: "SceneKind",
        isa: "IsActive",
        bt: "BuildTick",
        tr: "TimeRemain",
        tf: "TimeFreeze",
        lu: "ListUser",
        rd: "RoomData",
        trf: "IceTimeRemain",
        etf: "TimeRemainFreeze",
        rk: "RoomKind",
        ip: "PathID",
        "if": "FormationID",
        prin: "ParenInfo",
        sam: "LaserMultiple",
        mnbi: "MiniBossInfo",
        iid: "ItemID",
        lbtr: "ListBuildTickRecover",
        st: "ServerTime",
        bf: "BonusFish",
        idB: "BulletID",
        tarf: "TargetFish",
        //event
        evtd: "EventDetail",
        evtt: "EventTime",
        gss: "GhostShipState",
        sput: "GhostShipSpeedUpBuildtick",
        //Godzilla
        gzls: "GodzillaState",
        tw: "TypeWin",
        //3D
        bti: "BulletType",
        cf: "ClearFish",
        lg: "ListGroup",
        cg: "CountGroup",
        tgr: "TypeGroup",
        gid: "GroupID",
        sp: "StartPos",
        idp: "PathID",
        pid: "PathID",
        ifs: "IDStart",
        cfr: "CountFish",
        tdl: "DelayTimeStart",
        dtf: "DelayTimeNextFish",
        sc: "Scale",
        as: "AngleStart",
        cl: "CountLine",
        abu: "BulletAmount",
        tef: "SkillDuration",
        tad: "BonusTime",
        fwfs: "RewardMultiple",
        ipf: "FishGroup",
        ldf: "ListFishDead",
        clp: "CountLoop",
        dlt: "DelayLoopTime",
        dsi: "DrillResumeInfo",
        ifot: "ListNormalFish",
        flf: "ListFishFreeze",
        lfk: "ListFishKind",
        scf: "ScaleFish",
        ph: "BossPhase",
        lsg: "ListGiftBoss",
        tcp: "TimeChangePhase",
        clo: "Color",
        //poison flower
        ilp: "isLastPhase",
        //Drill
        psks: "performingSkills",
        //chips
        cps: "chips",
        itn: "itemChipID",
        dmgl: "damageLevel",
        mitd: "maxItemID",
        ipm: "IsPromotionMoney",
        pwl: "PromotionWallet",
        fty: "FireType",
        strInf: "StreakInfo",
        bon: "BonusLevel",
        buc: "BulletCount",
        bk: "BulletKind",
        lp: "ListPosition",
        ssi: "SkillSpecialInfo",
        per: "Percent",
        tar: "Targets",
        tif: "TimeFires",
        eoid: "EnvObjectID",
        eokd: "EnvObjectKind",
        pp: "PlayerPosition",
        lenv: "ListEnvObject",
        crn: "Corner",
        si: "SkillInfo",
        shi: "Shield",
        pts: "Points",
        ssms: "SkillSpecialMilestone",
        env: "environment",
        sst: "SessionTime",
        ct: "CurrentTime",
        mt: "MaxTime"
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MonitorTarget.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "d9c84VJAbJG55ntfWlMb+mx", "MonitorTarget", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var MonitorTarget = exports('MonitorTarget', (_dec = ccclass('MonitorTarget'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MonitorTarget, _Component);

        function MonitorTarget() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "gameId", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = MonitorTarget.prototype;

        _proto.getGameId = function getGameId() {
          return this.gameId;
        };

        _proto.getGameMeta = function getGameMeta() {
          return "Please Input Any String";
        };

        return MonitorTarget;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gameId", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "0000";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDragonBall.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Sprite, Node, UITransform, v3, Vec3, tween, setOpacity, getRandomInt, randRange, gfBaseEvents, fadeIn, fadeOut, rotateBy, moveTo, scaleTo, stopAllActions, gfEventEmitter, gfBaseConfig, autoEnum, SetZIndex, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Node = module.Node;
      UITransform = module.UITransform;
      v3 = module.v3;
      Vec3 = module.Vec3;
      tween = module.tween;
    }, function (module) {
      setOpacity = module.setOpacity;
      getRandomInt = module.getRandomInt;
      randRange = module.randRange;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      rotateBy = module.rotateBy;
      moveTo = module.moveTo;
      scaleTo = module.scaleTo;
      stopAllActions = module.stopAllActions;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      autoEnum = module.autoEnum;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp;

      cclegacy._RF.push({}, "d9c9frW3PZCmJJSX44SpjTm", "gfDragonBall", undefined);

      var STATE = autoEnum(["Invalid", "Dropping", "InTray", "InJackpotStar"]);
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfDragonBall = exports('gfDragonBall', (_dec = ccclass('gfDragonBall'), _dec2 = property(Sprite), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfDragonBall, _gfNode);

        function gfDragonBall() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "ballSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "backEff", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "frontEff", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "ballSpark", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "hitGlow", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "hitLight", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fireEfx", _descriptor7, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_state", void 0);

          _defineProperty(_assertThisInitialized(_this), "baseScale", void 0);

          _defineProperty(_assertThisInitialized(_this), "kind", void 0);

          return _this;
        }

        var _proto = gfDragonBall.prototype;

        _proto.initAssets = function initAssets(config) {
          this.ballSprite.spriteFrame = config.asset;
          this.baseScale = config.scale;
          this.kind = config.kind;
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.DRAGON_BALL);
        };

        _proto.dropToPlayer = function dropToPlayer(dragonPosition, playerBallHolder, deskStation) {
          var _this2 = this;

          var destination = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(playerBallHolder.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
          setOpacity(this.ballSprite.node, 0);
          setOpacity(this.ballSpark, 0);
          setOpacity(this.hitGlow, 0);
          setOpacity(this.hitLight, 0);
          setOpacity(this.frontEff, 0); //@ts-ignore

          this._state = STATE.Dropping;
          var dropTime = 0.5;
          var sparkTime = 0.25;
          var zoomTime = 1;
          var stopTime = 0.5;
          var randomX = getRandomInt(-200, 200);
          var randomY = getRandomInt(-150, 150);
          var randomPos = new Vec3(randomX, randomY, 0);
          this.node.setPosition(dragonPosition);
          tween(this.ballSpark).then(fadeIn(sparkTime)).then(fadeOut(sparkTime)).start();
          tween(this.node).delay(sparkTime).call(function () {
            _this2.frontEff.active = true;
            _this2.backEff.active = true;
            setOpacity(_this2.frontEff, 255);
            setOpacity(_this2.backEff, 255);

            _this2.frontEff.scale.set(v3(0, 0, 0));

            _this2.backEff.scale.set(v3(0, 0, 0));

            tween(_this2.frontEff).to(zoomTime, {
              scale: v3(1, 1, 1)
            }).start();
            tween(_this2.frontEff).to(zoomTime, {
              scale: v3(1, 1, 1)
            }).start();
            tween(_this2.backEff).repeatForever(rotateBy(1, 360)).start();

            if (_this2.kind > 2) {
              setOpacity(_this2.fireEfx, 255);
              _this2.fireEfx.active = true;

              _this2.fireEfx.scale.set(v3(0, 0, 0));

              tween(_this2.fireEfx).to(zoomTime, {
                scale: v3(1, 1, 1)
              }).start();
              tween(_this2.fireEfx).repeatForever(tween().then(rotateBy(1, 360))).start();
            }
          }).delay(zoomTime).parallel(moveTo(stopTime, randomPos.x, randomPos.y), tween().call(function () {
            tween(_this2.frontEff).then(fadeOut(0.1)).start();
            tween(_this2.ballSprite).then(fadeIn(0.1)).start();
          })).delay(stopTime).parallel(moveTo(dropTime, destination.x, destination.y), scaleTo(dropTime, this.baseScale)).call(function () {
            _this2.addToPlayer(playerBallHolder); //@ts-ignore


            _this2._state = STATE.InTray;
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_BALL_DROP, deskStation);
          }).start();
        };

        _proto.addToPlayer = function addToPlayer(playerBallHolder) {
          setOpacity(this.frontEff, 0);
          setOpacity(this.ballSprite.node, 255);
          this.node.scale = new Vec3(this.baseScale, this.baseScale);
          this.node.parent = playerBallHolder;
          this.node.position = v3(0, 0);
          setOpacity(this.backEff, 0);
          setOpacity(this.fireEfx, 0);
          this.hitGlow.scale = v3(3, 3);
          tween(this.hitGlow).repeatForever(tween().then(fadeIn(1)).then(fadeOut(1))).start();
          setOpacity(this.hitLight, 255);
          this.hitLight.scale = v3(0, 0);
          tween(this.hitGlow).then(scaleTo(0.15, 4)).then(fadeOut(0.15)).start();
        };

        _proto.playGlowEffect = function playGlowEffect() {
          if (this.backEff.active) this.backEff.active = false;
          this.frontEff.active = true;
          setOpacity(this.frontEff, 0);
          tween(this.frontEff).then(fadeIn(0.25)).delay(0.15).repeatForever(tween().then(scaleTo(0.15, 1.1)).then(scaleTo(0.15, 1))).start();
        };

        _proto.playLightEffect = function playLightEffect() {
          var _this3 = this;

          if (this.frontEff.active) this.stopGlowEffect();
          this.backEff.active = true;
          setOpacity(this.backEff, 0);
          tween(this.backEff).then(fadeIn(0.25)).call(function () {
            tween(_this3.backEff).repeatForever(tween().parallel(tween().then(scaleTo(0.25, 0.9)).then(scaleTo(0.25, 1.05)), rotateBy(0.5, -90))).start();
          }).start();
        };

        _proto.stopGlowEffect = function stopGlowEffect() {
          var _this4 = this;

          stopAllActions(this.frontEff);
          this.frontEff.scale = v3(1, 1);
          tween(this.frontEff).then(fadeOut(0.25)).call(function () {
            _this4.frontEff.active = false;
          }).start();
        };

        _proto.moveToJackpotStar = function moveToJackpotStar(_ref) {
          var _this5 = this;

          var delay = _ref.delay,
              position = _ref.position; //@ts-ignore

          this._state = STATE.InJackpotStar;
          this.playGlowEffect();
          tween(this.node).delay(delay).to(1, {
            position: position,
            scale: v3(1, 1, 1)
          }).delay(0.25).call(function () {
            _this5.playLightEffect();
          }).start();
        };

        _proto.flyAway = function flyAway(flyTime) {
          var _this6 = this;

          if (flyTime === void 0) {
            flyTime = 1;
          }

          var rand = randRange(10, 14) / 10;
          tween(this.node).parallel(moveTo(flyTime * rand, this.node.position.x * 15, this.node.position.y * 15), scaleTo(flyTime * rand, 5)).call(function () {
            _this6.returnPool();
          }).start();
        };

        _proto.moveToBigWinEffect = function moveToBigWinEffect(_ref2) {
          var _this7 = this;

          var ballIndex = _ref2.ballIndex,
              position = _ref2.position,
              playerIndex = _ref2.playerIndex;
          var flyTime = 0.5;
          var delayEach = 0.2;
          tween(this.node).delay(ballIndex * delayEach).parallel(moveTo(flyTime, position.x, position.y), scaleTo(flyTime, 1, 1)).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BALL_HIDE);
          }).then(scaleTo(flyTime, 0)).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.BALL_ENTER_BIGWIN_WHEEL, playerIndex);
          }).call(function () {
            _this7.returnPool();
          }).start();
        };

        _proto.isDropping = function isDropping() {
          //@ts-ignore
          return this._state == STATE.Dropping;
        };

        _proto.isInJackpotStar = function isInJackpotStar() {
          //@ts-ignore
          return this._state == STATE.InJackpotStar;
        };

        _proto.unuse = function unuse() {
          _gfNode.prototype.unuse.call(this); //@ts-ignore


          this._state = STATE.Invalid;
          stopAllActions(this.ballSprite.node);
          stopAllActions(this.backEff);
          stopAllActions(this.frontEff);
          stopAllActions(this.ballSpark);
          stopAllActions(this.hitGlow);
          stopAllActions(this.hitLight);
          stopAllActions(this.fireEfx);
        };

        return gfDragonBall;
      }(gfNode), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ballSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "backEff", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frontEff", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ballSpark", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "hitGlow", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "hitLight", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "fireEfx", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotWinPopup1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './gf3DParticle.ts', './gfJackpotWinPopup.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, v3, tween, Button, gfBaseEvents, fadeOut, gfEventEmitter, EventCode, DataStore1988, Config1988, gf3DParticle, gfJackpotWinPopup;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      tween = module.tween;
      Button = module.Button;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfJackpotWinPopup = module.gfJackpotWinPopup;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "da1667h+gZBkIk4nsfX6FII", "JackpotWinPopup1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotWinPopup1988 = exports('JackpotWinPopup1988', (_dec = ccclass('JackpotWinPopup1988'), _dec(_class = (_temp = /*#__PURE__*/function (_gfJackpotWinPopup) {
        _inheritsLoose(JackpotWinPopup1988, _gfJackpotWinPopup);

        function JackpotWinPopup1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfJackpotWinPopup.call.apply(_gfJackpotWinPopup, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_callbackHide", null);

          _defineProperty(_assertThisInitialized(_this), "_canQuickShow", false);

          return _this;
        }

        var _proto = JackpotWinPopup1988.prototype;

        _proto.onLoad = function onLoad() {
          _gfJackpotWinPopup.prototype.onLoad.call(this);

          this.animNode.scale.set(v3(0, 0));
        };

        _proto.start = function start() {
          var _this2 = this;

          this._canQuickShow = false;
          this.txtCoin.string = "";
          this.animNode.scale.set(v3(0, 0));
          gfEventEmitter.instance.emit(EventCode.SOUND.POPUP_JACKPOT, 1);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_ALL_AUDIO);
          tween(this.animNode).to(0.25, {
            scale: v3(1.0, 1.0)
          }).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_BIG_WIN);
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_EFFECT_JACKPOT_COIN);
            _this2.particleCoin.active = true;

            _this2.particleCoin.getComponent(gf3DParticle).startAnimation();

            _this2._tweenCoin();

            _this2._canQuickShow = true;
          }).start();
          this.scheduleOnce(function () {
            _this2.winFrame.getComponent(Button).interactable = true;
          }, 0.65);
        };

        _proto.setCallbackHide = function setCallbackHide(callback) {
          this._callbackHide = callback;
        };

        _proto._tweenCoin = function _tweenCoin() {
          var _this3 = this;

          var superValue = this.winValue * 0.75;
          this.tweenCoin = tween(this).to(this._duration / 2, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue = ratio * superValue;
            }
          }).to(this._duration / 2, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this3.coinValue += (_this3.winValue - _this3.coinValue) * ratio;
            }
          }).call(function () {
            _this3.hideFn();
          });
          this.tweenCoin.start();
        };

        _proto.quickShow = function quickShow() {
          if (!this._canQuickShow) {
            return;
          }

          _gfJackpotWinPopup.prototype.quickShow.call(this);
        };

        _proto.hideFn = function hideFn() {
          var _this4 = this;

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.STOP_EFFECT_JACKPOT_COIN);
          DataStore1988.instance.curBGMusic = null;
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PLAY_SOUND_BACKGROUND, Config1988.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          tween(this.node).delay(0.5).then(fadeOut(0.5)).call(function () {
            _this4.particleCoin.getComponent(gf3DParticle).stopAnimation();

            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.JACKPOT_WINAMOUNT_POPUP_CLOSE);
            _this4._callbackHide && _this4._callbackHide();
          }).removeSelf().start();
          gfEventEmitter.instance.emit(EventCode.SOUND.POPUP_JACKPOT, 0);
        };

        return JackpotWinPopup1988;
      }(gfJackpotWinPopup), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/OptionControllerTest.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utilsForTest.ts', './ActionHelperForTest.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Vec3, Sprite, BlockInputEvents, v3, v2, UIOpacity, UITransform, Tween, tween, Component, getDistance, v3f, fadeIn, fadeTo, fadeOut;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      BlockInputEvents = module.BlockInputEvents;
      v3 = module.v3;
      v2 = module.v2;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      getDistance = module.getDistance;
    }, function (module) {
      v3f = module.v3f;
      fadeIn = module.fadeIn;
      fadeTo = module.fadeTo;
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class4, _class5, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _temp2;

      cclegacy._RF.push({}, "da6d4cZuApKOJihc0FHIXrw", "OptionControllerTest", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var itemDataTest = (_dec = ccclass('itemDataTest'), _dec2 = property(Node), _dec3 = property(Vec3), _dec(_class = (_class2 = (_temp = function itemDataTest() {
        _initializerDefineProperty(this, "nodeItem", _descriptor, this);

        _initializerDefineProperty(this, "showPos", _descriptor2, this);
      }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "nodeItem", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showPos", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return v3(0, 0, 0);
        }
      })), _class2)) || _class);
      var DURATION_SHOW = 0.15;
      var DURATION_HIDE = 0.15;
      var MIN_DURATION = 10;
      var COUNT_SCALE = 1.25;
      var OptionControllerTest = exports('OptionControllerTest', (_dec4 = ccclass('OptionControllerTest'), _dec5 = property(itemDataTest), _dec6 = property(Sprite), _dec7 = property(Node), _dec8 = property(BlockInputEvents), _dec9 = property(Node), _dec4(_class4 = (_class5 = (_temp2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(OptionControllerTest, _Component);

        function OptionControllerTest() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrNodeButton", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "background", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "backgroundLayout", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "blockInput", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "nodeTextBet", _descriptor7, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_isShow", false);

          _defineProperty(_assertThisInitialized(_this), "_isMoving", false);

          _defineProperty(_assertThisInitialized(_this), "_startTouchPos", v2(0, 0));

          _defineProperty(_assertThisInitialized(_this), "_startNodePos", v2(0, 0));

          _defineProperty(_assertThisInitialized(_this), "AppSize", {
            Width: 720,
            Height: 1250,
            MaxHeight: 1250,
            MaxWidth: 720
          });

          return _this;
        }

        var _proto = OptionControllerTest.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          this._isShow = false;
          this.arrNodeButton.forEach(function (item) {
            item.nodeItem.getComponent(UIOpacity).opacity = 0;
            item.nodeItem.setPosition(v3(0, 0, 0));
            item.nodeItem.active = false;
          });
          this.backgroundLayout.setScale(v3f(0));
          this.backgroundLayout.getComponent(UIOpacity).opacity = 0;
          this.fixPosHide();
          this.blockInput.onDisable();
          this.nodeTextBet.getComponent(UIOpacity).opacity = 0;
        };

        _proto.initEvents = function initEvents() {
          this.node.on(Node.EventType.TOUCH_START, this.onTouchStart, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this.onTouchMoved, this);
          this.node.on(Node.EventType.TOUCH_END, this.onTouchEnded, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this.onTouchCancel, this);
        };

        _proto.onTouchStart = function onTouchStart(event) {
          var pos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3(event.getUILocation().x, event.getUILocation().y, 0));
          this._startTouchPos = v2(pos.x, pos.y);

          var _this$node$getPositio = this.node.getPosition(),
              x = _this$node$getPositio.x,
              y = _this$node$getPositio.y;

          this._startNodePos = v2(x, y);
          this.playAnimScaleButton(true);
        };

        _proto.onTouchMoved = function onTouchMoved(event) {
          if (this._isShow) return;
          var pos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(v3(event.getUILocation().x, event.getUILocation().y, 0));
          var distance = getDistance(this._startTouchPos, v2(pos.x, pos.y));

          if (Math.abs(distance) <= MIN_DURATION) {
            return;
          }

          var _this$node$getPositio2 = this.node.getPosition(),
              x = _this$node$getPositio2.x,
              y = _this$node$getPositio2.y,
              z = _this$node$getPositio2.z;

          var offsetX = this._startNodePos.x - this._startTouchPos.x;
          var offsetY = this._startNodePos.y - this._startTouchPos.y;
          this.node.setPosition(pos.x + offsetX, pos.y + offsetY, z);
          this._isMoving = true;
        };

        _proto.onTouchEnded = function onTouchEnded() {
          if (this._isMoving) {
            this._isMoving = false;

            if (this._isShow) {
              this.fixPosShow();
            } else {
              this.fixPosHide();
            }

            return;
          }

          this.onClick();
        };

        _proto.onTouchCancel = function onTouchCancel() {
          this._isMoving = false;

          if (this._isShow) {
            this.playAnimScaleButton(false);
            this.fixPosShow();
          } else {
            this.fixPosHide();
          }
        };

        _proto.onClick = function onClick() {
          this._isShow = !this._isShow;

          if (this._isShow) {
            this.playAnimShow();
          } else {
            this.playAnimHide();
          }
        };

        _proto.playAnimShow = function playAnimShow() {
          var _this2 = this;

          this.background.grayscale = false;
          var duration = DURATION_SHOW;
          this.blockInput.onEnable();
          this.blockInput.node.off(Node.EventType.TOUCH_END);
          this.node.setScale(v3f(1));
          this.arrNodeButton.forEach(function (item) {
            item.nodeItem.active = true;
            Tween.stopAllByTarget(item.nodeItem);
            tween(item.nodeItem).parallel(tween().to(duration, {
              position: item.showPos
            }), fadeIn(duration)).start();
          });
          Tween.stopAllByTarget(this.backgroundLayout);
          tween(this.backgroundLayout).parallel(tween().to(duration, {
            scale: v3f(1)
          }), fadeTo(duration, 100)).call(function () {
            _this2.blockInput.node.on(Node.EventType.TOUCH_END, function () {
              if (_this2._isShow) {
                _this2.playAnimHide();
              }
            });
          }).start();
          this.fixPosShow();
        };

        _proto.playAnimHide = function playAnimHide() {
          this.background.grayscale = true;
          this._isShow = false;
          var duration = DURATION_HIDE;
          this.blockInput.onDisable();
          this.arrNodeButton.forEach(function (item) {
            Tween.stopAllByTarget(item.nodeItem);
            tween(item.nodeItem).parallel(tween().to(duration, {
              position: v3(0, 0, 0)
            }), fadeOut(duration)).call(function () {
              item.nodeItem.active = false;
            }).start();
          });
          Tween.stopAllByTarget(this.backgroundLayout);
          tween(this.backgroundLayout).parallel(tween().to(duration, {
            scale: v3f(0)
          }), fadeOut(duration)).start();
          this.fixPosHide();
        };

        _proto.fixPosShow = function fixPosShow() {
          var _this$node$getPositio3 = this.node.getPosition(),
              x = _this$node$getPositio3.x,
              y = _this$node$getPositio3.y,
              z = _this$node$getPositio3.z;

          var widthLayout = this.backgroundLayout.getComponent(UITransform).width;
          var heightLayout = this.backgroundLayout.getComponent(UITransform).height;
          var minPosX = -this.AppSize.MaxWidth / 2 + widthLayout / 2;
          var maxPosX = this.AppSize.MaxWidth / 2 - widthLayout / 2;
          var minPosY = -(this.AppSize.MaxHeight / 2 - this.AppSize.MaxHeight * 0.15) + heightLayout / 2;
          var maxPosY = this.AppSize.MaxHeight / 2 - this.AppSize.MaxHeight * 0.4 - heightLayout / 2;
          var newPosX = x,
              newPosY = y;

          if (x < minPosX) {
            newPosX = minPosX;
          } else if (x > maxPosX) {
            newPosX = maxPosX;
          }

          if (y < minPosY) {
            newPosY = minPosY;
          } else if (y > maxPosY) {
            newPosY = maxPosY;
          }

          this.background.node.setScale(v3f(1));
          Tween.stopAllByTarget(this.node);
          tween(this.node).to(DURATION_SHOW, {
            position: v3(newPosX, newPosY, z)
          }).start();
        };

        _proto.fixPosHide = function fixPosHide() {
          var _this$node$getPositio4 = this.node.getPosition(),
              x = _this$node$getPositio4.x,
              y = _this$node$getPositio4.y,
              z = _this$node$getPositio4.z;

          var width = this.node.getComponent(UITransform).width;
          var height = this.node.getComponent(UITransform).height;
          var minPosX = -this.AppSize.MaxWidth / 2 + width / 2 * COUNT_SCALE;
          var maxPosX = this.AppSize.MaxWidth / 2 - width / 2 * COUNT_SCALE;
          var minPosY = -(this.AppSize.MaxHeight / 2 - this.AppSize.MaxHeight * 0.15) + height / 2 * COUNT_SCALE;
          var maxPosY = this.AppSize.MaxHeight / 2 - this.AppSize.MaxHeight * 0.4 - height / 2 * COUNT_SCALE;
          var newPosX = x,
              newPosY = y;

          if (x > 0) {
            newPosX = maxPosX;
          } else {
            newPosX = minPosX;
          }

          if (y < minPosY) {
            newPosY = minPosY;
          } else if (y > maxPosY) {
            newPosY = maxPosY;
          }

          this.playAnimScaleButton(false);
          Tween.stopAllByTarget(this.node);
          tween(this.node).to(DURATION_HIDE, {
            position: v3(newPosX, newPosY, z)
          }).start();
        };

        _proto.playAnimScaleButton = function playAnimScaleButton(isScaleUp) {
          Tween.stopAllByTarget(this.background.node);
          var sizeScale = isScaleUp ? COUNT_SCALE : 1;
          tween(this.background.node).to(0.05, {
            scale: v3f(sizeScale)
          }).start();
        };

        return OptionControllerTest;
      }(Component), _temp2), (_descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "arrNodeButton", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class5.prototype, "background", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class5.prototype, "backgroundLayout", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class5.prototype, "blockInput", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class5.prototype, "nodeTextBet", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class5)) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FishManager1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './gfReferenceManager.ts', './ReferenceManager1985.ts', './PoolManager1985.ts', './gfFishManager.ts', './PathManager1985.ts'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, instantiate, gfBaseEvents, gfEventEmitter, EventsCode1985, gfReferenceManager, ReferenceManager1985, PoolManager1985, gfFishManager, PathManager1985;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      PoolManager1985 = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      PathManager1985 = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "db208HrfUhHAYUc4lDPx4ni", "FishManager1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FishManager1985 = exports('default', (_dec = ccclass('FishManager1985'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_gfFishManager) {
        _inheritsLoose(FishManager1985, _gfFishManager);

        function FishManager1985() {
          var _this;

          _this = _gfFishManager.call(this) || this;
          FishManager1985.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = FishManager1985.prototype;

        _proto.initPathConfig = function initPathConfig(jsonPathConfig) {
          new PathManager1985();
          PathManager1985.instance.initPathConfig(jsonPathConfig);
        };

        _proto.initEvent = function initEvent() {
          _gfFishManager.prototype.initEvent.call(this);
        };

        _proto.createFishWithData = function createFishWithData(data) {
          var fish = null;
          var prefabFish = ReferenceManager1985.instance.getPrefabFishByKind(parseInt(data.FishKind));

          if (prefabFish) {
            // Create by prefab
            fish = instantiate(prefabFish);
            fish.setParent(ReferenceManager1985.instance.getNodeFishLayer());
            fish = fish.getComponent("gfBaseFish");
            fish.initFishData(data);
          } else {
            // Create by pool
            fish = PoolManager1985.instance.getFishWithData(data);
          }

          if (fish) {
            this.listFish.push(fish);
            return fish;
          }

          return null;
        };

        _proto.catchFish = function catchFish(data) {
          if (data.FishID === 0) return;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe && !data.isSkill) {
            player.addGoldReward(data.GoldReward);
          }

          var fish = this.getFishById(data.FishID);

          if (fish) {
            fish.onCatch(data);
          } else if (player && player.isMe) {
            if (data.itemInfo) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FISH_DROP_ITEM, {
                itemID: data.itemInfo.ID,
                deskStation: data.DeskStation
              });
            }

            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
              data: data
            });
          } else {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
              data: data
            });
          }

          if (player && player.isMe && data.StreakInfo) {
            gfEventEmitter.instance.emit(EventsCode1985.EFFECT_LAYER.PLAY_BONUS_EFFECT, data.StreakInfo);
          }
        };

        _proto.destroy = function destroy() {
          var _PathManager1985$inst;

          _gfFishManager.prototype.destroy.call(this);

          (_PathManager1985$inst = PathManager1985.instance) === null || _PathManager1985$inst === void 0 ? void 0 : _PathManager1985$inst.destroy();
        };

        return FishManager1985;
      }(gfFishManager), _defineProperty(_class2, "instance", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WifiStatus1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './DataStore1985.ts', './gfWifiStatus.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, DataStore1985, GfWifiStatus;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      GfWifiStatus = module.GfWifiStatus;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "db3bdfgGXZO1ZVg6g2fIwiC", "WifiStatus1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var WifiStatus1985 = exports('WifiStatus1985', (_dec = ccclass('WifiStatus1985'), _dec(_class = /*#__PURE__*/function (_GfWifiStatus) {
        _inheritsLoose(WifiStatus1985, _GfWifiStatus);

        function WifiStatus1985() {
          return _GfWifiStatus.apply(this, arguments) || this;
        }

        var _proto = WifiStatus1985.prototype;

        _proto.onPingUpdate = function onPingUpdate(ms) {
          _GfWifiStatus.prototype.onPingUpdate.call(this, ms);

          this.labelPing.string = this._averagePing + "ms";
          DataStore1985.instance.ping = this._averagePing;
        };

        _proto._enableLbl = function _enableLbl(status) {
          this.ping.active = status;
        };

        return WifiStatus1985;
      }(GfWifiStatus)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CustomPageViewIndicator.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, SpriteComponent, PageViewIndicator;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      SpriteComponent = module.SpriteComponent;
      PageViewIndicator = module.PageViewIndicator;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "db9c0YejNNPNITBLdrMDU11", "CustomPageViewIndicator", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CustomPageViewIndicator = exports('CustomPageViewIndicator', (_dec = ccclass('CustomPageViewIndicator'), _dec2 = property(SpriteFrame), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_PageViewIndicator) {
        _inheritsLoose(CustomPageViewIndicator, _PageViewIndicator);

        function CustomPageViewIndicator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PageViewIndicator.call.apply(_PageViewIndicator, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "unSelectedSpriteFrame", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CustomPageViewIndicator.prototype;

        _proto._changedState = function _changedState() {
          var indicators = this._indicators;
          if (indicators.length === 0) return;
          var idx = this._pageView._curPageIdx;
          if (idx >= indicators.length) return;

          for (var i = 0; i < indicators.length; ++i) {
            var node = indicators[i];

            if (node) {
              var sprite = node.getComponent(SpriteComponent);

              if (sprite) {
                sprite.spriteFrame = this.unSelectedSpriteFrame;
              }
            }
          }

          this.setSpriteFrame({
            indicators: indicators,
            idx: idx
          });
        };

        _proto.setSpriteFrame = function setSpriteFrame(_ref) {
          var indicators = _ref.indicators,
              idx = _ref.idx;
          var node = indicators[idx];

          if (node) {
            var sprite = node.getComponent(SpriteComponent);

            if (sprite) {
              sprite.spriteFrame = this.spriteFrame;
            }
          }
        };

        return CustomPageViewIndicator;
      }(PageViewIndicator), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "unSelectedSpriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/logger.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './util.js', './util.mjs_cjs=&original=.js'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, log, warn, apiObject, loadConfigAsync, _cjsExports;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
      warn = module.warn;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, null],
    execute: function () {
      cclegacy._RF.push({}, "dbbe8Rqa6FI9KDFWedOa1Im", "logger", undefined);

      var regexIgnoreMessage = /^(CommandManager|RoutingEvent|SocketManagerNewMessage)/g;
      var utility = _cjsExports;

      var Logger = /*#__PURE__*/function () {
        function Logger(logFn, logFnError, logFnWarn) {
          _defineProperty(this, "isDebugging", void 0);

          _defineProperty(this, "logFn", void 0);

          _defineProperty(this, "logFnError", void 0);

          _defineProperty(this, "logFnWarn", void 0);

          _defineProperty(this, "userId", '');

          _defineProperty(this, "loggyService", void 0); // log(util, 'log util');


          this.isDebugging = !!logFn;
          this.logFn = logFn;
          this.logFnError = logFnError;
          this.logFnWarn = logFnWarn;
          this.loggyService = new LoggyService();
        }

        var _proto = Logger.prototype;

        _proto.debug = function debug(message) {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGGY = _loadConfigAsync$getC.LOGGY;

          var logData = '';

          if (this.isDebugging || LOGGY) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            logData = utility.format.apply(utility, ["%s : " + message, new Date().toISOString()].concat(args));
          }

          if (this.isDebugging) {
            this.logFn(logData);
          }

          if (LOGGY) {
            this.sendToLoggy(logData, message);
          }
        };

        _proto.warn = function warn(message) {
          var logData = '';

          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOGGY = _loadConfigAsync$getC2.LOGGY;

          if (this.isDebugging || LOGGY) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }

            logData = utility.format.apply(utility, ["%s : " + message, new Date().toISOString()].concat(args));
          }

          if (this.isDebugging) {
            this.logFnWarn(logData);
          }

          if (LOGGY) {
            this.sendToLoggy(logData, message);
          }
        };

        _proto.error = function error(message) {
          var logData = '';

          var _loadConfigAsync$getC3 = loadConfigAsync.getConfig(),
              LOGGY = _loadConfigAsync$getC3.LOGGY;

          if (this.isDebugging || LOGGY) {
            for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
              args[_key3 - 1] = arguments[_key3];
            }

            logData = utility.format.apply(utility, ["%s : " + message, new Date().toISOString()].concat(args));
          }

          if (this.isDebugging) {
            this.logFnError(logData);
          }

          if (LOGGY) {
            this.sendToLoggy(logData, message);
          }
        };

        _proto.sendToLoggy = function sendToLoggy(logData, rawMessage) {
          var _loadConfigAsync$getC4 = loadConfigAsync.getConfig(),
              LOGGY = _loadConfigAsync$getC4.LOGGY;

          if (LOGGY && logData && rawMessage && !rawMessage.match(regexIgnoreMessage)) {
            logData = this.userId + "::: " + logData;
            this.loggyService.pushLogData(logData);
          }
        };

        _proto.setUserId = function setUserId(userId) {
          this.userId = userId;
        };

        return Logger;
      }();

      var LoggyService = /*#__PURE__*/function () {
        function LoggyService() {
          _defineProperty(this, "loggyBuffer", []);

          _defineProperty(this, "isSending", false);
        }

        var _proto2 = LoggyService.prototype;

        _proto2.pushLogData = function pushLogData(logData) {
          this.loggyBuffer.push(logData);

          if (!this.isSending) {
            this.sendLogDataLoop();
          }
        };

        _proto2.sendLogDataLoop = function sendLogDataLoop() {
          var _this = this;

          if (this.loggyBuffer.length == 0) {
            this.isSending = false;
            return;
          }

          this.isSending = true;
          this.sendLogData(this.loggyBuffer[0], function () {
            _this.loggyBuffer.splice(0, 1);

            _this.sendLogDataLoop();
          }, function () {
            _this.isSending = false;
            setTimeout(function () {
              if (!_this.isSending) {
                _this.sendLogDataLoop();
              }
            }, 3000);
          });
        };

        _proto2.sendLogData = function sendLogData(logData, callback, callbackErr) {
          var _loadConfigAsync$getC5 = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC5.API_URL;

          try {
            apiObject.postRaw({
              apiUrl: API_URL,
              url: 'loggy/push',
              data: logData,
              callback: callback,
              callbackErr: callbackErr
            });
          } catch (err) {
            this.pushLogData(err.message);
          }
        };

        return LoggyService;
      }();

      var logger = exports('default', new Logger(log, warn, warn));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Player1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfPlayer.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './NodePoolConfig1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, v3, sp, loadAvatarFacebook, gfEventEmitter, SetZIndex, gfPlayer, EventCode, DataStore1988, Config1988, NodePoolConfig1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      v3 = module.v3;
      sp = module.sp;
    }, function (module) {
      loadAvatarFacebook = module.loadAvatarFacebook;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfPlayer = module.gfPlayer;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      NodePoolConfig1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "ddde4SbF99BK4meCvTEnS1q", "Player1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CONFG_Z_INDEX = {
        GUN: 10,
        COUNT_DOWN_SKILL: 20,
        BET: 5
      };
      var Player1988 = exports('Player1988', (_dec = ccclass('Player1988'), _dec2 = property(Node), _dec3 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfPlayer) {
        _inheritsLoose(Player1988, _gfPlayer);

        function Player1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfPlayer.call.apply(_gfPlayer, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "myGunBackground", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gunBackgroundOther", _descriptor2, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "effectCircleIsMe", null);

          return _this;
        }

        var _proto = Player1988.prototype;

        _proto.initObj = function initObj(data) {
          this.gun.active = true;
          this.gun.getChildByName("Gun").scale = v3(1, 1, 1);
          SetZIndex(this.gun, CONFG_Z_INDEX.GUN);
          this.isMe = data.DeskStation === DataStore1988.instance.getSelfDeskStation();
          this.txtBet.node.active = true;
          SetZIndex(this.txtBet.node, CONFG_Z_INDEX.BET); //this.txtBet.node.zIndex = CONFG_Z_INDEX.BET;

          _gfPlayer.prototype.initObj.call(this, data);

          if (this.isMe) {
            this.effectIsMe.setPosition(this.node.getPosition());
          }

          this.updateGunBackGround();
        };

        _proto.updateAvatar = function updateAvatar(data) {
          if (this.avatarAtlas) {
            if (this.avatarAtlas && loadAvatarFacebook) {
              if (data.Avatar && data.Avatar.indexOf('Avatar') === 0) {
                data.Avatar = data.Avatar.replace('Avatar', '');
              }

              loadAvatarFacebook(this.avatar, data.Avatar, this.avatarAtlas, 'avatar_', 2);
            }
          }
        };

        _proto.updateGunBackGround = function updateGunBackGround() {
          this.gunBackgroundOther.active = !this.isMe;
          this.myGunBackground && (this.myGunBackground.active = this.isMe);
        };

        _proto.onUserFire = function onUserFire(data) {
          _gfPlayer.prototype.onUserFire.call(this, data);

          if (this.isMe && this.effectCircleIsMe.active) {
            this.effectCircleIsMe.active = false;
          }
        };

        _proto._playEffectFire = function _playEffectFire(gunName) {
          var spriteGunNode = this.gun.getChildByName('Gun');

          if (spriteGunNode) {
            var mainGunAnim = spriteGunNode.getComponent(sp.Skeleton);
            if (!gunName) gunName = "gun" + (this.getGunIndex() + 1);
            this.setIsGunSkill(Object.values(Config1988.instance.GunSkill).indexOf(gunName) > -1);
            var gunData = NodePoolConfig1988.instance.getGunSkeletonData(gunName);

            if (!mainGunAnim.skeletonData || mainGunAnim.skeletonData.name != gunData.name) {
              mainGunAnim.skeletonData = gunData;
            }

            if (gunName === Config1988.instance.GunSkill.DRILL) {
              mainGunAnim.setAnimation(0, 'idle', true);
            } else {
              mainGunAnim.setAnimation(0, 'shoot', false);
              mainGunAnim.addAnimation(0, 'idle', true);
            }
          }
        };

        _proto.resetGunDrillToNormal = function resetGunDrillToNormal() {
          if (this.isMe) {
            DataStore1988.instance.setSelfInfo({
              isLockGun: false,
              currentSkillID: -1
            });
            DataStore1988.instance.setDataStore({
              targetState: Config1988.instance.TARGET_LOCK.NONE,
              currentTargetState: Config1988.instance.TARGET_LOCK.NONE
            });
            gfEventEmitter.instance.emit(EventCode.GAME_LAYER.INTERACTABLE_HUD, true);
            gfEventEmitter.instance.emit(EventCode.GAME_LAYER.RESUME_OLD_TARGET);
          }

          this.gun.active = true;
          SetZIndex(this.txtBet.node, CONFG_Z_INDEX.BET);
          this.gun.getChildByName("Gun").setScale(v3(1, 1, 1));

          this._updateGun();
        };

        _proto.resetOnExit = function resetOnExit() {
          _gfPlayer.prototype.resetOnExit.call(this);

          this.gun.active = false;
          this.txtBet.node.active = false;
        };

        return Player1988;
      }(gfPlayer), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "myGunBackground", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gunBackgroundOther", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnvObjectsLayer1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './gfDataStore.ts', './Config1985.ts', './PoolManager1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Component, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, EventsCode1985, ReferenceManager1985, gfDataStore, Config1985, PoolManager1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      PoolManager1985 = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "df4b6Cus8pGxLNg3udOrDHe", "EnvObjectsLayer1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnvObjectsLayer1985 = exports('EnvObjectsLayer1985', (_dec = ccclass('EnvObjectsLayer1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EnvObjectsLayer1985, _Component);

        function EnvObjectsLayer1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_listEnvObject", []);

          return _this;
        }

        var _proto = EnvObjectsLayer1985.prototype;

        _proto.onLoad = function onLoad() {
          ReferenceManager1985.instance.setData({
            EnvObjectGroundLayer: this.node
          });
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(EventsCode1985.GAME_LAYER.CREATE_ENV_OBJECT, this.onCreateEnvObject, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.removeAll, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.removeAll, this);
          registerEvent(EventsCode1985.GAME_LAYER.CREATE_LIST_ENV_OBJECT, this.onCreateListEnvObject, this);
        };

        _proto.onCreateListEnvObject = function onCreateListEnvObject(data) {
          var _this2 = this;

          data.forEach(function (element) {
            element.isResume = true;

            _this2.onCreateEnvObject(element);
          });
        };

        _proto.onCreateEnvObject = function onCreateEnvObject(data) {
          var envObject = PoolManager1985.instance.getEnvObjectByKind(data);
          var _Config1985$instance = Config1985.instance,
              SafeZoneOffsetX = _Config1985$instance.SafeZoneOffsetX,
              AppSize = _Config1985$instance.AppSize,
              ISLAND_OFFSET = _Config1985$instance.ISLAND_OFFSET,
              BackgroundSpeed = _Config1985$instance.BackgroundSpeed,
              ENV_OBJECT_CONFIG = _Config1985$instance.ENV_OBJECT_CONFIG;

          if (envObject) {
            this._listEnvObject.push(envObject);
          }

          if (data.ListFish) {
            for (var i = 0; i < data.ListFish.length; ++i) {
              var dataFish = data.ListFish[i];

              if (dataFish && (data.EnvObjectKind != null || data.EnvObjectKind != undefined)) {
                var y = AppSize.MaxHeight + ISLAND_OFFSET;

                if (data.isResume) {
                  var timeSpent = Math.max(0, (gfDataStore.instance.getTime() - data.BuildTick) / 1000);
                  y += timeSpent * BackgroundSpeed;
                }

                if (data.EnvObjectKind > 100) {
                  var configPos = ENV_OBJECT_CONFIG[data.EnvObjectKind.toString()].pos[dataFish.IndexInGroup.toString()];
                  var position = v3(data.PosX + configPos.x, y + configPos.y, 0);

                  if (position.x < SafeZoneOffsetX || position.x > AppSize.Width - SafeZoneOffsetX) {
                    return;
                  }

                  dataFish.position = position;
                } else {
                  var _position = v3(data.PosX, y, 0);

                  dataFish.position = _position;
                }
              }
            }

            data.ListFish.isResume = data.isResume;
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH, data.ListFish);
          }
        };

        _proto.removeAll = function removeAll() {
          this._listEnvObject.length = 0;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return EnvObjectsLayer1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupHistoryJackpot1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfLocalize.ts', './Config1988.ts', './gfPopupJackpotHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfLocalize, Config1988, GfPopupJackpotHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      GfPopupJackpotHistory = module.GfPopupJackpotHistory;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e00ecl1X1tGLJuCloWsWmaa", "PopupHistoryJackpot1988", undefined);

      var ccclass = _decorator.ccclass;
      var PopupHistoryJackpot1988 = exports('PopupHistoryJackpot1988', (_dec = ccclass('PopupHistoryJackpot1988'), _dec(_class = /*#__PURE__*/function (_GfPopupJackpotHistor) {
        _inheritsLoose(PopupHistoryJackpot1988, _GfPopupJackpotHistor);

        function PopupHistoryJackpot1988() {
          return _GfPopupJackpotHistor.apply(this, arguments) || this;
        }

        var _proto = PopupHistoryJackpot1988.prototype;

        _proto.getData = function getData() {
          return {
            gameId: Config1988.instance.GameId,
            jpList: "GRAND",
            jpPrefix: "ktf_",
            url: "jackpothistory/v2/multiple"
          };
        };

        _proto.initLanguage = function initLanguage() {
          this.pageIndexLabel.string = gfLocalize.instance.txtPopup.txtPageIndex;
        };

        return PopupHistoryJackpot1988;
      }(GfPopupJackpotHistory)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WaitingLayer1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfWaitingLayer.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, gfWaitingLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      gfWaitingLayer = module.gfWaitingLayer;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "e0268ub0/hLwYzkId3uieLH", "WaitingLayer1988", undefined);

      var ccclass = _decorator.ccclass;
      var WaitingLayer1988 = exports('WaitingLayer1988', (_dec = ccclass('WaitingLayer1988'), _dec(_class = /*#__PURE__*/function (_gfWaitingLayer) {
        _inheritsLoose(WaitingLayer1988, _gfWaitingLayer);

        function WaitingLayer1988() {
          return _gfWaitingLayer.apply(this, arguments) || this;
        }

        var _proto = WaitingLayer1988.prototype;

        _proto.runIconAction = function runIconAction() {//do nothing
        };

        return WaitingLayer1988;
      }(gfWaitingLayer)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillUltimateElectricWave1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfEventEmitter.ts', './EventsCode1985.ts', './EnemyBullet.ts', './MoveComp1985.ts', './FXSkillUltimateController1985.ts', './SpineFish1985.ts', './FishManager1985.ts', './SkillUltimateComponent1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, CircleCollider2D, Contact2DType, sp, tween, instantiate, v3f, gfEventEmitter, EventsCode1985, EnemyBullet, MoveComp1985, FXSkillUltimateController1985, SpineFish1985, FishManager1985, SkillUltimateComponent1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      CircleCollider2D = module.CircleCollider2D;
      Contact2DType = module.Contact2DType;
      sp = module.sp;
      tween = module.tween;
      instantiate = module.instantiate;
    }, function (module) {
      v3f = module.v3f;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      EnemyBullet = module.EnemyBullet;
    }, function (module) {
      MoveComp1985 = module.MoveComp1985;
    }, function (module) {
      FXSkillUltimateController1985 = module.FXSkillUltimateController1985;
    }, function (module) {
      SpineFish1985 = module.SpineFish1985;
    }, function (module) {
      FishManager1985 = module.default;
    }, function (module) {
      SkillUltimateComponent1985 = module.SkillUltimateComponent1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "e0884vBAsVMhKScv9R9Nh6d", "SkillUltimateElectricWave1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FX_CONFIG = {
        impact: 0,
        nerWin: 1
      };
      var SkillUltimateElectricWave1985 = exports('SkillUltimateElectricWave1985', (_dec = ccclass('SkillUltimateElectricWave1985'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_SkillUltimateCompone) {
        _inheritsLoose(SkillUltimateElectricWave1985, _SkillUltimateCompone);

        function SkillUltimateElectricWave1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SkillUltimateCompone.call.apply(_SkillUltimateCompone, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "boxCollider", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "isRemoveBullet", false);

          return _this;
        }

        var _proto = SkillUltimateElectricWave1985.prototype;

        _proto.start = function start() {
          this.boxCollider.getComponent(CircleCollider2D).on(Contact2DType.BEGIN_CONTACT, this.onCollisionEnter, this);
          this.isRemoveBullet = true;
          this.onScaleCircleCollider();
        };

        _proto.onScaleCircleCollider = function onScaleCircleCollider() {
          var _this2 = this;

          var dur = this.node.getComponent(sp.Skeleton).getCurrent(0).animation.duration;
          var radius = this.boxCollider.getComponent(CircleCollider2D).radius;
          var startRadius = 80;
          tween(this.boxCollider).to(dur * 0.6, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this2.boxCollider.getComponent(CircleCollider2D).radius = startRadius + (radius - startRadius) * ratio;
            },
            easing: "sineOut"
          }).delay(dur * 0.4).call(function () {
            _this2.isRemoveBullet = false;
            gfEventEmitter.instance.emit(EventsCode1985.EFFECT_LAYER.SKILL_ULTIMATE_DONE, {
              DeskStation: _this2.DeskStation
            });
          }).to(dur, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this2.boxCollider.getComponent(CircleCollider2D).radius += radius * ratio;
            }
          }).call(function () {
            _this2.rewardAllListFish();

            _this2.node.removeFromParent();

            _this2.node.destroy();
          }).start();
        };

        _proto.onCollisionEnter = function onCollisionEnter(self, other, contact) {
          var fish = other.node.getComponent(SpineFish1985) || other.node.parent.getComponent(SpineFish1985) || other.node.parent.parent.getComponent(SpineFish1985);
          var bullet = other.node.getComponent(EnemyBullet);

          if (fish && !fish.checkDie()) {
            var data = this.playEnemyCollisionEffect(fish);
            this.enemyCollisionEffectDone(data);
            gfEventEmitter.instance.emit(EventsCode1985.SOUND.IMPACT_ELECTRIC_WAVE);
          } else if (bullet && this.isRemoveBullet) {
            bullet.setIsDie(true);
          }
        };

        _proto.playEnemyCollisionEffect = function playEnemyCollisionEffect(fish) {
          var boxCollider = fish.getComponent(MoveComp1985).getBoxCollider();
          var fxSkillUltimate = fish.node.getChildByName("FXSkillUltimate1985");

          if (!fxSkillUltimate) {
            fxSkillUltimate = instantiate(this.fxSkill);
            fxSkillUltimate.setParent(fish.node);
            fxSkillUltimate.setPosition(boxCollider.getPosition());
          }

          fxSkillUltimate.getComponent(FXSkillUltimateController1985).setAnimationData({
            skillID: this.skillID,
            typeFX: FX_CONFIG.impact
          });
          var scale = this.scaleCalculation(boxCollider);
          fxSkillUltimate.setScale(v3f(scale * 0.4));
          var durAnim = this.randomFrameAnimation(fxSkillUltimate);
          return {
            scale: scale,
            fish: fish,
            durAnim: durAnim
          };
        };

        _proto.enemyCollisionEffectDone = function enemyCollisionEffectDone(data) {
          var _this3 = this;

          var scale = data.scale,
              fish = data.fish,
              durAnim = data.durAnim;
          this.scheduleOnce(function () {
            var compFish = _this3.getFishById(fish.getId());

            var fxSkillUltimate = null;

            if (compFish) {
              fxSkillUltimate = fish.node.getChildByName("FXSkillUltimate1985");
              if (!fxSkillUltimate) return;
              fxSkillUltimate.removeFromParent();
              fxSkillUltimate.destroy();
              FishManager1985.instance.catchFish(compFish);
            } else {
              if (fish.node.isValid && fish.checkDie()) return;
              fxSkillUltimate = fish.node.getChildByName("FXSkillUltimate1985");
              if (!fxSkillUltimate) return;
              fxSkillUltimate.setScale(v3f(scale * 0.5));
              fxSkillUltimate.getComponent(FXSkillUltimateController1985).setAnimationData({
                skillID: _this3.skillID,
                typeFX: FX_CONFIG.nerWin
              });

              _this3.randomFrameAnimation(fxSkillUltimate);
            }
          }, durAnim);
        };

        return SkillUltimateElectricWave1985;
      }(SkillUltimateComponent1985), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "boxCollider", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfExplosionSpine.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, sp, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "e09b0R5llpCqJtPjP0RA4as", "gfExplosionSpine", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfExplosionSpine = exports('gfExplosionSpine', (_dec = ccclass('gfExplosionSpine'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfExplosionSpine, _gfNode);

        function gfExplosionSpine() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "animationName", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfExplosionSpine.prototype;

        _proto.onEnable = function onEnable() {
          var _this2 = this;

          this.scheduleOnce(function () {
            var spine = _this2.node.getComponent(sp.Skeleton);

            spine.setAnimation(0, _this2.animationName, false);
            spine.setCompleteListener(function () {
              _this2.returnPool();
            });
          }, 0);
        };

        _proto.returnPool = function returnPool() {
          this.unscheduleAllCallbacks();

          _gfNode.prototype.returnPool.call(this);
        };

        return gfExplosionSpine;
      }(gfNode), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "animationName", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return "animation";
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LayoutNodeInstance.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, _inheritsLoose, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _class2, _temp;

      cclegacy._RF.push({}, "e17d55QpGxCiprWgGmQLSDT", "LayoutNodeInstance", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LayoutNodeInstance = exports('LayoutNodeInstance', (_dec = ccclass('LayoutNodeInstance'), _dec(_class = (_temp = _class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LayoutNodeInstance, _Component);

        function LayoutNodeInstance() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = LayoutNodeInstance.prototype;

        _proto.onLoad = function onLoad() {
          console.log("LayoutNodeInstance onLoad");

          if (LayoutNodeInstance.onLoadCallback != null) {
            LayoutNodeInstance.onLoadCallback(this.node);
          }
        };

        _proto.start = function start() {
          // [3]
          this.node.setSiblingIndex(1000);
        };

        return LayoutNodeInstance;
      }(Component), _defineProperty(_class2, "onLoadCallback", null), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/serviceRest.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e18ccAUCBxLoaFRV2OtkUct", "serviceRest", undefined); // Rest API to connect to server


      var ServiceRest = /*#__PURE__*/function () {
        function ServiceRest() {
          _defineProperty(this, "request", void 0);

          this.request = new XMLHttpRequest();
        }

        var _proto = ServiceRest.prototype;

        _proto.encodeQueryData = function encodeQueryData(data) {
          return Object.keys(data).map(function (key) {
            return [key, data[key]].map(encodeURIComponent).join("=");
          }).join("&");
        };

        _proto.get = function get(_ref) {
          var _ref$url = _ref.url,
              url = _ref$url === void 0 ? '' : _ref$url,
              _ref$params = _ref.params,
              params = _ref$params === void 0 ? {} : _ref$params,
              _ref$callback = _ref.callback,
              callback = _ref$callback === void 0 ? function (data) {} : _ref$callback,
              _ref$apiUrl = _ref.apiUrl,
              apiUrl = _ref$apiUrl === void 0 ? '' : _ref$apiUrl,
              _ref$callbackErr = _ref.callbackErr,
              callbackErr = _ref$callbackErr === void 0 ? function () {} : _ref$callbackErr;
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  callback(JSON.parse(request.responseText));
                } else {
                  callbackErr();
                }
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send();
        };

        _proto.getWithHeader = function getWithHeader(_ref2) {
          var _ref2$url = _ref2.url,
              url = _ref2$url === void 0 ? '' : _ref2$url,
              _ref2$params = _ref2.params,
              params = _ref2$params === void 0 ? {} : _ref2$params,
              _ref2$headers = _ref2.headers,
              headers = _ref2$headers === void 0 ? {} : _ref2$headers,
              _ref2$callback = _ref2.callback,
              callback = _ref2$callback === void 0 ? function (data) {} : _ref2$callback,
              _ref2$apiUrl = _ref2.apiUrl,
              apiUrl = _ref2$apiUrl === void 0 ? '' : _ref2$apiUrl,
              _ref2$callbackErr = _ref2.callbackErr,
              callbackErr = _ref2$callbackErr === void 0 ? function () {} : _ref2$callbackErr;
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open("GET", fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
          Object.keys(headers).forEach(function (key) {
            request.setRequestHeader(key, headers[key]);
          });

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              //get status text
              if (callback) {
                if (request.responseText) {
                  callback(JSON.parse(request.responseText));
                } else {
                  callbackErr();
                }
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function () {
            callbackErr();
          };

          request.onerror = function () {
            callbackErr();
          };

          request.send();
        };

        _proto.post = function post(_ref3) {
          var _ref3$url = _ref3.url,
              url = _ref3$url === void 0 ? '' : _ref3$url,
              _ref3$data = _ref3.data,
              data = _ref3$data === void 0 ? {} : _ref3$data,
              _ref3$callback = _ref3.callback,
              callback = _ref3$callback === void 0 ? function (data) {} : _ref3$callback,
              _ref3$apiUrl = _ref3.apiUrl,
              apiUrl = _ref3$apiUrl === void 0 ? '' : _ref3$apiUrl,
              _ref3$callbackErr = _ref3.callbackErr,
              callbackErr = _ref3$callbackErr === void 0 ? function () {} : _ref3$callbackErr;
          var dataPost = this.encodeQueryData(data);
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.postWithHeader = function postWithHeader(_ref4) {
          var _ref4$url = _ref4.url,
              url = _ref4$url === void 0 ? '' : _ref4$url,
              _ref4$params = _ref4.params,
              params = _ref4$params === void 0 ? {} : _ref4$params,
              _ref4$headers = _ref4.headers,
              headers = _ref4$headers === void 0 ? {} : _ref4$headers,
              _ref4$data = _ref4.data,
              data = _ref4$data === void 0 ? {} : _ref4$data,
              _ref4$callback = _ref4.callback,
              callback = _ref4$callback === void 0 ? function (data) {} : _ref4$callback,
              _ref4$apiUrl = _ref4.apiUrl,
              apiUrl = _ref4$apiUrl === void 0 ? '' : _ref4$apiUrl,
              _ref4$callbackErr = _ref4.callbackErr,
              callbackErr = _ref4$callbackErr === void 0 ? function () {} : _ref4$callbackErr;
          var dataPost = JSON.stringify(data);
          var querystring = '?' + this.encodeQueryData(params);
          var fullURL = apiUrl + url + querystring;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/json');
          Object.keys(headers).forEach(function (key) {
            request.setRequestHeader(key, headers[key]);
          });

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.postRaw = function postRaw(_ref5) {
          var _ref5$url = _ref5.url,
              url = _ref5$url === void 0 ? '' : _ref5$url,
              _ref5$data = _ref5.data,
              data = _ref5$data === void 0 ? {} : _ref5$data,
              _ref5$callback = _ref5.callback,
              callback = _ref5$callback === void 0 ? function (data) {} : _ref5$callback,
              _ref5$apiUrl = _ref5.apiUrl,
              apiUrl = _ref5$apiUrl === void 0 ? '' : _ref5$apiUrl,
              _ref5$callbackErr = _ref5.callbackErr,
              callbackErr = _ref5$callbackErr === void 0 ? function () {} : _ref5$callbackErr;
          var dataPost = data;
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('POST', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.status == 200) {
              callback({
                status: request.status,
                data: request.responseText
              });
            } else {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        _proto.put = function put(_ref6) {
          var _ref6$url = _ref6.url,
              url = _ref6$url === void 0 ? '' : _ref6$url,
              _ref6$data = _ref6.data,
              data = _ref6$data === void 0 ? {} : _ref6$data,
              _ref6$callback = _ref6.callback,
              callback = _ref6$callback === void 0 ? function (data) {} : _ref6$callback,
              _ref6$apiUrl = _ref6.apiUrl,
              apiUrl = _ref6$apiUrl === void 0 ? '' : _ref6$apiUrl,
              _ref6$callbackErr = _ref6.callbackErr,
              callbackErr = _ref6$callbackErr === void 0 ? function () {} : _ref6$callbackErr;
          var dataPost = this.encodeQueryData(data);
          var fullURL = apiUrl + url;
          var request = new XMLHttpRequest();
          request.open('PUT', fullURL, true);
          request.timeout = 15000;
          request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

          request.onreadystatechange = function () {
            if (request.readyState == 4) {
              if (request.responseText) {
                callback({
                  status: request.status,
                  data: JSON.parse(request.responseText)
                });
              } else {
                callbackErr();
              }
            } else if (request.readyState === 0) {
              callbackErr();
            }

            if (request.status !== 200) {
              callbackErr();
            }
          };

          request.ontimeout = function (e) {
            callbackErr();
          };

          request.onerror = function (e) {
            callbackErr();
          };

          request.send(dataPost);
        };

        return ServiceRest;
      }();

      var apiObject = exports('default', new ServiceRest());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSpriteFish.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseFish.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Animation, Sprite, gfBaseFish;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      Sprite = module.Sprite;
    }, function (module) {
      gfBaseFish = module.gfBaseFish;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "e1abeHfbDROX5IZHc7PVztn", "gfSpriteFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfSpriteFish = exports('gfSpriteFish', (_dec = ccclass('gfSpriteFish'), _dec2 = property(Animation), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfBaseFish) {
        _inheritsLoose(gfSpriteFish, _gfBaseFish);

        function gfSpriteFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBaseFish.call.apply(_gfBaseFish, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "fishAnim", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_clipName", void 0);

          return _this;
        }

        var _proto = gfSpriteFish.prototype;

        _proto.initAssets = function initAssets(config) {
          if (!this.fishAnim) {
            this.fishAnim = this.node.getChildByName('mainFish').getComponent(Animation);
          }

          _gfBaseFish.prototype.initAssets.call(this, config);

          for (var i = 0; i < this.fishAnim.clips.length; i++) {
            this.fishAnim.removeState(this.fishAnim.clips[0].name);
          }

          this.fishAnim.clips = [config.asset];
          this.fishAnim.play(config.asset.name);
          this._clipName = this.fishAnim.clips[0].name;
        };

        _proto.playEffectDie = function playEffectDie() {
          this.fishAnim.getState(this._clipName).speed = 2;
        };

        _proto.changeAnimationSpeed = function changeAnimationSpeed(multiple) {
          if (multiple === void 0) {
            multiple = 1;
          }

          this.fishAnim.getState(this._clipName).speed *= multiple;
        };

        _proto.resetAnimationSpeed = function resetAnimationSpeed() {
          if (this.fishAnim.clips.length > 0) {
            this.fishAnim.getState(this._clipName).speed = 1;
          }
        };

        _proto.resetColor = function resetColor() {
          this.fishAnim.getComponent(Sprite).color = this.NORMAL_COLOR;
        };

        _proto.setColor = function setColor(color) {
          this.fishAnim.getComponent(Sprite).color = color;
        };

        return gfSpriteFish;
      }(gfBaseFish), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "fishAnim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PanelJackpotController1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1988.ts', './ReferenceManager1988.ts', './FishManager1988.ts', './PanelChip1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, warn, Component, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, EventCode, ReferenceManager1988, FishManager1988, PanelChip1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      warn = module.warn;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }, function (module) {
      FishManager1988 = module.default;
    }, function (module) {
      PanelChip1988 = module.PanelChip1988;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "e3255alNCBBhZMVwZt7o4yw", "PanelJackpotController1988", undefined);

      var SIZE_PASSWORD = 7;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PanelJackpotController1988 = exports('PanelJackpotController1988', (_dec = ccclass('PanelJackpotController1988'), _dec2 = property(PanelChip1988), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PanelJackpotController1988, _Component);

        function PanelJackpotController1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "arrPanelChip", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_maxItemID", 0);

          _defineProperty(_assertThisInitialized(_this), "_deskStationWonJP", null);

          _defineProperty(_assertThisInitialized(_this), "_arrayChipGot", [0, 0, 0, 0]);

          return _this;
        }

        var _proto = PanelJackpotController1988.prototype;

        _proto.onLoad = function onLoad() {
          this.reset();
          this.initEvents();

          for (var index = 0; index < this.arrPanelChip.length; ++index) {
            var panelChip = this.arrPanelChip[index];
            panelChip.setIndex(index);
          }

          ReferenceManager1988.instance.setData({
            PanelJackpotLayer: this.node
          });
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.DRAGON.CREATE, this.onBorisCreated, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.reset, this);
          registerEvent(EventCode.GAME_LAYER.UPDATE_PANEL_CHIP, this.updatePanelChip, this);
          registerEvent(EventCode.GAME_LAYER.HIDE_PANEL_CHIP, this.reset, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.updateListPlayer, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_JOIN_BOARD, this.playerJoinBoard, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.PLAYER_LEAVE_BOARD, this.playerLeaveBoard, this);
          registerEvent(gfBaseEvents.DRAGON.ON_BALL_DROPPED, this.chipDropped, this);
          registerEvent(EventCode.GAME_LAYER.BORIS_WAIT_DIE, this.borisWaitDie, this);
          registerEvent(EventCode.GAME_LAYER.BORIS_END, this.onBorisDied, this);
        };

        _proto.onBorisCreated = function onBorisCreated(data) {
          var listPlayerSize = 4;

          for (var DeskStation = 0; DeskStation < listPlayerSize; ++DeskStation) {
            var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

            if (player.isActive()) {
              this.showPanelChipByIndex(player.index, player.isMe);
            }
          } //nếu resume thì không chạy anim


          if (!data.maxItemID) {
            data.maxItemID = 0;
          }

          this._maxItemID = data.maxItemID;
        };

        _proto.onBorisDied = function onBorisDied() {
          var listPlayerSize = 4;

          for (var DeskStation = 0; DeskStation < listPlayerSize; ++DeskStation) {
            var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

            if (player.isActive()) {
              var panelChip = this.getPanelChipByIndex(player.index);
              panelChip.getComponent(PanelChip1988).setHide();
            }
          }

          this._arrayChipGot = [0, 0, 0, 0];
          this._deskStationWonJP = null;
        };

        _proto.showPanelChipByIndex = function showPanelChipByIndex(index, isMe) {
          if (isMe === void 0) {
            isMe = false;
          }

          this.arrPanelChip[index].getComponent(PanelChip1988).show();
          this.arrPanelChip[index].getComponent(PanelChip1988).setSpriteFrameProgressBar(isMe);
        };

        _proto.hidePanelChipByIndex = function hidePanelChipByIndex(index) {
          this.arrPanelChip[index].getComponent(PanelChip1988).hide();
        };

        _proto.resumePanelChip = function resumePanelChip(arrChip, DeskStation) {
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

          if (player.isActive()) {
            var panelChipMainCompo = this.getPanelChipByIndex(player.index).getComponent(PanelChip1988);
            if (!panelChipMainCompo) return;
            panelChipMainCompo.show();
            this._arrayChipGot[+DeskStation] = arrChip.length;
            panelChipMainCompo.resumeData(arrChip);
            panelChipMainCompo.setSpriteFrameProgressBar(player.isMe);
          }
        } //nhận thông tin chip bay về và cập nhật dataPanel Chip
        ;

        _proto.updatePanelChip = function updatePanelChip(data) {
          var DeskStation = data.DeskStation,
              itemId = data.itemId,
              GoldReward = data.GoldReward;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);
          var panelChip = this.getPanelChipByIndex(player.index);
          panelChip.getComponent(PanelChip1988).addChip(itemId, GoldReward, undefined);

          if (itemId != 0) {
            this._arrayChipGot[+DeskStation]++;

            if (this._arrayChipGot[+DeskStation] == SIZE_PASSWORD) {
              this.forceDecryptionAllEnergy();
            }
          }
        };

        _proto.updateListPlayer = function updateListPlayer(data) {
          var _this2 = this;

          if (!data) {
            warn("Why have not data?? ", data);
            return;
          } //@ts-ignore


          var bossBoris = FishManager1988.instance.getBossBoris();

          if (bossBoris) {
            data.forEach(function (_ref) {
              var DeskStation = _ref.DeskStation,
                  chips = _ref.chips;

              if (!chips) {
                chips = [];
              }

              _this2.resumePanelChip(chips, DeskStation);
            });
          } else {
            this.reset();
          }
        };

        _proto.playerJoinBoard = function playerJoinBoard(data) {
          if (!data) {
            warn("Why have not data?? ", data);
            return;
          } //@ts-ignore


          var bossBoris = FishManager1988.instance.getBossBoris();
          var isBossAvailable = bossBoris && bossBoris.isAvailable();

          if (isBossAvailable) {
            var chips = data.chips,
                DeskStation = data.DeskStation;
            this.resumePanelChip(chips, DeskStation);
          }
        };

        _proto.playerLeaveBoard = function playerLeaveBoard(_ref2) {
          var DeskStation = _ref2.DeskStation;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

          if (player.isMe) {
            this.reset();
            return;
          }

          this.hidePanelChipByIndex(player.index);

          if (DeskStation === this._deskStationWonJP) {
            gfEventEmitter.instance.emit(EventCode.FISH_LAYER.CATCH_BORIS);
            this._deskStationWonJP = null;
          }
        };

        _proto.chipDropped = function chipDropped(data) {
          var DeskStation = data.DeskStation,
              GoldReward = data.GoldReward;
          var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

          if (player.isMe) {
            player.addGoldReward(GoldReward);
          }
        };

        _proto.borisWaitDie = function borisWaitDie(data) {
          var DeskStation = data.DeskStation,
              wonJackpot = data.wonJackpot;

          if (wonJackpot) {
            this._deskStationWonJP = DeskStation;
          }
        };

        _proto.forceDecryptionAllEnergy = function forceDecryptionAllEnergy() {
          var listPlayerSize = 4;

          for (var DeskStation = 0; DeskStation < listPlayerSize; ++DeskStation) {
            var player = ReferenceManager1988.instance.getPlayerByDeskStation(DeskStation);

            if (player.isActive()) {
              var panelChip = this.getPanelChipByIndex(player.index); //error("forceDecryptionAllEnergy");

              panelChip.getComponent(PanelChip1988).playAnimGetChipWinJackpot();
            }
          }
        };

        _proto.getPanelChipByIndex = function getPanelChipByIndex(index) {
          return this.arrPanelChip[index];
        };

        _proto.reset = function reset() {
          //todo reset all
          this.arrPanelChip.forEach(function (panelChip) {
            panelChip.getComponent(PanelChip1988).hide();
          });
          this._deskStationWonJP = null;
          this._arrayChipGot = [0, 0, 0, 0];
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        } // update (dt) {},
        ;

        return PanelJackpotController1988;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "arrPanelChip", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemySP1Move.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './Config1985.ts', './MoveBySpine1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Node, UITransform, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, EventsCode1985, ReferenceManager1985, Config1985, MoveBySpine1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      MoveBySpine1985 = module.MoveBySpine1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "e3bc5vM7lpB9Y0n8Y+RB8bv", "EnemySP1Move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemySP1Move = exports('EnemySP1Move', (_dec = ccclass('EnemySP1Move'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_MoveBySpine) {
        _inheritsLoose(EnemySP1Move, _MoveBySpine);

        function EnemySP1Move() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _MoveBySpine.call.apply(_MoveBySpine, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "ANIM_NAME", {
            Move: "move",
            Die: "die"
          });

          _defineProperty(_assertThisInitialized(_this), "yOffset", 67.2);

          _defineProperty(_assertThisInitialized(_this), "data", null);

          _initializerDefineProperty(_assertThisInitialized(_this), "listMinion", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = EnemySP1Move.prototype;

        _proto.onLoad = function onLoad() {
          registerEvent(EventsCode1985.GAME_LAYER.CATCH_FISH_BY_SKILL_BOMB, this.initDataCatchFishByBomb, this);
        };

        _proto.initDataCatchFishByBomb = function initDataCatchFishByBomb(data) {
          this.data = data;
        };

        _proto.playAnimation = function playAnimation(animationName) {
          this.fishAnim.setAnimation(0, animationName, false);
          this.fishAnim.setAnimation(1, this.ANIM_NAME.Move, true);
          this.fishAnim.setTrackCompleteListener(this.fishAnim.getCurrent(0), this.onComplete);
        };

        _proto.playEffectWinInCatchFish = function playEffectWinInCatchFish(data) {
          var rewardListFish = this.data.data.ListFish.reduce(function (total, listFish) {
            return total + listFish.GoldReward;
          }, 0);
          data.GoldReward = (this.data.data.TotalReward - rewardListFish) / 4;
          data.SkillID = this.data.data.SkillID;
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe) {
            player.addGoldReward(this.data.data.TotalReward);
          }

          this.listMinion.forEach(function (item) {
            data.isSkill = true;
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
              data: data,
              fishKind: data.FishKind,
              fishPos: item.getWorldPosition()
            });
          });
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.TRIGGER_BOMB, {
            posNode: this.getWorldPosition(),
            data: this.data
          });
          gfEventEmitter.instance.emit(EventsCode1985.EFFECT_LAYER.PLAY_EFFECT_BIG_WIN, this.data.data);
        };

        _proto.onDie = function onDie(data) {
          var _this2 = this;

          this.isDie = true;
          this.fishAnim.clearTracks();
          this.fishAnim.setAnimation(0, this.ANIM_NAME.Die, false);

          var _this$node$parent$get = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.getWorldPosition()),
              x = _this$node$parent$get.x,
              y = _this$node$parent$get.y,
              z = _this$node$parent$get.z;

          this.node.setPosition(x, y + this.yOffset, z);
          var durDelay = this.fishAnim.getCurrent(0).animation.duration * 0.45;
          this.scheduleOnce(function () {
            _this2.playEffectWinInCatchFish(data);
          }, durDelay);
          this.fishAnim.setTrackCompleteListener(this.fishAnim.getCurrent(0), function () {
            _this2.fishAnim.setTrackCompleteListener(_this2.fishAnim.getCurrent(0), function () {});

            _this2.isDie = true;
            _this2.fishAnim.paused = true;
            _this2.onComplete && _this2.onComplete();
          });
        };

        _proto.updatePosition = function updatePosition(dt) {
          var _this$node$getPositio = this.node.getPosition(),
              x = _this$node$getPositio.x,
              y = _this$node$getPositio.y;

          this.node.setPosition(x, y + Config1985.instance.BackgroundSpeed * dt, 0);
        };

        _proto.update = function update(dt) {
          if (this.isDie) {
            this.updatePosition(dt);
          }

          _MoveBySpine.prototype.update.call(this, dt);
        };

        _proto.onDestroy = function onDestroy() {
          this.data = null;
          removeEvents(this);
        };

        return EnemySP1Move;
      }(MoveBySpine1985), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listMinion", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfNodePool.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, instantiate, isValid, Sprite, log, NodePool;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      instantiate = module.instantiate;
      isValid = module.isValid;
      Sprite = module.Sprite;
      log = module.log;
      NodePool = module.NodePool;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e3e2eRswGZIYZRgK/R5u/0m", "gfNodePool", undefined);

      var LOG = log;
      var gfNodePool = exports('default', /*#__PURE__*/function (_NodePool) {
        _inheritsLoose(gfNodePool, _NodePool);

        function gfNodePool() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _NodePool.call.apply(_NodePool, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "objPrefab", void 0);

          _defineProperty(_assertThisInitialized(_this), "usingNodes", void 0);

          return _this;
        }

        var _proto = gfNodePool.prototype;

        _proto.init = function init(prefab, initCount) {
          if (initCount === void 0) {
            initCount = 5;
          }

          if (!this.objPrefab) {
            this.objPrefab = instantiate(prefab);
            this.usingNodes = [];
          }

          for (var i = 0; i < initCount; i++) {
            var item = instantiate(this.objPrefab);
            this.put(item);
          }
        };

        _proto.getSize = function getSize() {
          return this.size();
        };

        _proto.getObj = function getObj() {
          if (this.size() == 0) {
            this.put(instantiate(this.objPrefab));
          }

          var obj = this.get(this);
          this.usingNodes.push(obj);
          return obj;
        };

        _proto.clearPool = function clearPool() {
          this.clear();
        };

        _proto.reinit = function reinit() {
          this.clear();
          this.init(this.objPrefab);
        };

        _proto.putObj = function putObj(node) {
          for (var i = 0; i < this.usingNodes.length; ++i) {
            if (this.usingNodes[i].uuid == node.uuid) {
              this.usingNodes.splice(i, 1);
              break;
            }
          }

          this.put(node);
        };

        _proto.getUsingNodeList = function getUsingNodeList() {
          return this.usingNodes;
        };

        _proto.returnAllToPool = function returnAllToPool() {
          while (this.usingNodes.length > 0) {
            var obj = this.usingNodes.pop();

            if (isValid(obj)) {
              this.put(obj);
            } else {
              LOG("return invalid object to pool!");
            }
          }
        };

        _proto.reloadAllSpriteUV = function reloadAllSpriteUV() {
          var tempArr = [];

          while (this.getSize() > 0) {
            tempArr.push(this.get());
          }

          while (tempArr.length > 0) {
            var tempNode = tempArr.pop();
            var sprites = tempNode.getComponentsInChildren(Sprite);
            sprites.forEach(function (sprite) {
              if (sprite.renderData) {
                sprite.renderData.uvDirty = true;
              }
            });
            this.put(tempNode);
          }
        };

        _proto.destroy = function destroy() {
          this.returnAllToPool();
          this.clear();
          this.objPrefab.destroy();
          this.objPrefab = null;
        };

        return gfNodePool;
      }(NodePool));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMoveByThreePoints.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _defineProperty, tween, cclegacy, v2, log, v2Distance;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      tween = module.tween;
      cclegacy = module.cclegacy;
      v2 = module.v2;
      log = module.log;
    }, function (module) {
      v2Distance = module.v2Distance;
    }],
    execute: function () {
      exports('default', gfMoveByThreePoints);

      cclegacy._RF.push({}, "e57323vYdNGf6/kEdRSt6UO", "gfMoveByThreePoints", undefined);

      var _gfMoveByThreePoints = /*#__PURE__*/function () {
        function _gfMoveByThreePoints(data) {
          _defineProperty(this, "totalPoints", void 0);

          _defineProperty(this, "_configPoints", void 0);

          _defineProperty(this, "_duration", void 0);

          _defineProperty(this, "arcLengths", void 0);

          _defineProperty(this, "_timeSpent", void 0);

          _defineProperty(this, "realDuration", void 0);

          var speed = data.speed,
              points = data.points,
              timeSpent = data.timeSpent,
              isResume = data.isResume;
          this.totalPoints = 100;
          var durationPerUnit = 1 / this.totalPoints;
          this._configPoints = points;
          this._duration = 0;
          this.arcLengths = new Array(this.totalPoints + 1);
          this.arcLengths[0] = 0;
          var lastPoint = v2(this.x(0), this.y(0));

          for (var i = 1; i <= this.totalPoints; i += 1) {
            var currentPoint = v2(this.x(i * durationPerUnit), this.y(i * durationPerUnit));
            var distance = v2Distance(lastPoint, currentPoint);
            this._duration += distance / speed;
            this.arcLengths[i] = this.arcLengths[i - 1] + distance;
            lastPoint = currentPoint;
          }

          this._timeSpent = isResume ? timeSpent : 0;
          var speedScale = isResume ? 1 : this._duration / (this._duration - timeSpent);
          this.realDuration = Math.max(0, this._duration - timeSpent);

          if (speedScale > 3) {
            log("skip create fish: speedScale-" + speedScale, speed, points, timeSpent, isResume);
            this.realDuration = 0;
          }
        }

        var _proto = _gfMoveByThreePoints.prototype;

        _proto.map = function map(u) {
          var targetLength = u * this.arcLengths[this.totalPoints];
          var low = 0,
              high = this.totalPoints,
              index = 0;

          while (low < high) {
            index = low + ((high - low) / 2 | 0);

            if (this.arcLengths[index] < targetLength) {
              low = index + 1;
            } else {
              high = index;
            }
          }

          if (this.arcLengths[index] > targetLength) {
            index--;
          }

          var lengthBefore = this.arcLengths[index];

          if (lengthBefore === targetLength) {
            return index / this.totalPoints;
          } else {
            return (index + (targetLength - lengthBefore) / (this.arcLengths[index + 1] - lengthBefore)) / this.totalPoints;
          }
        };

        _proto.x = function x(t) {
          return (1 - t) * (1 - t) * this._configPoints[0].x + 2 * (1 - t) * t * this._configPoints[1].x + t * t * this._configPoints[2].x;
        };

        _proto.y = function y(t) {
          return (1 - t) * (1 - t) * this._configPoints[0].y + 2 * (1 - t) * t * this._configPoints[1].y + t * t * this._configPoints[2].y;
        };

        _proto.mx = function mx(u) {
          return this.x(this.map(u));
        };

        _proto.my = function my(u) {
          return this.y(this.map(u));
        };

        _proto.update = function update(target, dt) {
          dt = (dt * this.realDuration + this._timeSpent) / this._duration; // dt = this._computeEaseTime(dt);

          if (target) {
            target.setPosition(this.mx(dt), this.my(dt), target.position.z);
          }
        };

        return _gfMoveByThreePoints;
      }();

      function gfMoveByThreePoints(data) {
        var action = new _gfMoveByThreePoints(data);

        if (action.realDuration == 0) {
          return tween().delay(0);
        }

        return tween().to(action.realDuration, null, {
          onUpdate: function onUpdate(target, ratio) {
            action.update(target, ratio);
          }
        });
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseEvents.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e57f8GD7yFOiJEBw3WDnc3w", "gfBaseEvents", undefined); // Contain Events communicate between components


      var gfBaseEvents = exports('default', {
        COMMON: {
          UPDATE_PING: "UPDATE_PING",
          SHOW_WAITING: "SHOW_WAITING",
          HIDE_WAITING: "HIDE_WAITING",
          GO_LOBBY: "GO_LOBBY",
          EXIT_GAME_ROOM: "EXIT_GAME_ROOM",
          CLOSE_SCENE: "COMMON_CLOSE_SCENE",
          INIT_SCENE: "COMMON_INIT_SCENE",
          REFRESH_PAGE: "REFRESH_PAGE",
          UPDATE_JACKPOT: "UPDATE_JACKPOT",
          SHOW_NOTIFY: "SHOW_NOTIFY",
          RESET_TOUCH_LISTENER: "RESET_TOUCH_LISTENER",
          REMOVE_TOUCH_LISTENER: "REMOVE_TOUCH_LISTENER",
          GAME_SHOW: "GAME_SHOW",
          GAME_HIDE: "GAME_HIDE",
          SHAKE_SCREEN: "SHAKE_SCREEN",
          ON_SHOW_GAME_LAYER: "ON_SHOW_GAME_LAYER",
          SCENE_LOAD_DONE: "SCENE_LOAD_DONE",
          UPDATE_EVENT_STATUS: "UPDATE_EVENT_STATUS",
          SEND_EXIT_GAME_SERVER: "SEND_EXIT_GAME_SERVER",
          CONNECT_MASTER: "CONNECT_MASTER",
          CONNECT_GAME: "CONNECT_GAME",
          REMOVE_PERSIST_NODE: "REMOVE_PERSIST_NODE",
          ON_SCREEN_RESIZE: "ON_SCREEN_RESIZE",
          EXIT_GAME: "EXIT_GAME",
          LOADING_TRANSITION: "LOADING_TRANSITION",
          NETWORK_STATUS_INFO: "NETWORK_STATUS_INFO",
          BEFORE_LOAD_SCENE: "BEFORE_LOAD_SCENE"
        },
        POPUP: {
          CLOSE_ALL: "CLOSE_ALL",
          UPDATE_BOT_SETTING: "UPDATE_BOT_SETTING",
          GET_BOT_SETTING: "GET_BOT_SETTING",
          SET_BOT_SETTING: "SET_BOT_SETTING",
          POPUP_PROMPT: "POPUP_PROMPT",
          POPUP_SETTING: "POPUP_SETTING",
          POPUP_INFO: "POPUP_INFO",
          POPUP_TUTORIAL: "POPUP_TUTORIAL",
          POPUP_JACKPOT_HISTORY: "POPUP_JACKPOT_HISTORY",
          POPUP_AUTO_BOT: "POPUP_AUTO_BOT",
          POPUP_EVENT_INFO: "POPUP_EVENT_INFO",
          CHECK_SHOW_POPUP_EVENT: "CHECK_SHOW_POPUP_EVENT",
          CLOSE_TOP_POPUP: "CLOSE_TOP_POPUP"
        },
        SOUND: {
          SOUND_EFFECT_ENABLE: "SOUND_EFFECT_ENABLE",
          SOUND_BGM_ENABLE: "SOUND_BGM_ENABLE",
          RESUME_SOUND_BACKGROUND: "RESUME_SOUND_BACKGROUND",
          PLAY_SOUND_BACKGROUND: "PLAY_SOUND_BACKGROUND",
          STOP_ALL: "STOP_ALL",
          CLICK: "CLICK",
          GUN_FIRE: "GUN_FIRE",
          EFFECT_GOLD: "EFFECT_GOLD",
          EFFECT_CATCH: "EFFECT_CATCH",
          EFFECT_CATCH_BIGFISH: "EFFECT_CATCH_BIGFISH",
          EFFECT_BOMB: "EFFECT_BOMB",
          BIG_WIN: "BIG_WIN",
          MEGA_WIN: "MEGA_WIN",
          FIRE_LASER: "FIRE_LASER",
          MINIBOSS_DEAD: "MINIBOSS_DEAD",
          MINIBOSS_HIT: "MINIBOSS_HIT",
          DRAGON_SCREAM: "DRAGON_SCREAM",
          DRAGON_DIE: "DRAGON_DIE",
          BALL_TRAY_SHOW: "BALL_TRAY_SHOW",
          BALL_TRAY_DRAW: "BALL_TRAY_DRAW",
          COLLECT_BALL: "COLLECT_BALL",
          DRAGON_APPEAR: "SOUND_DRAGON_APPEAR",
          RESET_VOLUME: "RESET_VOLUME",
          UPDATE_MUSIC_VOL: "UPDATE_MUSIC_VOL",
          UPDATE_EFFECT_VOL: "UPDATE_EFFECT_VOL",
          DRAGON_BIG_WIN: "DRAGON_BIG_WIN",
          STOP_ALL_AUDIO: "STOP_ALL_AUDIO",
          PLAY_EFFECT_JACKPOT_COIN: "PLAY_EFFECT_JACKPOT_COIN",
          STOP_EFFECT_JACKPOT_COIN: "STOP_EFFECT_JACKPOT_COIN",
          DRAGON_HIT_BALL: "DRAGON_HIT_BALL",
          DRAGON_BALL_REWARD: "DRAGON_BALL_REWARD",
          DRAGON_BALL_HIDE: "DRAGON_BALL_HIDE",
          MAIN_BGM: "MAIN_BGM",
          LOBBY_BGM: "LOBBY_BGM",
          MINIBOSS_BGM: "MINIBOSS_BGM",
          DRAGON_BGM: "DRAGON_BGM",
          CLICK_BET: "CLICK_BET",
          EVENT_JOIN_GAME: "EVENT_JOIN_GAME",
          EFFECT_GET_ITEM_FREEZE: "EFFECT_GET_ITEM_FREEZE",
          EFFECT_GET_ITEM_LASER: "EFFECT_GET_ITEM_LASER",
          PAUSE_OR_RESUME_SOUND_WIN: "PAUSE_OR_RESUME_SOUND_WIN",
          STOP_BIG_WIN: "STOP_SOUND_BIG_WIN"
        },
        GAME_LAYER: {
          UPDATE_TABLE_ID: "UPDATE_TABLE_ID",
          ON_ENTER_GAME_ROOM: "GAME_LAYER_ON_ENTER_GAME_ROOM",
          ON_PLAYER_FIRE: "ON_PLAYER_FIRE",
          CREATE_FISH: "GAME_LAYER_CREATE_FISH",
          CREATE_FISH_GROUP: "GAME_LAYER_CREATE_FISH_GROUP",
          RESUME_FISH_GROUP: "GAME_LAYER_RESUME_FISH_GROUP",
          BULLET_COLLIDE_FISH: "GAME_LAYER_BULLET_COLLIDE_FISH",
          SEND_GUN_FIRE: "SEND_GUN_FIRE",
          SEND_FIRE_LASER: "SEND_FIRE_LASER",
          SEND_FIRE_DRILL: "SEND_FIRE_DRILL",
          PLAY_LASER: "PLAY_LASER",
          CREATE_BULLET: "GAME_LAYER_CREATE_BULLET",
          CATCH_FISH: "CATCH_FISH",
          CHOOSE_FISH_BY_POINT: "CHOOSE_FISH_BY_POINT",
          ON_SEND_FIRE: "ON_SEND_FIRE",
          REMOVE_FISH: "REMOVE_FISH",
          FREEZE_FISH: "FREEZE_FISH",
          UPDATE_LOCK_FISH_IMAGE: "UPDATE_LOCK_FISH_IMAGE",
          UPDATE_ROOM_DATA: "GAME_LAYER_UPDATE_ROOM_DATA",
          ON_OTHER_PLAYER_FIRE: "ON_OTHER_PLAYER_FIRE",
          FREEZE_EFFECT_ITEM: "FREEZE_EFFECT_ITEM",
          FISH_DROP_ITEM: "FISH_DROP_ITEM",
          FREEZE_ADD_ITEM: "FREEZE_ADD_ITEM",
          SEND_ACTIVE_FREEZE_GUN: "SEND_ACTIVE_FREEZE_GUN",
          UPDATE_LIST_ITEM: "UPDATE_LIST_ITEM",
          ON_ACTIVE_FREEZE_GUN: "ON_ACTIVE_FREEZE_GUN",
          ON_STOP_FREEZE_GUN: "ON_STOP_FREEZE_GUN",
          GAME_CHANGE_ROUND: "GAME_CHANGE_ROUND",
          SHOW_JACKPOT_INFO: "SHOW_JACKPOT_INFO",
          INTERACTABLE_HUD: "INTERACTABLE_HUD",
          CATCH_FISH_BY_SKILL: "GAME_LAYER_CATCH_FISH_BY_SKILL",
          MOVE_OUT_ALL_FISHES: "MOVE_OUT_ALL_FISHES",
          OFF_ALL_TARGET: "OFF_ALL_TARGET",
          GAME_UPDATE_SKILL: "GAME_UPDATE_SKILL",
          INIT_BUBBLE: "INIT_BUBBLE",
          CHANGE_BUBBLE: "CHANGE_BUBBLE",
          PAUSE_AUTO_FIRE: "PAUSE_AUTO_FIRE",
          RESUME_AUTO_FIRE: "RESUME_AUTO_FIRE",
          RECEIVE_LASER_GUN: "RECEIVE_LASER_GUN",
          RESUME_DRILL_GUN: "RESUME_DRILL_GUN",
          BLOCK_ALL_BUTTON_WHEN_REFRESH: "BLOCK_ALL_BUTTON_WHEN_REFRESH",
          ON_AFTER_INIT_PLAYER_LIST: "ON_AFTER_INIT_PLAYER_LIST",
          RESUME_OLD_TARGET: "RESUME_OLD_TARGET",
          UPDATE_JACKPOT_INFO: "GAME_LAYER_UPDATE_JACKPOT_INFO",
          ON_PLAY_NETFX: "ON_PLAY_NETFX",
          UPDATE_EVENT_TRAY: "UPDATE_EVENT_TRAY",
          UPDATE_SESSION_TIME: "UPDATE_SESSION_TIME"
        },
        FISH_LAYER: {
          CATCH_FISH_BY_SKILL: "FISH_LAYER_CATCH_FISH_BY_SKILL",
          BOSS_ON_GAME: "FISH_LAYER_BOSS_ON_GAME"
        },
        DRAGON: {
          WARNING: "GAME_DRAGON_WARNING",
          ON_END: "GAME_DRAGON_END",
          ON_BALL_DROPPED: "GAME_DRAGON_ON_BALL_DROPPED",
          DROP_BALL: "GAME_DRAGON_DROP_BALL",
          SMALL_EXPLOSION: "DRAGON_DIE_SMALL_EXPLOSION",
          BIG_EXPLOSION: "DRAGON_DIE_BIG_EXPLOSION",
          DONE_BALL_DROP: "DRAGON_BALL_DROP_DONE",
          DONE_JACKPOT_STAR: "DRAGON_PLAY_JACKPOT_STAR_DONE",
          SHOW_JACKPOT_WINAMOUNT: "DRAGON_SHOW_JACKPOT_CUTSCENE",
          BALL_ENTER_BIGWIN_WHEEL: "DRAGON_BALL_ENTER_BIGWIN",
          DONE_PLAYER_BIGWIN: "DRAGON_DONE_PLAYER_BIGWIN",
          DONE_ALL_BIGWIN: "DRAGON_DONE_ALL_BIGWIN",
          ADD_BALL_TO_PLAYER: "DRAGON_ADD_BALL_TO_PLAYER",
          JACKPOT_WINAMOUNT_POPUP_CLOSE: "DRAGON_JACKPOT_WINAMOUNT_POPUP_CLOSE",
          CREATE: "DRAGON_CREATE",
          PLAY_DRAGON_BALL_JACKPOT: "PLAY_DRAGON_BALL_JACKPOT"
        },
        LOBBY_LAYER: {
          ON_SHOW_LOBBY_LAYER: "ON_SHOW_LOBBY_LAYER",
          UPDATE_LOBBY_INFO: "UPDATE_LOBBY_INFO",
          UPDATE_LOBBY_WALLET: "UPDATE_LOBBY_WALLET",
          LOBBY_GET_ROOM_INFO: "LOBBY_GET_ROOM_INFO"
        },
        PLAYER_LAYER: {
          UPDATE_LIST_PLAYER: "UPDATE_LIST_PLAYER",
          PLAYER_JOIN_BOARD: "PLAYER_JOIN_BOARD",
          PLAYER_LEAVE_BOARD: "PLAYER_LEAVE_BOARD",
          STOP_LOCK_FISH: "STOP_LOCK_FISH",
          START_LOCK_FISH: "START_LOCK_FISH",
          FREEZE_EFFECT: "FREEZE_EFFECT",
          CHANGE_GUN_LASER: "CHANGE_GUN_LASER",
          GAME_UPDATE_WALLET: "GAME_UPDATE_WALLET",
          HIDE_IS_ME: "HIDE_IS_ME",
          SHOW_POPUP_NO_MONEY: "PLAYER_SHOW_POPUP_NO_MONEY",
          REMOVE_BALL: "REMOVE_BALL",
          SEND_FIRE_SKILL: "PLAYER_SEND_FIRE_SKILL"
        },
        // SKILL_LAYER : {
        //     RESET_BUTTON_PANEL              :               "RESET_BUTTON_PANEL"
        // },
        //
        EFFECT_LAYER: {
          ON_PLAY_NETFX: "ON_PLAY_NETFX",
          PLAY_BIG_WIN_EFFECT: "PLAY_BIG_WIN_EFFECT",
          PLAY_WAVE_TRANSITION: "PLAY_WAVE_TRANSITION",
          SHOW_NOTIFY_LOCK_FISH: "SHOW_NOTIFY_LOCK_FISH",
          HIDE_NOTIFY_LOCK_FISH: "HIDE_NOTIFY_LOCK_FISH",
          LUCKY_EFFECT_FISH: "LUCKY_EFFECT_FISH",
          PLAY_REWARD_EFFECT: "PLAY_REWARD_EFFECT",
          PLAY_LUCKY_EFFECT_DONE: "PLAY_LUCKY_EFFECT_DONE",
          CLEAR_DROP_GUN_LASER: "CLEAR_DROP_GUN_LASER",
          PLAY_FISH_GROUP_TRANSITION: "PLAY_FISH_GROUP_TRANSITION",
          CHANGE_BUBBLE: "CHANGE_BUBBLE",
          DROP_GUN_LASER: "DROP_GUN_LASER",
          MINIBOSS_SMASH: "MINIBOSS_SMASH",
          MINIBOSS_DROP_ITEM: "MINIBOSS_DROP_ITEM",
          MINIBOSS_CRITICAL: "MINIBOSS_CRITICAL",
          MINIBOSS_DROP_GEM: "MINIBOSS_DROP_GEM",
          MINIBOSS_DROP_FIN: "MINIBOSS_DROP_FIN",
          TRIGGER_BOMB: "TRIGGER_BOMB",
          ADD_ANIM_TO_QUEUE_ANIM: "EFFECT_LAYER_ADD_ANIM_TO_QUEUE_ANIM",
          CHECK_QUEUE_ANIM: "EFFECT_LAYER_CHECK_QUEUE_ANIM",
          PLAY_EFFECT_EVENT_WIN: "PLAY_EFFECT_EVENT_WIN"
        },
        AUTO_BOT: {
          START_BOT: "START_BOT",
          STOP_BOT: "STOP_BOT",
          CHANGE_TARGET: "CHANGE_TARGET",
          RESUME: "RESUME_AUTO_BOT",
          TOGGLE_BUTTON: "TOGGLE_BUTTON",
          END_AUTO_BOT: "END_AUTO_BOT",
          SEND_STOP_BOT: "SEND_STOP_BOT"
        },
        WALLET: {
          ADD_TO_DISPLAY: "WALLET_ADD_TO_DISPLAY",
          ADD_GOLD_REWARD: "WALLET_ADD_GOLD_REWARD"
        },
        CUT_SCENE: {
          SHOW_CUT_SCENE: "SHOW_CUT_SCENE",
          HIDE_CUT_SCENE: "HIDE_CUT_SCENE",
          HIDE_ALL_CUT_SCENE: "HIDE_ALL_CUT_SCENE"
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ES2FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, v2, UITransform, v3, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
      UITransform = module.UITransform;
      v3 = module.v3;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "e59ea4uQ8NLjajcHFsQ1XD7", "ES2FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ES2FireBullet = exports('ES2FireBullet', (_dec = ccclass('ES2FireBullet'), _dec(_class = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(ES2FireBullet, _EnemyFireBullet);

        function ES2FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "FIRE_POS", [v2(-300, -1000), v2(0, -1000), v2(300, -1000)]);

          return _this;
        }

        var _proto = ES2FireBullet.prototype;

        _proto.fire = function fire(timeLate) {
          if (timeLate === void 0) {
            timeLate = 0;
          }

          for (var i = 0; i < this.BulletCount && i < this.FIRE_POS.length; ++i) {
            var srcPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[i % this.firePos.length].getWorldPosition());
            var destPos = v3(srcPos.x + this.FIRE_POS[i].x, srcPos.y + this.FIRE_POS[i].y, 0);
            this.createBullet(BulletConfig.ES2, srcPos, destPos, -timeLate);
          }
        };

        return ES2FireBullet;
      }(EnemyFireBullet), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillButtons1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfActionHelper.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Button, Label, tween, Component, setOpacity, v3f, stopAllActions, fadeIn, fadeOut, fadeTo;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Label = module.Label;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      v3f = module.v3f;
      stopAllActions = module.stopAllActions;
      fadeIn = module.fadeIn;
      fadeOut = module.fadeOut;
      fadeTo = module.fadeTo;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "e675fsGe2lIvpLnFXxfozsu", "SkillButtons1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillButtons1985 = exports('SkillButtons1985', (_dec = ccclass('SkillButtons1985'), _dec2 = property(Button), _dec3 = property(Button), _dec4 = property(Button), _dec5 = property(Button), _dec6 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillButtons1985, _Component);

        function SkillButtons1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnOpen", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnBomb", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnLaser", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnUlti", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "labelSkill", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_btnBombPos", void 0);

          _defineProperty(_assertThisInitialized(_this), "_btnLaserPos", void 0);

          _defineProperty(_assertThisInitialized(_this), "_btnUltiPos", void 0);

          _defineProperty(_assertThisInitialized(_this), "_btnOpenPos", void 0);

          _defineProperty(_assertThisInitialized(_this), "isOpened", false);

          _defineProperty(_assertThisInitialized(_this), "moveTime", 0.1);

          return _this;
        }

        var _proto = SkillButtons1985.prototype;

        _proto.start = function start() {
          this._btnBombPos = this.btnBomb.node.getPosition();
          this._btnLaserPos = this.btnLaser.node.getPosition();
          this._btnUltiPos = this.btnUlti.node.getPosition();
          this._btnOpenPos = this.btnOpen.node.getPosition();
          this.btnBomb.node.setPosition(this._btnOpenPos);
          this.btnLaser.node.setPosition(this._btnOpenPos);
          this.btnUlti.node.setPosition(this._btnOpenPos);
          setOpacity(this.btnBomb.node, 0);
          setOpacity(this.btnLaser.node, 0);
          setOpacity(this.btnUlti.node, 0);
          this.btnBomb.node.scale = v3f(0);
          this.btnLaser.node.scale = v3f(0);
          this.btnUlti.node.scale = v3f(0);
        };

        _proto.onBtnOpen = function onBtnOpen() {
          var _this2 = this;

          if (!this.isOpened) {
            this.openButton(this.btnBomb, this._btnBombPos);
            this.openButton(this.btnLaser, this._btnLaserPos);
            this.openButton(this.btnUlti, this._btnUltiPos);
          } else {
            this.closeButton(this.btnBomb, this._btnOpenPos);
            this.closeButton(this.btnLaser, this._btnOpenPos);
            this.closeButton(this.btnUlti, this._btnOpenPos);
          }

          this.btnOpen.interactable = false;
          this.scheduleOnce(function () {
            _this2.btnOpen.interactable = true;
          }, this.moveTime);
          this.isOpened = !this.isOpened;
        };

        _proto.openButton = function openButton(btn, pos) {
          stopAllActions(btn.node);
          tween(btn.node).parallel(fadeIn(this.moveTime), tween().to(this.moveTime, {
            position: pos,
            scale: v3f(1)
          }, {
            easing: 'sineOut'
          })).call(function () {
            btn.interactable = true;
          }).start();
        };

        _proto.closeButton = function closeButton(btn, pos) {
          stopAllActions(btn.node);
          btn.interactable = false;
          tween(btn.node).parallel(fadeOut(this.moveTime), tween().to(this.moveTime, {
            position: pos,
            scale: v3f(0)
          }, {
            easing: 'sineOut'
          })).start();
        };

        _proto.fireSkill = function fireSkill(event, data) {
          this.labelSkill.string = data;
          stopAllActions(this.labelSkill.node);
          tween(this.labelSkill.node).then(fadeTo(0.2, 255)).delay(0.4).then(fadeOut(0.2)).start();
        };

        return SkillButtons1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnOpen", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnBomb", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnLaser", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnUlti", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "labelSkill", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfWifiStatus.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfNetworkGameEvent.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, SpriteFrame, Node, Label, Sprite, UITransform, Color, isValid, Component, setOpacity, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents, gfReferenceManager, gfDataStore, gfNetworkGameEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Label = module.Label;
      Sprite = module.Sprite;
      UITransform = module.UITransform;
      Color = module.Color;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNetworkGameEvent = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "e6c7c1BvHRELrvHvEHN8RBF", "gfWifiStatus", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var STATUS = {
        STRONG: 0,
        MEDIUM: 1,
        WEAK: 2,
        DISCONNECT: 3
      };
      var WIFI_STATUS_AVERAGE = 5;
      var GfWifiStatus = exports('GfWifiStatus', (_dec = ccclass('GfWifiStatus'), _dec2 = property(SpriteFrame), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Sprite), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfWifiStatus, _Component);

        function GfWifiStatus() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listSprite", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "ping", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "labelPing", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spriteIcon", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_right", false);

          _defineProperty(_assertThisInitialized(_this), "_averagePing", 0);

          _defineProperty(_assertThisInitialized(_this), "_listTotalPing", []);

          return _this;
        }

        var _proto = GfWifiStatus.prototype;

        _proto.onLoad = function onLoad() {
          this.node.active = false;

          if (gfBaseConfig.instance.TURN_ON_WIFI_STATUS) {
            this.initEvents();
            this.average();
          }
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.UPDATE_PING, this.onPingUpdate, this);
          registerEvent(gfBaseEvents.COMMON.NETWORK_STATUS_INFO, this.onNetworkState, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.resetOnExit, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_AFTER_INIT_PLAYER_LIST, this.updatePositionWifi, this);
          this.labelPing.string = '0ms';
        };

        _proto.setupRight = function setupRight() {
          this._right = true;
          this.ping.getComponent(UITransform).anchorX = 0;
          this.ping.setPosition(-37, this.ping.position.y, this.ping.position.z); //this.msNode.setPosition(60, this.msNode.position.y, this.msNode.position.z);
        };

        _proto.onPingUpdate = function onPingUpdate(ms) {
          if (!this.node.active && gfBaseConfig.instance.TURN_ON_WIFI_STATUS) {
            this.node.active = true;
          }

          var sprite = null;
          var color = null;
          this.handlerListPing(ms);
          this.average();
          this.enableLbl(true);

          if (this._averagePing > 0 && this._averagePing < 100) {
            sprite = this.listSprite[STATUS.STRONG];
            color = Color.GREEN;
          } else if (this._averagePing >= 100 && this._averagePing < 300) {
            sprite = this.listSprite[STATUS.MEDIUM];
            color = Color.YELLOW;
          } else if (this._averagePing >= 300 && this._averagePing < 500) {
            sprite = this.listSprite[STATUS.WEAK];
            color = Color.RED;
          } else {
            sprite = this.listSprite[STATUS.WEAK];
            color = Color.RED;
          }

          this.labelPing.color = color;
          this.labelPing.string = this._averagePing.toString();
          this.spriteIcon.spriteFrame = sprite;
        };

        _proto.onNetworkState = function onNetworkState(data) {
          if (!isValid(this.node)) return;

          switch (data.EventID) {
            case gfNetworkGameEvent.NETWORK_ERROR:
            case gfNetworkGameEvent.NETWORK_CLOSE:
            case gfNetworkGameEvent.NETWORK_POOR:
            case gfNetworkGameEvent.NETWORK_DIE:
              this.spriteIcon.spriteFrame = this.listSprite[STATUS.DISCONNECT];
              this.enableLbl(false);
              break;

            case gfNetworkGameEvent.NETWORK_RECONNECT:
              this.enableLbl(true);
              this.onPingUpdate(100);
              break;
          }
        };

        _proto.updatePositionWifi = function updatePositionWifi() {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(gfDataStore.instance.getSelfInfo().DeskStation);

          if (!player) {
            return;
          }

          var pos = player.index === 0 ? gfBaseConfig.instance.POS_WIFI_STATUS.LEFT : gfBaseConfig.instance.POS_WIFI_STATUS.RIGHT;
          setOpacity(this.node, 255);
          this.node.setPosition(pos.x, pos.y, 1);
        };

        _proto.enableLbl = function enableLbl(status) {
          this.ping.active =
          /*this.msNode.active =*/
          status;
        };

        _proto.average = function average() {
          this._averagePing = Math.round(this._listTotalPing.reduce(function (p, c) {
            return p + c;
          }, 0) / this._listTotalPing.length);
        };

        _proto.handlerListPing = function handlerListPing(ms) {
          this._listTotalPing.length >= WIFI_STATUS_AVERAGE && this._listTotalPing.pop();

          this._listTotalPing.push(ms);
        };

        _proto.resetOnExit = function resetOnExit() {
          this.node.active = false;
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return GfWifiStatus;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "listSprite", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ping", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "labelPing", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spriteIcon", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/TransitionLoading1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './EventsCode1985.ts', './DataStore1985.ts', './ListOfTips1985.ts', './AnimUtils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Sprite, Label, tween, Component, getRandomInt, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, removeEvents, EventsCode1985, DataStore1985, Tips, setOpacity, fadeTo, fadeOut;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      Label = module.Label;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Tips = module.Tips;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeTo = module.fadeTo;
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "e6d38Al3IJN8qH/NHuEh5Wy", "TransitionLoading1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var OVERLAY_CONFIG = {
        opacityStep1: 150,
        opacityStep2: 255
      };
      var TransitionLoading1985 = exports('TransitionLoading1985', (_dec = ccclass('TransitionLoading1985'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Sprite), _dec5 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(TransitionLoading1985, _Component);

        function TransitionLoading1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "overlay", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "mainContent", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "iconLoading", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "lblTips", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "timeFadeInOvl", 0);

          return _this;
        }

        var _proto = TransitionLoading1985.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
        };

        _proto.initEvents = function initEvents() {
          registerEvent(EventsCode1985.COMMON.SHOW_OVERLAY_TRANSITION_LOADING, this.showOverlay, this);
          registerEvent(gfBaseEvents.COMMON.LOADING_TRANSITION, this.transition, this);
          registerEvent(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE, this.refreshPage, this);
          registerEvent(gfBaseEvents.COMMON.HIDE_WAITING, this.hideOverlay, this);
        };

        _proto.showOverlay = function showOverlay(time) {
          var _this2 = this;

          if (time === void 0) {
            time = 0;
          }

          this.reset();
          this.overlay.active = true;
          setOpacity(this.overlay, 0);
          fadeTo(this.overlay, time, OVERLAY_CONFIG.opacityStep1);
          this.timeFadeInOvl = time / OVERLAY_CONFIG.opacityStep1;
          DataStore1985.instance.setDataStore({
            isPlayingLoadingTransition: true
          });
          var durFadeIn = (OVERLAY_CONFIG.opacityStep2 - OVERLAY_CONFIG.opacityStep1) * this.timeFadeInOvl;
          this.scheduleOnce(function () {
            _this2.overlay.active = true;
            setOpacity(_this2.overlay, 0);
            _this2.overlay.active = false;
          }, durFadeIn + time);
        };

        _proto.hideOverlay = function hideOverlay() {
          var _this3 = this;

          if (DataStore1985.instance.currentSceneName === gfBaseConfig.instance.SceneName.Game) return;
          this.scheduleOnce(function () {
            setOpacity(_this3.overlay, 0);
            _this3.overlay.active = false;
            DataStore1985.instance.setDataStore({
              isPlayingLoadingTransition: false
            });
          }, 0.01);
        };

        _proto.transition = function transition() {
          if (DataStore1985.instance.currentSceneName === gfBaseConfig.instance.SceneName.Lobby) return;
          DataStore1985.instance.setDataStore({
            isPlayingLoadingTransition: true
          });
          this.unscheduleAllCallbacks();
          this.mainContent.active = true;
          var string = Tips[getRandomInt(0, 4)];
          this.lblTips.string = string;
          var durFadeIn = (OVERLAY_CONFIG.opacityStep2 - OVERLAY_CONFIG.opacityStep1) * this.timeFadeInOvl;
          this.playEffectLoading(durFadeIn);
        };

        _proto.playEffectLoading = function playEffectLoading(durFadeIn) {
          var _this4 = this;

          if (durFadeIn === void 0) {
            durFadeIn = 0;
          }

          this.iconLoading.fillRange = 0;
          tween(this.node).delay(durFadeIn).to(0.5, null, {
            onUpdate: function onUpdate(target, ratio) {
              _this4.iconLoading.fillRange = -ratio;
            }
          }).call(function () {
            fadeOut(_this4.node, 0.5);
            gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.ON_ANIMATION_SPACESHIP_JOIN_ROOM);
          }).delay(0.5).call(function () {
            _this4.mainContent.active = false;
            _this4.overlay.active = false;
            DataStore1985.instance.setDataStore({
              isPlayingLoadingTransition: false
            });
          }).start();
        };

        _proto.reset = function reset() {
          setOpacity(this.node, 255);
        };

        _proto.refreshPage = function refreshPage() {
          removeEvents(this);
        };

        return TransitionLoading1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "mainContent", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "iconLoading", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lblTips", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseHistory.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './serviceRest.ts', './loadConfigAsync.ts', './gfBaseCellHistory.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, Prefab, CCString, UIOpacity, Button, Label, warn, instantiate, Component, gfBaseEvents, gfEventEmitter, apiObject, loadConfigAsync, GfBaseCellHistory;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      CCString = module.CCString;
      UIOpacity = module.UIOpacity;
      Button = module.Button;
      Label = module.Label;
      warn = module.warn;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      GfBaseCellHistory = module.GfBaseCellHistory;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _temp;

      cclegacy._RF.push({}, "e805awNTAlKVppn+BPOs/M1", "gfBaseHistory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfBaseHistory = exports('GfBaseHistory', (_dec = ccclass('GfBaseHistory'), _dec2 = property(Node), _dec3 = property(Prefab), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec8 = property(Node), _dec9 = property(CCString), _dec10 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfBaseHistory, _Component);

        function GfBaseHistory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "table", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "cell", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pageIndexView", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "itemPerPage", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "loading", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnBack", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnNext", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "noHistoryText", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "pagePrefix", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "errorMessage", _descriptor10, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_initialized", false);

          _defineProperty(_assertThisInitialized(_this), "currentPage", void 0);

          _defineProperty(_assertThisInitialized(_this), "totalPage", void 0);

          _defineProperty(_assertThisInitialized(_this), "jpPrefix", void 0);

          _defineProperty(_assertThisInitialized(_this), "gameId", void 0);

          _defineProperty(_assertThisInitialized(_this), "jpList", void 0);

          _defineProperty(_assertThisInitialized(_this), "url", void 0);

          return _this;
        }

        var _proto = GfBaseHistory.prototype;

        _proto.onLoad = function onLoad() {
          if (this._initialized) {
            return;
          }

          this.currentPage = 1;
          this.totalPage = 1;
          this.stopLoading();
          this.initTableCells(this.itemPerPage);
          this.noHistoryText.active = false;
          this.btnNext.on(Node.EventType.TOUCH_START, this.onNextPage.bind(this));
          this.btnNext.on(Node.EventType.TOUCH_END, this.cancelChangePage.bind(this));
          this.btnNext.on(Node.EventType.TOUCH_CANCEL, this.cancelChangePage.bind(this));
          this.btnNext.on(Node.EventType.MOUSE_LEAVE, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_START, this.onPrevPage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_END, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.TOUCH_CANCEL, this.cancelChangePage.bind(this));
          this.btnBack.on(Node.EventType.MOUSE_LEAVE, this.cancelChangePage.bind(this));
          this._initialized = true;
        };

        _proto.initData = function initData(data) {
          var gameId = data.gameId,
              jpList = data.jpList,
              jpPrefix = data.jpPrefix,
              url = data.url;
          this.gameId = gameId;
          this.jpList = jpList;
          this.jpPrefix = jpPrefix;
          this.url = url;
        };

        _proto.openPanel = function openPanel(data) {
          this.initData(data);
          this.node.active = true;
          this.node.getComponent(UIOpacity).opacity = 255;
          this.currentPage = 1;

          if (this.currentPage == 1) {
            this.btnBack.getComponent(Button).interactable = false;
            this.btnNext.getComponent(Button).interactable = false;
          }

          this.pageIndexView.getComponent(Label).string = this.currentPage.toString();
          if (this.errorMessage) this.errorMessage.active = false;
          this.playLoading();
          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        };

        _proto.closePanel = function closePanel() {
          this.clearTableData();
        };

        _proto.playLoading = function playLoading() {
          this.noHistoryText.active = false;
          this.loading.active = true;
        };

        _proto.stopLoading = function stopLoading() {
          this.loading.active = false;
        };

        _proto.onNextPage = function onNextPage() {
          if (this.btnNext.getComponent(Button).interactable) {
            this.btnBack.getComponent(Button).interactable = false;
          }
        };

        _proto.onPrevPage = function onPrevPage() {
          if (this.btnBack.getComponent(Button).interactable) {
            this.btnNext.getComponent(Button).interactable = false;
          }
        };

        _proto.cancelChangePage = function cancelChangePage() {
          if (this.currentPage !== 1) this.btnBack.getComponent(Button).interactable = true;
          if (this.currentPage < this.totalPage) this.btnNext.getComponent(Button).interactable = true;
        };

        _proto.onNextButton = function onNextButton() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.btnNext.getComponent(Button).interactable = false;
          this.btnBack.getComponent(Button).interactable = false;
          this.currentPage += 1;
          this.playLoading();
          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        };

        _proto.onPreviousButton = function onPreviousButton() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          if (this.currentPage == 1) return;
          this.btnNext.getComponent(Button).interactable = false;
          this.btnBack.getComponent(Button).interactable = false;
          this.currentPage -= 1;
          this.playLoading();
          this.requestDataPage(this.currentPage, this.itemPerPage, this.onRequestResponse.bind(this), this.requestErr.bind(this));
        };

        _proto.requestDataPage = function requestDataPage(page, quantity, callback, callbackErr) {
          var from = (page - 1) * quantity;
          var requestParams = {
            serviceId: this.jpPrefix + this.gameId,
            from: from,
            size: quantity,
            type: this.jpList
          };
          if (this.errorMessage) this.errorMessage.active = false;
          this.requestHistory(requestParams, callback, callbackErr);
        };

        _proto.requestHistory = function requestHistory(requestParams, callback, callbackErr, headers) {
          if (requestParams === void 0) {
            requestParams = {};
          }

          if (headers === void 0) {
            headers = null;
          }

          if (!this.gameId) {
            warn("GameId has not been set");
            callback({});
            return;
          }

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC.API_URL;

          if (headers) {
            apiObject.getWithHeader({
              url: this.url,
              params: requestParams,
              callback: callback,
              callbackErr: callbackErr,
              headers: headers,
              apiUrl: API_URL
            });
          } else {
            apiObject.get({
              url: this.url,
              params: requestParams,
              callback: callback,
              callbackErr: callbackErr,
              apiUrl: API_URL
            });
          }
        };

        _proto.requestErr = function requestErr() {
          this.stopLoading();

          if (this.errorMessage) {
            this.errorMessage.active = true;
            this.clearTableData();
          }
        };

        _proto.onRequestResponse = function onRequestResponse(res) {
          this.noHistoryText.active = !!(res.error || Object.keys(res).length <= 0 || !res.data || res.data.length <= 0);

          if (res.total) {
            this.totalPage = Math.ceil(res.total / this.itemPerPage);
          }

          this.stopLoading();

          if (!res.error) {
            if (Object.keys(res).length > 0 && res.data && res.data.length > 0) {
              this.btnNext.getComponent(Button).interactable = true;
              this.btnBack.getComponent(Button).interactable = true;
              this.pageIndexView.getComponent(Label).string = this.currentPage.toString();
              this.updateTableData(res.data);

              if (this.currentPage == 1) {
                this.btnBack.getComponent(Button).interactable = false;
              }

              if (res.total <= this.currentPage * this.itemPerPage || res.data.length < this.itemPerPage) {
                this.btnNext.getComponent(Button).interactable = false;
                return;
              }
            } else {
              return;
            }
          }
        } // Table
        ;

        _proto.initTableCells = function initTableCells(itemPerPage) {
          for (var i = 0; i < itemPerPage; ++i) {
            var cell = instantiate(this.cell);
            cell.parent = this.table;
          }
        };

        _proto.updateTableData = function updateTableData(data) {
          this.table.children.forEach(function (child, index) {
            if (index < data.length) {
              child.getComponent(GfBaseCellHistory).updateData(data[index]);
              child.active = true;
            } else {
              child.active = false;
            }
          });
        };

        _proto.clearTableData = function clearTableData() {
          this.table.children.forEach(function (child) {
            return child.active = false;
          });
        };

        return GfBaseHistory;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "table", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "cell", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pageIndexView", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "itemPerPage", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 7;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "loading", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnBack", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnNext", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "noHistoryText", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "pagePrefix", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "errorMessage", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BigWinWheelAvatar1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './Config1988.ts', './ReferenceManager1988.ts', './gfBigWinWheelAvatar.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, sp, sys, tween, v3, Sprite, convertAssetArrayToObject, gfBaseEvents, stopAllActions, scaleTo, blink, gfEventEmitter, gfBaseConfig, Config1988, ReferenceManager1988, gfBigWinWheelAvatar;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      sys = module.sys;
      tween = module.tween;
      v3 = module.v3;
      Sprite = module.Sprite;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      stopAllActions = module.stopAllActions;
      scaleTo = module.scaleTo;
      blink = module.blink;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      ReferenceManager1988 = module.default;
    }, function (module) {
      gfBigWinWheelAvatar = module.gfBigWinWheelAvatar;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "e8a47eTo7BOcYQhS5Zn7NOe", "BigWinWheelAvatar1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BigWinWheelAvatar1988 = exports('BigWinWheelAvatar1988', (_dec = ccclass('BigWinWheelAvatar1988'), _dec(_class = (_temp = /*#__PURE__*/function (_gfBigWinWheelAvatar) {
        _inheritsLoose(BigWinWheelAvatar1988, _gfBigWinWheelAvatar);

        function BigWinWheelAvatar1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfBigWinWheelAvatar.call.apply(_gfBigWinWheelAvatar, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "spineRibbon", void 0);

          _defineProperty(_assertThisInitialized(_this), "iconMainFishOriginY", void 0);

          _defineProperty(_assertThisInitialized(_this), "_winWallet", 0);

          return _this;
        }

        var _proto = BigWinWheelAvatar1988.prototype;

        _proto.onLoad = function onLoad() {
          _gfBigWinWheelAvatar.prototype.onLoad.call(this);

          this.spineRibbon = this.ribbon.getComponent(sp.Skeleton);
          this.spineRibbon.setMix(this.ANIMATION_NAME.APPEAR, this.ANIMATION_NAME.IDLE, 0.1);
          this.iconMainFishOriginY = this.iconMainFish.position.y;
        };

        _proto._setUpConstantsVariable = function _setUpConstantsVariable() {
          _gfBigWinWheelAvatar.prototype._setUpConstantsVariable.call(this);

          this.SKIN_NAME = {
            WIN: "",
            BIG_WIN: "Level_1",
            SUPER_WIN: "Level_2",
            MEGA_WIN: "Level_3"
          };
          this.ANIMATION_NAME = {
            APPEAR: "All_Appear",
            IDLE: "All_Idle",
            DISAPPEAR: "Ribbon_Appear"
          };
        };

        _proto._playSpinAnim = function _playSpinAnim(skinName) {
          if (this._currentSkinName !== skinName) {
            this.spine.setSkin(skinName);
            this.spineRibbon.setSkin(skinName);

            if (sys.isNative) {
              this.spine.setToSetupPose();
              this.spineRibbon.setToSetupPose();
            }

            this._currentSkinName = skinName;
            this.spine.setAnimation(0, this.ANIMATION_NAME.APPEAR, false);
            this.spineRibbon.setAnimation(0, this.ANIMATION_NAME.APPEAR, false);
            this.spine.setCompleteListener(this._completeAppear.bind(this));
          } else {
            this.spine.setAnimation(0, this.ANIMATION_NAME.IDLE, true);
            this.spineRibbon.setAnimation(0, this.ANIMATION_NAME.IDLE, true);
          }
        };

        _proto._setSkinByBet = function _setSkinByBet(bet) {
          var skinName = this.SKIN_NAME.BIG_WIN;
          this.sizeByTyeWin = 0.8;

          if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.SUPER) {
            skinName = this.SKIN_NAME.MEGA_WIN;
            this.sizeByTyeWin = 1;
          } else if (this._winValue >= bet * gfBaseConfig.instance.BIG_WIN_RATIO.HUGE) {
            skinName = this.SKIN_NAME.SUPER_WIN;
            this.sizeByTyeWin = 0.9;
          }

          return skinName;
        };

        _proto._playAnim = function _playAnim(_ref) {
          var gold = _ref.gold,
              bet = _ref.bet,
              isMe = _ref.isMe,
              fishKind = _ref.fishKind,
              isTextImage = _ref.isTextImage,
              isKill = _ref.isKill;
          this.lblCoin = isMe ? this.txtCoin : this.txtCoinOther;
          this.lblCoin.node.active = true;
          this._winValue += gold;

          if (fishKind != Config1988.instance.FISH_KIND.BOMB) {
            this._winWallet += gold;
          }

          var skinName = this._setSkinByBet(bet);

          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.PAUSE_OR_RESUME_SOUND_WIN, false);
          skinName == this.SKIN_NAME.MEGA_WIN ? gfEventEmitter.instance.emit(gfBaseEvents.SOUND.MEGA_WIN) : gfEventEmitter.instance.emit(gfBaseEvents.SOUND.BIG_WIN);
          var delayTimeTweenCoin = this._currentSkinName === '' ? 1 : 0;

          this._tweenCoin({
            winAmount: this._winValue,
            delay: delayTimeTweenCoin
          });

          var delayTime = this._currentSkinName !== skinName ? 0.3 : 0;

          this._playSpinAnim(skinName);

          this._playActionIconMainFish({
            delayTime: delayTime,
            fishKind: fishKind,
            isTextImage: isTextImage,
            isKill: isKill,
            gold: gold
          });

          this._isShowing = true;
        };

        _proto._playAnimHideEffect = function _playAnimHideEffect() {
          this.spineRibbon.setAnimation(0, this.ANIMATION_NAME.DISAPPEAR, false);
          this.spine.setAnimation(0, this.ANIMATION_NAME.DISAPPEAR, false);
          tween(this.lblCoin.node).to(0.2, {
            scale: v3(0, 0, 1)
          }).start();
          stopAllActions(this.iconMainFish);
          tween(this.iconMainFish).to(0.2, {
            scale: v3(0, 0, 1)
          }).start();
          tween(this.ribbon).to(0.2, {
            scale: v3(0, 0, 0)
          }).start();
          var player = ReferenceManager1988.instance.getPlayerByIndex(this.index);

          if (player.isMe) {
            player.addToDisplayWallet(this._winWallet);
          }

          this._resetInfo();
        };

        _proto._updateImage = function _updateImage(fishKind) {
          var assetFishes = convertAssetArrayToObject(this._listFishFrame);
          var sprite = null;

          if (assetFishes['Avatar_' + fishKind]) {
            sprite = assetFishes['Avatar_' + fishKind];
          } else {
            sprite = assetFishes['Avatar_' + 22];
          }

          this.iconMainFish.getComponent(Sprite).spriteFrame = sprite;
        };

        _proto._changeImageFishIcon = function _changeImageFishIcon(data) {
          var _this2 = this;

          var fishKind = data.fishKind;
          this.iconMainFish.setPosition(0, this.iconMainFishOriginY, 0);
          stopAllActions(this.iconMainFish);
          tween(this.iconMainFish).then(scaleTo(0.1, 0, 0, 'backOut')).call(function () {
            _this2._updateImage(fishKind);
          }).parallel(blink(0.8, 6), scaleTo(0.5, this.sizeByTyeWin, this.sizeByTyeWin, 'backOut')).delay(0.2).repeat(10, tween().by(0.5, {
            position: v3(0, 10, 0)
          }).by(0.5, {
            position: v3(0, -10, 0)
          })).start();
        };

        _proto._completeAppear = function _completeAppear() {
          this.spine.setAnimation(0, this.ANIMATION_NAME.IDLE, true);
          this.spineRibbon.setAnimation(0, this.ANIMATION_NAME.IDLE, true);
          this.spine.setCompleteListener(function () {});
        };

        _proto._resetInfo = function _resetInfo() {
          _gfBigWinWheelAvatar.prototype._resetInfo.call(this);

          this._winWallet = 0;
        };

        return BigWinWheelAvatar1988;
      }(gfBigWinWheelAvatar), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/connectNetwork.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './gameCommonUtils.ts', './mock.ts', './globalNetwork.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, sys, log, apiObject, loadConfigAsync, gameCommonUtils, mock, globalNetwork;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
      log = module.log;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      mock = module.mock;
    }, function (module) {
      globalNetwork = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e9aa5GoLR9JNqfGizKqYr82", "connectNetwork", undefined);

      var ConnectNetwork = /*#__PURE__*/function () {
        function ConnectNetwork() {
          _defineProperty(this, "gameId", '');
        }

        var _proto = ConnectNetwork.prototype;

        _proto.getToken = function getToken() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC.LOGIN_IFRAME,
              URL_TOKEN = _loadConfigAsync$getC.URL_TOKEN,
              USER_TOKEN = _loadConfigAsync$getC.USER_TOKEN;

          var token = '';

          if (LOGIN_IFRAME) {
            var getUrlParam = gameCommonUtils.getUrlParam;
            token = getUrlParam(URL_TOKEN);
            sys.localStorage.setItem(USER_TOKEN, token);
          } else {
            token = sys.localStorage.getItem(USER_TOKEN);
          }

          return token;
        };

        _proto.getRefreshToken = function getRefreshToken() {
          var _loadConfigAsync$getC2 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC2.LOGIN_IFRAME,
              _loadConfigAsync$getC3 = _loadConfigAsync$getC2.URL_REFRESH_TOKEN,
              URL_REFRESH_TOKEN = _loadConfigAsync$getC3 === void 0 ? 'refresh-token' : _loadConfigAsync$getC3,
              _loadConfigAsync$getC4 = _loadConfigAsync$getC2.USER_REFRESH_TOKEN,
              USER_REFRESH_TOKEN = _loadConfigAsync$getC4 === void 0 ? 'user-refresh-token' : _loadConfigAsync$getC4;

          var refreshToken = '';

          if (LOGIN_IFRAME) {
            var getUrlParam = gameCommonUtils.getUrlParam;
            refreshToken = getUrlParam(URL_REFRESH_TOKEN);
            sys.localStorage.setItem(USER_REFRESH_TOKEN, refreshToken);
          } else {
            refreshToken = sys.localStorage.getItem(USER_REFRESH_TOKEN);
          }

          return refreshToken;
        };

        _proto.loginScene = function loginScene(_ref) {
          var _this = this;

          var _ref$callback = _ref.callback,
              _callback = _ref$callback === void 0 ? function () {} : _ref$callback,
              _ref$gameId = _ref.gameId,
              gameId = _ref$gameId === void 0 ? '' : _ref$gameId,
              _ref$callbackAuthFail = _ref.callbackAuthFailed,
              callbackAuthFailed = _ref$callbackAuthFail === void 0 ? function () {} : _ref$callbackAuthFail;

          log("Login using V3");

          var _loadConfigAsync$getC5 = loadConfigAsync.getConfig(),
              IS_FINISHED_REMOTE = _loadConfigAsync$getC5.IS_FINISHED_REMOTE,
              DEV_ENV = _loadConfigAsync$getC5.DEV_ENV,
              USER_TOKEN = _loadConfigAsync$getC5.USER_TOKEN;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this.loginScene({
                callback: _callback,
                gameId: gameId,
                callbackAuthFailed: callbackAuthFailed
              });
            }, 100);
            return;
          }

          this.gameId = gameId;
          var token = this.getToken();
          var refreshToken = this.getRefreshToken();

          var _loadConfigAsync$getC6 = loadConfigAsync.getConfig(),
              LOGIN_IFRAME = _loadConfigAsync$getC6.LOGIN_IFRAME,
              API_URL = _loadConfigAsync$getC6.API_URL;

          var envId = LOGIN_IFRAME ? 'iframe' : 'portal';
          var gameIdSocket = LOGIN_IFRAME ? gameId : 'all';

          if (token || !DEV_ENV) {
            if (token) {
              globalNetwork.init(token, refreshToken, envId, gameIdSocket);

              _callback();
            } else {
              callbackAuthFailed();
            }
          } else {
            var dataPost = {
              userName: mock.userText,
              password: mock.pwText,
              fingerPrint: 'test'
            };
            var getUrlParam = gameCommonUtils.getUrlParam;
            var history = getUrlParam('history');
            if (LOGIN_IFRAME && history && history === 'true') return;
            apiObject.post({
              url: 'auth/login',
              data: dataPost,
              callback: function callback(_ref2) {
                var data = _ref2.data;

                if (data.data.token) {
                  sys.localStorage.setItem(USER_TOKEN, data.data.token);
                  globalNetwork.init(data.data.token, '', envId, gameIdSocket);

                  _callback();
                } else {
                  callbackAuthFailed && callbackAuthFailed();
                }
              },
              callbackErr: function callbackErr() {
                callbackAuthFailed && callbackAuthFailed();
              },
              apiUrl: API_URL
            });
          }
        };

        return ConnectNetwork;
      }();

      var connectNetwork = exports('default', new ConnectNetwork());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NoiseTransition1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "eac0dsEsahNRqvBa1b1823Y", "NoiseTransition1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SHOW_VALUE = Math.PI / 2;
      var HIDE_VALUE = 0;
      var NoiseTransition1985 = exports('NoiseTransition1985', (_dec = ccclass('NoiseTransition1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(NoiseTransition1985, _Component);

        function NoiseTransition1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_sprite", null);

          _defineProperty(_assertThisInitialized(_this), "iTime", 0);

          _defineProperty(_assertThisInitialized(_this), "speed", 0);

          _defineProperty(_assertThisInitialized(_this), "startValue", 0);

          _defineProperty(_assertThisInitialized(_this), "endValue", 0);

          return _this;
        }

        var _proto = NoiseTransition1985.prototype;

        _proto.start = function start() {
          this.init();
        };

        _proto.init = function init() {
          this._sprite = this.getComponent(Sprite);
        };

        _proto.show = function show() {
          this.startValue = this.endValue = SHOW_VALUE;
        };

        _proto.hide = function hide() {
          this.startValue = this.endValue = HIDE_VALUE;
        };

        _proto.setSpriteFrame = function setSpriteFrame(spriteFrame) {
          this.sprite.spriteFrame = spriteFrame;
        };

        _proto.fadeIn = function fadeIn(time) {
          if (time === void 0) {
            time = 0.5;
          }

          this.startValue = HIDE_VALUE;
          this.endValue = SHOW_VALUE;
          this.speed = (this.endValue - this.startValue) / time;
        };

        _proto.fadeOut = function fadeOut(time) {
          if (time === void 0) {
            time = 0.5;
          }

          this.startValue = SHOW_VALUE;
          this.endValue = HIDE_VALUE + Math.PI;
          this.speed = (this.endValue - this.startValue) / time;
        };

        _proto.update = function update(dt) {
          if (this.startValue == this.endValue) {
            if (this.startValue == SHOW_VALUE) {
              this.material && this.material.setProperty('iTime', -1.0);
            } else {
              this.material && this.material.setProperty('iTime', 0.0);
            }

            return;
          }

          this.startValue += dt * this.speed;

          if (this.startValue > this.endValue) {
            this.startValue = this.endValue;
          }

          this.material && this.material.setProperty('iTime', this.startValue);
        };

        _createClass(NoiseTransition1985, [{
          key: "sprite",
          get: function get() {
            if (!this._sprite) {
              this.init();
            }

            return this._sprite;
          },
          set: function set(value) {
            this._sprite = value;
          }
        }, {
          key: "material",
          get: function get() {
            if (!this._sprite) {
              this.init();
            }

            return this.sprite.material;
          }
        }]);

        return NoiseTransition1985;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopupBase.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Node, Vec3, Button, Tween, tween, UIOpacity, UITransform, isValid, Component, gfBaseEvents, fadeIn, fadeTo, fadeOut, gfEventEmitter, gfBaseConfig, SetZIndex;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Button = module.Button;
      Tween = module.Tween;
      tween = module.tween;
      UIOpacity = module.UIOpacity;
      UITransform = module.UITransform;
      isValid = module.isValid;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeIn = module.fadeIn;
      fadeTo = module.fadeTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "eb234Cads1Jt4N6YxakWEVU", "gfPopupBase", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopupBase = exports('GfPopupBase', (_dec = ccclass('GfPopupBase'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfPopupBase, _Component);

        function GfPopupBase() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "fadeSpeed", 0.1);

          _defineProperty(_assertThisInitialized(_this), "_initialized", false);

          _initializerDefineProperty(_assertThisInitialized(_this), "popupTitle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "contents", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "overlay", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "popupBackground", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnClose", _descriptor5, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_callback", null);

          _defineProperty(_assertThisInitialized(_this), "_opacityShowOverlay", 150);

          _defineProperty(_assertThisInitialized(_this), "_fullScale", 1);

          _defineProperty(_assertThisInitialized(_this), "_showPosition", new Vec3(0, 0, 0));

          _defineProperty(_assertThisInitialized(_this), "_animStyleShow", null);

          _defineProperty(_assertThisInitialized(_this), "_animStyleHide", null);

          return _this;
        }

        var _proto = GfPopupBase.prototype;

        _proto.onLoad = function onLoad() {
          this.node.setScale(0, 0, 0);
          this.node.setPosition(0, 0, 0);
          this.node['show'] = this.show.bind(this);
          this.node['hide'] = this.hide.bind(this);
          this.node['resetState'] = this.onResetState.bind(this);
          this.initLanguage();
          this.initObj();
          this.initEvent();
          this.setAnimPopup();
        };

        _proto.initObj = function initObj() {
          var _this2 = this;

          if (this._initialized) return;

          if (this.contents == null) {
            this.contents = this.node;
          }

          if (this.btnClose) {
            this.btnClose.off(Button.EventType.CLICK);
            this.btnClose.on(Button.EventType.CLICK, function () {
              gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
              _this2.btnClose.getComponent(Button).interactable = false;

              _this2.onClose();
            }, this);
          }

          this._showPosition = new Vec3(this.contents.position.x, this.contents.position.y);
          this._fullScale = 1;
        };

        _proto.show = function show() {
          Tween.stopAllByTarget(this.node);

          if (this.contents) {
            Tween.stopAllByTarget(this.contents);
          }

          this.node.active = true;

          if (this.btnClose) {
            this.btnClose.getComponent(Button).interactable = true;
          }

          this.showWithEffect();
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
        };

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT;
        };

        _proto.initLanguage = function initLanguage() {};

        _proto.initEvent = function initEvent() {};

        _proto.showWithEffect = function showWithEffect() {
          var animation = tween(this.contents);
          var compOpacityContent = this.contents.getComponent(UIOpacity);

          if (!compOpacityContent) {
            compOpacityContent = this.contents.addComponent(UIOpacity);
          }

          compOpacityContent.opacity = 0;
          var hidePosition = null;

          switch (this._animStyleShow) {
            case gfBaseConfig.instance.POPUP_ANIMATION.PULSE:
              this.node.setScale(1, 1, 1);
              animation.then(tween().parallel(fadeTo(0.3, this._opacityShowOverlay), tween().to(0.15, {
                scale: new Vec3(this._fullScale + 0.1, this._fullScale + 0.1, 1)
              }, {
                easing: "sineOut"
              }).to(0.15, {
                scale: new Vec3(this._fullScale, this._fullScale, 1)
              }, {
                easing: "sineOut"
              })));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.BOUNCE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              hidePosition = new Vec3(this.contents.position.x, this.contents.position.y + this.popupBackground.getComponent(UITransform).height * 1.5, 1);
              this.contents.setPosition(hidePosition);
              animation.then(tween().to(0.65, {
                position: this._showPosition
              }, {
                easing: "backOut"
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.EASE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              hidePosition = new Vec3(this.contents.position.x - this.popupBackground.getComponent(UITransform).width * 1.5, this.contents.position.y, 1);
              this.contents.setPosition(hidePosition);
              animation.then(tween().to(0.65, {
                position: this._showPosition
              }, {
                easing: "backOut"
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.FADE:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              animation.then(fadeIn(0.3));
              break;

            default:
              this.node.setScale(new Vec3(this._fullScale, this._fullScale, 1));
              compOpacityContent.opacity = 255;
              break;
          } //@ts-ignore


          if (animation != null && animation._actions.length > 0) {
            animation.start();
          }
        };

        _proto.hideWithEffect = function hideWithEffect(animStyle) {
          var _this3 = this;

          var animation = tween(this.contents);
          var hidePosition = null;
          var style = animStyle || this._animStyleHide;

          switch (style) {
            case gfBaseConfig.instance.POPUP_ANIMATION.PULSE:
              animation.then(tween().parallel(fadeOut(0.3), tween().to(0.15, {
                scale: new Vec3(this._fullScale + 0.1, this._fullScale + 0.1, 1)
              }, {
                easing: "sineIn"
              }).to(0.15, {
                scale: new Vec3(this._fullScale - 0.1, this._fullScale - 0.1, 1)
              }, {
                easing: "sineIn"
              })).call(function () {
                _this3.node.active = false;

                _this3.onResetState();

                if (_this3._callback) {
                  _this3._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.BOUNCE:
              hidePosition = new Vec3(this.contents.position.x, this.contents.position.y + this.popupBackground.getComponent(UITransform).height * 1.5, 1);
              animation.then(tween().to(0.65, {
                position: new Vec3(this._showPosition.x, hidePosition.y, 1)
              }, {
                easing: "backIn"
              }).call(function () {
                _this3.node.active = false;

                _this3.onResetState();

                if (_this3._callback) {
                  _this3._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.EASE:
              hidePosition = new Vec3(this.contents.position.x - this.popupBackground.getComponent(UITransform).width * 1.5, this.contents.position.y, 1);
              animation.then(tween().to(0.65, {
                position: new Vec3(hidePosition.x, this._showPosition.y, 1)
              }, {
                easing: "backIn"
              }).call(function () {
                _this3.node.active = false;

                _this3.onResetState();

                if (_this3._callback) {
                  _this3._callback();
                }
              }));
              break;

            case gfBaseConfig.instance.POPUP_ANIMATION.FADE:
              animation.then(fadeOut(this.fadeSpeed).call(function () {
                _this3.node.active = false;

                _this3.onResetState();

                if (_this3._callback) {
                  _this3._callback();
                }
              }));
              break;

            default:
              this.node.active = false;
              this.onResetState();

              if (this._callback) {
                this._callback();
              }

              break;
          } //@ts-ignore


          if (animation && animation._actions.length > 0) {
            if (this.contents) {
              animation.start();
            }
          } else {
            this.node.active = false;
            this.onResetState();
          }
        };

        _proto.hide = function hide(animStyle) {
          this.hideWithEffect(animStyle);
        };

        _proto.getCallback = function getCallback() {
          return this._callback;
        };

        _proto.setCallback = function setCallback(callback) {
          this._callback = callback;
        };

        _proto.getInitialized = function getInitialized() {
          return this._initialized;
        };

        _proto.setInitialized = function setInitialized(isInitialized) {
          this._initialized = isInitialized;
        };

        _proto.onResetState = function onResetState() {
          if (!isValid(this.node)) return;

          if (this.contents) {
            this.contents.getComponent(UIOpacity).opacity = 255;
            this.contents.setPosition(new Vec3(0, 0, 1));
          }

          this.node.setScale(0, 0, 0);
        };

        _proto.onClose = function onClose() {
          var isHaveAnim = true;

          if (this._animStyleHide == gfBaseConfig.instance.POPUP_ANIMATION.DEFAULT) {
            isHaveAnim = false;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.CLOSE_TOP_POPUP, isHaveAnim);
        };

        return GfPopupBase;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "popupTitle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contents", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "overlay", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "popupBackground", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnClose", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfDropSpecialGunFX.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, tween, Animation, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Animation = module.Animation;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "ec4b7D1XmhJ3IKUOgO33A2p", "gfDropSpecialGunFX", undefined);

      var ccclass = _decorator.ccclass;
      var gfDropSpecialGunFX = exports('gfDropSpecialGunFX', (_dec = ccclass('gfDropSpecialGunFX'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfDropSpecialGunFX, _Component);

        function gfDropSpecialGunFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "endPosition", void 0);

          _defineProperty(_assertThisInitialized(_this), "callBack", void 0);

          _defineProperty(_assertThisInitialized(_this), "deskStation", void 0);

          _defineProperty(_assertThisInitialized(_this), "listAction", void 0);

          return _this;
        }

        var _proto = gfDropSpecialGunFX.prototype;

        _proto.playEffect = function playEffect(data, callBack) {
          var startPos = data.startPos,
              endPos = data.endPos,
              angle = data.angle,
              deskStation = data.deskStation;
          this.endPosition = endPos;
          this.callBack = callBack;
          this.deskStation = deskStation;
          this.node.setPosition(startPos);
          this.node.angle = angle;
          this.listAction = tween(this.node);
          this.listAction.then(this.onDrop());
          this.listAction.then(this.onFly());
          this.listAction.then(this.onFinish());
          this.listAction.then(this.onAutoDestroy());
          this.listAction.start();
        };

        _proto.onDrop = function onDrop() {
          var _this2 = this;

          return tween().call(function () {
            var anim = _this2.node.getComponent(Animation);

            anim.play('AnimShowDrop');
          }).delay(.98);
        };

        _proto.onFly = function onFly() {
          return tween().to(1, {
            position: this.endPosition
          }).delay(.58);
        };

        _proto.onFinish = function onFinish() {
          var _this3 = this;

          return tween().call(function () {
            _this3.node.parent.removeChild(_this3.node);

            typeof _this3.callBack === 'function' && _this3.callBack(_this3);
          });
        };

        _proto.onAutoDestroy = function onAutoDestroy() {
          var _this4 = this;

          return tween().call(function () {
            _this4.node.removeFromParent();

            _this4.node.destroy();
          });
        };

        return gfDropSpecialGunFX;
      }(Component), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/globalNetwork.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './message-manager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, log, apiObject, loadConfigAsync, messageManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      log = module.log;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      messageManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ec906OpgxlOkISCFs4dK7/M", "globalNetwork", undefined);

      var GlobalNetwork = function GlobalNetwork() {
        var _this = this;

        _defineProperty(this, "gamesData", {});

        _defineProperty(this, "token", null);

        _defineProperty(this, "refreshToken", null);

        _defineProperty(this, "socket", null);

        _defineProperty(this, "expectedEvent", '');

        _defineProperty(this, "expectedCommandId", '');

        _defineProperty(this, "init", function (token, refreshToken, envId, gameIdSocket) {
          if (refreshToken === void 0) {
            refreshToken = '';
          }

          if (envId === void 0) {
            envId = 'portal';
          }

          if (gameIdSocket === void 0) {
            gameIdSocket = 'all';
          }

          log("Network using V3");
          _this.token = token;
          _this.refreshToken = refreshToken;

          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              SOCKET_URL = _loadConfigAsync$getC.SOCKET_URL,
              API_URL = _loadConfigAsync$getC.API_URL;

          messageManager.initSocket(SOCKET_URL, token, refreshToken, {
            serviceRest: apiObject,
            urlVerifyToken: 'auth/token/login'
          }, envId, gameIdSocket, API_URL);
          loadConfigAsync.setUpSentry();
        });

        _defineProperty(this, "getToken", function () {
          return _this.token;
        });

        _defineProperty(this, "setToken", function (token) {
          _this.token = token;
        });

        _defineProperty(this, "registerGame", function (gameData) {
          var gameId = gameData.gameId,
              gameState = gameData.gameState;

          if (typeof Sentry !== 'undefined') {
            Sentry.configureScope(function (scope) {
              scope.setExtra("gameId", gameId);
            });
          }

          if (!gameState) return;
          return new gameState({
            gameData: gameData
          });
        });

        _defineProperty(this, "initGame", function (gameData) {
          if (gameData === void 0) {
            gameData = {};
          }

          gameData.token = _this.getToken();

          if (typeof Sentry !== 'undefined') {
            Sentry.configureScope(function (scope) {
              scope.setExtra("gameId", gameData.gameId);
            });
          }

          return gameData;
        });

        _defineProperty(this, "triggerUserLogout", function () {
          messageManager.closeAndCleanUp();
        });

        _defineProperty(this, "outGame", function () {});
      };

      var globalNetwork = exports('default', new GlobalNetwork());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CoinLabel1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfCoinLabel.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Label, gfCoinLabel;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      gfCoinLabel = module.gfCoinLabel;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "eca05C6Br1LlKSMBt9yPryT", "CoinLabel1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var CoinLabel1988 = exports('CoinLabel1988', (_dec = ccclass('CoinLabel1988'), _dec2 = property(Label), _dec3 = property(Label), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfCoinLabel) {
        _inheritsLoose(CoinLabel1988, _gfCoinLabel);

        function CoinLabel1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfCoinLabel.call.apply(_gfCoinLabel, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "myTxt", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "otherTxt", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = CoinLabel1988.prototype;

        _proto.initAssets = function initAssets(isMe) {
          this.myTxt.node.active = !!isMe;
          this.otherTxt.node.active = !isMe;
        };

        _proto.setString = function setString(value) {
          this.myTxt.string = value;
          this.otherTxt.string = value;
        };

        return CoinLabel1988;
      }(gfCoinLabel), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "myTxt", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "otherTxt", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPopuptutorial.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfDataStore.ts', './gfPopupBase.ts', './gfLocalize.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Toggle, Label, sys, gfBaseEvents, gfEventEmitter, gfBaseConfig, gfDataStore, GfPopupBase, gfLocalize;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Toggle = module.Toggle;
      Label = module.Label;
      sys = module.sys;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfLocalize = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "efab6qvrYlOVaOvEKXi+Mjk", "gfPopuptutorial", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfPopuptutorial = exports('GfPopuptutorial', (_dec = ccclass('GfPopuptutorial'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(GfPopuptutorial, _GfPopupBase);

        function GfPopuptutorial() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "checkBox", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = GfPopuptutorial.prototype;

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = gfBaseConfig.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initObj = function initObj() {
          _GfPopupBase.prototype.initObj.call(this);

          this.checkBox.getComponent(Toggle).isChecked = false;
          this.checkBox.on('toggle', this.onToggle, this);
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.tutorial);
        };

        _proto.onToggle = function onToggle() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          this.save();
        };

        _proto.save = function save() {
          var _llv;

          if (!gfDataStore.instance || !gfBaseConfig.instance) return;
          var selfInfo = gfDataStore.instance.getSelfInfo();
          var value = this.checkBox ? this.checkBox.getComponent(Toggle).isChecked : false;
          var llv = (_llv = {}, _llv[gfBaseConfig.instance.LOCAL_STORE.NOT_SHOW_NT] = value, _llv);
          sys.localStorage.setItem(gfBaseConfig.instance.LOCAL_STORE.LOCAL_LOGIN_VAR + selfInfo.UserID, JSON.stringify(llv));
        };

        return GfPopuptutorial;
      }(GfPopupBase), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "checkBox", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/XOCypher.ts", ['cc'], function (exports) {
  'use strict';

  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "effd4CcclVCIblXmo9eBV5+", "XOCypher", undefined);

      var b64_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

      var XORCipher = /*#__PURE__*/function () {
        function XORCipher() {}

        var _proto = XORCipher.prototype;

        _proto.encode = function encode(key, data) {
          data = xor_encrypt(key, data);
          return b64_encode(data);
        };

        _proto.decode = function decode(key, data) {
          data = b64_decode(data);
          return xor_decrypt(key, data);
        };

        _proto.encode_new = function encode_new(key, data) {
          data = xor_encrypt_new(key, data);
          return b64_encode(data);
        };

        _proto.decode_new = function decode_new(key, data) {
          data = b64_decode(data);
          return xor_decrypt_new(key, data);
        };

        return XORCipher;
      }();

      function stringToUtf8ByteArray(str) {
        var out = [],
            p = 0;

        for (var i = 0; i < str.length; i++) {
          var c = str.charCodeAt(i);

          if (c < 128) {
            out[p++] = c;
          } else if (c < 2048) {
            out[p++] = c >> 6 | 192;
            out[p++] = c & 63 | 128;
          } else if ((c & 0xFC00) == 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) == 0xDC00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
            out[p++] = c >> 18 | 240;
            out[p++] = c >> 12 & 63 | 128;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          } else {
            out[p++] = c >> 12 | 224;
            out[p++] = c >> 6 & 63 | 128;
            out[p++] = c & 63 | 128;
          }
        }

        return out;
      }

      function utf8ByteArrayToString(bytes) {
        var out = [],
            pos = 0,
            c = 0;

        while (pos < bytes.length) {
          var c1 = bytes[pos++];

          if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
          } else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
          } else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++]; // eslint-disable-line

            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
            out[c++] = String.fromCharCode(0xD800 + (u >> 10));
            out[c++] = String.fromCharCode(0xDC00 + (u & 1023));
          } else {
            var c2 = bytes[pos++]; // eslint-disable-line

            var c3 = bytes[pos++]; // eslint-disable-line

            out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
          }
        }

        return out.join('');
      }

      function b64_encode(data) {
        var o1,
            o2,
            o3,
            h1,
            h2,
            h3,
            h4,
            bits,
            r,
            i = 0,
            enc = "";

        if (!data) {
          return data;
        }

        do {
          o1 = data[i++];
          o2 = data[i++];
          o3 = data[i++];
          bits = o1 << 16 | o2 << 8 | o3;
          h1 = bits >> 18 & 0x3f;
          h2 = bits >> 12 & 0x3f;
          h3 = bits >> 6 & 0x3f;
          h4 = bits & 0x3f;
          enc += b64_table.charAt(h1) + b64_table.charAt(h2) + b64_table.charAt(h3) + b64_table.charAt(h4);
        } while (i < data.length);

        r = data.length % 3;
        return (r ? enc.slice(0, r - 3) : enc) + "===".slice(r || 3);
      }

      function b64_decode(data) {
        var o1,
            o2,
            o3,
            h1,
            h2,
            h3,
            h4,
            bits,
            i = 0,
            result = [];

        if (!data) {
          return data;
        }

        data += "";

        do {
          h1 = b64_table.indexOf(data.charAt(i++));
          h2 = b64_table.indexOf(data.charAt(i++));
          h3 = b64_table.indexOf(data.charAt(i++));
          h4 = b64_table.indexOf(data.charAt(i++));
          bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
          o1 = bits >> 16 & 0xff;
          o2 = bits >> 8 & 0xff;
          o3 = bits & 0xff;
          result.push(o1);

          if (h3 !== 64) {
            result.push(o2);

            if (h4 !== 64) {
              result.push(o3);
            }
          }
        } while (i < data.length);

        return result;
      }

      function xor_encrypt(key, data) {
        key = stringToUtf8ByteArray(key);
        return stringToUtf8ByteArray(data).map(function (c, i) {
          return c ^ Math.floor(i % key.length);
        });
      }

      function xor_decrypt(key, data) {
        key = stringToUtf8ByteArray(key);
        return utf8ByteArrayToString(data.map(function (c, i) {
          return c ^ Math.floor(i % key.length);
        }));
      }

      function xor_encrypt_new(key, data) {
        key = stringToUtf8ByteArray(key);
        return stringToUtf8ByteArray(data).map(function (c, i) {
          return c ^ key[Math.floor(i % key.length)];
        });
      }

      function xor_decrypt_new(key, data) {
        key = stringToUtf8ByteArray(key);
        return utf8ByteArrayToString(data.map(function (c, i) {
          return c ^ key[Math.floor(i % key.length)];
        }));
      }

      var xorCipher = exports('default', new XORCipher());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EventList.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './serviceRest.ts', './loadConfigAsync.ts', './globalNetwork.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, Prefab, Node, Toggle, EditBox, NodePool, instantiate, sys, Component, apiObject, loadConfigAsync, globalNetwork;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Toggle = module.Toggle;
      EditBox = module.EditBox;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      sys = module.sys;
      Component = module.Component;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      globalNetwork = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "f0679PqTwdL3ppie1JhQX4J", "EventList", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GameEvents = exports('GameEvents', (_dec = ccclass('GameEvents'), _dec2 = property({
        type: Prefab
      }), _dec3 = property({
        type: Node
      }), _dec4 = property({
        type: Toggle
      }), _dec5 = property({
        type: EditBox
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameEvents, _Component);

        function GameEvents() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "listEvent", []);

          _initializerDefineProperty(_assertThisInitialized(_this), "eventPrefab", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "eventHolder", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "filterSlot", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "filterTag", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "eventPool", null);

          return _this;
        }

        var _proto = GameEvents.prototype;

        _proto.onLoad = function onLoad() {
          this.eventPool = new NodePool();
        };

        _proto.getEvent = function getEvent() {
          var event = this.eventPool.get();

          if (!event) {
            event = instantiate(this.eventPrefab);
          }

          return event;
        };

        _proto.removeAllEvents = function removeAllEvents() {
          while (this.eventHolder.children.length > 0) {
            this.eventPool.put(this.eventHolder.children[0]);
          }
        };

        _proto.onEnable = function onEnable() {
          this.removeAllEvents();
          this.loadEvents();
        };

        _proto.onDisable = function onDisable() {
          this.listEvent = null;
          sys.garbageCollect();
        };

        _proto.loadEvents = function loadEvents() {
          var _loadConfigAsync$getC = loadConfigAsync.getConfig(),
              API_URL = _loadConfigAsync$getC.API_URL;

          var eventUrl = API_URL + 'event-config/event-available-by-user';
          var headers = {
            'Authorization': globalNetwork.getToken()
          };
          apiObject.getWithHeader({
            url: eventUrl,
            callback: this.onEventsLoaded.bind(this),
            headers: headers
          });
        };

        _proto.onEventsLoaded = function onEventsLoaded(res) {
          this.listEvent = res.data || [];
          this.filterEvent(this.filterSlot.isChecked ? this.filterTag.string : "");
        };

        _proto.onToggleFilter = function onToggleFilter() {
          this.filterEvent(this.filterSlot.isChecked ? this.filterTag.string : "");
        };

        _proto.filterEvent = function filterEvent(key) {
          this.removeAllEvents();

          for (var i = 0; i < this.listEvent.length; i++) {
            var eventInfo = this.listEvent[i].eventInfo;

            if (eventInfo) {
              var eventName = eventInfo.name.toLocaleLowerCase();
              var updatedTitle = key.toLocaleLowerCase();

              if (eventName.includes(updatedTitle)) {
                var event = this.getEvent();
                event.setParent(this.eventHolder);
                event.getComponent('GameEvent').init(this.listEvent[i]);
              }
            }
          }
        };

        _proto.onLoadError = function onLoadError(error) {
          console.log(error);
        };

        _proto.onDestroy = function onDestroy() {
          this.eventPool.clear();
        };

        return GameEvents;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "eventPrefab", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "eventHolder", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "filterSlot", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "filterTag", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PopupSettingSlider1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfPopupBase.ts', './gfLocalize.ts', './DataStore1988.ts', './Config1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, sys, ProgressBar, Slider, Label, gfBaseEvents, gfEventEmitter, GfPopupBase, gfLocalize, DataStore1988, Config1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      sys = module.sys;
      ProgressBar = module.ProgressBar;
      Slider = module.Slider;
      Label = module.Label;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      GfPopupBase = module.GfPopupBase;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _temp;

      cclegacy._RF.push({}, "f0cc0Z66jpHlrSDmofbvwHj", "PopupSettingSlider1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PopupSettingSlider1988 = exports('PopupSettingSlider1988', (_dec = ccclass('PopupSettingSlider1988'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_GfPopupBase) {
        _inheritsLoose(PopupSettingSlider1988, _GfPopupBase);

        function PopupSettingSlider1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfPopupBase.call.apply(_GfPopupBase, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "BtnJackpotHistory", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "musicSliderNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectSliderNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "handlerMusic", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "handlerEffect", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PopupSettingSlider1988.prototype;

        _proto.onLoad = function onLoad() {
          _GfPopupBase.prototype.onLoad.call(this);
        };

        _proto.setAnimPopup = function setAnimPopup() {
          this._animStyleShow = Config1988.instance.POPUP_ANIMATION.FADE;
          this._animStyleHide = Config1988.instance.POPUP_ANIMATION.FADE;
        };

        _proto.initObj = function initObj() {
          _GfPopupBase.prototype.initObj.call(this);

          if (sys.isNative) {
            this.handlerMusic.off('touchend');
            this.handlerMusic.off('touchcancel');
            this.handlerEffect.off('touchend');
            this.handlerEffect.off('touchcancel');
            this.handlerMusic.on(Node.EventType.TOUCH_END, this.onBtnMusicClick, this);
            this.handlerMusic.on(Node.EventType.TOUCH_CANCEL, this.onBtnMusicClick, this);
            this.handlerEffect.on(Node.EventType.TOUCH_END, this.onBtnEffectClick, this);
            this.handlerEffect.on(Node.EventType.TOUCH_CANCEL, this.onBtnEffectClick, this);
            this.musicSliderNode.off('touchend');
            this.musicSliderNode.off('touchcancel');
            this.effectSliderNode.off('touchend');
            this.effectSliderNode.off('touchcancel');
            this.musicSliderNode.on(Node.EventType.TOUCH_END, this.onBtnMusicClick, this);
            this.musicSliderNode.on(Node.EventType.TOUCH_CANCEL, this.onBtnMusicClick, this);
            this.effectSliderNode.on(Node.EventType.TOUCH_END, this.onBtnEffectClick, this);
            this.effectSliderNode.on(Node.EventType.TOUCH_CANCEL, this.onBtnEffectClick, this);
          }
        };

        _proto.updateSlider = function updateSlider() {
          this.effectSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = DataStore1988.instance.getCurrentSFXVolume();
          this.effectSliderNode.getComponent(Slider).progress = DataStore1988.instance.getCurrentSFXVolume();
          this.musicSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = DataStore1988.instance.getCurrentBGMVolume();
          this.musicSliderNode.getComponent(Slider).progress = DataStore1988.instance.getCurrentBGMVolume();
        };

        _proto.show = function show() {
          _GfPopupBase.prototype.show.call(this);

          this.updateSlider();
        };

        _proto.initLanguage = function initLanguage() {
          this.popupTitle && (this.popupTitle.getComponent(Label).string = gfLocalize.instance.popupTitle.setting);
        };

        _proto.onBtnJPHistory = function onBtnJPHistory() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_JACKPOT_HISTORY);
        };

        _proto.onSliderMusic = function onSliderMusic(event) {
          this.musicSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = event.progress;

          if (!sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, event.progress);
          }
        };

        _proto.onSliderEffect = function onSliderEffect(event) {
          this.effectSliderNode.getChildByName("ProgressBar").getComponent(ProgressBar).progress = event.progress;

          if (!sys.isNative) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, event.progress);
          }
        };

        _proto.onBtnMusicClick = function onBtnMusicClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_MUSIC_VOL, this.musicSliderNode.getComponent(Slider).progress);
        };

        _proto.onBtnEffectClick = function onBtnEffectClick() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.UPDATE_EFFECT_VOL, this.effectSliderNode.getComponent(Slider).progress);
        };

        return PopupSettingSlider1988;
      }(GfPopupBase), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "BtnJackpotHistory", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "musicSliderNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "effectSliderNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "handlerMusic", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "handlerEffect", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EC2FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './Config1985.ts', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Config1985, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "f101bPdfbdJrIG9oX2L4kRp", "EC2FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EC2FireBullet = exports('EC2FireBullet', (_dec = ccclass('EC2FireBullet'), _dec(_class = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(EC2FireBullet, _EnemyFireBullet);

        function EC2FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "BulletRay", 3);

          _defineProperty(_assertThisInitialized(_this), "startAngle", 0);

          _defineProperty(_assertThisInitialized(_this), "delayBulletFire", 0);

          _defineProperty(_assertThisInitialized(_this), "bulletQueue", []);

          _defineProperty(_assertThisInitialized(_this), "startFirePos", void 0);

          return _this;
        }

        var _proto = EC2FireBullet.prototype;

        _proto.update = function update(dt) {
          this.updateTimeToFire(dt);
          this.updateTimeToFireBullet(dt);
        };

        _proto.updateTimeToFireBullet = function updateTimeToFireBullet(dt) {
          if (this.isDie) return;
          if (this.bulletQueue.length == 0) return;
          this.delayBulletFire += dt;

          while (this.bulletQueue.length > 0 && this.delayBulletFire > this.bulletQueue[0].delay) {
            var _this$bulletQueue$shi = this.bulletQueue.shift(),
                index = _this$bulletQueue$shi.index,
                rayIndex = _this$bulletQueue$shi.rayIndex,
                delay = _this$bulletQueue$shi.delay;

            this.fireBullet(index, rayIndex, delay);
          }
        };

        _proto.fire = function fire(timeLate) {
          if (timeLate === void 0) {
            timeLate = 0;
          }

          if (this.isDie) return;
          this.bulletQueue.length = 0;
          this.delayBulletFire = 0;
          var bulletCount = this.BulletCount;
          var bulletRay = this.BulletRay;
          var baseDelay = 1 / (bulletCount / bulletRay);

          for (var i = 0; i < bulletCount / bulletRay; ++i) {
            for (var j = 0; j < bulletRay; ++j) {
              this.bulletQueue.push({
                delay: baseDelay * (i + j * bulletCount / bulletRay * 0.8) - timeLate,
                index: i,
                rayIndex: j
              });
            }
          }

          this.bulletQueue.sort(function (a, b) {
            return a.delay - b.delay;
          });
          this.startAngle += 2 * Math.PI / bulletRay / 2;
          this.startFirePos = this.node.getPosition();
        };

        _proto.fireBullet = function fireBullet(index, rayIndex, delay) {
          if (delay === void 0) {
            delay = 0;
          }

          if (this.isDie) return;
          var distance = 2000;
          var offset = 30;
          var angle = this.startAngle - (Math.PI / this.BulletCount / 2 * index + 2 * Math.PI / this.BulletRay * rayIndex);
          var firePos = v3(this.startFirePos);
          firePos.y += delay * Config1985.instance.BackgroundSpeed;
          var x = firePos.x + offset * Math.cos(angle);
          var y = firePos.y + offset * Math.sin(angle);
          var srcPos = v3(x, y, 0);
          x = firePos.x + distance * Math.cos(angle);
          y = firePos.y + distance * Math.sin(angle);
          var destPos = v3(x, y, 0);
          this.createBullet(BulletConfig.EC2, srcPos, destPos, delay - this.delayBulletFire);
        };

        _proto.onDie = function onDie() {
          this.startAngle = 0;
          this.delayBulletFire = 0;
          this.bulletQueue.length = 0;

          _EnemyFireBullet.prototype.onDie.call(this);
        };

        return EC2FireBullet;
      }(EnemyFireBullet), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfMainFSM.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfNetworkParser.ts', './gfPoolManager.ts', './gfLocalize.ts', './gfFishManager.ts', './state-machine.min.js', './state-machine.min.mjs_cjs=&original=.js'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, warn, gfBaseEvents, gfEventEmitter, gfBaseConfig, showFullScreenButton, gfReferenceManager, gfDataStore, gfNetworkParser, gfPoolManager, gfLocalize, gfFishManager, _cjsExports;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      showFullScreenButton = module.showFullScreenButton;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNetworkParser = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfLocalize = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      _cjsExports = module.default;
    }, null],
    execute: function () {
      cclegacy._RF.push({}, "f16aegHwhlABYtKLVhZWvKi", "gfMainFSM", undefined);

      var TRANSITION = {
        GO_LOGIN_LOBBY: 'goLoginLobby',
        GO_LOBBY: 'goLobby',
        GO_LOGIN_GAME_ROOM: 'goLoginGameRoom',
        GO_GAME_ROOM: 'goGameRoom',
        GO_EXIT_GAME: 'goExitGame',
        GO_LOAD_GAME: 'goLoadGame',
        GO_WAIT_EXIT: "goWaitExit"
      };
      var STATE = {
        START: 'start',
        LOGIN_LOBBY: 'loginLobby',
        LOBBY: 'lobby',
        LOAD_GAME: 'loadGame',
        LOGIN_GAME_ROOM: 'loginGameRoom',
        GAME_ROOM: 'gameRoom',
        WAIT_EXIT: 'waitExit',
        EXIT_GAME: 'exitGame'
      };
      var gfMainFSM = exports('default', /*#__PURE__*/function () {
        function gfMainFSM() {
          _defineProperty(this, "_fsm", void 0);

          _defineProperty(this, "LOGTAG", null);

          gfMainFSM.instance = this;
          this._fsm = null;
          this.LOGTAG = {
            "default": "::gfMainFSM::",
            visible: false
          };
          this.initStateMachine();
          this.initEvents();
        }

        var _proto = gfMainFSM.prototype;

        _proto.initEvents = function initEvents() {};

        _proto.initStateMachine = function initStateMachine() {
          this._fsm = new _cjsExports({
            init: STATE.START,
            transitions: [{
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.START,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.GAME_ROOM,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.LOGIN_GAME_ROOM,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOGIN_LOBBY,
              from: STATE.LOBBY,
              to: STATE.LOGIN_LOBBY
            }, {
              name: TRANSITION.GO_LOBBY,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOBBY
            }, {
              name: TRANSITION.GO_LOAD_GAME,
              from: STATE.LOBBY,
              to: STATE.LOAD_GAME
            }, {
              name: TRANSITION.GO_LOAD_GAME,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOAD_GAME
            }, {
              name: TRANSITION.GO_LOGIN_GAME_ROOM,
              from: STATE.LOAD_GAME,
              to: STATE.LOGIN_GAME_ROOM
            }, {
              name: TRANSITION.GO_LOGIN_GAME_ROOM,
              from: STATE.LOGIN_LOBBY,
              to: STATE.LOGIN_GAME_ROOM
            }, {
              name: TRANSITION.GO_GAME_ROOM,
              from: STATE.LOGIN_GAME_ROOM,
              to: STATE.GAME_ROOM
            }, {
              name: TRANSITION.GO_GAME_ROOM,
              from: STATE.GAME_ROOM,
              to: STATE.GAME_ROOM
            }, {
              name: TRANSITION.GO_EXIT_GAME,
              from: "*",
              to: STATE.EXIT_GAME
            }, {
              name: TRANSITION.GO_WAIT_EXIT,
              from: STATE.LOAD_GAME,
              to: STATE.WAIT_EXIT
            }],
            methods: {
              onLoginLobby: this.onLoginLobby.bind(this),
              onLobby: this.onLobby.bind(this),
              onLoginGameRoom: this.onLoginGameRoom.bind(this),
              onGameRoom: this.onGameRoom.bind(this),
              onLeaveGameRoom: this.onLeaveGameRoom.bind(this),
              onExitGame: this.onExitGame.bind(this),
              onInvalidTransition: function onInvalidTransition(transition, from) {
                warn("Transition", transition, "from", from, "is not allowed");
              },
              onTransition: function onTransition() {// cc.warn("From ", lifecycle.from, " to ", lifecycle.to);
              }
            }
          });
        };

        _proto.onLoginLobby = function onLoginLobby() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.CONNECT_MASTER);
        };

        _proto.onLobby = function onLobby() {
          gfDataStore.instance.clearSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.HIDE_WAITING);
          gfEventEmitter.instance.emit(gfBaseEvents.LOBBY_LAYER.UPDATE_LOBBY_INFO);
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.UPDATE_JACKPOT, gfDataStore.instance.getJackpotValue());
          showFullScreenButton(true);
        };

        _proto.onLoginGameRoom = function onLoginGameRoom() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.CONNECT_GAME);
        };

        _proto.onGameRoom = function onGameRoom() {
          showFullScreenButton(false);
          var selfInfo = gfDataStore.instance.getSelfInfo();
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM, selfInfo.itemInfo);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_TABLE_ID);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.UPDATE_JACKPOT_INFO);
        };

        _proto.onLeaveGameRoom = function onLeaveGameRoom() {// GameInfo.instance.clearGameInfo();
          // if (!GameInfo.instance.listZombieOutRoom)
          //     Emitter.instance.emit(EventCode.COMMON.EXIT_GAME_ROOM);
        } // Exit Game to Portal
        ;

        _proto.onExitGame = function onExitGame() {
          var _Emitter$instance, _Emitter$instance2, _FishManager$instance, _Localize$instance, _NetworkParser$instan, _GameConfig$instance, _DataStore$instance, _gfReferenceManager$i, _PoolManager$instance;

          (_Emitter$instance = gfEventEmitter.instance) === null || _Emitter$instance === void 0 ? void 0 : _Emitter$instance.emit(gfBaseEvents.COMMON.REMOVE_PERSIST_NODE);
          (_Emitter$instance2 = gfEventEmitter.instance) === null || _Emitter$instance2 === void 0 ? void 0 : _Emitter$instance2.destroy();
          (_FishManager$instance = gfFishManager.instance) === null || _FishManager$instance === void 0 ? void 0 : _FishManager$instance.destroy();
          (_Localize$instance = gfLocalize.instance) === null || _Localize$instance === void 0 ? void 0 : _Localize$instance.destroy();
          (_NetworkParser$instan = gfNetworkParser.instance) === null || _NetworkParser$instan === void 0 ? void 0 : _NetworkParser$instan.destroy();
          (_GameConfig$instance = gfBaseConfig.instance) === null || _GameConfig$instance === void 0 ? void 0 : _GameConfig$instance.destroy();
          (_DataStore$instance = gfDataStore.instance) === null || _DataStore$instance === void 0 ? void 0 : _DataStore$instance.destroy();
          (_gfReferenceManager$i = gfReferenceManager.instance) === null || _gfReferenceManager$i === void 0 ? void 0 : _gfReferenceManager$i.destroy();
          (_PoolManager$instance = gfPoolManager.instance) === null || _PoolManager$instance === void 0 ? void 0 : _PoolManager$instance.destroy();
        };

        _proto.destroy = function destroy() {
          gfMainFSM.instance = null;
        };

        _proto.isStateLobby = function isStateLobby() {
          return this._fsm.state === STATE.LOBBY;
        };

        _proto.isStateLoadGame = function isStateLoadGame() {
          return this._fsm.state === STATE.LOAD_GAME;
        };

        _proto.isStateLoginGameRoom = function isStateLoginGameRoom() {
          return this._fsm.state === STATE.LOGIN_GAME_ROOM;
        };

        _proto.isStateLoginLobby = function isStateLoginLobby() {
          return this._fsm.state === STATE.LOGIN_LOBBY;
        };

        _proto.isStateWaitExit = function isStateWaitExit() {
          return this._fsm.state === STATE.WAIT_EXIT;
        };

        _proto.isStateExit = function isStateExit() {
          return this._fsm.state === STATE.EXIT_GAME;
        };

        _proto.isStateGameRoom = function isStateGameRoom() {
          return this._fsm.state === STATE.GAME_ROOM;
        };

        return gfMainFSM;
      }());

      _defineProperty(gfMainFSM, "instance", void 0);

      gfMainFSM.instance = null;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ClickAndShow.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, UIOpacity, tween, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "f1c22FetS9D86F5ibiTjmyB", "ClickAndShow", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ClickAndShow = exports('ClickAndShow', (_dec = ccclass('ClickAndShow'), _dec2 = property({
        type: Node
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ClickAndShow, _Component);

        function ClickAndShow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "panel", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "fadeSpeed", 0.9);

          _defineProperty(_assertThisInitialized(_this), "isShowing", false);

          return _this;
        }

        var _proto = ClickAndShow.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on("SHOW_PANEL", this.enter, this);
          this.node.on("HIDE_PANEL", this.exit, this);
          this.panel.active = false;
        };

        _proto.enter = function enter() {
          if (this.node.soundPlayer) this.node.soundPlayer.playSFXClick();
          this.isShowing = true;
          this.panel.active = true;
          var uiOp = this.panel.getComponent(UIOpacity);
          uiOp.opacity = 0;
          tween(uiOp).to(this.fadeSpeed, {
            opacity: 255
          }).start();
        };

        _proto.exit = function exit() {
          var _this2 = this;

          if (!this.isShowing) return;
          this.isShowing = false;
          if (this.node.soundPlayer) this.node.soundPlayer.playSFXClick();
          var uiOp = this.panel.getComponent(UIOpacity);
          tween(uiOp).to(this.fadeSpeed, {
            opacity: 0
          }).call(function () {
            _this2.panel.active = false;
          }).start();
        };

        _proto.start = function start() {// [3]
        };

        return ClickAndShow;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "panel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfCoinFX.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfBaseConfig.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Animation, tween, UITransform, v3, fadeOut, call, gfBaseConfig, gfNode;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Animation = module.Animation;
      tween = module.tween;
      UITransform = module.UITransform;
      v3 = module.v3;
    }, function (module) {
      fadeOut = module.fadeOut;
      call = module.call;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "f380cz8iaxPraDA+YrZD7Yl", "gfCoinFX", undefined);

      var TYPE_COIN = ["COIN_3D", "COIN_PARTICLE"];
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfCoinFX = exports('gfCoinFX', (_dec = ccclass('gfCoinFX'), _dec2 = property(Animation), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfCoinFX, _gfNode);

        function gfCoinFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "anim", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "timer", void 0);

          _defineProperty(_assertThisInitialized(_this), "velX", void 0);

          _defineProperty(_assertThisInitialized(_this), "velY", void 0);

          _defineProperty(_assertThisInitialized(_this), "aclX", void 0);

          _defineProperty(_assertThisInitialized(_this), "aclY", void 0);

          _defineProperty(_assertThisInitialized(_this), "screenSize", void 0);

          _defineProperty(_assertThisInitialized(_this), "type", void 0);

          _defineProperty(_assertThisInitialized(_this), "lifetime", void 0);

          _defineProperty(_assertThisInitialized(_this), "_animState", void 0);

          _defineProperty(_assertThisInitialized(_this), "index", 0);

          _defineProperty(_assertThisInitialized(_this), "animName", void 0);

          return _this;
        }

        var _proto = gfCoinFX.prototype;

        _proto.onLoad = function onLoad() {
          this.timer = 0;
          this.velX = 0;
          this.velY = 0;
          this.aclX = 0;
          this.aclY = 0;
          this.screenSize = gfBaseConfig.instance.realSize;
          this.type = TYPE_COIN[0];
          this.node.on("STOP_ANIMATION", this.stopAnimation, this);
        };

        _proto.initAssets = function initAssets(config) {
          this.anim.clips = [config.asset];
          this.animName = config.asset.name;
        };

        _proto.startAnimation = function startAnimation(type, coinAnimSpeed, velX, velY, aclX, aclY, lifetime) {
          if (type === void 0) {
            type = 0;
          }

          if (coinAnimSpeed === void 0) {
            coinAnimSpeed = 1;
          }

          if (velX === void 0) {
            velX = 1;
          }

          if (velY === void 0) {
            velY = 1;
          }

          if (aclX === void 0) {
            aclX = 1;
          }

          if (aclY === void 0) {
            aclY = 1;
          }

          if (lifetime === void 0) {
            lifetime = -1;
          }

          this.type = TYPE_COIN[type];
          this.velX = velX;
          this.velY = velY;
          this.aclX = aclX;
          this.aclY = aclY;
          this.lifetime = lifetime;

          if (!this._animState) {
            this._animState = this.anim.getState(this.animName);
          }

          this._animState.speed = coinAnimSpeed;
          this.anim.play(this.animName);
        };

        _proto.stopAnimation = function stopAnimation() {
          this.anim.stop();
          this.returnPool();
        };

        _proto.update = function update(dt) {
          var _this2 = this;

          if (this.type != TYPE_COIN[1]) return;

          if (this.lifetime >= 0) {
            this.lifetime -= dt;

            if (this.lifetime <= 0) {
              tween(this.node).then(fadeOut(0.5)).then(call(function () {
                _this2.stopAnimation();
              })).start();
              return;
            }
          }

          this.node.setPosition(this.node.position.x + this.velX * dt, this.node.position.y + this.velY * dt, 0);
          this.velX += this.aclX * dt;
          this.velY += this.aclY * dt;
          var pos = this.node.parent.getComponent(UITransform).convertToWorldSpaceAR(this.node.position);

          if (pos.x < -this.screenSize.Width * 0.25 || pos.x > this.screenSize.Width * 1.25 || pos.y < -this.screenSize.Height * 0.25 || pos.y > this.screenSize.Height * 1.25) {
            this.stopAnimation();
          }
        } //nodepool
        //Called whenever card object is get from Object Pool
        ;

        _proto.reuse = function reuse(poolMng) {
          _gfNode.prototype.reuse.call(this, poolMng);

          this.type = TYPE_COIN[0];
          this.setOpacity(255);
          this.node.scale = v3(1, 1, 1);
          this.node.angle = 0;
          this.node.position = v3(0, 0, 0);
        };

        return gfCoinFX;
      }(gfNode), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "anim", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PoolFactory.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './CustomType.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, NodePool, instantiate, Component, PoolPrefab, CustomEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      NodePool = module.NodePool;
      instantiate = module.instantiate;
      Component = module.Component;
    }, function (module) {
      PoolPrefab = module.PoolPrefab;
      CustomEvent = module.CustomEvent;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "f3978/G4gRNPb+ZuiP2JxRv", "PoolFactory", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PoolFactory = exports('PoolFactory', (_dec = ccclass('PoolFactory'), _dec2 = property({
        type: PoolPrefab,
        displayName: 'Pool Prefab List',
        visible: true
      }), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PoolFactory, _Component);

        function PoolFactory() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "poolPrefabList", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "pools", []);

          return _this;
        }

        var _proto = PoolFactory.prototype;

        _proto.onLoad = function onLoad() {
          for (var i = 0; i < this.poolPrefabList.length; i++) {
            var prefabObject = this.poolPrefabList[i];

            if (prefabObject) {
              var prefabName = prefabObject.prefabName;
              var initialCount = prefabObject.initialCount;
              var prefab = prefabObject.prefab;

              if (prefabName && initialCount && prefab) {
                var aPool = new NodePool(prefabName);

                for (var j = 0; j < initialCount; j++) {
                  var obj = instantiate(prefab);
                  obj.name = prefabName;
                  obj.active = false;
                  aPool.put(obj);
                }

                var poolObject = {
                  prefabName: prefabName,
                  prefab: prefab,
                  pool: aPool
                };
                this.pools[i] = poolObject;
              }
            }
          }

          this.node.on("GET_OBJECT", this.getObject, this);
          this.node.on("REMOVE_OBJECT", this.removeObject, this);
          this.node.dispatchEvent(new CustomEvent("SET_UP_POOL_FACTORY", true, {
            poolFactory: this
          }));
        };

        _proto.getObject = function getObject(_prefabName) {
          var obj = null;

          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var prefabName = poolObject.prefabName,
                  prefab = poolObject.prefab,
                  pool = poolObject.pool;

              if (prefabName == _prefabName) {
                if (pool.size() > 0) {
                  obj = pool.get();
                } else {
                  obj = instantiate(prefab);
                  obj.name = prefabName;
                  obj.active = false;
                }

                break;
              }
            }
          }

          return obj;
        };

        _proto.removeObject = function removeObject(node) {
          var name = node.name;

          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var _this$pools$i = this.pools[i],
                  prefabName = _this$pools$i.prefabName,
                  pool = _this$pools$i.pool;

              if (name == prefabName) {
                node.active = false;
                pool.put(node);
                break;
              }
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          for (var i = 0; i < this.pools.length; i++) {
            var poolObject = this.pools[i];

            if (poolObject) {
              var pool = poolObject.pool;

              if (pool) {
                pool.clear();
              }

              poolObject.prefab = null;
            }
          }

          this.pools = [];
          this.pools = null;
          this.poolPrefabList = [];
          this.poolPrefabList = null;
          this.node.off("GET_OBJECT", this.getObject, this);
          this.node.off("REMOVE_OBJECT", this.removeObject, this);
        };

        return PoolFactory;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "poolPrefabList", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishManager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfNodePoolConfig.ts', './gfDataStore.ts', './gfPoolManager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, BoxCollider2D, Intersection2D, instantiate, warn, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, randomBetween, removeEvents, gfReferenceManager, gfNodePoolConfig, gfDataStore, gfPoolManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      BoxCollider2D = module.BoxCollider2D;
      Intersection2D = module.Intersection2D;
      instantiate = module.instantiate;
      warn = module.warn;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      randomBetween = module.randomBetween;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f3b21c8WzdJmK92C9W5kija", "gfFishManager", undefined);

      var gfFishManager = exports('default', /*#__PURE__*/function () {
        function gfFishManager() {
          _defineProperty(this, "listFish", void 0);

          _defineProperty(this, "_lockFishId", void 0);

          gfFishManager.instance = this;
          this.listFish = [];
          this._lockFishId = null;
          this.initEvent();
        }

        var _proto = gfFishManager.prototype;

        _proto.initEvent = function initEvent() {
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH, this.createListFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.catchFish, this);
          registerEvent(gfBaseEvents.FISH_LAYER.CATCH_FISH_BY_SKILL, this.catchFishSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_ROOM_DATA, this.updateRoomData, this);
          registerEvent(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this.removeFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, this.moveOutAllFishes, this);
          registerEvent(gfBaseEvents.GAME_LAYER.MOVE_OUT_ALL_FISHES, this.moveOutAllFishes, this);
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.removeAll, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.removeAll, this);
          registerEvent(gfBaseEvents.DRAGON.ON_END, this.endDragon, this);
          registerEvent(gfBaseEvents.DRAGON.ON_BALL_DROPPED, this.dragonDropBall, this);
        };

        _proto.createListFish = function createListFish(data) {
          for (var i = 0; i < data.length; ++i) {
            data[i].isResume = data.isResume;
            this.createFishWithData(data[i]);
          }
        };

        _proto.catchFishSkill = function catchFishSkill(data) {
          var listFish = data.ListFish;

          for (var i = 0; i < listFish.length; i++) {
            var fish = listFish[i];
            var infoDetail = {
              DeskStation: data.DeskStation,
              FishID: fish.FishID,
              GoldReward: fish.GoldReward,
              BulletMultiple: data.BulletMultiple,
              itemInfo: fish.itemInfo,
              isSkill: true,
              skillID: data.SkillID
            };
            this.catchFish(infoDetail);
          }
        };

        _proto.catchFish = function catchFish(data) {
          if (data.FishID === 0) return;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe) {
            player.addGoldReward(data.GoldReward);
          }

          var fish = this.getFishById(data.FishID);

          if (fish) {
            fish.onCatch(data);
          } else if (player && player.isMe) {
            if (data.itemInfo) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FISH_DROP_ITEM, {
                itemID: data.itemInfo.ID,
                deskStation: data.DeskStation
              });
            }

            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
              data: data
            });
          }
        };

        _proto.updateRoomData = function updateRoomData(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_FISH_GROUP, data);

          if (data.ListFish && data.ListFish.length > 0) {
            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.RESUME_SOUND_BACKGROUND, {
              listFishNormal: data.ListFish,
              listFishGroup: data.ListParadeFish
            });
            data.ListFish.isResume = true;
            this.createListFish(data.ListFish);
          }

          if (this._lockFishId != null) {
            this.resumeLockFish(this._lockFishId);
          }

          if (gfDataStore.instance.isAutoPaused()) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
          }
        };

        _proto.resumeLockFish = function resumeLockFish(fishId) {
          gfDataStore.instance.setSelfInfo({
            LockFish: this.getFishById(fishId)
          });
        };

        _proto.getListFish = function getListFish() {
          return this.listFish;
        };

        _proto.getFishById = function getFishById(id) {
          for (var i = 0; i < this.listFish.length; ++i) {
            if (this.listFish[i].getId() === id) {
              return this.listFish[i];
            }
          }

          return null;
        };

        _proto.moveOutAllFishes = function moveOutAllFishes() {
          for (var i = this.listFish.length - 1; i >= 0; --i) {
            this.listFish[i].moveOut();
          }
        };

        _proto.getFishByType = function getFishByType(type, ignoreFishID) {
          if (ignoreFishID === void 0) {
            ignoreFishID = null;
          }

          var listFish = [];

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish.getKind() === type && fish.isAvailable() && fish.getId() !== ignoreFishID) {
              listFish.push(this.listFish[i]);
            }
          }

          if (listFish.length > 0) {
            return listFish[randomBetween(0, listFish.length - 1)];
          }

          return null;
        };

        _proto.isBossKind = function isBossKind(fishKind) {
          return fishKind == gfBaseConfig.instance.FISH_KIND.MINIBOSS || fishKind === gfBaseConfig.instance.FISH_KIND.DRAGON;
        };

        _proto.isSpecialFish = function isSpecialFish(fishKind) {
          // return GameConfig.instance.LIST_SPECIAL_FISH_KIND.includes(fishKind);
          return gfBaseConfig.instance.LIST_SPECIAL_FISH_KIND.indexOf(fishKind) != -1;
        };

        _proto.getMinimumFishKind = function getMinimumFishKind(ignoreKind) {
          var minFishKind = 9999;

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish.isAvailable() // && fish.checkMultiplier() === 1
            && !this.isSpecialFish(fish.getKind()) && fish.getKind() !== ignoreKind && fish.getKind() < minFishKind) {
              minFishKind = fish.getKind();
            }
          }

          return minFishKind;
        };

        _proto.GetFishForTargetAll = function GetFishForTargetAll() {
          var selfInfo = gfDataStore.instance.getSelfInfo();

          if (selfInfo.isPriorityTargetBoss) {
            for (var i = 0; i < this.listFish.length; ++i) {
              var fish = this.listFish[i];

              if (fish.isAvailable() && this.isBossKind(fish.getKind())) {
                selfInfo.LockFishKind = fish.getKind();
                return fish;
              }
            }
          }

          if (selfInfo.LockFishKind > -1) {
            var oldFishId = selfInfo.LockFish ? selfInfo.LockFish.getId() : null;

            var _fish = this.getFishByType(selfInfo.LockFishKind, oldFishId);

            if (_fish) {
              return _fish;
            }
          }

          selfInfo.LockFishKind = this.getMinimumFishKind(selfInfo.LockFishKind);
          return this.getFishByType(selfInfo.LockFishKind);
        };

        _proto.GetFishByPoint = function GetFishByPoint(point) {
          var fishResult = null;
          var selfInfo = gfDataStore.instance.getSelfInfo();

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish && fish.isAvailable() && (!selfInfo.LockFish || selfInfo.LockFish && selfInfo.LockFish.getId() !== fish.getId())) {
              if (this.isBossKind(fish.getKind())) {
                fishResult = fish;
              } else {
                var boxList = fish.getComponents(BoxCollider2D);

                if (boxList) {
                  for (var j = 0; j < boxList.length; ++j) {
                    if (boxList[j].worldPoints && Intersection2D.pointInPolygon(point, boxList[j].worldPoints)) {
                      if (!fishResult || fishResult && fish.getZIndex() > fishResult.getZIndex()) {
                        fishResult = fish;
                      }
                    }
                  }
                }
              }
            }
          }

          return fishResult;
        };

        _proto.createFishWithData = function createFishWithData(data) {
          var fish = null;
          var prefabFish = gfReferenceManager.instance.getPrefabFishByKind(parseInt(data.FishKind));

          if (data.FishKind === gfBaseConfig.instance.FISH_KIND.DRAGON) {
            fish = this.createBoss(data, gfBaseConfig.instance.BOSS_PREFAB_NAME.DRAGON);
          } else if (prefabFish) {
            // Create by prefab
            fish = instantiate(prefabFish);
            fish.setParent(gfReferenceManager.instance.getNodeFishLayer());
            fish = fish.getComponent("gfBaseFish");
            fish.initFishData(data);
          } else {
            // Create by pool
            fish = gfPoolManager.instance.getFishWithData(data);
          }

          if (fish) {
            this.listFish.push(fish);
            return fish;
          }

          return null;
        };

        _proto.createBoss = function createBoss(data, bossName) {
          var boss = gfPoolManager.instance.getBossWithData(data, bossName);
          return boss;
        }
        /*
        ****** findFishForAutoBot ******
        ** Độ ưu tiên cá được sắp xếp theo thứ tự Rồng -> Miniboss -> cá may mắn -> cá thường
        ** Config giữa độ ưu tiên của rồng và miniboss được lưu ở GameConfig.instance.PRIORITY_FISH
        */
        ;

        _proto.findFishForAutoBot = function findFishForAutoBot() {
          if (gfDataStore.instance.getSelfInfo().LockFish || gfDataStore.instance.getSelfInfo().isLockGun) {
            return null;
          }

          var fish = null;
          /** *** kiểm tra xem boss có trên màn hình và cắm máy có đang bật nó không để ưu tiên target boss **** */

          fish = this.getSpecialFishForAutoBot();

          if (!fish) {
            fish = this.getLuckyFishInScreen();
          }

          if (!fish) {
            fish = this.getRandomFishForAutoBot();
          }

          return fish;
        };

        _proto.getSpecialFishForAutoBot = function getSpecialFishForAutoBot() {
          var fish = null;

          for (var index = 0; index < gfBaseConfig.instance.PRIORITY_FISH.length; index++) {
            var fishKind = gfBaseConfig.instance.PRIORITY_FISH[index.toString()];

            if (gfDataStore.instance.getBotSetting().fishKindArr.indexOf(fishKind) >= 0) {
              fish = this.getFishByType(fishKind);
              if (fish) return fish;
            }
          }

          return null;
        };

        _proto.getRandomFishForAutoBot = function getRandomFishForAutoBot() {
          var arrayFish = gfDataStore.instance.getBotSetting().fishKindArr;
          var fish;
          var currFish = null;
          this.listFish = this.listFish.sort(function () {
            return Math.random() - 0.5;
          });

          for (var i = 0; i < this.listFish.length; i++) {
            fish = this.listFish[i];

            if (fish.isAvailable() && arrayFish.indexOf(fish.getKind()) >= 0) {
              currFish = fish;
              break;
            }
          }

          return currFish;
        };

        _proto.getLuckyFishInScreen = function getLuckyFishInScreen() {
          var arrayFish = gfDataStore.instance.getBotSetting().fishKindArr; // for (let i = 0; i < this.listFish.length; i++) {
          //     const fish = this.listFish[i];
          //     if (fish._multiplier > 1) {
          //         if (!fish.isAvailable() || arrayFish.indexOf(fish.getKind()) < 0) {
          //             return null;
          //         }
          //         return fish;
          //     }
          // }

          return null;
        };

        _proto.isDragonInGame = function isDragonInGame() {
          return this.getBossByKind(gfBaseConfig.instance.FISH_KIND.DRAGON) != null;
        };

        _proto.endDragon = function endDragon(data) {
          var dragon = this.getBossByKind(gfBaseConfig.instance.FISH_KIND.DRAGON);
          if (!dragon) return;

          if (data.wonJackpot) {
            dragon.onCatch(data);
          } else {
            dragon.onDie();
          }
        };

        _proto.dragonDropBall = function dragonDropBall(data) {
          var dragon = this.getBossByKind(gfBaseConfig.instance.FISH_KIND.DRAGON);
          if (!dragon) return;
          data.position = dragon.getBallDropPosition();
          gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DROP_BALL, data);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.DRAGON_HIT_BALL);
        };

        _proto.getBossByKind = function getBossByKind(kind) {
          return this.listFish.find(function (boss) {
            return boss.getKind() === kind;
          });
        };

        _proto.removeFish = function removeFish(id) {
          for (var i = 0; i < this.listFish.length; ++i) {
            if (this.listFish[i].getId() === id) {
              this.listFish.splice(i, 1);
              return true;
            }
          }

          warn("FISH NOT FOUND!!! " + id);
          return false;
        };

        _proto.removeAll = function removeAll() {
          var _DataStore$instance$g = gfDataStore.instance.getSelfInfo(),
              LockFish = _DataStore$instance$g.LockFish;

          this._lockFishId = LockFish ? LockFish.getId() : null;

          for (var i = 0; i < this.listFish.length; ++i) {
            var fish = this.listFish[i];

            if (fish.getKind() === gfBaseConfig.instance.FISH_KIND.DRAGON) {
              fish.onDie();
            } else if (!gfNodePoolConfig.instance.checkFishPoolByKind(fish.getKind())) {
              fish.onDie();
            }
          }

          this.listFish.length = 0;
        };

        _proto.destroy = function destroy() {
          removeEvents(this);
          this.removeAll();
          gfFishManager.instance = null;
        };

        return gfFishManager;
      }());

      _defineProperty(gfFishManager, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfbtHUD.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './Config1985.ts', './gfstAirLayer.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Slider, Node, Prefab, Toggle, Mask, PhysicsSystem2D, EPhysics2DDrawFlags, sp, instantiate, Label, math, Component, Config1985, GfstAirLayer;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Slider = module.Slider;
      Node = module.Node;
      Prefab = module.Prefab;
      Toggle = module.Toggle;
      Mask = module.Mask;
      PhysicsSystem2D = module.PhysicsSystem2D;
      EPhysics2DDrawFlags = module.EPhysics2DDrawFlags;
      sp = module.sp;
      instantiate = module.instantiate;
      Label = module.Label;
      math = module.math;
      Component = module.Component;
    }, function (module) {
      Config1985 = module.default;
    }, function (module) {
      GfstAirLayer = module.GfstAirLayer;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;

      cclegacy._RF.push({}, "f4139TzljtMPaLk/zW9ykQY", "gfbtHUD", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfbtHUD = exports('GfbtHUD', (_dec = ccclass('GfbtHUD'), _dec2 = property(GfstAirLayer), _dec3 = property(Slider), _dec4 = property(Node), _dec5 = property(Node), _dec6 = property(Prefab), _dec7 = property(Toggle), _dec8 = property(Mask), _dec9 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfbtHUD, _Component);

        function GfbtHUD() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "airLayer", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "timeline", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "airplaneList", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "animList", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "animItemPrefab", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "playPauseToggle", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "gameMask", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "background", _descriptor8, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "selectedAirplane", null);

          _defineProperty(_assertThisInitialized(_this), "selectedAnim", "");

          return _this;
        }

        var _proto = GfbtHUD.prototype;

        _proto.onLoad = function onLoad() {
          new Config1985();
        };

        _proto.start = function start() {
          var _this2 = this;

          this.airplaneList.children.forEach(function (ap) {
            ap.on(Node.EventType.TOUCH_START, _this2.onAirplaneListClick, _this2);
          });
          PhysicsSystem2D.instance.enable = true;
          PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.All;
        };

        _proto.onTimelineSliderMove = function onTimelineSliderMove() {
          if (this.airLayer.node.children.length == 0) return;
          var spine = this.airLayer.node.children[0].getComponentInChildren(sp.Skeleton);
          if (!spine) return;
          var state = spine.paused;
          spine.paused = false;
          var dur = spine.getCurrent(0).animation.duration;
          var time = this.timeline.progress * dur;
          spine.updateAnimation(time - spine._skeleton.time);
          spine.paused = state;
        };

        _proto.onPlayPauseBtnChecked = function onPlayPauseBtnChecked(evt) {
          if (this.airLayer.node.children.length == 0) return;
          var spine = this.airLayer.node.children[0].getComponentInChildren(sp.Skeleton);
          if (!spine) return;
          spine.paused = evt.isChecked;
        };

        _proto.onAirplaneListClick = function onAirplaneListClick(evt) {
          this.selectedAirplane = evt.target;
          this.updateAnimList();
        };

        _proto.updateAnimList = function updateAnimList() {
          var _this3 = this;

          this.animList.destroyAllChildren();
          this.animList.removeAllChildren();
          var spine = this.selectedAirplane.getComponentInChildren(sp.Skeleton);
          var animList = Object.keys(spine.skeletonData._skeletonJson.animations);
          animList.forEach(function (anim) {
            var newAnim = instantiate(_this3.animItemPrefab);

            _this3.animList.addChild(newAnim);

            newAnim.getComponentInChildren(Label).string = anim;
          });
          this.animList.children.forEach(function (anim) {
            anim.on(Node.EventType.TOUCH_START, _this3.onAnimListClick, _this3);
          });
        };

        _proto.onAnimListClick = function onAnimListClick(evt) {
          this.clearAirplane();
          this.selectedAnim = evt.target.getComponentInChildren(Label).string;
          var newAP = instantiate(this.selectedAirplane);
          this.airLayer.node.addChild(newAP);
          newAP.setPosition(0, 0, 0);
          var spine = newAP.getComponentInChildren(sp.Skeleton);
          spine.setAnimation(0, this.selectedAnim, false);
        };

        _proto.clearAirplane = function clearAirplane() {
          this.airLayer.node.destroyAllChildren();
          this.airLayer.node.removeAllChildren();
        };

        _proto.update = function update(dt) {
          if (this.airLayer.node.children.length == 0) {
            this.timeline.node.active = false;
            this.playPauseToggle.node.active = false;
            return;
          }

          this.timeline.node.active = true;
          this.playPauseToggle.node.active = true;
          var spine = this.airLayer.node.children[0].getComponentInChildren(sp.Skeleton);
          if (!spine) return;
          var dur = spine.getCurrent(0).animation.duration;
          var time = spine._skeleton.time;
          this.timeline.progress = math.clamp(time / dur, 0, 1);
        };

        _proto.enableBoxToggle = function enableBoxToggle(evt) {
          PhysicsSystem2D.instance.enable = evt.isChecked;
          PhysicsSystem2D.instance.debugDrawFlags = evt.isChecked ? EPhysics2DDrawFlags.All : 0;
        };

        _proto.onMaskToggle = function onMaskToggle(evt) {
          this.gameMask.enabled = evt.isChecked;
        };

        _proto.onBackgroundToggle = function onBackgroundToggle(evt) {
          this.background.active = evt.isChecked;
        };

        return GfbtHUD;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "airLayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "timeline", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "airplaneList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "animList", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "animItemPrefab", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "playPauseToggle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "gameMask", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "background", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EffectLayer1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfPoolManager.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './gf3DParticle.ts', './gfEffectLayer.ts', './FishManager1988.ts', './DropSpecialGunFX1998.ts', './gfFishGroup12.ts', './Drill1988.ts', './BigWinWheelAvatar1988.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, SpriteFrame, Prefab, UITransform, instantiate, v3, v2, tween, sp, CircleCollider2D, log, isValid, Tween, getPostionInOtherNode, gfBaseEvents, fadeOut, gfEventEmitter, registerEvent, convertFishCoordinateSystem, getPositionWithTimeSpentFromThreePoint, removeEvents, gfReferenceManager, gfPoolManager, EventCode, DataStore1988, Config1988, gf3DParticle, gfEffectLayer, FishManager1988, DropSpecialGunFX1998, gfFishGroup12, Drill1988, BigWinWheelAvatar1988;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Prefab = module.Prefab;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      v3 = module.v3;
      v2 = module.v2;
      tween = module.tween;
      sp = module.sp;
      CircleCollider2D = module.CircleCollider2D;
      log = module.log;
      isValid = module.isValid;
      Tween = module.Tween;
    }, function (module) {
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      convertFishCoordinateSystem = module.convertFishCoordinateSystem;
      getPositionWithTimeSpentFromThreePoint = module.getPositionWithTimeSpentFromThreePoint;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      gf3DParticle = module.gf3DParticle;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      FishManager1988 = module.default;
    }, function (module) {
      DropSpecialGunFX1998 = module.DropSpecialGunFX1998;
    }, function (module) {
      gfFishGroup12 = module.default;
    }, function (module) {
      Drill1988 = module.Drill1988;
    }, function (module) {
      BigWinWheelAvatar1988 = module.BigWinWheelAvatar1988;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _temp;

      cclegacy._RF.push({}, "f4d47vRsMdN65ZMdctO15Go", "EffectLayer1988", undefined);

      var TOTAL_LIVE_TIME_FLOWER = 5;
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EffectLayer1988 = exports('EffectLayer1988', (_dec = ccclass('EffectLayer1988'), _dec2 = property({
        type: BigWinWheelAvatar1988,
        override: true
      }), _dec3 = property(SpriteFrame), _dec4 = property(Prefab), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec7 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_gfEffectLayer) {
        _inheritsLoose(EffectLayer1988, _gfEffectLayer);

        function EffectLayer1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfEffectLayer.call.apply(_gfEffectLayer, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "bigWinWheels", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "listIconFish", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "itemDrill", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effDrillExplosion", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectFlowerPoison", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "effectPoisonFlowerDie", _descriptor6, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "_toxicEffect", null);

          _defineProperty(_assertThisInitialized(_this), "_listFlowerDie", []);

          _defineProperty(_assertThisInitialized(_this), "_listFlowerExplosion", []);

          _defineProperty(_assertThisInitialized(_this), "_colliderEffect", []);

          return _this;
        }

        var _proto = EffectLayer1988.prototype;

        _proto.onLoad = function onLoad() {
          _gfEffectLayer.prototype.onLoad.call(this);

          for (var i = 0; i < this.bigWinWheels.length; i++) {
            var itemComp = this.bigWinWheels[i];
            itemComp.setUpListAvatarIcon(this.listIconFish);
          }

          this._colliderEffect = [];
          this._listFlowerDie = [];
          this._listFlowerExplosion = [];
        };

        _proto.initEvents = function initEvents() {
          _gfEffectLayer.prototype.initEvents.call(this);

          registerEvent(EventCode.EFFECT_LAYER.DROP_GUN_DRILL, this.playDropGunDrill, this);
          registerEvent(EventCode.EFFECT_LAYER.DRILL_EXPLOSION, this.playEffectDrillExplosion, this);
          registerEvent(EventCode.EFFECT_LAYER.PLAY_EFFECT_BIGWIN, this._playEffectBigWinForSkill, this);
          registerEvent(EventCode.FISH_LAYER.FLOWER_DIE, this.addEffectToxic, this); //registerEvent(EventsCode1988.EFFECT_LAYER.END_PHASE_POISON_FLOWER, this.resetColliderEffect, this);

          registerEvent(EventCode.GAME_LAYER.RESUME_POISON_FLOWER, this.resumeEffectToxic, this);
        };

        _proto.playDropGunLaser = function playDropGunLaser(_ref) {
          var _this2 = this;

          var fishPos = _ref.fishPos,
              deskStation = _ref.deskStation;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          if (!player) return;
          var endPos = getPostionInOtherNode(this.node, player.gun);
          var startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
          gfPoolManager.instance.createSmallExplosion({
            position: startPos
          });
          var itemLaserNode = instantiate(this.itemLaser);
          var itemLaserCompo = itemLaserNode.getComponent(DropSpecialGunFX1998);
          this.node.addChild(itemLaserNode);

          this._listSkillItem.push(itemLaserNode);

          var dataInfo = {
            angle: player.gun.angle,
            endPos: endPos,
            startPos: startPos,
            deskStation: deskStation
          };
          itemLaserCompo.playEffect(dataInfo, function (itemDrop) {
            gfEventEmitter.instance.emit(gfBaseEvents.PLAYER_LAYER.CHANGE_GUN_LASER, itemDrop.deskStation);

            _this2.clearDropGunLaserByDeskStation(itemDrop.deskStation);
          });
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER);
        };

        _proto.playDropGunDrill = function playDropGunDrill(_ref2) {
          var _this3 = this;

          var fishPos = _ref2.fishPos,
              deskStation = _ref2.deskStation;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);

          if (player) {
            var endPos = getPostionInOtherNode(this.node, player.gun);
            var startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
            gfPoolManager.instance.createSmallExplosion({
              position: startPos
            });
            var itemDrill = instantiate(this.itemDrill);
            this.node.addChild(itemDrill);

            this._listSkillItem.push(itemDrill); //itemDrill.deskStation = deskStation;


            gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_LASER);

            var callback = function callback() {
              gfEventEmitter.instance.emit(EventCode.PLAYER_LAYER.CHANGE_GUN_DRILL, deskStation);

              var index = _this3._listSkillItem.indexOf(itemDrill);

              if (index > -1) {
                _this3._listSkillItem.splice(index, 1);
              }
            };

            itemDrill.getComponent(Drill1988).onMoveToPlayer(startPos, endPos, player.gun.angle, callback);
          }
        };

        _proto._getGunIndex = function _getGunIndex(multiple) {
          var gunValue = DataStore1988.instance.getGunValue();
          return gunValue.indexOf(multiple);
        };

        _proto.playNetFX = function playNetFX(data) {
          var gunIndex = this._getGunIndex(data.BulletMultiple);

          var _PoolManager$instance = gfPoolManager.instance.getNetFX(gunIndex),
              netFX = _PoolManager$instance.netFX,
              config = _PoolManager$instance.config;

          if (netFX) {
            netFX.node.setParent(this.node);
            netFX.node.position = getPostionInOtherNode(this.node, data.bullet.node);
            this.scheduleOnce(function () {
              netFX.initAssets(config);
            }, 0);
          }
        };

        _proto.playEffectDrillExplosion = function playEffectDrillExplosion(data) {
          var nodeDrill = data.nodeDrill;
          var effExplosion = instantiate(this.effDrillExplosion);
          var realPos = getPostionInOtherNode(this.node, nodeDrill);
          this.node.addChild(effExplosion);
          effExplosion.setPosition(v3(realPos, realPos, realPos));

          this._listSkillItem.push(effExplosion);

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.03,
            amplitude: 10,
            shakeStyle: Config1988.instance.SHAKE_SCREEN_STYLE.FULL,
            countStep: 2
          });
        };

        _proto.playCoinReward = function playCoinReward(rewardData) {
          var _this4 = this;

          var data = rewardData.data,
              fishPos = rewardData.fishPos,
              fishKind = rewardData.fishKind;

          if (fishPos) {
            fishPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(fishPos);
          } else if (data.skillID === Config1988.instance.SkillConfig.LASER) {
            fishPos = this.getRandomPositionOutScreenByLaser(data);
          } else {
            fishPos = this.getRandomPositionOutScreen();
          }

          var delay = data.delayTimeDie ? data.delayTimeDie : 0;
          this.scheduleOnce(function () {
            var isBigwin = data.GoldReward >= data.BulletMultiple * Config1988.instance.BIG_WIN_RATIO.BIG_WIN_VALUE;

            if (isBigwin && !data.isSkill && !data.skipUpdateWallet) {
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
                timeOneStep: 0.05,
                amplitude: 10
              });

              _this4._playBigWinEffect({
                deskStation: data.DeskStation,
                beganPos: fishPos,
                gold: data.GoldReward,
                bet: data.BulletMultiple,
                isSkill: data.isSkill,
                fishKind: fishKind
              });
            } else {
              var skipUpdateWallet = data.skipUpdateWallet;

              if (!skipUpdateWallet && data.isSkill) {
                skipUpdateWallet = data.skillID != Config1988.instance.SkillConfig.FISH_BOMB;
              }

              _this4._playCoinEffect({
                deskStation: data.DeskStation,
                fishKind: fishKind,
                beganPos: fishPos,
                goldReward: data.GoldReward,
                isSkill: data.isSkill,
                bulletMultiple: data.BulletMultiple,
                skipUpdateWallet: skipUpdateWallet,
                skillID: data.skillID
              });
            }
          }, delay);
        };

        _proto._playCoinEffect = function _playCoinEffect(data) {
          var deskStation = data.deskStation,
              fishKind = data.fishKind,
              beganPos = data.beganPos,
              goldReward = data.goldReward,
              bulletMultiple = data.bulletMultiple,
              skipUpdateWallet = data.skipUpdateWallet,
              skillID = data.skillID;

          if (goldReward === 0) {
            return;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.avatar.node);

          if (fishKind === Config1988.instance.FISH_KIND.MINIBOSS) {
            beganPos.y -= 65;
          }

          var playEffectCoin = function () {
            var LABEL_WIDTH = 150;
            var LABEL_HEIGHT = 25;
            var _GameConfig$instance$ = Config1988.instance.realSize,
                Width = _GameConfig$instance$.Width,
                Height = _GameConfig$instance$.Height;
            var x = Math.min(Math.max(beganPos.x, -Width / 2 - LABEL_WIDTH / 2), Width / 2 - LABEL_WIDTH / 2);
            var y = Math.min(Math.max(beganPos.y, -Height / 2 - LABEL_HEIGHT / 2), Height / 2 - LABEL_HEIGHT / 2);
            var labelPosition = v2(x, y);

            this._playCoinLabelEffect({
              goldReward: goldReward,
              bulletMultiple: bulletMultiple,
              labelPosition: labelPosition,
              beganPos: beganPos,
              endPos: endPos,
              skillID: skillID,
              isMe: player.isMe,
              deskStation: deskStation,
              skipUpdateWallet: skipUpdateWallet
            });
          }.bind(this);

          if (skillID && skillID !== Config1988.instance.SkillConfig.FISH_BOMB) {
            gfPoolManager.instance.createSmallExplosion({
              position: beganPos
            });
            this.scheduleOnce(function () {
              playEffectCoin();
            }, 0.8);
          } else {
            playEffectCoin();
          }
        };

        _proto.playEffectFishSpecial = function playEffectFishSpecial(rewardData) {
          //rewardData : { Angle, BulletMultiple, DeskStation, ListFish, SkillID, TotalReward, Wallet }
          if (rewardData.SkillID == Config1988.instance.SkillConfig.DRILL) return;
          var player = gfReferenceManager.instance.getPlayerByDeskStation(rewardData.DeskStation);
          this.onPlayEffectWinInCatchFish({
            player: player,
            gold: rewardData.TotalReward,
            bet: rewardData.BulletMultiple,
            fishKind: rewardData.fishKind
          });
        };

        _proto._playEffectBigWinForSkill = function _playEffectBigWinForSkill(rewardData) {
          var _this5 = this;

          var delayTime = rewardData.delayTime ? rewardData.delayTime : 0;
          this.scheduleOnce(function () {
            var isBigwin = rewardData.TotalReward >= rewardData.BulletMultiple * Config1988.instance.BIG_WIN_RATIO.BIG_WIN_VALUE;

            if (!isBigwin) {
              return;
            }

            var player = gfReferenceManager.instance.getPlayerByDeskStation(rewardData.DeskStation);
            var fishKind;

            if (rewardData.fishKind) {
              fishKind = rewardData.fishKind;
            } else {
              if (rewardData.skillInfo.SkillID < 10) {
                fishKind = 100 + rewardData.skillInfo.SkillID;
              } else {
                fishKind = rewardData.skillInfo.SkillID;
              }
            }

            _this5.onPlayEffectWinInCatchFish({
              player: player,
              gold: rewardData.TotalReward,
              bet: rewardData.BulletMultiple,
              fishKind: fishKind
            });
          }, delayTime);
        } //need refactor this
        ;

        _proto._playBigWinEffect = function _playBigWinEffect(data) {
          var _this6 = this;

          var deskStation = data.deskStation,
              beganPos = data.beganPos,
              gold = data.gold,
              bet = data.bet,
              isSkill = data.isSkill,
              fishKind = data.fishKind;

          if (gold === 0) {
            return;
          }

          var player = gfReferenceManager.instance.getPlayerByDeskStation(deskStation);
          var endPos = getPostionInOtherNode(this.node, player.avatar.node);
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_BOMB, fishKind);
          var particle = instantiate(this.particle3D).getComponent(gf3DParticle);
          particle.node.parent = this.node;

          this._lisParticle.push(particle.node);

          particle.node.position = beganPos;
          particle.setIsMe(player.isMe);
          particle.setLifetime(0.2);
          particle.setSpawnRate(30);
          particle.setItemSpeed(500, 750);
          particle.setGravity(-400);
          particle.setSpawnInterval(0.2);
          particle.setDuration(0.3);
          particle.startAnimation();
          tween(particle.node).delay(0.65).then(fadeOut(0.4)).removeSelf().call(function () {
            particle.stopAnimation();
            particle.node.removeFromParent();
            particle.node.destroy();

            var index = _this6._lisParticle.indexOf(particle.node);

            if (index > 0) {
              _this6._lisParticle.splice(index, 1);
            }
          }).start();
          gfPoolManager.instance.createSmallExplosion({
            position: beganPos
          }); // eslint-disable-next-line prefer-object-spread

          var labelPosition = Object.assign({}, beganPos);
          var playBigWin = !this._getWheel(player.index).isShowingDragonBall();

          this._playCoinLabelEffect({
            goldReward: gold,
            bulletMultiple: bet,
            labelPosition: labelPosition,
            beganPos: beganPos,
            endPos: endPos,
            isSkill: isSkill,
            isMe: player.isMe,
            deskStation: deskStation,
            playBigWin: playBigWin,
            skipUpdateWallet: playBigWin
          });

          this.onPlayEffectWinInCatchFish({
            player: player,
            gold: gold,
            bet: bet,
            fishKind: fishKind
          });
        };

        _proto.playPoisonEffectAllFish = function playPoisonEffectAllFish() {
          var listFish = FishManager1988.instance.getListFish();
          listFish.forEach(function (fish) {
            var fishComponent = fish;
            fishComponent && fishComponent.playPoisonEffect();
          });
        };

        _proto.triggerBombFX = function triggerBombFX(posNode) {
          var itemBomb = instantiate(this.itemBomb);
          var startPos = this.node.getComponent(UITransform).convertToNodeSpaceAR(posNode);
          this.node.addChild(itemBomb);

          this._listSkillItem.push(itemBomb);

          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SHAKE_SCREEN, {
            timeOneStep: 0.03,
            amplitude: 5
          });
          itemBomb.setPosition(startPos);
          gfEventEmitter.instance.emit(EventCode.SOUND.FLOWER_EXPLOSION);
        };

        _proto.effectItemFreeze = function effectItemFreeze() {};

        _proto.playLuckyEffect = function playLuckyEffect() {};

        _proto.onPlayLuckyEffectDone = function onPlayLuckyEffectDone() {};

        _proto.addEffectToxic = function addEffectToxic(position, isResume, timeLostEffect) {
          var _this7 = this;

          if (timeLostEffect === void 0) {
            timeLostEffect = 0;
          }

          DataStore1988.instance.isPlayingPoison = true;
          var effectPoisonDie = instantiate(this.effectPoisonFlowerDie);
          var fishLayer = gfReferenceManager.instance.getNodeFishLayer();
          fishLayer.addChild(effectPoisonDie);
          effectPoisonDie.setPosition(v3(position.x, position.y, position.zIndex));

          this._listFlowerDie.push(effectPoisonDie);

          var spinePoison = effectPoisonDie.getComponent(sp.Skeleton);

          if (!isResume) {
            spinePoison.setAnimation(0, "animation", true);
            spinePoison.node.setScale(1, 1, 1);
            tween(effectPoisonDie).to(0.9, {
              scale: v3(0.75, 0.75, 0.75)
            }).call(function () {
              spinePoison.setAnimation(0, "die", false);
            }).delay(0.9).call(function () {
              var fishPosition = effectPoisonDie.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 1));

              _this7.addPoison(fishPosition);
            }).delay(13.25).then(fadeOut(0.9)).call(function () {
              DataStore1988.instance.isPlayingPoison = false;
            }).removeSelf().call(function () {
              effectPoisonDie.destroy();
            }).start();
          } else {
            spinePoison.setAnimation(0, "die", false);
            tween(effectPoisonDie).delay(13.25 - timeLostEffect).then(fadeOut(0.9)).call(function () {
              DataStore1988.instance.isPlayingPoison = false;
            }).removeSelf().call(function () {
              effectPoisonDie.destroy();
            }).start();
            var timePassed = TOTAL_LIVE_TIME_FLOWER - timeLostEffect;

            if (timeLostEffect > 0 && timePassed > 0) {
              spinePoison.updateAnimation(timePassed);
            }

            spinePoison.node.setScale(0.75, 0.75, 0.75);
            var fishPosition = effectPoisonDie.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0, 1));
            this.addPoison(fishPosition, timeLostEffect);
          }
        };

        _proto.addPoison = function addPoison(position, timeLostEffect) {
          var _this8 = this;

          if (timeLostEffect === void 0) {
            timeLostEffect = 0;
          }

          var toxicEffect = instantiate(this.effectFlowerPoison);
          this.node.addChild(toxicEffect);
          toxicEffect.position = this.node.getComponent(UITransform).convertToNodeSpaceAR(position);
          var spine = toxicEffect.getComponent(sp.Skeleton);

          if (timeLostEffect == 0) {
            spine.setAnimation(0, "animation", false);
            spine.addAnimation(0, "loop", true);
          } else {
            spine.setAnimation(0, "loop", true);
          }

          tween(toxicEffect).delay(13 - timeLostEffect).then(fadeOut(0.9)).removeSelf().call(function () {
            toxicEffect.destroy();
          }).start();
          var colliderEffect = toxicEffect.getComponent(CircleCollider2D);
          colliderEffect.radius = 0;

          this._colliderEffect.push(colliderEffect);

          this.scheduleOnce(function () {
            var index = _this8._colliderEffect.indexOf(colliderEffect);

            _this8._colliderEffect.splice(index, 1);
          }, 13 - timeLostEffect);
          gfEventEmitter.instance.emit(EventCode.SOUND.POISON_EFFECT);

          this._listFlowerExplosion.push(toxicEffect);
        };

        _proto.update = function update(dt) {
          if (this._colliderEffect.length > 0) {
            this._colliderEffect.forEach(function (colliderEffect) {
              colliderEffect.radius += 110 * dt;
            });
          }
        };

        _proto.resetColliderEffect = function resetColliderEffect() {
          if (this._colliderEffect.length > 0) {
            this._colliderEffect.forEach(function (colliderEffect) {});

            this._colliderEffect = [];
          }
        };

        _proto.resumeEffectToxic = function resumeEffectToxic(data) {
          log("resumeEffectToxic", data);

          if (data[0] && data[0].SkillID === Config1988.instance.SkillConfig.FISH_BOMB) {
            var dataFlowerPoison = data[0].ListFish[0];
            var BuildTick = dataFlowerPoison.BuildTick,
                Position = dataFlowerPoison.Position;
            var timeLost = Math.max(0, (data[0].BuildTick - BuildTick) / 1000);
            var position = this.getFlowerDiePosition(Position, timeLost);
            var timeLostEffect = data[0].BuildTick ? Math.max(0, (DataStore1988.instance.getTime() - data[0].BuildTick) / 1000) : 0;
            this.addEffectToxic(position, true, timeLostEffect);
          }
        };

        _proto.getFlowerDiePosition = function getFlowerDiePosition(points, timeLost) {
          if (points.length == 3) {
            if (DataStore1988.instance.getSelfDeskStation() > 1) {
              convertFishCoordinateSystem(points);
            }

            var p1 = v2(points[0].PosX, points[0].PosY);
            var p2 = v2(points[1].PosX, points[1].PosY);
            var p3 = v2(points[2].PosX, points[2].PosY);
            var position = getPositionWithTimeSpentFromThreePoint(p1, p2, p3, timeLost, 20);
            return position;
          }

          return gfFishGroup12.calculateFlowerDiePosition(timeLost);
        };

        _proto.removeEffectToxic = function removeEffectToxic() {
          DataStore1988.instance.isPlayingPoison = false;
          this.resetColliderEffect();

          this._listFlowerDie.forEach(function (flowerDie) {
            if (isValid(flowerDie)) {
              Tween.stopAllByTarget(flowerDie);
              flowerDie.removeFromParent();
              flowerDie.destroy();
            }
          });

          this._listFlowerExplosion.forEach(function (effect) {
            if (isValid(effect)) {
              Tween.stopAllByTarget(effect);
              effect.removeFromParent();
              effect.destroy();
            }
          });
        };

        _proto.resetOnExit = function resetOnExit() {
          _gfEffectLayer.prototype.resetOnExit.call(this);

          this.removeEffectToxic();
        };

        _proto.onDestroy = function onDestroy() {
          _gfEffectLayer.prototype.onDestroy.call(this);

          this.unscheduleAllCallbacks();
          removeEvents(this);
          this.removeEffectToxic();
        };

        return EffectLayer1988;
      }(gfEffectLayer), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bigWinWheels", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "listIconFish", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "itemDrill", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "effDrillExplosion", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "effectFlowerPoison", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "effectPoisonFlowerDie", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SoundController1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfUtilities.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './gfSoundController.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, getRandomInt, gfBaseEvents, registerEvent, removeEvents, EventCode, DataStore1988, Config1988, GfSoundController;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }, function (module) {
      getRandomInt = module.getRandomInt;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      DataStore1988 = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      GfSoundController = module.GfSoundController;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "f5d1fu2BqtNu6Aiur+EjzwG", "SoundController1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SoundController1988 = exports('SoundController1988', (_dec = ccclass('SoundController1988'), _dec(_class = (_temp = /*#__PURE__*/function (_GfSoundController) {
        _inheritsLoose(SoundController1988, _GfSoundController);

        function SoundController1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfSoundController.call.apply(_GfSoundController, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "laserIdleID", void 0);

          _defineProperty(_assertThisInitialized(_this), "countingLoopId", void 0);

          return _this;
        }

        var _proto = SoundController1988.prototype;

        _proto.initEvents = function initEvents() {
          _GfSoundController.prototype.initEvents.call(this);

          registerEvent(EventCode.SOUND.DRILL_FIRE, this.playDrillFire, this);
          registerEvent(EventCode.SOUND.DRILL_HIT_WALL, this.playDrillHitWall, this);
          registerEvent(EventCode.EFFECT_LAYER.DRILL_EXPLOSION, this.playDrillExplosion, this);
          registerEvent(EventCode.SOUND.TARGET_LOCK_ONE, this.playTargetLock, this);
          registerEvent(EventCode.SOUND.UI_POPUP, this.playUIPopup, this);
          registerEvent(EventCode.SOUND.FLOWER_EXPLOSION, this.playFlowerExplosion, this);
          registerEvent(EventCode.SOUND.GUN_EQUIP, this.playGunEquip, this);
          registerEvent(EventCode.SOUND.WAVE, this.playWave, this);
          registerEvent(EventCode.SOUND.LASER_IDLE, this.playLaserIdle, this);
          registerEvent(EventCode.SOUND.STOP_LASER_IDLE, this.stopLaserIdle, this);
          registerEvent(EventCode.EFFECT_LAYER.PLAY_WAVE_TRANSITION_CUSTOM, this.playSfxStartGame, this);
          registerEvent(gfBaseEvents.COMMON.GAME_HIDE, this.stopAllEffects, this);
          registerEvent(EventCode.SOUND.BORIS_TRASH_TALK, this.playBorisTrashTalk, this);
          registerEvent(EventCode.SOUND.BORIS_WARNING, this.playBorisWaring, this);
          registerEvent(EventCode.SOUND.BORIS_APPEAR, this.playBorisAppear, this);
          registerEvent(EventCode.SOUND.BORIS_DIE, this.playBorisDie, this);
          registerEvent(EventCode.SOUND.BORIS_OUT, this.playBorisOut, this);
          registerEvent(EventCode.SOUND.CHIP_DROP, this.playChipDrop, this);
          registerEvent(EventCode.SOUND.CHIP_EQUIP, this.playChipEquip, this);
          registerEvent(EventCode.SOUND.CHIP_FAIL, this.playChipFail, this);
          registerEvent(EventCode.SOUND.LAST_DAMAGE, this.playBorisLastDamage, this);
          registerEvent(EventCode.SOUND.POPUP_JACKPOT, this.playPopupJackPot, this);
          registerEvent(EventCode.SOUND.BORIS_MOVE, this.playBorisMove, this);
          registerEvent(EventCode.SOUND.START_COUNTING_LOOP, this.playCounting, this);
          registerEvent(EventCode.SOUND.STOP_COUNTING_LOOP, this.stopCounting, this);
          registerEvent(EventCode.SOUND.BORIS_IDLE, this.playBorisIdle, this);
          registerEvent(EventCode.SOUND.BORIS_DAMAGE, this.playBorisDamage, this);
          registerEvent(EventCode.SOUND.CHIP_FLY, this.playChipFly, this);
          registerEvent(EventCode.SOUND.BORIS_DESTROYED, this.playBorisDestroyed, this);
          registerEvent(EventCode.SOUND.FLOWER_DIE, this.playFlowerPoisonDie, this);
          registerEvent(EventCode.SOUND.POISON_EFFECT, this.playPoisonSpread, this);
          registerEvent(EventCode.SOUND.BORIS_THE_ANIMALS, this.playBorisTheAnimals, this);
          registerEvent(EventCode.SOUND.IT_JUST_BORIS, this.playItJustBoris, this);
          registerEvent(EventCode.SOUND.OPEN_COMPO_AUTO, this.playSfxCompoAutoOpen, this);
          registerEvent(EventCode.SOUND.SELECT_AUTO_MODE, this.playSfxSelectAuto, this);
          registerEvent(EventCode.SOUND.CLICK_BUTTON_JOIN_GAME, this.playSfxBtnPlayGame, this);
          registerEvent(EventCode.SOUND.ACTIVE_PASSWORD, this.playSfxActivePassWord, this);
        };

        _proto.resumeSoundBackground = function resumeSoundBackground(_ref) {
          var listFishNormal = _ref.listFishNormal,
              listFishGroup = _ref.listFishGroup;

          if (listFishGroup.length > 0) {
            this.playBackGroundMusic(Config1988.instance.SOUND_BACKGROUND_CONFIG.FISH_GROUP);
          } else {
            this.playBackGroundMusic(Config1988.instance.SOUND_BACKGROUND_CONFIG.IN_GAME);
          }
        };

        _proto.playBackGroundMusic = function playBackGroundMusic(data, init) {
          if (init === void 0) {
            init = false;
          }

          if (DataStore1988.instance.curBGMusic === data && !init && this.currentMusic.audioSource.playing) return;
          this.unscheduleAllCallbacks();
          this.onResumeSound();

          switch (data) {
            case Config1988.instance.SOUND_BACKGROUND_CONFIG.MINI_BOSS:
              this.playFishBGM("bgmMiniboss", true);
              break;

            case Config1988.instance.SOUND_BACKGROUND_CONFIG.DRAGON:
              this.onResumeSound();
              this.playFishBGM("bgmDragon", true); //this.schedule(this.playSfxDragonScream.bind(this), 6);

              break;

            case Config1988.instance.SOUND_BACKGROUND_CONFIG.LOBBY:
              this.playFishBGM("bgmLobby", true);
              break;

            case Config1988.instance.SOUND_BACKGROUND_CONFIG.IN_GAME:
              this.playFishBGM("bgmMain", true);
              break;

            case Config1988.instance.SOUND_BACKGROUND_CONFIG.FISH_GROUP:
              this.playFishBGM("bgmFisharmy", true);
              break;
          }

          DataStore1988.instance.curBGMusic = data;
        };

        _proto.playSfxCatch = function playSfxCatch() {//this.playFishSFX("sfxCatch");
        };

        _proto.playSfxDragonDie = function playSfxDragonDie() {//this.playFishSFX("sfxDragon_die");
        } // playSfxBigwin() {
        // },
        // playSfxMegawin() {
        // },
        ;

        _proto.playDrillFire = function playDrillFire() {
          this.playFishSFX("sfxFire_drill_shoot");
        };

        _proto.playDrillHitWall = function playDrillHitWall(haveTrail) {
          if (haveTrail) {
            this.playFishSFX("sfxFire_drill_hitwall_1");
          } else {
            this.playFishSFX("sfxFire_drill_hitwall_3");
          }
        };

        _proto.playDrillExplosion = function playDrillExplosion() {
          this.playFishSFX("sfxFire_drill_explosion");
        };

        _proto.playTargetLock = function playTargetLock() {
          this.playFishSFX("sfxTargetLocked");
        };

        _proto.playChipDrop = function playChipDrop() {
          this.playFishSFX("sfxChip_drop");
        };

        _proto.playPopupJackPot = function playPopupJackPot(state) {
          if (state === 0) {
            this.playFishSFX("sfxJackpot_close");
            this.onResumeSound();
          } else {
            this.playFishSFX("sfxJackpot_popup");
            this.setMusicVolume(0);
          }
        };

        _proto.playFlowerPoisonDie = function playFlowerPoisonDie() {
          this.playFishSFX("sfxFlower_die");
        };

        _proto.playPoisonSpread = function playPoisonSpread() {
          this.playFishSFX("sfxFlower_spread_poison_2");
        };

        _proto.playBorisLastDamage = function playBorisLastDamage() {
          this.playFishSFX("sfxBigboss_last_damage");
        };

        _proto.playBorisDestroyed = function playBorisDestroyed() {
          this.playFishSFX("sfxBigboss_destroyed");
        };

        _proto.playChipEquip = function playChipEquip() {
          this.playFishSFX("sfxChip_equip");
        };

        _proto.playChipFail = function playChipFail() {
          this.playFishSFX("sfxChip_failed");
        };

        _proto.playChipFly = function playChipFly() {
          this.playFishSFX("sfxChip_fly");
        };

        _proto.playBorisAppear = function playBorisAppear() {
          this.playFishSFX("sfxBoss_appear");
          this.playFishSFX("sfxBigboss_appear");
        };

        _proto.playBorisIdle = function playBorisIdle() {
          this.playFishSFX("sfxBigboss_idle");
        };

        _proto.playBorisDamage = function playBorisDamage() {
          this.playFishSFX("sfxBigboss_damage");
        };

        _proto.playBorisMove = function playBorisMove() {
          this.playFishSFX("sfxBigboss_move");
        };

        _proto.playBorisWaring = function playBorisWaring() {
          this.playFishSFX("sfxBigboss_warning");
        };

        _proto.playStopCounting = function playStopCounting() {
          this.playFishSFX("sfxCash_counting_stop");
        };

        _proto.playCounting = function playCounting() {
          this.countingLoopId = this.playFishSFX("sfxCash_counting");
        };

        _proto.stopCounting = function stopCounting() {
          this.playStopCounting();

          if (this.countingLoopId) {
            this.stopSound(this.countingLoopId);
            this.countingLoopId = null;
          }
        };

        _proto.playBorisTrashTalk = function playBorisTrashTalk(type) {
          if (type === void 0) {
            type = 0;
          }

          var rand = 0;

          switch (type) {
            case 0:
            case 1:
              this.playFishSFX("sfxBoris_VO_laugh");
              break;

            case 2:
              rand = getRandomInt(0, 1);

              if (rand) {
                this.playFishSFX("sfxBoris_VO_laugh");
              } else {
                this.playFishSFX("sfxBoris_VO_letsagreetodisagree");
              }

              break;

            case 3:
              rand = getRandomInt(0, 1);

              if (rand) {
                this.playFishSFX("sfxBoris_VO_letsagreetodisagree");
              } else {
                this.playFishSFX("sfxBoris_VO_thatsnotpossible");
              }

              break;

            case 4:
              this.playFishSFX("sfxBoris_VO_thatsnotpossible");
              break;
          }
        };

        _proto.playItJustBoris = function playItJustBoris() {
          this.playFishSFX("sfxBoris_VO_itsjustboris");
        };

        _proto.playBorisTheAnimals = function playBorisTheAnimals() {
          this.playFishSFX("sfxBoris_VO_boristheanimals");
        };

        _proto.playBorisOut = function playBorisOut() {
          this.playFishSFX("sfxBigboss_fadeout");
        };

        _proto.playSfxJackpotCoin = function playSfxJackpotCoin() {
          this.coinLoopId = this.playFishSFX("bgmJackpot", true);
        };

        _proto.playBorisDie = function playBorisDie() {
          this.playFishSFX("sfxBigBoss_die");
        };

        _proto.playUIPopup = function playUIPopup() {
          this.playFishSFX("sfxUI_popup");
        };

        _proto.playFlowerExplosion = function playFlowerExplosion() {
          this.playFishSFX("sfxFlower_explosion");
        };

        _proto.playGunEquip = function playGunEquip() {
          this.playFishSFX("sfxGun_equip");
        };

        _proto.playWave = function playWave() {
          this.playFishSFX("sfxWave");
        };

        _proto.playSfxBtnPlayGame = function playSfxBtnPlayGame() {
          this.playFishSFX("sfxBtnPlaygame");
        };

        _proto.playSfxCompoAutoOpen = function playSfxCompoAutoOpen() {
          this.playFishSFX("sfxSkill_open");
        };

        _proto.playSfxSelectAuto = function playSfxSelectAuto() {
          this.playFishSFX("sfxSkill_select");
        };

        _proto.playSfxWaveTransition = function playSfxWaveTransition(isStartGame) {
          var _this2 = this;

          if (isStartGame === void 0) {
            isStartGame = false;
          }

          this.setEffectVolume(0);
          var soundWave = this.playFishSFX("sfxWormhole", false, 1, true);

          if (!soundWave) {
            this.onResumeSound();
            return;
          }

          this.setMusicVolume(0);
          this.scheduleOnce(function () {
            _this2.onResumeSound();

            _this2.playBackGroundMusic(Config1988.instance.SOUND_BACKGROUND_CONFIG.IN_GAME, isStartGame);
          }, this.getDuration(soundWave));
        };

        _proto.playSfxStartGame = function playSfxStartGame() {
          this.playSfxWaveTransition(true);
        };

        _proto.playSfxBomb = function playSfxBomb(fishKind) {
          var _this3 = this;

          if (fishKind == Config1988.instance.FISH_KIND.SELENA) {
            var soundDie = this.playFishSFX("sfxSelena_die");

            if (soundDie) {
              this.scheduleOnce(function () {
                _this3.playFishSFX("sfxBigfish_kill");
              }, this.getDuration(soundDie));
            }
          } else if (fishKind == Config1988.instance.FISH_KIND.ROACH) {
            var _soundDie = this.playFishSFX("sfxRoach_die");

            if (_soundDie) {
              this.scheduleOnce(function () {
                _this3.playFishSFX("sfxBigfish_kill");
              }, this.getDuration(_soundDie));
            }
          } else {
            this.playFishSFX("sfxBomb");
          }
        };

        _proto.playSfxActivePassWord = function playSfxActivePassWord(itemID) {
          this.playFishSFX("sfxChip_letter_" + itemID.toString());
        };

        _proto.playLaserIdle = function playLaserIdle() {
          this.laserIdleID = this.playFishSFX("sfxFire_laser_idle", true);
        };

        _proto.stopLaserIdle = function stopLaserIdle() {
          this.stopSound(this.laserIdleID);
          this.laserIdleID = null;
        };

        _proto.playDragonHitBall = function playDragonHitBall() {//this.playFishSFX("sfxDragon_ball_drop");
        };

        _proto.playSfxBallDrop = function playSfxBallDrop() {//this.playFishSFX("sfxBall_drop");
        };

        _proto.playSfxDragonScream = function playSfxDragonScream() {//this.playFishSFX("sfxDragon_scream");
        };

        _proto.playSfxJackpotExplode = function playSfxJackpotExplode() {//
        };

        _proto.onDestroy = function onDestroy() {
          _GfSoundController.prototype.onDestroy.call(this);

          removeEvents(this);
        };

        return SoundController1988;
      }(GfSoundController), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BulletConfig1985.ts", ['cc', './PoolManager1985.ts'], function (exports) {
  'use strict';

  var cclegacy, POOL_TYPE;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      POOL_TYPE = module.POOL_TYPE;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f5ea65jHTZMdaTJW+2WKtg9", "BulletConfig1985", undefined);

      var BulletConfig = exports('BulletConfig', {
        ES2: {
          Speed: 600,
          PoolType: POOL_TYPE.BULLET_2
        },
        ES5: {
          Speed: 400,
          PoolType: POOL_TYPE.BULLET_4
        },
        ES6: {
          Speed: 750,
          PoolType: POOL_TYPE.BULLET_5
        },
        EV1: {
          Speed: 400,
          PoolType: POOL_TYPE.BULLET_4
        },
        EV3: {
          Speed: 400,
          PoolType: POOL_TYPE.BULLET_2
        },
        EV5: {
          Speed: 450,
          PoolType: POOL_TYPE.BULLET_8
        },
        EV6: {
          Speed: 200,
          PoolType: POOL_TYPE.BULLET_1
        },
        EC1: {
          Speed: 650,
          PoolType: POOL_TYPE.BULLET_3
        },
        EC2: {
          Speed: 200,
          PoolType: POOL_TYPE.BULLET_6
        }
      });

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingTransition.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, setOpacity, fadeOut;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      fadeOut = module.fadeOut;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2, _temp;

      cclegacy._RF.push({}, "f60d1LKjD5GHIIIcT5NXqiY", "LoadingTransition", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingTransition = exports('LoadingTransition', (_dec = ccclass('LoadingTransition'), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingTransition, _Component);

        function LoadingTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "delayTime", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "fadeTime", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingTransition.prototype;

        _proto.start = function start() {
          var _this2 = this;

          this.node.active = true;
          setOpacity(this.node, 255);
          this.scheduleOnce(function () {
            fadeOut(_this2.node, _this2.fadeTime, {
              onComplete: function onComplete() {
                _this2.node.active = false;
                _this2.node['tweenFade'] = null;
              }
            });
          }, this.delayTime);
        };

        _proto.onDisable = function onDisable() {
          this.unscheduleAllCallbacks();

          if (this.node['tweenFade']) {
            this.node['tweenFade'].stop();
            this.node['tweenFade'] = null;
          }
        };

        return LoadingTransition;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "delayTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fadeTime", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfPoolManager.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfNodePoolConfig.ts', './gfDataStore.ts', './gfNodePool.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, error, log, instantiate, isValid, convertAssetArrayToObject, gfBaseEvents, gfBaseConfig, registerEvent, removeEvents, gfReferenceManager, gfNodePoolConfig, gfDataStore, gfNodePool;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      error = module.error;
      log = module.log;
      instantiate = module.instantiate;
      isValid = module.isValid;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfNodePoolConfig = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNodePool = module.default;
    }],
    execute: function () {
      exports('POOL_TYPE', void 0);

      cclegacy._RF.push({}, "f6802Xn49FIqoYx4d/oZhco", "gfPoolManager", undefined);

      var POOL_TYPE;

      (function (POOL_TYPE) {
        POOL_TYPE[POOL_TYPE["SpineFish"] = 0] = "SpineFish";
        POOL_TYPE[POOL_TYPE["SpriteFish"] = 1] = "SpriteFish";
        POOL_TYPE[POOL_TYPE["Bullet"] = 2] = "Bullet";
        POOL_TYPE[POOL_TYPE["NetFX"] = 3] = "NetFX";
        POOL_TYPE[POOL_TYPE["Coin"] = 4] = "Coin";
        POOL_TYPE[POOL_TYPE["LuckyEffect"] = 5] = "LuckyEffect";
        POOL_TYPE[POOL_TYPE["FreezeEffect"] = 6] = "FreezeEffect";
        POOL_TYPE[POOL_TYPE["LabelCoin"] = 7] = "LabelCoin";
        POOL_TYPE[POOL_TYPE["BigExplosion"] = 8] = "BigExplosion";
        POOL_TYPE[POOL_TYPE["SmallExplosion"] = 9] = "SmallExplosion";
        POOL_TYPE[POOL_TYPE["DragonBall"] = 10] = "DragonBall";
        POOL_TYPE[POOL_TYPE["FINAL_INDEX"] = 11] = "FINAL_INDEX";
      })(POOL_TYPE || (POOL_TYPE = exports('POOL_TYPE', {})));

      var gfPoolManager = exports('default', /*#__PURE__*/function () {
        function gfPoolManager(listPrefab) {
          _defineProperty(this, "listPrefab", void 0);

          _defineProperty(this, "pools", void 0);

          _defineProperty(this, "dragon", void 0);

          _defineProperty(this, "listBoss", []);

          _defineProperty(this, "MAIN_COMPONENT", {});

          gfPoolManager.instance = this;
          this.listPrefab = convertAssetArrayToObject(listPrefab);
          this.initPools();
          this.initEvents();
          this.listPrefab = null;
        }

        var _proto = gfPoolManager.prototype;

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.COMMON.EXIT_GAME_ROOM, this.returnAllObjectToPool, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ENTER_GAME_ROOM, this.returnAllObjectToPool, this);
          registerEvent(gfBaseEvents.COMMON.INIT_SCENE, this.reloadAllSpriteUV, this);
        };

        _proto.initPools = function initPools() {
          this.pools = []; // this.dragon = instantiate(this.listPrefab["Dragon"]).getComponent('gfDragon');
          //type, prefabName, mainComponent, count

          this.initPool(POOL_TYPE.SpineFish, "SpineFish", "gfSpineFish", 25); // this.initPool(POOL_TYPE.SpriteFish, "SpriteFish", "gfSpriteFish", 25);

          this.initPool(POOL_TYPE.Coin, "Coin", "gfCoinFX", 10);
          this.initPool(POOL_TYPE.Bullet, "Bullet", "gfBullet", 10);
          this.initPool(POOL_TYPE.NetFX, "NetFX", "gfNetFX", 5);
          this.initPool(POOL_TYPE.LuckyEffect, "LuckyEffect", "gfLuckyEffect", 1);
          this.initPool(POOL_TYPE.FreezeEffect, "ItemFreezeEffect", "gfItemFreezeEffect", 1);
          this.initPool(POOL_TYPE.DragonBall, "DragonBall", "gfDragonBall", 1);
          this.initPool(POOL_TYPE.LabelCoin, "LabelCoin", "gfCoinLabel", 5);
          this.initPool(POOL_TYPE.SmallExplosion, "SmallExplosion", "gfExplosionAnimationClip", 1);
          this.initPool(POOL_TYPE.BigExplosion, "BigExplosion", "gfExplosionSpine", 1);
        };

        _proto.initPool = function initPool(type, prefabName, mainComponent, count) {
          if (!this.listPrefab[prefabName]) {
            error("[PoolManager] Prefab not found: " + prefabName);
            return;
          }

          this.MAIN_COMPONENT[type] = mainComponent;

          if (this.MAIN_COMPONENT[type]) {
            this.pools[type] = new gfNodePool(this.MAIN_COMPONENT[type]);
          } else {
            this.pools[type] = new gfNodePool();
          }

          this.pools[type].init(this.listPrefab[prefabName], count);
        };

        _proto.getObjectByType = function getObjectByType(type) {
          if (!this.pools[type]) {
            error("this type do not init");
            return null;
          }

          return this.pools[type].getObj();
        };

        _proto.getObjectMainComponentByType = function getObjectMainComponentByType(type) {
          return this.pools[type].getObj().getComponent(this.MAIN_COMPONENT[type]);
        };

        _proto.getFishByKind = function getFishByKind(kind) {
          var config = gfNodePoolConfig.instance.getFishConfig(kind);
          if (!config) return null;
          var fishType = gfNodePoolConfig.instance.isSpriteFish(kind) ? POOL_TYPE.SpriteFish : POOL_TYPE.SpineFish;
          var fishNode = this.getObjectByType(fishType);

          if (fishNode) {
            this.updateFishComponent(fishNode, fishType, config.customComponent);
            var fish = fishNode.getComponent(this.MAIN_COMPONENT[fishType]);
            fish.setPoolManager(this.pools[fishType]);
            fish.node.setParent(gfReferenceManager.instance.getNodeFishLayer());
            fish.initAssets(config);
            return fish;
          }

          return null;
        };

        _proto.updateFishComponent = function updateFishComponent(fishNode, fishType, customComponent) {
          fishNode.getComponent('gfBaseFish')._destroyImmediate();

          fishNode.addComponent(customComponent ? customComponent : this.MAIN_COMPONENT[fishType]);
        };

        _proto.getFishWithData = function getFishWithData(data) {
          var fish = this.getFishByKind(data.FishKind);
          if (!fish) return null;
          fish.initFishData(data);
          return fish;
        };

        _proto.getBulletByKind = function getBulletByKind(data) {
          var config = gfNodePoolConfig.instance.getBulletConfig(data);
          if (!config) return null;
          var bullet = this.getObjectMainComponentByType(POOL_TYPE.Bullet);
          bullet.initAssets(config);
          return bullet;
        };

        _proto.getBulletKindByMultiple = function getBulletKindByMultiple(bulletMultiple) {
          return gfDataStore.instance.getBulletIndex(bulletMultiple);
        };

        _proto.getBulletWithData = function getBulletWithData(data) {
          var bullet = this.getBulletByKind({
            BulletIndex: this.getBulletKindByMultiple(data.BulletMultiple),
            isFreezed: data.isFreezed
          });
          if (!bullet) return null;
          bullet.initData(data);
          return bullet;
        };

        _proto.getCoin = function getCoin(kind) {
          var config = gfNodePoolConfig.instance.getCoinConfig(kind);
          if (!config) return null;
          var coin = this.getObjectMainComponentByType(POOL_TYPE.Coin);
          coin.initAssets(config);
          return coin;
        };

        _proto.getLabelCoin = function getLabelCoin(isMe) {
          if (isMe === void 0) {
            isMe = true;
          }

          var kind = isMe ? 1 : 0;
          var config = gfNodePoolConfig.instance.getLabelCoinFont(kind);
          var label = this.getObjectMainComponentByType(POOL_TYPE.LabelCoin);
          label.initAssets(config);
          return label;
        };

        _proto.createSmallExplosion = function createSmallExplosion(_ref) {
          var position = _ref.position;
          var explosion = this.getObjectByType(POOL_TYPE.SmallExplosion);
          explosion.parent = gfReferenceManager.instance.getEffectLayer();
          explosion.position = position;
          return explosion;
        };

        _proto.createBigExplosion = function createBigExplosion(_ref2) {
          var position = _ref2.position;
          var explosion = this.getObjectByType(POOL_TYPE.BigExplosion);
          explosion.parent = gfReferenceManager.instance.getEffectLayer();
          explosion.position = position;
          return explosion;
        };

        _proto.getFreezeFX = function getFreezeFX(kind) {
          var freezeitem = this.getObjectMainComponentByType(POOL_TYPE.FreezeEffect);
          freezeitem.initAssets();
          return freezeitem;
        };

        _proto.getNetFX = function getNetFX(data) {
          var kind;

          if (data.isFreezed) {
            kind = gfBaseConfig.instance.NetFx.IceNet;
          } else if (data.FishKind == gfBaseConfig.instance.FISH_KIND.MINIBOSS) {
            kind = gfBaseConfig.instance.NetFx.ExplostionNet;
          } else {
            kind = gfBaseConfig.instance.NetFx.NormalNet;
          }

          var config = gfNodePoolConfig.instance.getNetFXConfig(kind);
          if (!config) return null;
          var netfx = this.getObjectMainComponentByType(POOL_TYPE.NetFX);
          config.kind = kind;
          config.isMe = data.isMe;
          netfx.initAssets(config);
          return netfx;
        };

        _proto.getLuckyEffectWithData = function getLuckyEffectWithData(data) {
          var luckyeffect = this.getObjectMainComponentByType(POOL_TYPE.LuckyEffect);
          luckyeffect.initData(data);
          return luckyeffect;
        };

        _proto.returnAllObjectToPool = function returnAllObjectToPool() {
          this.pools.forEach(function (pool, i) {
            log("return pool: " + i);
            pool.returnAllToPool();
          });
        };

        _proto.reloadAllSpriteUV = function reloadAllSpriteUV() {
          return;
        } //BOSS
        ;

        _proto.getDragonBall = function getDragonBall(kind) {
          var config = gfNodePoolConfig.instance.getDragonBallConfig(kind);
          if (!config) return null;
          var ball = this.getObjectMainComponentByType(POOL_TYPE.DragonBall);
          ball.initAssets(config);
          return ball;
        };

        _proto.instantiateBoss = function instantiateBoss(prefab) {
          if (prefab) {
            if (!this.checkAssetLoaded(prefab)) {
              this.listBoss.push(instantiate(prefab).getComponent(prefab.data.name));
            }
          }
        };

        _proto.getBossWithData = function getBossWithData(data, bossName) {
          var boss = this.getBossByName(bossName);

          if (boss) {
            boss.node.parent = gfReferenceManager.instance.getNodeFishLayer();
            boss.initFishData(data);
            return boss;
          }

          return null;
        };

        _proto.releaseBoss = function releaseBoss() {
          this.listBoss.forEach(function (boss) {
            if (isValid(boss.node)) boss.node.destroy();
          });
          this.listBoss.length = 0;
        };

        _proto.getBossByName = function getBossByName(name) {
          return this.listBoss.find(function (boss) {
            return boss.node.name === name;
          });
        };

        _proto.checkAssetLoaded = function checkAssetLoaded(prefab) {
          return !!this.listBoss.find(function (boss) {
            return boss.node.name === prefab.data.name;
          });
        };

        _proto.destroy = function destroy() {
          removeEvents(this);
          gfNodePoolConfig.instance.destroy();
          this.pools.forEach(function (pool) {
            pool.destroy();
          });
          this.releaseBoss();
          gfPoolManager.instance = null;
        };

        return gfPoolManager;
      }());

      _defineProperty(gfPoolManager, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotCellHistory1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseCellHistory.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Label, formatMoney, formatUserName, GfBaseCellHistory;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
    }, function (module) {
      formatMoney = module.formatMoney;
      formatUserName = module.formatUserName;
    }, function (module) {
      GfBaseCellHistory = module.GfBaseCellHistory;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "f69c4DeUh5P/qywDRPBW2RS", "JackpotCellHistory1988", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var JackpotCellHistory1988 = exports('JackpotCellHistory1988', (_dec = ccclass('JackpotCellHistory1988'), _dec(_class = (_temp = /*#__PURE__*/function (_GfBaseCellHistory) {
        _inheritsLoose(JackpotCellHistory1988, _GfBaseCellHistory);

        function JackpotCellHistory1988() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _GfBaseCellHistory.call.apply(_GfBaseCellHistory, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "_isShow", false);

          return _this;
        }

        var _proto = JackpotCellHistory1988.prototype;

        _proto.updateData = function updateData(data) {
          if (!data) return;
          var infoUser = data.pl[0];
          this.bet.getComponent(Label).string = formatMoney(infoUser.betAmt);
          this.winAmount.getComponent(Label).string = formatMoney(data.jpAmt);
          this.account.getComponent(Label).string = formatUserName(infoUser.dn);
          this.time.getComponent(Label).string = this.formatTimeStamp(data.time);
        };

        return JackpotCellHistory1988;
      }(GfBaseCellHistory), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EC1FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfUtilities.ts', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _defineProperty, _assertThisInitialized, _initializerDefineProperty, cclegacy, _decorator, sp, misc, UITransform, v3, getRotation, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _initializerDefineProperty = module.initializerDefineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      sp = module.sp;
      misc = module.misc;
      UITransform = module.UITransform;
      v3 = module.v3;
    }, function (module) {
      getRotation = module.getRotation;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "f837byp4EVMMZuaRjjbf5fw", "EC1FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EC1FireBullet = exports('EC1FireBullet', (_dec = ccclass('EC1FireBullet'), _dec2 = property(sp.Skeleton), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(EC1FireBullet, _EnemyFireBullet);

        function EC1FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "ANIM", {
            IDLE: "idle",
            SHOOT: "shoot"
          });

          _initializerDefineProperty(_assertThisInitialized(_this), "gun", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "target", null);

          _defineProperty(_assertThisInitialized(_this), "timeStopRotate", 0);

          _defineProperty(_assertThisInitialized(_this), "rotateSpeed", 30);

          return _this;
        }

        var _proto = EC1FireBullet.prototype;

        _proto.setupFire = function setupFire(data) {
          _EnemyFireBullet.prototype.setupFire.call(this, data);

          this.target = this.findTarget();
        };

        _proto.fire = function fire(timeLate) {
          if (timeLate === void 0) {
            timeLate = 0;
          }

          var distance = 2000;
          var angle = misc.degreesToRadians(this.gun.node.angle - 90);
          this.gun.setAnimation(0, this.ANIM.SHOOT, false);
          this.timeStopRotate = this.gun.getCurrent(0).animation.duration + 0.5;
          var srcPos0 = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[0].getWorldPosition());
          var destPos0 = v3(this.node.position.x + Math.cos(angle) * distance, this.node.position.y + Math.sin(angle) * distance, 0);
          this.createBullet(BulletConfig.EC1, srcPos0, destPos0, -timeLate);
          var srcPos1 = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[1].getWorldPosition());
          var destPos1 = v3(destPos0.x + (srcPos1.x - srcPos0.x), destPos0.y + (srcPos1.y - srcPos0.y), 0);
          this.createBullet(BulletConfig.EC1, srcPos1, destPos1, -timeLate);
        };

        _proto.update = function update(dt) {
          _EnemyFireBullet.prototype.update.call(this, dt);

          if (this.timeStopRotate > 0) {
            this.timeStopRotate = Math.max(0, this.timeStopRotate - dt);
          }

          this.rotateToTarget(dt);
        };

        _proto.rotateToTarget = function rotateToTarget(dt) {
          if (this.isDie || this.timeStopRotate > 0) return;

          if (!this.target || !this.target.isActive()) {
            this.target = this.findTarget();
          }

          if (!this.target) return;
          var destPos0 = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.target.node.worldPosition);
          var destAngle = getRotation(destPos0, this.node.getPosition()) + 90;
          var angle = destAngle - this.gun.node.angle;
          if (angle > 180) angle -= 360;
          if (angle < -180) angle += 360;
          var sign = angle > 0 ? 1 : -1;
          this.gun.node.angle = this.gun.node.angle + sign * Math.min(Math.abs(angle), this.rotateSpeed * dt);
        };

        return EC1FireBullet;
      }(EnemyFireBullet), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "gun", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup01.ts", ['cc', './utils.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, randRange, gfBaseConfig, v2Distance, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      randRange = module.randRange;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      v2Distance = module.v2Distance;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f8d43uWmLJH05vXLjLAHB1z", "gfFishGroup01", undefined);

      var gfFishGroup1 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup1() {}

        gfFishGroup1.create = function create() {
          var COUNT_FISH = {
            TOP_TOP: 17,
            BOTTOM_BOTTOM: 17,
            TOP_BOTTOM: 36,
            BOTTOM_TOP: 36
          };
          var Speed = 41;
          var TotalTime = 63;
          var AppSize = gfBaseConfig.instance.AppSize;
          var flip = !gfFishGroupData.isFlipped();
          var CONFIG_LINE_FISH = [{
            posYStart: !flip ? -100 : AppSize.Height + 100,
            posYEnd: !flip ? 100 : AppSize.Height - 100,
            totalFish: COUNT_FISH.TOP_TOP,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 100 : -100,
            posYEnd: !flip ? AppSize.Height - 100 : 100,
            totalFish: COUNT_FISH.BOTTOM_BOTTOM,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }, {
            posYStart: !flip ? -100 : AppSize.Height + 100,
            posYEnd: !flip ? 150 : AppSize.Height - 150,
            totalFish: COUNT_FISH.TOP_BOTTOM,
            totalTime: TotalTime,
            angle: !flip ? 90 : -90
          }, {
            posYStart: !flip ? AppSize.Height + 100 : -100,
            posYEnd: !flip ? AppSize.Height - 150 : 150,
            totalFish: COUNT_FISH.BOTTOM_TOP,
            totalTime: TotalTime,
            angle: !flip ? -90 : 90
          }]; // Formation Fish

          for (var i = 0; i < 18; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;

            var _this$calculatePosByP = this.calculatePosByPlayerIndexGroup1(i),
                posStart = _this$calculatePosByP.posStart,
                posEnd = _this$calculatePosByP.posEnd;

            var distance = v2Distance(posEnd, posStart);
            var baseMoveTime = distance / Speed;
            data.moveAction = new FishMoveActions(posStart);
            data.moveAction.appendAction(FISH_ACTION.MoveTo, {
              time: baseMoveTime,
              x: posEnd.x,
              y: posEnd.y
            });
            FishGroupHelper.createFishWithDelay(data);
          } // Line fish


          for (var _i = 0; _i < 4; _i++) {
            var config = CONFIG_LINE_FISH[_i];
            var offsetX = AppSize.Width / config.totalFish;
            var moveInTime = 2;
            var stayTime = Math.max(0, config.totalTime - Math.max(0, gfFishGroupData.timeSkipped - 2));
            var moveOutTime = Math.max(0, 3 - Math.max(0, gfFishGroupData.timeSkipped - config.totalTime));

            for (var _i2 = 0; _i2 < config.totalFish; ++_i2) {
              var fishData = gfFishGroupData.getNextFishData();
              if (!fishData) continue;
              var random = randRange(500, -500);
              var endPos = config.angle === 90 ? v2(random, 720) : v2(random, -720);
              var posX = flip ? (config.totalFish - _i2) * offsetX - offsetX / 2 : _i2 * offsetX + offsetX / 2;
              fishData.moveAction = new FishMoveActions(v2(posX, config.posYStart), config.angle);
              fishData.moveAction.appendAction(FISH_ACTION.MoveTo, {
                time: moveInTime,
                x: posX,
                y: config.posYEnd
              });
              fishData.moveAction.appendAction(FISH_ACTION.Delay, {
                time: stayTime
              });
              fishData.moveAction.appendAction(FISH_ACTION.MoveBy, {
                time: randRange(moveOutTime * 10 - 5, moveOutTime * 10) / 10,
                x: endPos.x,
                y: endPos.y,
                motion: 'quartOut'
              }); // fishData.moveOutAction = moveBy(randRange(25, 35) / 10, endPos).easing(easeOut(0.4));

              FishGroupHelper.createFishWithDelay(fishData);
            }
          }
        };

        gfFishGroup1.calculatePosByPlayerIndexGroup1 = function calculatePosByPlayerIndexGroup1(indexFish) {
          var flip = !gfFishGroupData.isFlipped();
          var MaxSceneSize = 1560;
          var MaxSizeGroup = 1200;
          var FixDeltaX = 140;
          var OffsetX = [874, 1355, 1110, 1175, 1110, 550, 650, 650, 570, 570, 490, 490, 410, 410, 330, 330, 250, 250];
          var OffsetY = [385, 360, 443, 360, 266, 370, 510, 210, 510, 210, 510, 210, 510, 210, 510, 210, 510, 210];
          var FlipY = [0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
          var posStartX = flip ? OffsetX[indexFish] - MaxSceneSize : 2 * (MaxSceneSize - FixDeltaX) - OffsetX[indexFish];
          var posStartY = flip ? OffsetY[indexFish] : FlipY[indexFish] ? gfBaseConfig.instance.AppSize.Height - OffsetY[indexFish] : OffsetY[indexFish];
          var posStart = v2(posStartX, posStartY);
          var posEnd = flip ? v2(posStartX + MaxSceneSize + MaxSizeGroup, posStartY) : v2(posStartX - MaxSceneSize - MaxSizeGroup, posStartY);
          return {
            posStart: posStart,
            posEnd: posEnd
          };
        };

        return gfFishGroup1;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfJackpotStarFX.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, v3, Node, tween, UITransform, Component, setOpacity, getPostionInOtherNode, gfBaseEvents, rotateBy, fadeIn, scaleTo, fadeOut, gfEventEmitter, gfBaseConfig, SetZIndex;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v3 = module.v3;
      Node = module.Node;
      tween = module.tween;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      setOpacity = module.setOpacity;
      getPostionInOtherNode = module.getPostionInOtherNode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      rotateBy = module.rotateBy;
      fadeIn = module.fadeIn;
      scaleTo = module.scaleTo;
      fadeOut = module.fadeOut;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      SetZIndex = module.SetZIndex;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "f935b1BFJJNPYQSvK9UgTCj", "gfJackpotStarFX", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BallStarPos = [v3(0, 193), v3(153, 120), v3(189, -43), v3(85, -174), v3(-83, -174), v3(-187, -43), v3(-151, 120)];
      var gfJackpotStarFX = exports('gfJackpotStarFX', (_dec = ccclass('gfJackpotStarFX'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfJackpotStarFX, _Component);

        function gfJackpotStarFX() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "image", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = gfJackpotStarFX.prototype;

        _proto.onLoad = function onLoad() {
          SetZIndex(this.node, gfBaseConfig.instance.Z_INDEX.POPUP);
        };

        _proto.playAnimation = function playAnimation(ballListArr) {
          var _this2 = this;

          var ballList = [].concat(ballListArr);
          var scaleTime = 1.25;
          var fadeDelay = 0.5;
          var glowDelay = 1.65;
          var scaleDelay = 0.15;
          var rotateTime = scaleTime + fadeDelay + glowDelay + scaleDelay;
          var ballFlyTime = 0.15; // fly to star

          var flyAwayTime = 0.2; // fly out of screen

          setOpacity(this.image, 0);
          ballList.forEach(function (ball, i) {
            ball.node.position = getPostionInOtherNode(_this2.node, ball.node);
            ball.node.parent = _this2.node;
            ball.moveToJackpotStar({
              delay: ballFlyTime * i,
              position: BallStarPos[i]
            });
          });
          tween(this.node).delay(1 + ballFlyTime * 7).parallel(rotateBy(rotateTime, 720), tween().then(tween().delay(fadeDelay).call(function () {
            tween(_this2.image).then(fadeIn(0.5)).start();
          }).delay(glowDelay).parallel(scaleTo(scaleTime, 0.4), tween().delay(1).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.BIG_EXPLOSION, _this2.node.getComponent(UITransform).convertToWorldSpaceAR(v3(0, 0)));
          }).delay(0.3)).call(function () {
            ballList.forEach(function (ball) {
              ball.flyAway(flyAwayTime);
            });
            tween(_this2.image).then(fadeOut(0.5)).start();
          }).delay(scaleDelay).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.SHOW_JACKPOT_WINAMOUNT);
          }).delay(0.75).call(function () {
            gfEventEmitter.instance.emit(gfBaseEvents.DRAGON.DONE_JACKPOT_STAR);
          }).removeSelf())).start();
        };

        return gfJackpotStarFX;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "image", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MainController1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './serviceRest.ts', './loadConfigAsync.ts', './gameCommonUtils.ts', './EventsCode1988.ts', './Config1988.ts', './gfMainFSM.ts', './mock.ts', './gfMainController.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, sys, gfBaseEvents, gfEventEmitter, apiObject, loadConfigAsync, gameCommonUtils, EventCode, Config1988, gfMainFSM, mock, gfMainController;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      apiObject = module.default;
    }, function (module) {
      loadConfigAsync = module.default;
    }, function (module) {
      gameCommonUtils = module.default;
    }, function (module) {
      EventCode = module.default;
    }, function (module) {
      Config1988 = module.default;
    }, function (module) {
      gfMainFSM = module.default;
    }, function (module) {
      mock = module.mock;
    }, function (module) {
      gfMainController = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f99d4Uh2o9FC6TTBz2883g8", "MainController1988", undefined);

      var getUrlParam = gameCommonUtils.getUrlParam;
      var MainController1988 = exports('default', /*#__PURE__*/function (_gfMainController) {
        _inheritsLoose(MainController1988, _gfMainController);

        function MainController1988() {
          var _this;

          _this = _gfMainController.call(this) || this;
          MainController1988.instance = _assertThisInitialized(_this);
          return _this;
        }

        var _proto = MainController1988.prototype;

        _proto.onCatchFishSkill = function onCatchFishSkill(data) {
          switch (data.SkillID) {
            case Config1988.instance.SkillConfig.LASER:
              data.fishKind = Config1988.instance.FISH_KIND.LASER_CRAB;
              break;

            case Config1988.instance.SkillConfig.FISH_BOMB:
              data.fishKind = Config1988.instance.FISH_KIND.BOMB;
              break;

            case Config1988.instance.SkillConfig.DRILL:
              data.fishKind = Config1988.instance.FISH_KIND.DRILL;
              break;
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CATCH_FISH_BY_SKILL, data);
        };

        _proto.onListUserOnBoard = function onListUserOnBoard(data) {
          _gfMainController.prototype.onListUserOnBoard.call(this, data);

          var performingSkills = data.performingSkills;
          var _GameConfig$instance$ = Config1988.instance.SkillConfig,
              DRILL = _GameConfig$instance$.DRILL,
              FISH_BOMB = _GameConfig$instance$.FISH_BOMB;

          if (performingSkills) {
            if (performingSkills[DRILL] && performingSkills[DRILL].length > 0) {
              gfEventEmitter.instance.emit(EventCode.GAME_LAYER.RESUME_DRILL, performingSkills[DRILL]);
            }

            if (performingSkills[FISH_BOMB] && performingSkills[FISH_BOMB].length > 0) {
              gfEventEmitter.instance.emit(EventCode.GAME_LAYER.RESUME_POISON_FLOWER, performingSkills[FISH_BOMB]);
            }
          }
        };

        _proto.initToken = function initToken() {
          var _this2 = this;

          var CONFIG = loadConfigAsync.getConfig();
          var LOGIN_IFRAME = CONFIG.LOGIN_IFRAME,
              URL_TOKEN = CONFIG.URL_TOKEN,
              USER_TOKEN = CONFIG.USER_TOKEN,
              DEV_ENV = CONFIG.DEV_ENV,
              TOKEN_VALUE = CONFIG.TOKEN_VALUE,
              IS_FINISHED_REMOTE = CONFIG.IS_FINISHED_REMOTE,
              API_URL = CONFIG.API_URL,
              IS_PRODUCTION = CONFIG.IS_PRODUCTION;

          if (!IS_FINISHED_REMOTE) {
            setTimeout(function () {
              _this2.initToken();
            }, 100);
            return;
          }

          Config1988.instance.IsDevMode = DEV_ENV != null && DEV_ENV == true;
          Config1988.instance.IPMaster = CONFIG[Config1988.instance.IPMasterName];
          var token = '';
          var clientType = '1';
          Config1988.instance.RoomVersion = IS_PRODUCTION ? Config1988.instance.ProdVersion : Config1988.instance.RoomVersion;

          if (LOGIN_IFRAME) {
            Config1988.instance.GameId = getUrlParam('gameId') ? getUrlParam('gameId') : Config1988.instance.GameId;
            Config1988.instance.RoomVersion = getUrlParam('version') ? "|" + getUrlParam('version') : Config1988.instance.RoomVersion;

            if (getUrlParam('clientType')) {
              clientType = getUrlParam('clientType');
            }
          } else {
            clientType = '2';
          }

          clientType = '|' + clientType;

          if (!Config1988.instance.IsDevMode) {
            if (!sys.isNative && LOGIN_IFRAME) {
              if (URL_TOKEN) token = getUrlParam(URL_TOKEN);
            } else {
              token = sys.localStorage.getItem(USER_TOKEN);
              if (!token && TOKEN_VALUE) token = TOKEN_VALUE;
            }

            Config1988.instance.userToken = token;
            token += Config1988.instance.RoomVersion + clientType;
            Config1988.instance.token4Master = token;

            gfMainFSM.instance._fsm.goLoginLobby();
          } else {
            var dataPost = {
              userName: mock.userText,
              password: mock.pwText,
              fingerPrint: 'test'
            };
            apiObject.post({
              url: 'auth/login',
              apiUrl: API_URL,
              data: dataPost,
              callback: function callback(_ref) {
                var data = _ref.data;
                Config1988.instance.token4Master = data.data.token + Config1988.instance.RoomVersion;

                gfMainFSM.instance._fsm.goLoginLobby();
              }
            });
          }
        };

        return MainController1988;
      }(gfMainController));

      _defineProperty(MainController1988, "instance", null);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ES5FireBullet.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './BulletConfig1985.ts', './EnemyFireBullet.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, v2, UITransform, v3, BulletConfig, EnemyFireBullet;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      v2 = module.v2;
      UITransform = module.UITransform;
      v3 = module.v3;
    }, function (module) {
      BulletConfig = module.BulletConfig;
    }, function (module) {
      EnemyFireBullet = module.EnemyFireBullet;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "f9d19IRyGhGkJrQGTmQ8z8T", "ES5FireBullet", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ES5FireBullet = exports('ES5FireBullet', (_dec = ccclass('ES5FireBullet'), _dec(_class = (_temp = /*#__PURE__*/function (_EnemyFireBullet) {
        _inheritsLoose(ES5FireBullet, _EnemyFireBullet);

        function ES5FireBullet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EnemyFireBullet.call.apply(_EnemyFireBullet, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "FIRE_POS", [v2(0, -1000), v2(0, -1000)]);

          return _this;
        }

        var _proto = ES5FireBullet.prototype;

        _proto.fire = function fire(timeLate) {
          if (timeLate === void 0) {
            timeLate = 0;
          }

          for (var i = 0; i < this.BulletCount && i < this.FIRE_POS.length; ++i) {
            var srcPos = this.node.parent.getComponent(UITransform).convertToNodeSpaceAR(this.firePos[i % this.firePos.length].getWorldPosition());
            var destPos = v3(srcPos.x + this.FIRE_POS[i].x, srcPos.y + this.FIRE_POS[i].y, 0);
            this.createBullet(BulletConfig.ES5, srcPos, destPos, -timeLate);
          }
        };

        return ES5FireBullet;
      }(EnemyFireBullet), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishGroup08.ts", ['cc', './gfBaseConfig.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts'], function (exports) {
  'use strict';

  var cclegacy, v2, gfBaseConfig, gfFishGroupData, FishMoveActions, FISH_ACTION, FishGroupHelper;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      v2 = module.v2;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      gfFishGroupData = module.default;
    }, function (module) {
      FishMoveActions = module.FishMoveActions;
      FISH_ACTION = module.FISH_ACTION;
    }, function (module) {
      FishGroupHelper = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fa5c1asIh5GBqK2Mxd4pFUP", "gfFishGroup08", undefined);

      var gfFishGroup8 = exports('default', /*#__PURE__*/function () {
        function gfFishGroup8() {}

        gfFishGroup8.makeBezierLine8 = function makeBezierLine8(fishCount, circleCount, customHeight, circleTime) {
          var AppSize = gfBaseConfig.instance.AppSize;
          var width = (AppSize.Width + 100) / (circleCount + 1);
          var height = customHeight ? customHeight : width * 0.7;
          var startPos = v2(-width / 2 - 100, AppSize.Height / 2);

          if (gfFishGroupData.isFlipped()) {
            startPos.x = AppSize.Width - startPos.x;
            startPos.y = AppSize.Height - startPos.y;
          }

          var y = 360 - startPos.y;

          for (var i = 0; i < fishCount; ++i) {
            var data = gfFishGroupData.getNextFishData();
            if (!data) continue;
            var delay = i * 1.0;
            var flip = y > 0 ? 1 : -1;
            data.moveAction = new FishMoveActions(startPos);
            data.moveAction.appendAction(FISH_ACTION.Delay, {
              time: delay
            });

            for (var j = 0; j < circleCount + 2; ++j) {
              data.moveAction.appendAction(FISH_ACTION.gfBezierBy, {
                time: circleTime,
                points: [v2(0, flip * height), v2(gfFishGroupData.flipCoord * width, flip * height), v2(gfFishGroupData.flipCoord * width, 0)]
              });
              flip *= -1;
            }

            FishGroupHelper.createFishWithDelay(data);
          }
        };

        gfFishGroup8.create = function create() {
          var fishCount = [50, 50, 1, 1, 1, 1, 1, 1, 1]; // const fishKind = [13, 3, 22, 20, 22, 43, 20, 22, 20];

          var timeEach = 5;
          var circleCount = 2;
          var AppSize = gfBaseConfig.instance.AppSize;
          var width = AppSize.Width / (circleCount + 1);
          var height = width * 0.7;
          this.makeBezierLine8(fishCount[0] / 2, circleCount, height, timeEach);
          this.makeBezierLine8(fishCount[0] / 2, circleCount, -height, timeEach);
          this.makeBezierLine8(fishCount[1] / 2, circleCount, 100, timeEach);
          this.makeBezierLine8(fishCount[1] / 2, circleCount, -100, timeEach);
          gfFishGroupData.updateCustomZIndex(555);
          var bigSpace = 400;
          var midY = 360;
          var bigSpeed = 95;

          for (var i = 0; i < fishCount.length - 2; ++i) {
            FishGroupHelper.createFishLine(fishCount[i + 2], midY, 0, bigSpeed, -bigSpace * i);
          }
        };

        return gfFishGroup8;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFreezeSkill.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfPoolManager.ts', './gfFishManager.ts', './gfEffectLayer.ts', './gfFishFreezeEffect.ts', './gfFreezeGunFX.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Label, Sprite, Button, UITransform, tween, v3, Component, gfBaseEvents, gfEventEmitter, gfBaseConfig, registerEvent, removeEvents, gfReferenceManager, gfDataStore, gfPoolManager, gfFishManager, gfEffectLayer, gfFishFreezeEffect, GfFreezeGunFX;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Label = module.Label;
      Sprite = module.Sprite;
      Button = module.Button;
      UITransform = module.UITransform;
      tween = module.tween;
      v3 = module.v3;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfPoolManager = module.default;
    }, function (module) {
      gfFishManager = module.default;
    }, function (module) {
      gfEffectLayer = module.gfEffectLayer;
    }, function (module) {
      gfFishFreezeEffect = module.gfFishFreezeEffect;
    }, function (module) {
      GfFreezeGunFX = module.GfFreezeGunFX;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "fb43b69MjRAtYPviLKUH01p", "gfFreezeSkill", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfFreezeSkill = exports('gfFreezeSkill', (_dec = ccclass('gfFreezeSkill'), _dec2 = property(Label), _dec3 = property(Label), _dec4 = property(Sprite), _dec5 = property(Button), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfFreezeSkill, _Component);

        function gfFreezeSkill() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "labelSkillCount", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "labelCoolDown", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "frzCDPrgss", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "btnFreeze", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "skillCount", -1);

          _defineProperty(_assertThisInitialized(_this), "freezeTime", 0);

          _defineProperty(_assertThisInitialized(_this), "isLockByLaser", false);

          _defineProperty(_assertThisInitialized(_this), "realSkillCount", 0);

          return _this;
        }

        var _proto = gfFreezeSkill.prototype;

        _proto.onLoad = function onLoad() {
          this.initEvents();
          gfReferenceManager.instance.setData({
            'BtnFreeze': this.btnFreeze.node
          });
        };

        _proto.initEvents = function initEvents() {
          registerEvent(gfBaseEvents.GAME_LAYER.FREEZE_ADD_ITEM, this.addFreezeItem, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_ACTIVE_FREEZE_GUN, this.activeFreezeGun, this);
          registerEvent(gfBaseEvents.GAME_LAYER.ON_STOP_FREEZE_GUN, this.stopFreezeGun, this);
          registerEvent(gfBaseEvents.GAME_LAYER.UPDATE_LIST_ITEM, this.updateListItem, this);
          registerEvent(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, this.onPlayerHaveGunLaser, this);
          registerEvent(gfBaseEvents.AUTO_BOT.TOGGLE_BUTTON, this.toggleButton, this);
          registerEvent(gfBaseEvents.PLAYER_LAYER.UPDATE_LIST_PLAYER, this.onUpdatePlayers, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.catchFish, this);
          registerEvent(gfBaseEvents.FISH_LAYER.CATCH_FISH_BY_SKILL, this.catchFishSkill, this);
          registerEvent(gfBaseEvents.GAME_LAYER.FREEZE_FISH, this.freezeFish, this);
          registerEvent(gfBaseEvents.GAME_LAYER.FISH_DROP_ITEM, this.onFishDropItem, this);
        };

        _proto.update = function update(dt) {
          this.updateFreezeCooldown(dt);
        };

        _proto.updateFreezeCooldown = function updateFreezeCooldown(dt) {
          if (this.freezeTime == 0) return;
          this.freezeTime -= dt;
          if (this.freezeTime < 0) this.freezeTime = 0;
          this.updateCooldownProgress();
        };

        _proto.addFreezeItem = function addFreezeItem() {
          this.skillCount += 1;
          this.updateFreezeCountLabel();
          this.updateFreezeButtonStatus();
        };

        _proto.updateCooldownProgress = function updateCooldownProgress() {
          this.frzCDPrgss.fillRange = this.freezeTime / gfBaseConfig.instance.TIME_COUNTDOWN_ITEM_FREEZE;
          this.labelCoolDown.string = Math.ceil(this.freezeTime).toString();
          this.labelCoolDown.node.active = this.freezeTime > 0 ? true : false;
        };

        _proto.updateListItem = function updateListItem(data) {
          for (var i = 0; i < data.listItem.length; i++) {
            var itemInfo = data.listItem[i];

            if (itemInfo.ID === gfBaseConfig.instance.SKILL_ITEM.FREEZE) {
              this.realSkillCount = data.listItem[i].amount;

              if (this.skillCount < 0) {
                this.skillCount = data.listItem[i].amount;
              }
            }
          }

          this.updateFreezeCountLabel();
          this.updateFreezeButtonStatus();
          this.updateCooldownProgress();
        };

        _proto.updateFreezeCountLabel = function updateFreezeCountLabel() {
          this.labelSkillCount.string = this.skillCount + "/9";
        };

        _proto.updateFreezeButtonStatus = function updateFreezeButtonStatus() {
          var isLockByLaser = gfDataStore.instance.getSelfInfo().skillLock;
          this.btnFreeze.interactable = !isLockByLaser && this.skillCount > 0 && this.freezeTime == 0;
        };

        _proto.activeFreezeGun = function activeFreezeGun(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          player.getComponent(GfFreezeGunFX).activeFreezeEffect();

          if (data.DeskStation === gfDataStore.instance.getSelfDeskStation()) {
            this.skillCount -= 1;
            this.freezeTime = gfBaseConfig.instance.TIME_COUNTDOWN_ITEM_FREEZE;
            this.updateFreezeCountLabel();
            this.updateFreezeButtonStatus();
            this.updateCooldownProgress();
          }
        };

        _proto.stopFreezeGun = function stopFreezeGun(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          player.getComponent(GfFreezeGunFX).stopFreezeGunEffect();

          if (data.DeskStation === gfDataStore.instance.getSelfDeskStation()) {
            this.freezeTime = 0;
            this.updateCooldownProgress();
            this.updateFreezeButtonStatus();
          }
        };

        _proto.onPlayerHaveGunLaser = function onPlayerHaveGunLaser(DeskStation) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(DeskStation);

          if (player.isMe) {
            this.updateFreezeButtonStatus();
          }
        };

        _proto.toggleButton = function toggleButton() {
          this.updateFreezeButtonStatus();
        };

        _proto.onClickFreezeBtn = function onClickFreezeBtn() {
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.CLICK);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.SEND_ACTIVE_FREEZE_GUN);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        _proto.onUpdatePlayers = function onUpdatePlayers(data) {
          this.freezeTime = 0;

          for (var i = 0; i < data.length; i++) {
            var userInfo = data[i];
            var player = gfReferenceManager.instance.getPlayerByDeskStation(userInfo.DeskStation);

            if (userInfo.IceTimeRemain) {
              player.getComponent(GfFreezeGunFX).activeFreezeEffect();

              if (player.isMe) {
                this.freezeTime = userInfo.IceTimeRemain / 1000;
              }
            } else {
              player.getComponent(GfFreezeGunFX).stopFreezeGunEffect();
            }
          }

          this.skillCount = this.realSkillCount;
          this.updateCooldownProgress();
          this.updateFreezeCountLabel();
          this.updateFreezeButtonStatus();
        };

        _proto.catchFishSkill = function catchFishSkill(data) {
          var listFish = data.ListFish;

          for (var i = 0; i < listFish.length; i++) {
            var fish = listFish[i];
            this.catchFish(fish);
          }
        };

        _proto.catchFish = function catchFish(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);

          if (player && player.isMe && data.itemInfo) {
            if (data.itemInfo.amount) {
              this.realSkillCount = data.itemInfo.amount;
            } else {
              this.realSkillCount += 1;
            }
          }
        };

        _proto.freezeFish = function freezeFish(data) {
          var fish = gfFishManager.instance.getFishById(data.fishId);

          if (fish) {
            fish.getComponentInChildren(gfFishFreezeEffect).onFreezeFish();
          }
        };

        _proto.onFishDropItem = function onFishDropItem(data) {
          if (data.itemID === gfBaseConfig.instance.SKILL_ITEM.FREEZE) {
            this.effectItemFreeze(data);
          }
        };

        _proto.effectItemFreeze = function effectItemFreeze(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.deskStation);
          var effectLayer = gfReferenceManager.instance.getEffectLayer().getComponent(gfEffectLayer);
          var endNode = player.isMe ? gfReferenceManager.instance.getBtnFreeze() : player.node;
          var fromPosition = data.fishPos ? effectLayer.node.getComponent(UITransform).convertToNodeSpaceAR(data.fishPos) : effectLayer.getRandomPositionOutScreen();
          gfEventEmitter.instance.emit(gfBaseEvents.SOUND.EFFECT_GET_ITEM_FREEZE);
          var destination = effectLayer.node.getComponent(UITransform).convertToNodeSpaceAR(endNode.worldPosition);
          var freezeItem = gfPoolManager.instance.getFreezeFX();
          freezeItem.node.setParent(effectLayer.node);
          freezeItem.node.setPosition(fromPosition);
          var jumpHigh = 60;
          tween(freezeItem.node).to(0.175, {
            position: v3(fromPosition.x, fromPosition.y + jumpHigh, 0)
          }).to(0.5, {
            position: v3(fromPosition.x, fromPosition.y, 0)
          }, {
            easing: 'bounceOut'
          }).delay(0.7).to(0.4, {
            position: destination
          }).delay(0.235).call(function () {
            if (gfDataStore.instance.getSelfDeskStation() === data.deskStation) {
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FREEZE_ADD_ITEM);
            }

            freezeItem.value = 0;
            freezeItem.returnPool();
          }).start();
        };

        return gfFreezeSkill;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "labelSkillCount", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "labelCoolDown", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "frzCDPrgss", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnFreeze", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfSetOrientation.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, macro, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      macro = module.macro;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fc8043iTNNPd5VcsxcT3jde", "gfSetOrientation", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var GfSetOrientation = exports('GfSetOrientation', (_dec = ccclass('GfSetOrientation'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GfSetOrientation, _Component);

        function GfSetOrientation() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = GfSetOrientation.prototype;

        _proto.onLoad = function onLoad() {
          view.setOrientation(macro.ORIENTATION_LANDSCAPE);
        };

        return GfSetOrientation;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/JackpotLobbyGameState.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './logger.ts', './event-manager.ts', './player-info-state-manager.ts', './message-manager.ts', './command-manager.ts'], function (exports) {
  'use strict';

  var _defineProperty, cclegacy, logger, EventManager, playerInfoStateManager, messageManager, CommandManager;

  return {
    setters: [function (module) {
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      logger = module.default;
    }, function (module) {
      EventManager = module.default;
    }, function (module) {
      playerInfoStateManager = module.default;
    }, function (module) {
      messageManager = module.default;
    }, function (module) {
      CommandManager = module.CommandManager;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fc805/2qq1Ixa0OtO70W8Ge", "JackpotLobbyGameState", undefined);

      var JACLKPOT_LOBBY_SERVICE = 'jpLobby';
      var SERVER_EVENT_NAME = {
        'ERROR': 'erp',
        'JACKPOT_LOBBY_HISTORY': 'jpLbHis',
        'JACKPOT_LOBBY_UPDATE': 'jpLbUp'
      };
      var GAME_STATE_EVENT = {
        'JACKPOT_LOBBY_UPDATE': 'jackpot-lobby-update'
      };
      var JackpotLobbyGameState = exports('JackpotLobbyGameState', /*#__PURE__*/function () {
        function JackpotLobbyGameState(serviceIds) {
          _defineProperty(this, "serviceIds", void 0);

          _defineProperty(this, "_eventManager", void 0);

          _defineProperty(this, "_commandManager", void 0);

          _defineProperty(this, "_emitter", void 0);

          _defineProperty(this, "_commandHandler", void 0);

          _defineProperty(this, "_eventHander", void 0);

          this.serviceIds = serviceIds;
          this._commandManager = new CommandManager(JACLKPOT_LOBBY_SERVICE, 1);
          this._eventManager = new EventManager();
          this._emitter = new EventEmitter();
          this._commandHandler = {
            onAck: this._commandManager.onAck.bind(this._commandManager),
            onCannotSendMessage: this._commandManager.onCannotSendMessage.bind(this._commandManager)
          };
          this._eventHander = {
            onCannotConnect: function onCannotConnect() {},
            onCannotAuthen: function onCannotAuthen() {
              logger.debug('onCannotAuthen');
            },
            onNetworkWarning: function onNetworkWarning() {
              logger.debug('onNetworkWarning');
            },
            onShowPopupDisconnected: function onShowPopupDisconnected() {
              logger.debug('onShowPopupDisconnected');
            },
            onConnected: function onConnected() {
              logger.debug('onConnected');
            },
            onEvent: this._eventManager.onEvent.bind(this._eventManager)
          };
        } // public method


        var _proto = JackpotLobbyGameState.prototype;

        _proto.registerEvent = function registerEvent(event, listener) {
          this._emitter.on(event, listener);
        };

        _proto.unregisterEvent = function unregisterEvent(event, listener) {
          this._emitter.off(event, listener);
        };

        _proto.unregisterAllEvent = function unregisterAllEvent(event) {
          this._emitter.removeAllListeners(event);
        };

        _proto.start = function start() {
          var _this = this;

          messageManager.registerGame(JACLKPOT_LOBBY_SERVICE, this._commandHandler, this._eventHander);
          this.getJackpotSyncHistory();
          this.serviceIds.forEach(function (exServiceId) {
            _this._commandManager.subscribe("presence-" + exServiceId);
          });

          this._eventManager.registerEvent(SERVER_EVENT_NAME.JACKPOT_LOBBY_UPDATE, function (eventData) {
            _this._emitter.emit(GAME_STATE_EVENT.JACKPOT_LOBBY_UPDATE, eventData.data);
          });
        };

        _proto.stop = function stop() {
          var _this2 = this;

          this.serviceIds.forEach(function (exServiceId) {
            _this2._commandManager.unSubscribe("presence-" + exServiceId);
          });

          this._eventManager.cleanUp();

          this._commandManager.clearRemainingCommand();

          messageManager.unregisterGame(JACLKPOT_LOBBY_SERVICE);
        };

        _proto.getJackpotSyncHistory = function getJackpotSyncHistory() {
          var _this3 = this;

          var event = 'get-jackpot-history';
          var executeCommandResult = this.executeCommand({
            event: event,
            data: {
              sIds: this.serviceIds
            }
          });

          if (executeCommandResult.isSuccess) {
            this._eventManager.registerOnce(SERVER_EVENT_NAME.JACKPOT_LOBBY_HISTORY, function (eventData) {
              _this3._emitter.emit(GAME_STATE_EVENT.JACKPOT_LOBBY_UPDATE, eventData.data.jp);
            });

            this.waitForNetwork(event, function (eventData) {
              return _this3.isMatchExpectedEvent(SERVER_EVENT_NAME.JACKPOT_LOBBY_HISTORY, executeCommandResult.commandId, eventData);
            }, function () {
              //timeoutExpectedEventHandler
              setTimeout(function () {
                _this3.getJackpotSyncHistory();
              }, 3000);
            });
          }
        };

        _proto.executeCommand = function executeCommand(commandPayload) {
          var result = {
            isSuccess: false,
            commandId: ''
          };

          if (commandPayload && commandPayload.data) {
            commandPayload.data.sId = 'jackpot';
            commandPayload.data.tkn = playerInfoStateManager.getToken();
          }

          commandPayload.version = 1;
          var commandStrategy = this.buildCommandStrategy(commandPayload.event);

          var executeCommandResult = this._commandManager.executeCommand(commandPayload, commandStrategy);

          if (this.checkResultExecuteCommand(executeCommandResult)) {
            result.isSuccess = true;
            result.commandId = executeCommandResult;
          } else {
            logger.error("executeCommand fail: %s", executeCommandResult);
          }

          return result;
        };

        _proto.buildCommandStrategy = function buildCommandStrategy(event) {
          return {
            resendCount: 3,
            shouldWaitForACK: true,
            canBeDuplicated: false
          };
        };

        _proto.buildEventSratergy = function buildEventSratergy(event) {
          return {
            timeWaitForEvent: 5000
          };
        };

        _proto.checkResultExecuteCommand = function checkResultExecuteCommand(commandResult) {
          if (commandResult === CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT) {
            logger.error('onEnterInit -> CommandManager.COMMAND_FAILED_CONC_OVER_LIMIT');
            return false;
          } else if (commandResult === CommandManager.COMMAND_FAILED_DUPLICATE) {
            logger.error('onEnterInit -> CommandManager.COMMAND_FAILED_DUPLICATE');
            return false;
          } else {
            return true;
          }
        };

        _proto.waitForNetwork = function waitForNetwork(event, verifyEvent, timeoutExpectedEventHandler) {
          var eventStrategy = this.buildEventSratergy(event);

          this._eventManager.waitForEvent(eventStrategy.timeWaitForEvent, verifyEvent, function () {
            if (timeoutExpectedEventHandler) {
              timeoutExpectedEventHandler();
            }
          });
        };

        _proto.isMatchExpectedEvent = function isMatchExpectedEvent(expectedEventName, expectedCommandId, eventData) {
          var event = eventData.event,
              data = eventData.data;
          return expectedEventName === event && data.cId === expectedCommandId || SERVER_EVENT_NAME.ERROR === event && Array.isArray(data) && data[0].cId === expectedCommandId;
        };

        return JackpotLobbyGameState;
      }());

      _defineProperty(JackpotLobbyGameState, "GAME_STATE_EVENT", GAME_STATE_EVENT);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfResizeWindowPortrait.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfDataStore.ts', './Config1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, view, macro, Size, ResolutionPolicy, math, UITransform, Component, gfBaseEvents, gfEventEmitter, gfBaseConfig, showFullScreenButton, gfDataStore, Config1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      view = module.view;
      macro = module.macro;
      Size = module.Size;
      ResolutionPolicy = module.ResolutionPolicy;
      math = module.math;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      showFullScreenButton = module.showFullScreenButton;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      Config1985 = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fd5ffd/SCROBboVba8trQLj", "gfResizeWindowPortrait", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfResizeWindowPortrait = exports('default', (_dec = ccclass('gfResizeWindowPortrait'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfResizeWindowPortrait, _Component);

        function gfResizeWindowPortrait() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = gfResizeWindowPortrait.prototype;

        _proto.start = function start() {
          view.setResizeCallback(this.updateSceneSize.bind(this)); //prevent resize event from common.js show button full screen

          window.addEventListener('resize', this._updateButtonFullScreen);
          this.updateSceneSize();
        };

        _proto._updateButtonFullScreen = function _updateButtonFullScreen() {
          gfDataStore.instance && showFullScreenButton(gfDataStore.instance.getCurrentSceneName() != gfBaseConfig.instance.SceneName.Game);
        };

        _proto.updateSceneSize = function updateSceneSize() {
          view.setOrientation(macro.ORIENTATION_PORTRAIT);
          if (!gfBaseConfig.instance || !gfBaseConfig.instance.realSize) return;
          var _Config1985$instance = Config1985.instance,
              realSize = _Config1985$instance.realSize,
              AppSize = _Config1985$instance.AppSize,
              SceneBox = _Config1985$instance.SceneBox;
          var designResolution = new Size(AppSize.Width, AppSize.Height);
          var maxDesignRatio = AppSize.Width / AppSize.Height;
          var frameSize = view.getFrameSize();
          var screenRatio = frameSize.width / frameSize.height;
          var canvasSize = view.getCanvasSize();

          if (screenRatio > maxDesignRatio) {
            view.setDesignResolutionSize(designResolution.width, designResolution.height, ResolutionPolicy.FIXED_HEIGHT);
            realSize.Width = designResolution.width;
            realSize.Height = designResolution.height;
          } else {
            view.setDesignResolutionSize(designResolution.width, designResolution.height, ResolutionPolicy.FIXED_WIDTH);
            var widthScale = AppSize.Width / canvasSize.width;
            realSize.Height = math.clamp(canvasSize.height * widthScale, AppSize.MaxHeight, AppSize.Height);
          }

          SceneBox.Bottom = -(realSize.Height - AppSize.Height) / 2;
          SceneBox.Top = SceneBox.Bottom + realSize.Height;
          this.node.getComponent(UITransform).height = realSize.Height;
          gfEventEmitter.instance && gfEventEmitter.instance.emit(gfBaseEvents.COMMON.ON_SCREEN_RESIZE);
          this.scheduleOnce(this._resizeFullScreenButton, 0.1);
        };

        _proto._resizeFullScreenButton = function _resizeFullScreenButton() {
          this.unscheduleAllCallbacks();
          var div_full_screen = document.getElementById('div_full_screen');
          var enterFullscreen = document.getElementById('enterFullscreen');
          var exitFullscreen = document.getElementById('exitFullscreen');

          if (div_full_screen) {
            if (enterFullscreen) {
              enterFullscreen.style.top = "0";
              enterFullscreen.style.left = "0";
              enterFullscreen.style.width = "100%";
              enterFullscreen.style.height = "100%";
              enterFullscreen.style.backgroundSize = "contain";
            }

            if (exitFullscreen) {
              exitFullscreen.style.top = "0";
              exitFullscreen.style.left = "0";
              exitFullscreen.style.width = "100%";
              exitFullscreen.style.height = "100%";
              exitFullscreen.style.backgroundSize = "contain";
            }

            div_full_screen.style.position = "absolute";
            div_full_screen.style.width = "30px";
            div_full_screen.style.height = "30px";

            if (window.innerWidth > window.innerHeight) {
              div_full_screen.style.top = "70%";
              div_full_screen.style.left = "10px";
            } else {
              div_full_screen.style.top = "10px";
              div_full_screen.style.left = "23%";
            }
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (!gfBaseConfig.instance) {
            window.removeEventListener('resize', this._updateButtonFullScreen);
            view.setResizeCallback(null);
          }
        };

        return gfResizeWindowPortrait;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BorisStatic1988.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfActionHelper.ts', './gfNode.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, cclegacy, _decorator, UIOpacity, tween, Tween, fadeOut, gfNode;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UIOpacity = module.UIOpacity;
      tween = module.tween;
      Tween = module.Tween;
    }, function (module) {
      fadeOut = module.fadeOut;
    }, function (module) {
      gfNode = module.default;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "fe38aZN+rNFT4t5vUCT7gdo", "BorisStatic1988", undefined);

      var ccclass = _decorator.ccclass;
      var BorisStatic1988 = exports('BorisStatic1988', (_dec = ccclass('BorisStatic1988'), _dec(_class = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(BorisStatic1988, _gfNode);

        function BorisStatic1988() {
          return _gfNode.apply(this, arguments) || this;
        }

        var _proto = BorisStatic1988.prototype;

        _proto.play = function play(callback) {
          var _this = this;

          if (callback === void 0) {
            callback = null;
          }

          var opacityCompo = this.getComponent(UIOpacity);
          opacityCompo.opacity = 150;
          tween(this.node).then(fadeOut(0.25)).call(function () {
            callback && callback();

            _this.returnPool();
          }).start();
        };

        _proto.returnPool = function returnPool() {
          Tween.stopAllByTarget(this.node);
          var opacityCompo = this.getComponent(UIOpacity);
          opacityCompo.opacity = 0;

          _gfNode.prototype.returnPool.call(this);
        };

        return BorisStatic1988;
      }(gfNode)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfFishLayer.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './utils.ts', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfReferenceManager.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Prefab, Component, convertAssetArrayToObject, gfBaseEvents, gfEventEmitter, gfReferenceManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      convertAssetArrayToObject = module.convertAssetArrayToObject;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfReferenceManager = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "fe4e8FoSmVLkbx8Xyl0v6et", "gfFishLayer", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfFishLayer = exports('default', (_dec = ccclass('gfFishLayer'), _dec2 = property(Prefab), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(gfFishLayer, _Component);

        function gfFishLayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "listPrefabFish", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "fishObjects", {});

          return _this;
        }

        var _proto = gfFishLayer.prototype;

        _proto.onLoad = function onLoad() {
          gfReferenceManager.instance.setData({
            FishLayer: this.node
          });

          if (this.listPrefabFish) {
            this.fishObjects = convertAssetArrayToObject(this.listPrefabFish);
          }

          this.node['getPrefabFishByKind'] = this.getPrefabFishByKind.bind(this); // turn on debug physic
          // PhysicsSystem2D.instance.enable = true;
          // PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.All;
          // this.scheduleOnce(this.createFishGroupTest, 2); 
        };

        _proto.createFishGroupTest = function createFishGroupTest() {
          var fishCount = [270];
          var fishKind = [2];
          var ParadeKind = 0;
          var ListFish = [];
          var index = 0;

          for (var i = 0; i < fishCount.length; ++i) {
            for (var j = 0; j < fishCount[i]; ++j) {
              ListFish.push({
                FishID: ++index,
                FishKind: fishKind[i]
              });
            }
          }

          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_FISH_GROUP, {
            ParadeKind: ParadeKind,
            ListFish: ListFish
          });
        };

        _proto.getPrefabFishByKind = function getPrefabFishByKind(fishKind) {
          return this.fishObjects[fishKind];
        };

        return gfFishLayer;
      }(Component), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "listPrefabFish", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: null
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CommandController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './DataStore1985.ts', './Config1985.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, systemEvent, SystemEvent, Component, KeyCode, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, EventsCode1985, DataStore1985, Config1985;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      systemEvent = module.systemEvent;
      SystemEvent = module.SystemEvent;
      Component = module.Component;
      KeyCode = module.KeyCode;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      DataStore1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "fe5753d6kZLbaRIvdfmOTIK", "CommandController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var STATE_KEY;

      (function (STATE_KEY) {
        STATE_KEY["KEY_DOWN"] = "key_down";
        STATE_KEY["KEY_UP"] = "key_up";
      })(STATE_KEY || (STATE_KEY = {}));

      var CONFIG_SLOT = {
        KEY_DOWN: 0,
        KEY_UP: 1
      };
      var CommandController1985 = exports('default', (_dec = ccclass('CommandController1985'), _dec(_class = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CommandController1985, _Component);

        function CommandController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "remote", void 0);

          _defineProperty(_assertThisInitialized(_this), "HUD_Controller", null);

          return _this;
        }

        var _proto12 = CommandController1985.prototype;

        _proto12.onLoad = function onLoad() {
          this.registerHotKeyEvents();
          registerEvent(EventsCode1985.HOT_KEY_EVENT.UPDATE_HOT_KEY, this.onUpdateHotKey, this);
          registerEvent(EventsCode1985.HUD.RESUME_LISTENER_KEY_EVENT, this.registerHotKeyEvents, this);
          registerEvent(EventsCode1985.HUD.PAUSE_LISTENER_KEY_EVENT, this.removeHotKeyEvents, this);
          this.HUD_Controller = new HUD_Controller();
          this.remote = new Map();
          this.remote[Config1985.instance.Controller.AUTO_FIRE.id] = new SimpleRemoteControl();
          this.remote[Config1985.instance.Controller.AUTO_FIRE.id].setCommand(CONFIG_SLOT.KEY_DOWN, new FireCommand(this.HUD_Controller));
          this.remote[Config1985.instance.Controller.AUTO_FIRE.id].setKeyCode(DataStore1985.instance.Controller[Config1985.instance.Controller.AUTO_FIRE.id].Hotkey);
          this.remote[Config1985.instance.Controller.SPECIAL_SKILL.id] = new SimpleRemoteControl();
          this.remote[Config1985.instance.Controller.SPECIAL_SKILL.id].setCommand(CONFIG_SLOT.KEY_DOWN, new SkillUltimateCommand(this.HUD_Controller));
          this.remote[Config1985.instance.Controller.SPECIAL_SKILL.id].setKeyCode(DataStore1985.instance.Controller[Config1985.instance.Controller.SPECIAL_SKILL.id].Hotkey);
          this.remote[Config1985.instance.Controller.INCREASE_BET.id] = new SimpleRemoteControl();
          this.remote[Config1985.instance.Controller.INCREASE_BET.id].setCommand(CONFIG_SLOT.KEY_DOWN, new IncreaseBetCommand(this.HUD_Controller));
          this.remote[Config1985.instance.Controller.INCREASE_BET.id].setKeyCode(DataStore1985.instance.Controller[Config1985.instance.Controller.INCREASE_BET.id].Hotkey);
          this.remote[Config1985.instance.Controller.DECREASE_BET.id] = new SimpleRemoteControl();
          this.remote[Config1985.instance.Controller.DECREASE_BET.id].setCommand(CONFIG_SLOT.KEY_DOWN, new DecreaseBetCommand(this.HUD_Controller));
          this.remote[Config1985.instance.Controller.DECREASE_BET.id].setKeyCode(DataStore1985.instance.Controller[Config1985.instance.Controller.DECREASE_BET.id].Hotkey);
          this.remote[Config1985.instance.Controller.OPEN_MENU.id] = new SimpleRemoteControl();
          this.remote[Config1985.instance.Controller.OPEN_MENU.id].setCommand(CONFIG_SLOT.KEY_DOWN, new OpenMenuCommand(this.HUD_Controller));
          this.remote[Config1985.instance.Controller.OPEN_MENU.id].setKeyCode(DataStore1985.instance.Controller[Config1985.instance.Controller.OPEN_MENU.id].Hotkey);
          return; // remove below func
        };

        _proto12.registerHotKeyEvents = function registerHotKeyEvents() {
          this.onResetAllState();
          systemEvent.on(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
          systemEvent.on(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
        };

        _proto12.removeHotKeyEvents = function removeHotKeyEvents() {
          systemEvent.off(SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);
          systemEvent.off(SystemEvent.EventType.KEY_UP, this.onKeyUp, this);
        };

        _proto12.onResetAllState = function onResetAllState() {
          for (var key in this.remote) {
            this.remote[key].setStateKey(STATE_KEY.KEY_UP);
          }
        };

        _proto12.onUpdateHotKey = function onUpdateHotKey(id, newKey) {
          this.remote[id].setKeyCode(newKey);
        };

        _proto12.onKeyDown = function onKeyDown(event) {
          for (var key in this.remote) {
            if (this.remote[key].keyCode == event.keyCode) {
              this.remote[key].buttonDown();
            }
          }
        };

        _proto12.onKeyUp = function onKeyUp(event) {
          for (var key in this.remote) {
            if (this.remote[key].keyCode == event.keyCode) {
              this.remote[key].buttonUp();
            }
          }
        };

        _proto12.onDestroy = function onDestroy() {
          this.removeHotKeyEvents();
          removeEvents(this);
        };

        return CommandController1985;
      }(Component), _temp)) || _class));

      var HUD_Controller = /*#__PURE__*/function () {
        function HUD_Controller() {}

        var _proto = HUD_Controller.prototype;
        /**
         * autoFire
         */

        _proto.autoFire = function autoFire() {
          gfEventEmitter.instance.emit(EventsCode1985.HOT_KEY_EVENT.AUTO_FIRE);
        }
        /**
         * fireSkillUltimate
         */
        ;

        _proto.fireSkillUltimate = function fireSkillUltimate() {
          gfEventEmitter.instance.emit(EventsCode1985.HOT_KEY_EVENT.SKILL_ULTIMATE);
        }
        /**
         * increaseBet
         */
        ;

        _proto.increaseBet = function increaseBet() {
          gfEventEmitter.instance.emit(EventsCode1985.HOT_KEY_EVENT.INCREASE_BET);
        }
        /**
         * decreaseBet
         */
        ;

        _proto.decreaseBet = function decreaseBet() {
          gfEventEmitter.instance.emit(EventsCode1985.HOT_KEY_EVENT.DECREASE_BET);
        }
        /**
         * openMenu
         */
        ;

        _proto.openMenu = function openMenu() {
          gfEventEmitter.instance.emit(EventsCode1985.HOT_KEY_EVENT.OPEN_MENU);
        }
        /**
         * openSetting
         */
        ;

        _proto.openSetting = function openSetting() {
          gfEventEmitter.instance.emit(gfBaseEvents.POPUP.POPUP_SETTING);
        }
        /**
         * openInfo
         */
        ;

        _proto.openInfo = function openInfo() {// gfEventEmitter.instance.emit(EventCode.POPUP.POPUP_INFO);
        }
        /**
         * openJackpotHistory
         */
        ;

        _proto.openJackpotHistory = function openJackpotHistory() {// gfEventEmitter.instance.emit(EventCode.POPUP.POPUP_JACKPOT_HISTORY);
        }
        /**
         * exitRoom
         */
        ;

        _proto.exitRoom = function exitRoom() {
          gfEventEmitter.instance.emit(gfBaseEvents.COMMON.SEND_EXIT_GAME_SERVER);
        };

        return HUD_Controller;
      }();

      var FireCommand = exports('FireCommand', /*#__PURE__*/function () {
        function FireCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto2 = FireCommand.prototype;

        _proto2.execute = function execute() {
          this._controller.autoFire();
        };

        return FireCommand;
      }());
      var SkillUltimateCommand = exports('SkillUltimateCommand', /*#__PURE__*/function () {
        function SkillUltimateCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto3 = SkillUltimateCommand.prototype;

        _proto3.execute = function execute() {
          this._controller.fireSkillUltimate();
        };

        return SkillUltimateCommand;
      }());
      var IncreaseBetCommand = exports('IncreaseBetCommand', /*#__PURE__*/function () {
        function IncreaseBetCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto4 = IncreaseBetCommand.prototype;

        _proto4.execute = function execute() {
          this._controller.increaseBet();
        };

        return IncreaseBetCommand;
      }());
      var DecreaseBetCommand = exports('DecreaseBetCommand', /*#__PURE__*/function () {
        function DecreaseBetCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto5 = DecreaseBetCommand.prototype;

        _proto5.execute = function execute() {
          this._controller.decreaseBet();
        };

        return DecreaseBetCommand;
      }());
      var OpenMenuCommand = exports('OpenMenuCommand', /*#__PURE__*/function () {
        function OpenMenuCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto6 = OpenMenuCommand.prototype;

        _proto6.execute = function execute() {
          this._controller.openMenu();
        };

        return OpenMenuCommand;
      }());
      var OpenSettingCommand = exports('OpenSettingCommand', /*#__PURE__*/function () {
        function OpenSettingCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto7 = OpenSettingCommand.prototype;

        _proto7.execute = function execute() {
          this._controller.openSetting();
        };

        return OpenSettingCommand;
      }());
      var OpenInfoCommand = exports('OpenInfoCommand', /*#__PURE__*/function () {
        function OpenInfoCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto8 = OpenInfoCommand.prototype;

        _proto8.execute = function execute() {
          this._controller.openInfo();
        };

        return OpenInfoCommand;
      }());
      var OpenJackpotHistoryCommand = exports('OpenJackpotHistoryCommand', /*#__PURE__*/function () {
        function OpenJackpotHistoryCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto9 = OpenJackpotHistoryCommand.prototype;

        _proto9.execute = function execute() {
          this._controller.openJackpotHistory();
        };

        return OpenJackpotHistoryCommand;
      }());
      var ExitRoomCommand = exports('ExitRoomCommand', /*#__PURE__*/function () {
        function ExitRoomCommand(_controller) {
          _defineProperty(this, "_controller", void 0);

          this._controller = _controller;
        }

        var _proto10 = ExitRoomCommand.prototype;

        _proto10.execute = function execute() {
          this._controller.exitRoom();
        };

        return ExitRoomCommand;
      }());

      var SimpleRemoteControl = /*#__PURE__*/function () {
        function SimpleRemoteControl() {
          _defineProperty(this, "slot", []);

          _defineProperty(this, "stateKey", STATE_KEY.KEY_UP);

          _defineProperty(this, "keyCode", KeyCode.NONE);
        }

        var _proto11 = SimpleRemoteControl.prototype;

        _proto11.SimpleRemoteControl = function SimpleRemoteControl() {};

        _proto11.setCommand = function setCommand(indexCommand, command) {
          if (indexCommand === void 0) {
            indexCommand = 0;
          } // set the command the remote will
          // execute


          this.slot[indexCommand] = command;
        };

        _proto11.setKeyCode = function setKeyCode(keyCode) {
          this.keyCode = keyCode;
        };

        _proto11.setStateKey = function setStateKey(stateKey) {
          this.stateKey = stateKey;
        };

        _proto11.buttonDown = function buttonDown() {
          if (!this.slot[CONFIG_SLOT.KEY_DOWN] || this.stateKey == STATE_KEY.KEY_DOWN) {
            return;
          }

          this.stateKey = STATE_KEY.KEY_DOWN;
          this.slot[CONFIG_SLOT.KEY_DOWN].execute();
        };

        _proto11.buttonUp = function buttonUp() {
          if (this.slot[CONFIG_SLOT.KEY_UP]) {
            this.slot[CONFIG_SLOT.KEY_UP].execute();
          }

          this.stateKey = STATE_KEY.KEY_UP;
        };

        return SimpleRemoteControl;
      }();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EnemySP2Move.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './MoveBySpine1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Node, UITransform, MoveBySpine1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      UITransform = module.UITransform;
    }, function (module) {
      MoveBySpine1985 = module.MoveBySpine1985;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _temp;

      cclegacy._RF.push({}, "fef5drP8CdPDY1Lmc4z8n07", "EnemySP2Move", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnemySP2Move = exports('EnemySP2Move', (_dec = ccclass('EnemySP2Move'), _dec2 = property(Node), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_MoveBySpine) {
        _inheritsLoose(EnemySP2Move, _MoveBySpine);

        function EnemySP2Move() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _MoveBySpine.call.apply(_MoveBySpine, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "particleMove", _descriptor, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "particleOffsetY", -20);

          return _this;
        }

        var _proto = EnemySP2Move.prototype;

        _proto.playAnimation = function playAnimation(animationName) {
          this.fishAnim.setAnimation(0, animationName, false);
          this.fishAnim.setAnimation(1, "animation", true);
          this.fishAnim.setTrackCompleteListener(this.fishAnim.getCurrent(0), this.onComplete);
        };

        _proto.onDie = function onDie(data) {
          this.fishAnim.clearTracks();
          this.fishAnim.setCompleteListener(function () {});
          this.fishAnim.paused = true;
          this.isDie = true;
          this.onComplete && this.onComplete();
        };

        _proto.onWaitDie = function onWaitDie() {
          this.fishAnim.getCurrent(0).timeScale = 0;
        };

        _proto.update = function update(dt) {
          _MoveBySpine.prototype.update.call(this, dt);

          if (this.particleMove && !this.isDie) {
            var _this$node$getCompone = this.node.getComponent(UITransform).convertToNodeSpaceAR(this.getWorldPosition()),
                x = _this$node$getCompone.x,
                y = _this$node$getCompone.y;

            this.particleMove.setPosition(x, y + this.particleOffsetY, 0);
          }
        };

        return EnemySP2Move;
      }(MoveBySpine1985), _temp), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "particleMove", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillUltimateController1985.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfEventEmitter.ts', './gfUtilities.ts', './EventsCode1985.ts', './ReferenceManager1985.ts', './Config1985.ts'], function (exports) {
  'use strict';

  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _defineProperty, cclegacy, _decorator, Button, sp, Sprite, Color, sys, Tween, tween, Component, gfBaseEvents, gfEventEmitter, registerEvent, removeEvents, EventsCode1985, ReferenceManager1985, Config1985;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _defineProperty = module.defineProperty;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      sp = module.sp;
      Sprite = module.Sprite;
      Color = module.Color;
      sys = module.sys;
      Tween = module.Tween;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      registerEvent = module.registerEvent;
      removeEvents = module.removeEvents;
    }, function (module) {
      EventsCode1985 = module.default;
    }, function (module) {
      ReferenceManager1985 = module.default;
    }, function (module) {
      Config1985 = module.default;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _temp;

      cclegacy._RF.push({}, "ff1a3rmNuxASrCi9IH17Md4", "SkillUltimateController1985", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillUltimateController1985 = exports('SkillUltimateController1985', (_dec = ccclass('SkillUltimateController1985'), _dec2 = property(Button), _dec3 = property(sp.Skeleton), _dec4 = property(Sprite), _dec5 = property(Sprite), _dec(_class = (_class2 = (_temp = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillUltimateController1985, _Component);

        function SkillUltimateController1985() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_assertThisInitialized(_this), "btnActive", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "spineButtonFX", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "percent", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_assertThisInitialized(_this), "glowFX", _descriptor4, _assertThisInitialized(_this));

          _defineProperty(_assertThisInitialized(_this), "typeAircraft", null);

          _defineProperty(_assertThisInitialized(_this), "levelSkill", 0);

          _defineProperty(_assertThisInitialized(_this), "PercentDisplayRange", [[0, 0.28], [0.4, 0.6], [0.71, 0.92]]);

          return _this;
        }

        var _proto = SkillUltimateController1985.prototype;

        _proto.setOpacity = function setOpacity(opacity) {
          this.spineButtonFX.color = new Color(255, 255, 255, opacity);
        };

        _proto.onUpdatePositionBySetting = function onUpdatePositionBySetting() {
          this.node.setPosition(-this.node.position.x, this.node.position.y, 0);
        };

        _proto.onLoad = function onLoad() {
          this.btnActive.enabled = sys.isMobile;
          this.initEvents();
          var fakeID = 0;
          this.initDataSkillUltimate(fakeID);
          this.hideAllGlowFX();
        };

        _proto.hideAllGlowFX = function hideAllGlowFX() {
          this.glowFX[0].color = new Color(255, 255, 255, 0);
          this.glowFX[1].color = new Color(255, 255, 255, 0);
          this.glowFX[2].color = new Color(255, 255, 255, 0);
        };

        _proto.initEvents = function initEvents() {
          registerEvent(EventsCode1985.GAME_LAYER.AIRCRAFT_DIE, this.reset, this);
          registerEvent(gfBaseEvents.GAME_LAYER.CATCH_FISH, this.updatePercentSkillUltimate, this);
          registerEvent(EventsCode1985.EFFECT_LAYER.SKILL_ULTIMATE_DONE, this.skillUltimateDone, this);
          registerEvent(EventsCode1985.HOT_KEY_EVENT.SKILL_ULTIMATE, this.onActiveSkillUltimate, this);
          registerEvent(EventsCode1985.HUD.RESUME_PERCENT_SKILL_ULTIMATE, this.resumePercentSkillUltimate, this);
          registerEvent(EventsCode1985.GAME_LAYER.PLAYER_PICK_PIECE_ENERGY, this.updatePercentSkillUltimate, this);
        };

        _proto.initDataSkillUltimate = function initDataSkillUltimate(id) {
          this.typeAircraft = Config1985.instance.SpaceShipConfig[id];
        };

        _proto.updatePercentSkillUltimate = function updatePercentSkillUltimate(data) {
          var DeskStation = data.DeskStation;
          if (!data.SkillSpecialInfo) return;
          var _data$SkillSpecialInf = data.SkillSpecialInfo,
              Level = _data$SkillSpecialInf.Level,
              Points = _data$SkillSpecialInf.Points;
          var player = ReferenceManager1985.instance.getPlayerByDeskStation(DeskStation);

          if (player.isMe) {
            this.playGlowFX();
            this.percent.fillRange = this.convertPointsToPercent(Level, Points);

            if (this.levelSkill !== Level) {
              this.levelSkill = Level;
              gfEventEmitter.instance.emit(EventsCode1985.SOUND.UPDATE_LEVEL_SKILL_ULTIMATE, this.levelSkill);
              this.spineButtonFX.setAnimation(0, "lv_" + this.levelSkill, true);
            }
          }
        };

        _proto.playGlowFX = function playGlowFX() {
          if (this.levelSkill < 3) {
            Tween.stopAllByTarget(this.glowFX[this.levelSkill].color);
            this.glowFX[0].color = new Color(255, 255, 255, 170);
            var time = 0.2;
            tween(this.glowFX[this.levelSkill].color).to(time, {
              a: 255
            }).to(time, {
              a: 0
            }).start();
          }
        };

        _proto.resumePercentSkillUltimate = function resumePercentSkillUltimate(data) {
          if (!data) return;
          var Level = data.Level,
              Points = data.Points;
          this.levelSkill = Level;
          this.percent.fillRange = this.convertPointsToPercent(Level, Points);
          this.spineButtonFX.setAnimation(0, "lv_" + this.levelSkill, true);
        };

        _proto.convertPointsToPercent = function convertPointsToPercent(level, point) {
          var SkillSpecialMilestone = Config1985.instance.SkillSpecialMilestone;
          var startPoints = [0].concat(SkillSpecialMilestone);
          var currentLevelDisplayRange = this.PercentDisplayRange[level];
          var currentLevelPercent = (point - startPoints[level]) / (startPoints[level + 1] - startPoints[level]);
          return currentLevelDisplayRange[0] + currentLevelPercent * (currentLevelDisplayRange[1] - currentLevelDisplayRange[0]);
        };

        _proto.onActiveSkillUltimate = function onActiveSkillUltimate() {
          if (this.levelSkill < 1) {
            gfEventEmitter.instance.emit(EventsCode1985.SOUND.CANCEL_BUTTON);
            return;
          }

          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.PLAYER_SEND_ACTIVE_SKILL_ULTIMATE, {
            SkillID: Config1985.instance.SkillConfig.SKILL_ULTIMATE
          });
        };

        _proto.skillUltimateDone = function skillUltimateDone(data) {
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.OPEN_FEATURE_FIRE, data);
          gfEventEmitter.instance.emit(EventsCode1985.GAME_LAYER.AIRCRAFT_REVIVAL, data);
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RESUME_AUTO_FIRE);
        };

        _proto.reset = function reset() {
          this.levelSkill = 0;
          this.percent.fillRange = 0;
          this.spineButtonFX.setAnimation(0, "lv_" + this.levelSkill, true);
        };

        _proto.onDestroy = function onDestroy() {
          removeEvents(this);
        };

        return SkillUltimateController1985;
      }(Component), _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnActive", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spineButtonFX", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "percent", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "glowFX", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gfBaseFish.ts", ['./_rollupPluginModLoBabelHelpers.js', 'cc', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfReferenceManager.ts', './gfDataStore.ts', './gfNode.ts', './gfMoveByThreePoints.ts'], function (exports) {
  'use strict';

  var _inheritsLoose, _defineProperty, _assertThisInitialized, cclegacy, _decorator, Color, v2, BoxCollider2D, tween, v3, misc, UITransform, Tween, gfBaseEvents, fadeOut, delay, scaleTo, call, rotateTo, gfEventEmitter, gfBaseConfig, convertFishCoordinateSystem, v2Distance, getPointBetweenTwoPointByPercent, getRotation, isPointInScreen, SetZIndex, gfReferenceManager, gfDataStore, gfNode, gfMoveByThreePoints;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _defineProperty = module.defineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Color = module.Color;
      v2 = module.v2;
      BoxCollider2D = module.BoxCollider2D;
      tween = module.tween;
      v3 = module.v3;
      misc = module.misc;
      UITransform = module.UITransform;
      Tween = module.Tween;
    }, function (module) {
      gfBaseEvents = module.default;
    }, function (module) {
      fadeOut = module.fadeOut;
      delay = module.delay;
      scaleTo = module.scaleTo;
      call = module.call;
      rotateTo = module.rotateTo;
    }, function (module) {
      gfEventEmitter = module.default;
    }, function (module) {
      gfBaseConfig = module.default;
    }, function (module) {
      convertFishCoordinateSystem = module.convertFishCoordinateSystem;
      v2Distance = module.v2Distance;
      getPointBetweenTwoPointByPercent = module.getPointBetweenTwoPointByPercent;
      getRotation = module.getRotation;
      isPointInScreen = module.isPointInScreen;
      SetZIndex = module.SetZIndex;
    }, function (module) {
      gfReferenceManager = module.default;
    }, function (module) {
      gfDataStore = module.default;
    }, function (module) {
      gfNode = module.default;
    }, function (module) {
      gfMoveByThreePoints = module.default;
    }],
    execute: function () {
      var _dec, _class, _temp;

      cclegacy._RF.push({}, "ff2e0CgJnFIOIxIH4G1Rti3", "gfBaseFish", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var gfBaseFish = exports('gfBaseFish', (_dec = ccclass('gfBaseFish'), _dec(_class = (_temp = /*#__PURE__*/function (_gfNode) {
        _inheritsLoose(gfBaseFish, _gfNode);

        function gfBaseFish() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _gfNode.call.apply(_gfNode, [this].concat(args)) || this;

          _defineProperty(_assertThisInitialized(_this), "NORMAL_COLOR", new Color(255, 255, 255, 255));

          _defineProperty(_assertThisInitialized(_this), "HIT_COLOR", new Color(230, 30, 30, 255));

          _defineProperty(_assertThisInitialized(_this), "_maxWidth", 0);

          _defineProperty(_assertThisInitialized(_this), "_maxHeight", 0);

          _defineProperty(_assertThisInitialized(_this), "_offsetX", 0);

          _defineProperty(_assertThisInitialized(_this), "_offsetY", 0);

          _defineProperty(_assertThisInitialized(_this), "_FishID", 0);

          _defineProperty(_assertThisInitialized(_this), "_FishKind", 0);

          _defineProperty(_assertThisInitialized(_this), "_buildTick", 0);

          _defineProperty(_assertThisInitialized(_this), "_isFishGroup", false);

          _defineProperty(_assertThisInitialized(_this), "_timeLost", 0);

          _defineProperty(_assertThisInitialized(_this), "_isDie", false);

          _defineProperty(_assertThisInitialized(_this), "_isOutScreen", true);

          _defineProperty(_assertThisInitialized(_this), "_skipRotate", false);

          _defineProperty(_assertThisInitialized(_this), "_lastPos", null);

          _defineProperty(_assertThisInitialized(_this), "_targetPoint", v2(0, 0));

          _defineProperty(_assertThisInitialized(_this), "_visibleSize", v2(0, 0));

          _defineProperty(_assertThisInitialized(_this), "_hitTime", []);

          _defineProperty(_assertThisInitialized(_this), "_dataCatchFish", null);

          _defineProperty(_assertThisInitialized(_this), "_moveOutAction", null);

          _defineProperty(_assertThisInitialized(_this), "_skipFlipY", false);

          _defineProperty(_assertThisInitialized(_this), "speed", 100);

          _defineProperty(_assertThisInitialized(_this), "FishMultiple", 1);

          _defineProperty(_assertThisInitialized(_this), "moveAction", void 0);

          _defineProperty(_assertThisInitialized(_this), "zIndex", 0);

          return _this;
        }

        var _proto = gfBaseFish.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.initAssets = function initAssets(config) {
          this.speed = config.speed;
          this.FishMultiple = config.FishMultiple;
          this.setUpBoxColliders(config.BoxCollider);
          this.updateZIndex(config.zIndex);
          this._skipRotate = !!config.skipRotate;

          if (config.targetPoint) {
            this._targetPoint = config.targetPoint;
          }

          this.updateVisibleSize(config.visibleSize);
        };

        _proto.setUpBoxColliders = function setUpBoxColliders(boxes) {
          var _this2 = this;

          var fishColliderBoxes = this.node.getComponents(BoxCollider2D);

          for (var i = 0; i < fishColliderBoxes.length; ++i) {
            fishColliderBoxes[i].enabled = false;
          }

          if (boxes.constructor === Array) {
            boxes.forEach(function (configBox, i) {
              var fishBox = fishColliderBoxes[i];

              if (!fishBox) {
                fishBox = _this2.node.addComponent(BoxCollider2D);
                fishBox.group = fishColliderBoxes[0].group;
              }

              _this2.setBoxCollider(fishBox, configBox);
            });
          } else {
            this.setBoxCollider(fishColliderBoxes[0], boxes);
          }
        };

        _proto.updateVisibleSize = function updateVisibleSize(visibleSize) {
          this._maxWidth = this.node.getComponent(BoxCollider2D).size.width * this.node.scale.x;
          this._maxHeight = this.node.getComponent(BoxCollider2D).size.height * this.node.scale.y;
          this._offsetX = this.node.getComponent(BoxCollider2D).offset.x * this.node.scale.x;
          this._offsetY = this.node.getComponent(BoxCollider2D).offset.y * this.node.scale.y;

          if (visibleSize) {
            this._visibleSize = visibleSize;
          } else {
            var x = 2 * this._maxWidth + this._offsetX;
            var y = 2 * this._maxHeight + this._offsetY;
            this._visibleSize = v2(x, y);
          }
        };

        _proto.getVisibleSize = function getVisibleSize() {
          return this._visibleSize;
        };

        _proto.setBoxCollider = function setBoxCollider(box, config) {
          box.enabled = true;
          box.offset.x = config.x;
          box.offset.y = config.y;
          box.size.width = config.width;
          box.size.height = config.height;
        };

        _proto.initFishData = function initFishData(data) {
          this._FishID = data.FishID;
          this._FishKind = data.FishKind;
          this._isFishGroup = !!data.isFishGroup;
          this._skipFlipY = data.skipFlipY ? data.skipFlipY : false;
          this._isDie = false;
          this._moveOutAction = data.moveOutAction;
          this.updateZIndex(data.zIndex);

          if (data.Position) {
            this._buildTick = data.BuildTick;
            this._timeLost = Math.max(0, (gfDataStore.instance.getTime() - this._buildTick) / 1000);
            this.moveByPoints(data.Position, data.isResume);
          }
        };

        _proto.moveByPoints = function moveByPoints(points, isResume) {
          var _this3 = this;

          this.moveAction = tween(this.node);
          var moveTime = 0;

          if (gfDataStore.instance.getSelfDeskStation() > 1) {
            convertFishCoordinateSystem(points);
          }

          var p1 = v2(points[0].PosX, points[0].PosY);
          var p2 = v2(points[1].PosX, points[1].PosY);

          if (points.length === 2) {
            moveTime = v2Distance(p1, p2) / this.speed;

            if (isResume) {
              var fPoint = getPointBetweenTwoPointByPercent(p1, p2, this._timeLost / moveTime);
              this.node.setPosition(v3(fPoint.x, fPoint.y, 0));
            } else {
              this.node.setPosition(v3(p1.x, p1.y, 0));
            }

            moveTime = Math.max(moveTime - this._timeLost, 0);
            this.moveAction.then(tween().to(moveTime, {
              position: v3(p2.x, p2.y, 0)
            }));
          } else if (points.length === 3) {
            var p3 = v2(points[2].PosX, points[2].PosY);
            this.node.setPosition(v3(p1.x, p1.y, 0));
            var config = {
              speed: this.speed,
              points: [p1, p2, p3],
              timeSpent: this._timeLost,
              isResume: isResume
            };
            this.moveAction.then(gfMoveByThreePoints(config));
          }

          this.moveAction.call(function () {
            _this3.onDie();
          });
          this.moveAction.start();
        };

        _proto.update = function update(dt) {
          if (this._isDie) {
            return;
          }

          this.updateAngle();
          this.updateOutScreen();
        };

        _proto.updateAngle = function updateAngle() {
          if (this._lastPos) {
            var curP = this.node.getPosition();
            var baseScaleX = Math.abs(this.node.scale.x);

            if (this._lastPos.x !== curP.x || this._lastPos.y !== curP.y) {
              if (this._skipRotate) {
                this.node.scale.set(this._lastPos.x > curP.x ? -baseScaleX : baseScaleX, this.node.scale.y, this.node.scale.z);
              } else {
                var angle = getRotation(curP, this._lastPos);
                this.updateFlipY(angle);
                this.node.angle = angle;
              }
            }
          }

          this._lastPos = this.node.getPosition();
        };

        _proto.updateFlipY = function updateFlipY(angle) {
          if (this._skipFlipY) return;
          var baseScaleY = Math.abs(this.node.scale.y);
          this.node.scale.set(this.node.scale.x, angle > 90 || angle < -90 ? -baseScaleY : baseScaleY, this.node.scale.z);
        };

        _proto.updateOutScreen = function updateOutScreen() {
          if (isPointInScreen(this.node.getPosition())) {
            this._isOutScreen = false;
            this.setOpacity(255);
          } else {
            var wLeftCenter = this.convertToRelativePoint(v2(-this._maxWidth / 2 + this._offsetX, 0));
            var wRightCenter = this.convertToRelativePoint(v2(this._maxWidth / 2 + this._offsetX, 0));
            this._isOutScreen = !(isPointInScreen(wLeftCenter) || isPointInScreen(wRightCenter));

            if (this._isOutScreen) {
              this.updateOpacity();
            } else {
              this.setOpacity(255);
            }
          }
        };

        _proto.convertToRelativePoint = function convertToRelativePoint(point) {
          var radian = misc.degreesToRadians(this.node.angle);
          var x = this.node.position.x + point.x * Math.cos(radian) - point.y * Math.sin(radian);
          var y = this.node.position.y + point.x * Math.sin(radian) + point.y * Math.cos(radian);
          return v2(x, y);
        };

        _proto.updateOpacity = function updateOpacity() {
          if (this._isDie) return;
          var leftPoint = v2(-this._visibleSize.x / 2, 0);
          var rightPoint = v2(this._visibleSize.x / 2, 0);
          var wLeftCenter = this.convertToRelativePoint(leftPoint);
          var wRightCenter = this.convertToRelativePoint(rightPoint);
          var outScreen = !(isPointInScreen(wLeftCenter, 100) || isPointInScreen(wRightCenter, 100));
          this.setOpacity(outScreen ? 0 : 255);
        };

        _proto.updateZIndex = function updateZIndex(zIndex) {
          if (zIndex != undefined) {
            this.zIndex = zIndex;
            SetZIndex(this.node, zIndex);
          }
        };

        _proto.onDie = function onDie() {
          this._isDie = true;
          gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.REMOVE_FISH, this._FishID);
          this.returnPool();
        };

        _proto.resetColor = function resetColor() {};

        _proto.setColor = function setColor(color) {};

        _proto.onHit = function onHit(data) {
          var _this4 = this;

          if (data) {
            this.triggerHit(data);
          }

          this.setColor(this.HIT_COLOR);
          tween(this.node).delay(0.1).call(function () {
            _this4.resetColor();
          }).start();
        };

        _proto.onCatch = function onCatch(data) {
          var _this5 = this;

          if (data.isCheckedFakeBullet === undefined) {
            if (this.needFakeBullet(data)) {
              this.createFakeBullet(data);
              return;
            }
          }

          this.processItemInCatchFish(data);
          this.onPlayEffectWinInCatchFish(data);
          this.stopAllActions();
          this.resetColor();
          this._isDie = true;
          this.playEffectDie();
          this.moveAction = tween(this.node);

          if (this._FishKind === gfBaseConfig.instance.FISH_KIND.BOMB) {
            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.TRIGGER_BOMB, this.getLockPositionByWorldSpace());
            this.moveAction.then(fadeOut(0.1));
          } else if (data.SkillID > 0) {
            if (data.DeskStation === gfDataStore.instance.getSelfDeskStation()) {
              gfDataStore.instance.setSelfInfo({
                isLockGun: true,
                skillLock: data.SkillID
              });
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.INTERACTABLE_HUD, false);
              gfEventEmitter.instance.emit(gfBaseEvents.COMMON.RESET_TOUCH_LISTENER);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.RECEIVE_LASER_GUN, data.DeskStation);
            }

            gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.DROP_GUN_LASER, {
              fishPos: this.node.worldPosition,
              deskStation: data.DeskStation
            });
            this.moveAction.then(fadeOut(0.1));
            this.moveAction.then(delay(0.5));
            this.moveAction.then(scaleTo(0.2, 0));
          } else {
            this.moveAction.then(delay(1));
            this.moveAction.then(fadeOut(0.5));
          }

          this.moveAction.then(call(function () {
            _this5.onDie();
          }));
          this.moveAction.start();
        };

        _proto.processItemInCatchFish = function processItemInCatchFish(data) {
          if (data.itemInfo) {
            gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.FISH_DROP_ITEM, {
              itemID: data.itemInfo.ID,
              fishPos: this.node.worldPosition,
              deskStation: data.DeskStation
            });
          }
        };

        _proto.getLockPositionByNodeSpace = function getLockPositionByNodeSpace(node) {
          return node.getComponent(UITransform).convertToNodeSpaceAR(this.getLockPositionByWorldSpace());
        };

        _proto.getLockPositionByWorldSpace = function getLockPositionByWorldSpace() {
          return this.node.getComponent(UITransform).convertToWorldSpaceAR(v3(this._targetPoint.x, this._targetPoint.y, 0));
        };

        _proto.onPlayEffectWinInCatchFish = function onPlayEffectWinInCatchFish(data) {
          gfEventEmitter.instance.emit(gfBaseEvents.EFFECT_LAYER.PLAY_REWARD_EFFECT, {
            data: data,
            fishKind: this._FishKind,
            fishPos: this.getLockPositionByWorldSpace()
          });
        };

        _proto.stopAllActions = function stopAllActions() {
          Tween.stopAllByTarget(this.node);
        };

        _proto.moveOut = function moveOut(time) {
          var _this6 = this;

          if (this._isDie) return;

          if (this._isOutScreen) {
            this.onDie();
            return;
          }

          this.stopAllActions();
          this.moveAction = tween(this.node);
          var moveOutActions = [];
          this.changeAnimationSpeed(2.5);

          if (this._moveOutAction) {
            moveOutActions.push(this._moveOutAction);
          } else {
            var AppSize = gfBaseConfig.instance.AppSize;
            var yPos = (this.node.position.y > AppSize.Height / 2 ? AppSize.Height + 400 : -400) - this.node.position.y;
            var angle = this.node.position.y > AppSize.Height / 2 ? -90 : 90;

            if (this._skipRotate) {
              this.moveAction.then(delay(0.325));
            } else {
              this.moveAction.then(rotateTo(0.325, angle));
            }

            this.moveAction.then(tween().by(1.675, {
              position: v3(0, yPos, 0)
            }, {
              easing: 'sineOut'
            }));
          }

          this.moveAction.then(call(function () {
            _this6.onDie();
          }));
          this.moveAction.start();
        };

        _proto.setDie = function setDie(isDie) {
          this._isDie = isDie;
        };

        _proto.checkDie = function checkDie() {
          return this._isDie;
        };

        _proto.isAvailable = function isAvailable() {
          return !this.checkDie() && !this.checkOutScene();
        };

        _proto.getKind = function getKind() {
          return this._FishKind;
        };

        _proto.getZIndex = function getZIndex() {
          return this.zIndex;
        };

        _proto.getId = function getId() {
          return this._FishID;
        };

        _proto.setSpeed = function setSpeed(speed) {
          this.speed = speed;
        };

        _proto.getSpeed = function getSpeed() {
          return this.speed;
        };

        _proto.setOffsetX = function setOffsetX(offsetX) {
          this._offsetX = offsetX;
        };

        _proto.getOffsetX = function getOffsetX() {
          return this._offsetX;
        };

        _proto.setOffsetY = function setOffsetY(offsetY) {
          this._offsetY = offsetY;
        };

        _proto.getOffsetY = function getOffsetY() {
          return this._offsetY;
        };

        _proto.checkOutScene = function checkOutScene() {
          return this._isOutScreen;
        };

        _proto.checkFishGroup = function checkFishGroup() {
          return this._isFishGroup;
        };

        _proto.setFishMultiple = function setFishMultiple(fishMultiple) {
          this.FishMultiple = fishMultiple;
        };

        _proto.setSkipRotate = function setSkipRotate(isSkipRotate) {
          this._skipRotate = isSkipRotate;
        };

        _proto.changeAnimationSpeed = function changeAnimationSpeed(x) {};

        _proto.resetAnimationSpeed = function resetAnimationSpeed() {};

        _proto.playEffectDie = function playEffectDie() {};

        _proto.needFakeBullet = function needFakeBullet(data) {
          var player = gfReferenceManager.instance.getPlayerByDeskStation(data.DeskStation);
          if (!player) return false;

          if (data.DeskStation !== gfDataStore.instance.getSelfDeskStation() && !data.isSkill && !this._isDie && !data.SkillID && !player.isHoldingSkillGun()) {
            return this._hitTime[data.DeskStation] ? gfDataStore.instance.getTime() > this._hitTime[data.DeskStation] + 1000 : true;
          }

          return false;
        };

        _proto.createFakeBullet = function createFakeBullet(data) {
          var _this7 = this;

          this._dataCatchFish = data;
          this.scheduleOnce(function () {
            if (_this7.needFakeBullet(data)) {
              var bulletData = {
                Angle: 0,
                LockedFishID: _this7._FishID,
                isBulletFake: true,
                DeskStation: data.DeskStation,
                BulletMultiple: data.BulletMultiple,
                FishID: data.FishID
              };
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.ON_PLAYER_FIRE, bulletData);
              gfEventEmitter.instance.emit(gfBaseEvents.GAME_LAYER.CREATE_BULLET, bulletData);
            }
          }, 1);
        };

        _proto.triggerHit = function triggerHit(data) {
          this._hitTime[data.DeskStation] = gfDataStore.instance.getTime();

          if (this._dataCatchFish && this._dataCatchFish.DeskStation === data.DeskStation) {
            this._dataCatchFish.isCheckedFakeBullet = true;
            this.onCatch(this._dataCatchFish);
            this._dataCatchFish = null;
          }
        } // Called whenever object is returned to Object Pool
        ;

        _proto.unuse = function unuse() {
          Tween.stopAllByTarget(this.node);
          this.node.active = false;
          this.setOpacity(0);
          this.node.scale = v3(1, 1, 1);
          this.unscheduleAllCallbacks();
          this.resetColor();
          this.resetAnimationSpeed();
          this.node.angle = 0;
          this._isDie = true;
          this._isOutScreen = true;
          this._FishID = null;
          this._moveOutAction = null;
          this._lastPos = null;
          this._targetPoint = v2(0, 0);
          this._hitTime.length = 0;
          this._dataCatchFish = null;
          this.moveAction = null;
        };

        return gfBaseFish;
      }(gfNode), _temp)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./utils.ts', './animateNumberLabel.ts', './gfBaseEvents.ts', './gfActionHelper.ts', './gfEventEmitter.ts', './gfBaseConfig.ts', './gfUtilities.ts', './gfJackpotInfo.ts', './EventsCode1985.ts', './gfReferenceManager.ts', './gfNodePoolConfig.ts', './gfCustomDataType.ts', './gfNodePoolAssets.ts', './NodePoolAssets1985.ts', './NodePoolConfig1985.ts', './ReferenceManager1985.ts', './gfDataStore.ts', './gfNetworkGameEvent.ts', './DataStore1985.ts', './BetHandler1985.ts', './BonusController1985.ts', './Config1985.ts', './ShootController1985.ts', './gfWallet.ts', './InfoUserController1985.ts', './gfSideMenu.ts', './SideMenu1985.ts', './SkillUltimateController1985.ts', './HUDController1985.ts', './gfNetworkEvent.ts', './serviceRest.ts', './appConfig.ts', './appConfig-debug.ts', './XOCypher.ts', './loadConfigAsync.ts', './util.mjs_cjs=&original=.js', './logger.ts', './gfNetworkKeyMap.ts', './crypto-core.ts', './hashKey.ts', './gfNetworkSocket.ts', './gfNetworkParser.ts', './gfNodePool.ts', './gfPoolManager.ts', './gfNode.ts', './gfExplosionSpine.ts', './ExplodeController1985.ts', './PoolManager1985.ts', './BulletConfig1985.ts', './EnemyFireBullet.ts', './ES6FireBullet.ts', './gameCommonUtils.ts', './LoadingScreen.ts', './gfMoveByThreePoints.ts', './gfBaseFish.ts', './gfSpineFish.ts', './ListOfTips1985.ts', './gfPopupBase.ts', './gfPopupInfo.ts', './NoiseTransition1985.ts', './PageView1985.ts', './SwipeComponent1985.ts', './PopupInfo1985.ts', './gfLocalize.ts', './gfFishManager.ts', './gfBallTray.ts', './gfPlayer.ts', './gfPlayerLayer.ts', './EventsCode1988.ts', './DataStore1988.ts', './Config1988.ts', './NodePoolAssets1988.ts', './NodePoolConfig1988.ts', './Player1988.ts', './PlayerLayer1988.ts', './LetterSpacing.ts', './gfGameScheduler.ts', './BigWin1985.ts', './CustomEnum.ts', './CustomType.ts', './LobbyJackpot.ts', './sha1.ts', './gfFishGroupData.ts', './gfFishMoveActions.ts', './gfFishGroupHelper.ts', './gfFishGroup06Lite.ts', './gfptCurvePoint.ts', './PoisonEffect1988.ts', './EnemyBullet.ts', './EC2Bullet.ts', './gfLuckyEffect.ts', './EnergyController1985.ts', './state-machine.min.mjs_cjs=&original=.js', './gfMainFSM.ts', './mock.ts', './gfLobbyLayer.ts', './gfGameLayer.ts', './gfAssetBundle.ts', './gfMainController.ts', './gfLoadingScene.ts', './MoveComp1985.ts', './FormationConfig1985.ts', './MoveBySpine1985.ts', './EnemySP2Move.ts', './PathLayerConfig1985.ts', './FXSkillUltimateController1985.ts', './SpineFish1985.ts', './EnemySP2.ts', './PathManager1985.ts', './FishManager1985.ts', './SkillUltimateComponent1985.ts', './gf3DParticle.ts', './gfJackpotWinPopup.ts', './gfBigWinWheel.ts', './gfDropSpecialGunFX.ts', './gfEffectLayer.ts', './ShieldController1985.ts', './gfGunSkill.ts', './gfSkillController.ts', './ReferenceManager1988.ts', './SkillController1988.ts', './gfFishGroup13.ts', './AnimUtils.ts', './PageViewSelectAircraftComponent1985.ts', './gfDragonCacheData.ts', './gfHUDController.ts', './PoolManager1988.ts', './BossBoris1988.ts', './FishManager1988.ts', './HUDController1988.ts', './gfstDropDownListBox.ts', './Bullet1985.ts', './gfNotifyComponent.ts', './gfNotifyMessage.ts', './GameLogo.ts', './AssetBundle1988.ts', './LoadingScene1988.ts', './EnvObject1985.ts', './gfptDataType.ts', './gfptSavedItem.ts', './gfptSavedList.ts', './gfNotifyItemStack.ts', './gfNotifyStack.ts', './gfCutSceneLayer.ts', './gfFishGroup02.ts', './utilsForTest.ts', './ActionHelperForTest.ts', './packet-manager.ts', './gfBubbleTransition.ts', './gfBullet.ts', './gfPlayAndDestroy.ts', './gfFishFreezeEffect.ts', './gfptDot.ts', './gfptDrawPanel.ts', './SpineFish1988.ts', './FlowerPoison1988.ts', './TutorialControl.ts', './gfFishGroup09.ts', './gfEffectLockFish.ts', './EffectLockFish1988.ts', './gfMiniBossGuardFish.ts', './gfLuckyFish.ts', './gfPopupPrompt.ts', './CurvePoint1985.ts', './gfptAirSpine.ts', './gfSessionTime.ts', './gfItemFreeze.ts', './GameLayer1985.ts', './gfNotifyJackpot.ts', './gfPopupSettingSlider.ts', './PopupSetting1985.ts', './gfCutSceneItem.ts', './gfCuSceneJackpotWin.ts', './PageViewLobbyComponent1985.ts', './MainController1985.ts', './EnemyEV1Move.ts', './GameEvent.ts', './PopupPrompt1985.ts', './EventListenerManager.ts', './socket-manager.ts', './routing-event.ts', './EV6FireBullet.ts', './queue-fifo.ts', './deduplicate.ts', './event-manager.ts', './custom-uuid.ts', './player-info-state-manager.ts', './message-manager.ts', './command-manager.ts', './base-game-state-mamager.ts', './AudioClipDatabase.ts', './gfptCoordGraphics.ts', './gfptSavedFormationItem.ts', './gfptSavedFormationList.ts', './gfptFormationMain.ts', './PanelFrameReward1988.ts', './gfNetFX.ts', './NetFX1985.ts', './gfBackgroundController.ts', './EnemyEV61985.ts', './LobbyScene.ts', './AlignFullScreenButton.ts', './NavigationEnemyShip1985.ts', './CloudMove1985.ts', './sha256.ts', './sha224.ts', './GameLayer1988.ts', './gfBubble.ts', './DropSpecialGunFX1998.ts', './SpineSkeletonDatabase.ts', './EV5FireBullet.ts', './GunSkill1985.ts', './SkillController1985.ts', './gfNotifyLockFish.ts', './gfBigWinWheelAvatar.ts', './LobbyMenu.ts', './SpaceShip1985.ts', './SpaceShipController1985.ts', './gfDragon.ts', './gfFishGroup05.ts', './EnemyBulletWithTrail.ts', './ES6Bullet.ts', './gfResizeWindow.ts', './FishEffectLayer1988.ts', './ItemLobby.ts', './x64-core.ts', './sha512.ts', './gfptMovingObject.ts', './EnemySP1.ts', './gfBulletLayer.ts', './gfLoadingTransition.ts', './Chip1988.ts', './EffectLightning1988.ts', './PanelComponent1988.ts', './PanelChip1988.ts', './EffectBossBoris1988.ts', './ScrollViewOptimise.ts', './gfstEV2.ts', './gfstGroundLayer.ts', './FishLayer1985.ts', './gfptGlobalHUD.ts', './NotifyJackpot1988.ts', './GameQuest.ts', './OptionController1985.ts', './gfWifiStatus.ts', './WifiStatus1988.ts', './StandOnGround1985.ts', './globalNetwork.ts', './LoginStaging.ts', './EnemyBulletManager.ts', './gfFishGroup07.ts', './gfBaseCellHistory.ts', './gfBaseHistory.ts', './gfPopupJackpotHistory.ts', './gfLoadGameByPrefabs.ts', './gfFishGroup15.ts', './gfFishGroup16.ts', './gfFishGroup12.ts', './gfFishGroup01.ts', './gfFishGroup03.ts', './gfFishGroup04.ts', './gfFishGroupMgr.ts', './FishGroupMgr1988.ts', './Formation1985.ts', './md5.ts', './MoveToPlayer1985.ts', './LobbyDev.ts', './EV1FireBullet.ts', './EC1Bullet.ts', './gfptAirSelect.ts', './JackpotInfo1988.ts', './gfstAnimationItem.ts', './gfBlurScrollViewController.ts', './loadToken.ts', './gfptResizeWindowPortrait.ts', './EV3FireBullet.ts', './LobbyLayer1985.ts', './gfWaitingLayer.ts', './gfptMainPath.ts', './SideMenu1988.ts', './Sound.ts', './gfSoundBase.ts', './UpdatePanel.ts', './HotUpdate.ts', './gfptExportController.ts', './gfptResizeWindow.ts', './AntialiasConfig.ts', './LoginDev.ts', './LobbyLayer1988.ts', './gfEffectDragon.ts', './gfFishGroup17.ts', './gfPopupInfoPageView.ts', './Drill1988.ts', './MoveDataType1985.ts', './MoveObjectByPath1985.ts', './EnemyEV1.ts', './gfGeneralInitialization.ts', './AutoScaleBackground1985.ts', './gfNotifyController.ts', './gfPopupController.ts', './gfPersisNodeController.ts', './gfFreezeGunFX.ts', './gfFishGroup11.ts', './NotifyMessage1985.ts', './gfSoundController.ts', './SoundController1985.ts', './gfptPreviewMain.ts', './BackgroundController1985.ts', './GunSkill1988.ts', './gfPopupSetting.ts', './LaserBox1985.ts', './gfLaserBox.ts', './gfSpriteFish.ts', './SpriteFish1988.ts', './EffectNearWinLaser1985.ts', './gfstEnemyAir.ts', './gfstAirLayer.ts', './SkillController1998.ts', './EV6Bullet.ts', './BulletLayer1985.ts', './EV5Bullet.ts', './gfLoadAllInOne.ts', './TouchListener1985.ts', './DropSpecialGunFx1985.ts', './CanvasScaleByOrientation.ts', './gfFishGroup06.ts', './NotifyItemStack1988.ts', './SkillBomb1985.ts', './bytesToUuid.ts', './JackpotHistory1988.ts', './PopupPrompt1988.ts', './AssetBundle1985.ts', './PopupInfo1988.ts', './gfCoinFX.ts', './CoinFX1985.ts', './gfVersion.ts', './gfptDotTouchListener.ts', './LoadingScene1985.ts', './gfTouchListener.ts', './gfFishGroup10.ts', './MainController1988.ts', './GeneralInitialization1988.ts', './EV1Bullet.ts', './AnimationCacheConfig.ts', './GeneralInitialization1985.ts', './NotifyStack1988.ts', './gfCoinLabel.ts', './BulletLayer1988.ts', './BackgroundScrollLoop1985.ts', './gfWaveTransition.ts', './WaveTransition1988.ts', './TouchListener1988.ts', './BackgroundController1988.ts', './EffectLayer1985.ts', './gfExplosionAnimationClip.ts', './gfFishGroup07Lite.ts', './NetFX1988.ts', './gfstHUD.ts', './gfResizeByEvent.ts', './MonitorTarget.ts', './gfDragonBall.ts', './JackpotWinPopup1988.ts', './OptionControllerTest.ts', './WifiStatus1985.ts', './CustomPageViewIndicator.ts', './EnvObjectsLayer1985.ts', './PopupHistoryJackpot1988.ts', './WaitingLayer1988.ts', './SkillUltimateElectricWave1985.ts', './LayoutNodeInstance.ts', './PanelJackpotController1988.ts', './EnemySP1Move.ts', './ES2FireBullet.ts', './SkillButtons1985.ts', './TransitionLoading1985.ts', './BigWinWheelAvatar1988.ts', './connectNetwork.ts', './CoinLabel1988.ts', './gfPopuptutorial.ts', './EventList.ts', './PopupSettingSlider1988.ts', './EC2FireBullet.ts', './ClickAndShow.ts', './PoolFactory.ts', './gfbtHUD.ts', './EffectLayer1988.ts', './SoundController1988.ts', './LoadingTransition.ts', './JackpotCellHistory1988.ts', './EC1FireBullet.ts', './gfJackpotStarFX.ts', './ES5FireBullet.ts', './gfFishGroup08.ts', './gfFreezeSkill.ts', './gfSetOrientation.ts', './JackpotLobbyGameState.ts', './gfResizeWindowPortrait.ts', './BorisStatic1988.ts', './gfFishLayer.ts', './CommandController1985.ts'], function () {
  'use strict';

  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=index.js.map